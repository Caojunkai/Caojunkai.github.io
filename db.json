{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"source/images/201410/2014-10-11_124435.jpg","path":"images/201410/2014-10-11_124435.jpg","modified":0,"renderable":0},{"_id":"source/images/201409/201409262015.jpg","path":"images/201409/201409262015.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-10_184137.jpg","path":"images/201410/2014-10-10_184137.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-10_185303.jpg","path":"images/201410/2014-10-10_185303.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-11_124539.jpg","path":"images/201410/2014-10-11_124539.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-19_122342.jpg","path":"images/201410/2014-10-19_122342.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-19_123736.jpg","path":"images/201410/2014-10-19_123736.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-19_122734.jpg","path":"images/201410/2014-10-19_122734.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-19_123227.jpg","path":"images/201410/2014-10-19_123227.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-19_123408.jpg","path":"images/201410/2014-10-19_123408.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-19_124327.jpg","path":"images/201410/2014-10-19_124327.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-22_114623.jpg","path":"images/201410/2014-10-22_114623.jpg","modified":0,"renderable":0},{"_id":"source/images/201411/2014-11-05_200206.jpg","path":"images/201411/2014-11-05_200206.jpg","modified":0,"renderable":0},{"_id":"source/images/201411/2014-11-05_200546.jpg","path":"images/201411/2014-11-05_200546.jpg","modified":0,"renderable":0},{"_id":"source/images/201411/bg2014020501.jpg","path":"images/201411/bg2014020501.jpg","modified":0,"renderable":0},{"_id":"source/images/201411/bg2014092004.png","path":"images/201411/bg2014092004.png","modified":0,"renderable":0},{"_id":"source/images/201412/2014-12-18_143809.png","path":"images/201412/2014-12-18_143809.png","modified":0,"renderable":0},{"_id":"source/images/201412/2014-12-10_173100.jpg","path":"images/201412/2014-12-10_173100.jpg","modified":0,"renderable":0},{"_id":"source/images/201503/1866742045547134261.jpg","path":"images/201503/1866742045547134261.jpg","modified":0,"renderable":0},{"_id":"source/images/201503/1866742045547134262.jpg","path":"images/201503/1866742045547134262.jpg","modified":0,"renderable":0},{"_id":"source/images/201503/1866742045547134263.jpg","path":"images/201503/1866742045547134263.jpg","modified":0,"renderable":0},{"_id":"source/images/201503/2015-03-29_163610.jpg","path":"images/201503/2015-03-29_163610.jpg","modified":0,"renderable":0},{"_id":"source/images/201503/2015-03-29_163855.jpg","path":"images/201503/2015-03-29_163855.jpg","modified":0,"renderable":0},{"_id":"source/images/201503/2015-03-30_155818.jpg","path":"images/201503/2015-03-30_155818.jpg","modified":0,"renderable":0},{"_id":"source/images/201506/2015-06-12_223756.jpg","path":"images/201506/2015-06-12_223756.jpg","modified":0,"renderable":0},{"_id":"source/images/201506/2015-06-20_004736.jpg","path":"images/201506/2015-06-20_004736.jpg","modified":0,"renderable":0},{"_id":"source/images/201506/2015-06-20_005428.jpg","path":"images/201506/2015-06-20_005428.jpg","modified":0,"renderable":0},{"_id":"source/images/201506/2015-06-20_005013.jpg","path":"images/201506/2015-06-20_005013.jpg","modified":0,"renderable":0},{"_id":"source/images/201506/2015-06-20_005338.jpg","path":"images/201506/2015-06-20_005338.jpg","modified":0,"renderable":0},{"_id":"source/images/201507/xiaoyu01.JPG","path":"images/201507/xiaoyu01.JPG","modified":0,"renderable":0},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1},{"_id":"source/images/201410/2014-10-21_202809.jpg","path":"images/201410/2014-10-21_202809.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-22_113846.jpg","path":"images/201410/2014-10-22_113846.jpg","modified":0,"renderable":0},{"_id":"source/images/201410/2014-10-22_114255.jpg","path":"images/201410/2014-10-22_114255.jpg","modified":0,"renderable":0},{"_id":"source/images/201502/kindle_new.jpg","path":"images/201502/kindle_new.jpg","modified":0,"renderable":0},{"_id":"source/images/201503/2015-03-28_203830.jpg","path":"images/201503/2015-03-28_203830.jpg","modified":0,"renderable":0},{"_id":"source/images/201412/bc837715-8d0e-36b4-b659-4389e01f76d0.png","path":"images/201412/bc837715-8d0e-36b4-b659-4389e01f76d0.png","modified":0,"renderable":0},{"_id":"source/images/201503/2015-03-28_204133.jpg","path":"images/201503/2015-03-28_204133.jpg","modified":0,"renderable":0},{"_id":"source/images/201504/2015-04-20_195130.jpg","path":"images/201504/2015-04-20_195130.jpg","modified":0,"renderable":0},{"_id":"source/images/201504/2015-04-20_194920.jpg","path":"images/201504/2015-04-20_194920.jpg","modified":0,"renderable":0},{"_id":"source/images/201507/xiaoyu02.JPG","path":"images/201507/xiaoyu02.JPG","modified":0,"renderable":0},{"_id":"source/images/201412/2014-12-01_170202.jpg","path":"images/201412/2014-12-01_170202.jpg","modified":0,"renderable":0},{"_id":"source/images/201411/2014-11-29_141142.jpg","path":"images/201411/2014-11-29_141142.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"ef450ef5907b224f26d4d38dd96d191ce1d5dc23","modified":1523548450154},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1523545561007},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1523545561008},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1523545561009},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1523545561009},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1523545561010},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1523545561020},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1523545561010},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1523545561011},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1523545561011},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1523545561012},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1523545561012},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1523545561012},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1523545561012},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1523545561013},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1523545561013},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1523545561013},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1523545561013},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1523545561013},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1523545561018},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1523545561019},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1523545561019},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1523545561020},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1523545561021},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1523545561019},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1523545561019},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1523545561020},{"_id":"source/_posts/201406/2014-06-16-life_essay_1.md","hash":"8e834d9e06253dd0c2fb50edf45ec441747adc11","modified":1523546438810},{"_id":"source/_posts/201406/2014-06-17-php_5_static_bind_1.md","hash":"f5b47b8eacc5798a3cc8304871257749a39c95cd","modified":1523546438810},{"_id":"source/_posts/201406/2014-06-18-a_php_traits_notes_1.md","hash":"0e3b716f8009a355a188423f79db6c90c58b51b8","modified":1523546438810},{"_id":"source/_posts/201406/2014-06-17-views_impression_1.md","hash":"098a3c3e846dd895bd7f244aa3b2f0dcd9af93f6","modified":1523546438810},{"_id":"source/_posts/201406/2014-06-18-b_php_5_data_filter_1.md","hash":"ab31ed5b93892b2d822ce3352b95ce73bd0d163a","modified":1523546438810},{"_id":"source/_posts/201406/2014-06-18-web_font_ueditor_1.md","hash":"3ff3d13bb52604f97f717ababce06d95815b8a3e","modified":1523546438811},{"_id":"source/_posts/201406/2014-06-19-git_install_process_notes.md","hash":"19176a439887952fe6e2d0b4966e877214d74d0a","modified":1523546438811},{"_id":"source/_posts/201406/2014-06-19-git_kcreate_repository_notes.md","hash":"7c7894ccf265d8570da06de50190ae2aa497f13f","modified":1523546438811},{"_id":"source/_posts/201406/2014-06-20-git_version_back_notes.md","hash":"5ab5c4c775325350bcbe4ed3b9b0d828a5557187","modified":1523546438812},{"_id":"source/_posts/201406/2014-06-21-a_git_work_temporary_notes.md","hash":"60b446fd35e5dfbd275f7ac22bb24a8961e9ae4d","modified":1523546438812},{"_id":"source/_posts/201406/2014-06-22-git_manage_file_notes.md","hash":"e9e5d9c6a288567fe59c715d4d9e174c5d5896ff","modified":1523546438812},{"_id":"source/_posts/201406/2014-06-22-git_n_delete_file_notes.md","hash":"c28131d138a60b38276e9c442a8f9593cf9c6d49","modified":1523546438813},{"_id":"source/_posts/201406/2014-06-23-git_a_remote_transmission_create_notes.md","hash":"6b5ed8af6eb76abdd8684a26fb99406133d36112","modified":1523546438813},{"_id":"source/_posts/201406/2014-06-23-git_b_add_and_clone_notes.md","hash":"712583be78e02597f99c4f66e0e991b060225baa","modified":1523546438813},{"_id":"source/_posts/201406/2014-06-24-php_b_upload_file_notes.md","hash":"442374b965d0cca2b521c5b354fb810831143abe","modified":1523546438814},{"_id":"source/_posts/201406/2014-06-24-php_a_use_function_notes.md","hash":"5a504266509f8f5e1354cdfd8a13b0dcbd132089","modified":1523546438814},{"_id":"source/_posts/201406/2014-06-24-q_git_create_and_merge_branch.md","hash":"4cb1f475a28780f22466d7ff0ad6292c4a0943a4","modified":1523546438814},{"_id":"source/_posts/201406/2014-06-26-git_branch_conflicts_notes.md","hash":"e5802a147635cdc859d7d86a264fb828d8c08824","modified":1523546438815},{"_id":"source/_posts/201406/2014-06-26-linux_php_install_notes.md","hash":"14c5b4272fd7f8e91086abc982a5ef3ad6450103","modified":1523546438815},{"_id":"source/_posts/201406/2014-06-27-git_branch_manage_notes.md","hash":"3aaceb7a0492e7f22222896221438b00668a1fcd","modified":1523546438815},{"_id":"source/_posts/201406/2014-06-27-php_pdo_transaction_notes.md","hash":"05c0fdecabe484f89d6a911a285c6a5eabc8234c","modified":1523546438816},{"_id":"source/_posts/201406/2014-06-27-unix_dos_crlf_notes.md","hash":"a4ea221c4aef2f20d1f379c17e42f93455a83abf","modified":1523546438816},{"_id":"source/_posts/201406/2014-06-30-git_delete_unmerge_branch_notes.md","hash":"64701a36d6b6c3de2f7fb6c29f2b3f81dae7b073","modified":1523546438817},{"_id":"source/_posts/201406/2014-06-28-git_bug_branch_notes.md","hash":"1a648af083a8b28a0932df191aeccf574a60584a","modified":1523546438816},{"_id":"source/_posts/201407/2014-07-02-git_collaboration_notes.md","hash":"2906a7cf44590ea319c307bc8a486c7b8494676f","modified":1523546438817},{"_id":"source/_posts/201407/2014-07-04-git_create_tag_notes.md","hash":"d83300833531ce66b34a47b9e88d8292e4364529","modified":1523546438817},{"_id":"source/_posts/201407/2014-07-05-git_gitignore_file_notes.md","hash":"748707e57a384f9983f783d6198ca05130c96d15","modified":1523546438818},{"_id":"source/_posts/201407/2014-07-07-git_config_aliase_notes.md","hash":"c9c01a5ae1d0a3566185f39f3193b47577b1c3ce","modified":1523546438818},{"_id":"source/_posts/201407/2014-07-10-life_essay_2.md","hash":"698166c6cd1cd5ea03d1aed588a0b5868e6396c1","modified":1523546438818},{"_id":"source/_posts/201407/2014-07-13-js_noscript_notes.md","hash":"0413c6a6598464a2a14752724b35facbac5a6284","modified":1523546438819},{"_id":"source/_posts/201407/2014-07-12-memcached_install_notes.md","hash":"c4bc9c5998a88ec6afd929fd1aed49a21df70991","modified":1523546438819},{"_id":"source/_posts/201407/2014-07-13-php_distorted_code.md","hash":"d7f6068e63b13e4c18ec64d8bb6dda19dfe122e9","modified":1523546438820},{"_id":"source/_posts/201407/2014-07-14-php_float_false_notes.md","hash":"a63210d6fcaeef5c7ab93602f18e8f42c3e65fc2","modified":1523546438820},{"_id":"source/_posts/201407/2014-07-15-git_create_git_server_notes.md","hash":"86a6709ea2ddf0edc43a8880455f66efa405cdd2","modified":1523546438821},{"_id":"source/_posts/201407/2014-07-15-git_summary_notes.md","hash":"43a83860f85f335a2625867bfe687654f6badb9b","modified":1523546438821},{"_id":"source/_posts/201407/2014-07-21-life_essay_3.md","hash":"594a26238d278011fc765d73e93f566e75921e6f","modified":1523546438821},{"_id":"source/_posts/201407/2014-07-28-php_web_pay_notes.md","hash":"d5d2cbedf495fba6aabb107272ec473d6578f5c8","modified":1523546438822},{"_id":"source/_posts/201407/2014-07-29-memcache_telnet_notes.md","hash":"491d3c4e71679a7db8e9cbacaf39ee54bf6ed7e5","modified":1523546438822},{"_id":"source/_posts/201407/2014-07-30-memcache_php_notes.md","hash":"f8e34be42caa7d7170c5ec42a122eadf7c1d3463","modified":1523546438822},{"_id":"source/_posts/201408/2014-08-06-session_safe_notes.md","hash":"8f13f602b17d783ba32389c876e618fb8190d045","modified":1523546438823},{"_id":"source/_posts/201408/2014-08-11-vim_super_study.md","hash":"2b16667962462a666e1ad9b231f7f8e5054e4f56","modified":1523546438824},{"_id":"source/_posts/201408/2014-08-11-linux_code_type_note.md","hash":"d5dad64ac41847feae4cc6c73c666f81f072d5ff","modified":1523546438823},{"_id":"source/_posts/201408/2014-08-17-sed_tool_notes.md","hash":"d59eab46b4eab9f8d9969f3f891b4036159b1807","modified":1523546438824},{"_id":"source/_posts/201408/2014-08-22-shell_script_source_and_bash.md","hash":"b893b2b0d993f433f920131ec0caa0b99e5493ba","modified":1523546438824},{"_id":"source/_posts/201409/2014-09-05-ajax_upload_progress.md","hash":"f930f0ef87fd3817583ea5ba703f2fe925c6674c","modified":1523546438825},{"_id":"source/_posts/201409/2014-09-03-ajax_jsonp_return.md","hash":"a9d4fb7ba62ba67265590be69cca2018a3b0e993","modified":1523546438825},{"_id":"source/_posts/201409/2014-09-07-ajax_file_slice_upload.md","hash":"588cc1c1852eb1b9acac6ec877802b52e699b70b","modified":1523546438826},{"_id":"source/_posts/201409/2014-09-11-jquery_and_dom.md","hash":"4aada1426f0fa0d2838e32f25715e250e72b3c6d","modified":1523546438826},{"_id":"source/_posts/201409/2014-09-12-js_function_analysis.md","hash":"3a31ff2587ae803a5a15474a0a51ed3597d9212f","modified":1523546438826},{"_id":"source/_posts/201409/2014-09-23-dropbox_mit_speech.md","hash":"429aecabbd3f5cb24d93afc8bab4256d1fe5ea6b","modified":1523546438827},{"_id":"source/_posts/201409/2014-09-26-details_with_attitude.md","hash":"3fba71091286f4a565533205f988e1aa62f266af","modified":1523546438827},{"_id":"source/_posts/201410/2014-10-07-the_regular_expression_look_around.md","hash":"332796303e70c41b1a9787c49a0e20e087489cf9","modified":1523546438827},{"_id":"source/_posts/201410/2014-10-10-mysql_grant_and_manage_notes.md","hash":"5feb43166a3fcdaf61395ae41f779ed0ef7e24ae","modified":1523546438828},{"_id":"source/_posts/201410/2014-10-11-php_simulation_asynchroous.md","hash":"74f2be7e1a85e793a1a6fe51fbff4cc2322942bf","modified":1523546438828},{"_id":"source/_posts/201410/2014-10-19-mysql_myisam_data_optimize.md","hash":"374d999d470045df81d1594ca281f5c70f6be7bd","modified":1523546438829},{"_id":"source/_posts/201410/2014-10-15-check_gif_picture.md","hash":"791fa8f3ea8b29f6ec9c70fcb287ae6108b15ec5","modified":1523546438828},{"_id":"source/_posts/201410/2014-10-22-redis-linux_and_windows-setup.md","hash":"67be64d8090ead6922a59fae722c92084f412cba","modified":1523546438829},{"_id":"source/_posts/201411/2014-11-02-ssl_tls_secure_notes.md","hash":"d60d2390f59c9f4ed26a39bda4a8d5d30e2ec9ab","modified":1523546438830},{"_id":"source/_posts/201410/2014-10-21-mysql_mysqlbinlog_dump_note.md","hash":"65bfdb21e10fd0aec00412f085e3c63843ce57ed","modified":1523546438829},{"_id":"source/_posts/201410/2014-10-30-how_to_manage_our_time.md","hash":"b64659203678bd54a4a77d09b976489d16785279","modified":1523546438830},{"_id":"source/_posts/201411/2014-11-29-hello_tmux_note.md","hash":"03ded4b27777378e400161a729be1d64ff6bbbf8","modified":1523546438830},{"_id":"source/_posts/201412/2014-12-01-copy_model_note.md","hash":"3ef78af6da306443514b2c317aa573e698ec4098","modified":1523546438831},{"_id":"source/_posts/201411/2014-11-30-happy_tmux_note.md","hash":"3bf0a8d5573095044ac503ae46b7e914326f02b9","modified":1523546438831},{"_id":"source/_posts/201412/2014-12-01-program_with_each_other.md","hash":"887638441c801da4b8bdd0243622289c6960de41","modified":1523546438831},{"_id":"source/_posts/201412/2014-12-10-centos_compiler_lnmp_notes.md","hash":"7f643a5e2bd5fdfa45b319a0aa2a64b9ef3c96cf","modified":1523546438832},{"_id":"source/_posts/201412/2014-12-16-mysql_forget_passwd.md","hash":"cec1d8516734f73e611e09538baefdbf7fae18e6","modified":1523546438832},{"_id":"source/_posts/201412/2014-12-22-vim_miracle_encrypt_note.md","hash":"90812044a43e1779b42603abff585774e343f198","modified":1523546438833},{"_id":"source/_posts/201502/2015-02-07-experience_of_kindle.md","hash":"aae314af2997f94673610ffc677ab2e43dcb930a","modified":1523546438833},{"_id":"source/_posts/201503/2015-03-07-winter_holiday_conclusion.md","hash":"5e4d46581709434ca7b55420bb287ab81fc48d61","modified":1523546438834},{"_id":"source/_posts/201503/2015-03-20-mysql_and_slave_test.md","hash":"b8ed467308c2611c181922b0cc52599603da4d98","modified":1523546438834},{"_id":"source/_posts/201503/2015-03-28-memcache_memory_manage_note.md","hash":"a4e3c5c7199991b76200914b1328b87e4c8aae5a","modified":1523546438834},{"_id":"source/_posts/201503/2015-03-29-memcache_item_delete_note.md","hash":"6c82bbe88ffc4abcd50e321ddbe3fc153b6de6bc","modified":1523546438835},{"_id":"source/_posts/201503/2015-03-30-memcache_multiget_hole_note.md","hash":"fe676d353c04337b273c8d71c8f63d694f39ec1a","modified":1523546438835},{"_id":"source/_posts/201503/2015-03-29-memcache_perpetual_data_lose.md","hash":"152ef7e2e0d75740fdb7c81f144739c62183f545","modified":1523546438835},{"_id":"source/_posts/201504/2015-04-18-xhprof_php_analyse_tool.md","hash":"eae8acc29614b27a5de61de528fc67021ac7c5f3","modified":1523546438836},{"_id":"source/_posts/201504/2015-04-20-yac_study_and_vs_memcache_note.md","hash":"f58ff2d7570da9966e76f67b6616751926d798db","modified":1523546438836},{"_id":"source/_posts/201506/2015-06-04-how_to_use_session_without_cookie.md","hash":"5bff1d58c443c94079df8d2f111d110619dc3898","modified":1523546438837},{"_id":"source/_posts/201505/2015-05-13-pdo_bindParam_bug_note.md","hash":"52cb075659497a4312c4f66a18dd1c2e0fc540eb","modified":1523546438836},{"_id":"source/_posts/201506/2015-06-07-mysql_str_binary.md","hash":"1a426be4d63051a6c5d02d2e981eede27125cc15","modified":1523546438837},{"_id":"source/_posts/201506/2015-06-12-shuffle_array_note.md","hash":"3020b96efdcee001812ca50d6cfd7cc13a9e5f05","modified":1523546438837},{"_id":"source/_posts/201506/2015-06-20-mysql_save_ip.md","hash":"443cc6e74d4cccd5e040ed3a45afb0806b33eb6a","modified":1523546438838},{"_id":"source/_posts/201507/2015-07-09-php_use_json_note.md","hash":"38d4aa95af3d9738b7dff61626dc0f1aa7de7e6c","modified":1523546438838},{"_id":"source/_posts/201509/2015-09-23-difference_of_MyISAM_and_Innodb.md","hash":"a32d7121f9ec0e78ff8c073966e047b6f8d77199","modified":1523546438838},{"_id":"source/_posts/201701/2017-01-01-你好2017.md","hash":"2fda5fe4d02d3698dc4498d8c8e69c4078d6d738","modified":1523546438839},{"_id":"source/_posts/201702/2017-02-06-vuex.md","hash":"5c99a3dbd37b1b0f8ed8e77541d3e14d5a48b678","modified":1523546438839},{"_id":"source/_posts/201704/2017-04-05-redis锁的正确姿势.md","hash":"a6e1c887c610b6ecf25a131f8fe8311a3ace342f","modified":1523546438840},{"_id":"source/_posts/201703/2017-03-12-php-web请求流程.md","hash":"72d5c034b4bd3092a2363d978fa94d6adbc56a31","modified":1523546438840},{"_id":"source/_posts/201704/2017-04-10-redis常用数据结构和操作.md","hash":"6c245049082b175e644f9fd46683d7b59746c7cc","modified":1523546438840},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1523545561014},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1523545561014},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1523545561014},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1523545561014},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1523545561014},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1523545561015},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1523545561014},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1523545561015},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1523545561015},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1523545561015},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1523545561017},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1523545561017},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1523545561018},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1523545561017},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1523545561018},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1523545561018},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523545561035},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523545561038},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523545561035},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523545561039},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523545561040},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523545561040},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1523545561047},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1523545561047},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1523545561048},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1523545561021},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1523545561026},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1523545561034},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1523545561049},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1523545561016},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1523545561016},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1523545561016},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1523545561016},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1523545561016},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1523545561017},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523545561041},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523545561041},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1523545561042},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1523545561043},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523545561046},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1523545561046},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1523545561022},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1523545561022},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1523545561023},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1523545561023},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1523545561023},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1523545561024},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1523545561024},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1523545561024},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1523545561025},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1523545561025},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1523545561025},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1523545561025},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1523545561027},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1523545561028},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1523545561031},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1523545561031},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1523545561030},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1523545561034},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1523547564932},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1523547564932},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1523547564933},{"_id":"themes/apollo/_config.yml","hash":"261de70c54a5b6bac83afc8e1a77bbd715fae547","modified":1523547564933},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1523547564934},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1523547564944},{"_id":"source/_posts/.DS_Store","hash":"fe4db71e6a84ce43e7e13568b6ce2c30ad598622","modified":1523547278534},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1523547564925},{"_id":"themes/apollo/.git/config","hash":"e8486e77527181934f2dda23e50b879ab7641244","modified":1523547564928},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1523547552590},{"_id":"themes/apollo/.git/index","hash":"f4f3e79e622e0bdd410dc04bb25df0fc0466eaf4","modified":1523547564953},{"_id":"themes/apollo/.git/packed-refs","hash":"aa26c25376c7e08c8fdb4920d5feed589e8f3eea","modified":1523547564921},{"_id":"themes/apollo/doc/doc-en.md","hash":"409e931a444c02a57b64a0a44dde6e66c1881ca0","modified":1523547564934},{"_id":"themes/apollo/doc/doc-zh.md","hash":"2a6a81840cdaf497969268a12d8f62c98cc38103","modified":1523547564934},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1523547564939},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1523547564940},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1523547564944},{"_id":"themes/apollo/languages/en.yml","hash":"ca168b190932229884db1de755ec2f793c758a16","modified":1523547564935},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"22a2d16fe8c0dddb016b5325b9b9c182a1b49ae1","modified":1523547564936},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1523547564946},{"_id":"source/images/201410/2014-10-11_124435.jpg","hash":"50b5146bd30030766e5334f3b7c7f6b2769c0a57","modified":1523546438861},{"_id":"source/images/201409/201409262015.jpg","hash":"8b4b9cd2119ad5b86cfb6680ac7846e3f97e3bce","modified":1523546438859},{"_id":"source/images/201410/2014-10-10_184137.jpg","hash":"d3f608c78bf428fc8576cc81232391cb0cbd08e0","modified":1523546438860},{"_id":"source/images/201410/2014-10-10_185303.jpg","hash":"32ff80476b5e9c3e090ba73509d97bf8baa1a3e2","modified":1523546438860},{"_id":"source/images/201410/2014-10-11_124539.jpg","hash":"439c4e164a4a6868156e5d3e5caf1840b17173e4","modified":1523546438861},{"_id":"source/images/201410/2014-10-19_122342.jpg","hash":"999782ccee612f1c22843c40d158327e151346eb","modified":1523546438861},{"_id":"source/images/201410/2014-10-19_123736.jpg","hash":"3f2946af463700159ecb5293738decda127b1bbc","modified":1523546438863},{"_id":"source/images/201410/2014-10-19_122734.jpg","hash":"828fd9eee96bf62f93c50c4bc91aa98f9fd01f95","modified":1523546438862},{"_id":"source/images/201410/2014-10-19_123227.jpg","hash":"c08b23789555ef9158637f1966248c46db2c4e26","modified":1523546438862},{"_id":"source/images/201410/2014-10-19_123408.jpg","hash":"ea5087b345add3fee07ac30f8f7e66a5bb0ea33d","modified":1523546438863},{"_id":"source/images/201410/2014-10-19_124327.jpg","hash":"072cf0fb2692af87711da82bb23b0298fa62999d","modified":1523546438864},{"_id":"source/images/201410/2014-10-22_114623.jpg","hash":"c082d465aa783c12733b85ac97b2cdace2253243","modified":1523546438867},{"_id":"source/images/201411/2014-11-05_200206.jpg","hash":"5a9d2b3547f7f0ced6ebd0126d0dedafe05168da","modified":1523546438867},{"_id":"source/images/201411/2014-11-05_200546.jpg","hash":"ec196bdd55c077f363812116b30d358cc5ed4a6a","modified":1523546438868},{"_id":"source/images/201411/bg2014020501.jpg","hash":"b0ab430718af0874fad4d9f89a1643ae1016f931","modified":1523546438871},{"_id":"source/images/201411/bg2014092004.png","hash":"1f3fb5a0fb30c41ae43284091656f81565ea9dc3","modified":1523546438872},{"_id":"source/images/201412/2014-12-18_143809.png","hash":"8c524ab5c0d6abbfb4955ed8eb7777ceb1ef1985","modified":1523546438875},{"_id":"source/images/201412/2014-12-10_173100.jpg","hash":"3ced790d4404306d8a3f56c0ea2caabb73e3f29d","modified":1523546438875},{"_id":"source/images/201503/1866742045547134261.jpg","hash":"2c3f4264d40bb2b6d3ffb0d47644d2efbad95165","modified":1523546438878},{"_id":"source/images/201503/1866742045547134262.jpg","hash":"d5bf7ae69a031671ab1adb6e9b85887201c48501","modified":1523546438879},{"_id":"source/images/201503/1866742045547134263.jpg","hash":"72e14606b327a7ba45cc00e0f41bc26f8b6c038c","modified":1523546438879},{"_id":"source/images/201503/2015-03-29_163610.jpg","hash":"45725c5dd739b5dfec964aa58e79ec5704a8a06c","modified":1523546438881},{"_id":"source/images/201503/2015-03-29_163855.jpg","hash":"b4d1707ee1abd85e12897c1d6f89a1d0c60ed8ad","modified":1523546438882},{"_id":"source/images/201503/2015-03-30_155818.jpg","hash":"6d6fea920adc3b51cddf0eabd98791bd7c0404af","modified":1523546438882},{"_id":"source/images/201506/2015-06-12_223756.jpg","hash":"09b3d8e56f28b407f09bf17fef23babd0ce4cd55","modified":1523546438886},{"_id":"source/images/201506/2015-06-20_004736.jpg","hash":"5bb1b9737dcc8e5c1295fcef6e0c0f634263ed89","modified":1523546438887},{"_id":"source/images/201506/2015-06-20_005428.jpg","hash":"117edcc9a1bdded7464385fe0669825115d0dbe0","modified":1523546438888},{"_id":"source/images/201506/2015-06-20_005013.jpg","hash":"6d03aa501ad32ffddfc394f1e66036b1016abb32","modified":1523546438887},{"_id":"source/images/201506/2015-06-20_005338.jpg","hash":"67fab18858185d9468997c1a0c90012c86d2dd30","modified":1523546438887},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1523547552593},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1523547552591},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1523547552595},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1523547552596},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1523547552596},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1523547552593},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1523547552592},{"_id":"themes/apollo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1523547552594},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1523547552594},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1523547552597},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1523547552590},{"_id":"themes/apollo/.git/logs/HEAD","hash":"092087409986132ec07e8fe3946a93445406c41f","modified":1523547564926},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"f23c6c40e14cdf16783b3c2baf736c9dce18408c","modified":1523547564941},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1523547564940},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1523547564941},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1523547564942},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1523547564942},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1523547564943},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1523547564944},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1523547564944},{"_id":"source/images/201507/xiaoyu01.JPG","hash":"c83564eb5d201dbcfa7483734ccb91f123f54a05","modified":1523546438888},{"_id":"themes/apollo/source/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1523547564945},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1523547564947},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1523547564947},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1523547564952},{"_id":"source/images/201410/2014-10-21_202809.jpg","hash":"edb48a9d3dd795ae65a193626156afde31e20a95","modified":1523546438865},{"_id":"source/images/201410/2014-10-22_113846.jpg","hash":"6261e480fabd3f6aff16a4d420d1317f0490f938","modified":1523546438865},{"_id":"source/images/201410/2014-10-22_114255.jpg","hash":"b955654c590f5dfa6934c6ab21d672838dc05425","modified":1523546438866},{"_id":"source/images/201502/kindle_new.jpg","hash":"c42927436bcca721d0d72bc7ccd6a1dc47687c28","modified":1523546438878},{"_id":"source/images/201503/2015-03-28_203830.jpg","hash":"0066b70b59ec7f0422ed2184a9b633d250f6de6e","modified":1523546438880},{"_id":"source/images/201412/bc837715-8d0e-36b4-b659-4389e01f76d0.png","hash":"1fa23c9b392de25bf6813ce2e55fed20479b5c8c","modified":1523546438876},{"_id":"source/images/201503/2015-03-28_204133.jpg","hash":"dbb4b3ecf5b8f2124aa3a63e5b9be28de8d6061d","modified":1523546438881},{"_id":"source/images/201504/2015-04-20_195130.jpg","hash":"5f856a2de62185ae0bbd19d4d2606857e65b5b9b","modified":1523546438885},{"_id":"source/images/201504/2015-04-20_194920.jpg","hash":"2c692bef6469e1cda52dfcbaadb613b16f7974ef","modified":1523546438884},{"_id":"source/images/201507/xiaoyu02.JPG","hash":"404dc427ac53998dd9e3f0dfbd9c87681a5911d5","modified":1523546438889},{"_id":"themes/apollo/.git/objects/pack/pack-c2c5ef3ed848a98d83e90f274a750ebc440ae015.idx","hash":"8c1076f4fe597fbc3ee8a7dabf01f7d99ae801e4","modified":1523547564912},{"_id":"themes/apollo/.git/refs/heads/master","hash":"bb45244afa960985b39f4bb9b86f3b4430f210ba","modified":1523547564926},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1523547564949},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1523547564950},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1523547564950},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1523547564951},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1523547564951},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1523547564951},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1523547564951},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1523547564952},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1523547564952},{"_id":"source/images/201412/2014-12-01_170202.jpg","hash":"9876460e078bfba61c872c918961cc44bdefad78","modified":1523546438874},{"_id":"source/images/201411/2014-11-29_141142.jpg","hash":"207b5be6b67da7d16ed9753b6de311b1a3576af4","modified":1523546438871},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"092087409986132ec07e8fe3946a93445406c41f","modified":1523547564927},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1523547564925},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"092087409986132ec07e8fe3946a93445406c41f","modified":1523547564924},{"_id":"themes/apollo/.git/objects/pack/pack-c2c5ef3ed848a98d83e90f274a750ebc440ae015.pack","hash":"61afd27d8be982efeeba8d37e46294898cd54f8b","modified":1523547564912},{"_id":"public/atom.xml","hash":"ea4ad73d1509d555205098564adea6121563740f","modified":1523549388239},{"_id":"public/sitemap.xml","hash":"4df35edf836a1434ef0844bd7482be4e95f7f17e","modified":1523549388254},{"_id":"public/2018/04/12/201704-2017-04-10-redis常用数据结构和操作/index.html","hash":"6078d660072d5bb44a4a5b32c1df4baf1c7ab73a","modified":1523549388277},{"_id":"public/2018/04/12/201704-2017-04-05-redis锁的正确姿势/index.html","hash":"66911e80ef1ecfae8c5da784ce183f4954532a4d","modified":1523549388277},{"_id":"public/2018/04/12/201702-2017-02-06-vuex/index.html","hash":"c26d4abe9cdd4d8b0721d43a09eb985bf8088fcb","modified":1523549388277},{"_id":"public/2018/04/12/201701-2017-01-01-你好2017/index.html","hash":"7a3832162a22b005571daf91e1759ad795c3f5cc","modified":1523549388277},{"_id":"public/2018/04/12/201507-2015-07-09-php-use-json-note/index.html","hash":"f679a6d602d4869c39f049a0ef0ad41d295b0091","modified":1523549388277},{"_id":"public/2018/04/12/201509-2015-09-23-difference-of-MyISAM-and-Innodb/index.html","hash":"92ff4f726c2f9df74c79db373c3114516a42d08f","modified":1523549388277},{"_id":"public/2018/04/12/201506-2015-06-20-mysql-save-ip/index.html","hash":"68a40fd063b1772d7154a5f6d80a5a0a2f28aab3","modified":1523549388277},{"_id":"public/2018/04/12/201506-2015-06-12-shuffle-array-note/index.html","hash":"9a53fcd7ccf6a8f32adb1d1d6e979437f98c0711","modified":1523549388277},{"_id":"public/2018/04/12/201506-2015-06-07-mysql-str-binary/index.html","hash":"7179052508a0e237626b831fc7c4c5aca8d1c9ec","modified":1523549388277},{"_id":"public/2018/04/12/201506-2015-06-04-how-to-use-session-without-cookie/index.html","hash":"42dee20ef290b12c5d29c2916ffb2137773d715a","modified":1523549388278},{"_id":"public/2018/04/12/201505-2015-05-13-pdo-bindParam-bug-note/index.html","hash":"9f3981ceea617109268ab10a6b42ab8733b5d1b4","modified":1523549388278},{"_id":"public/2018/04/12/201504-2015-04-20-yac-study-and-vs-memcache-note/index.html","hash":"a9a6f326a942c4c32b89a0457df4904033b6d78d","modified":1523549388278},{"_id":"public/2018/04/12/201504-2015-04-18-xhprof-php-analyse-tool/index.html","hash":"245cde43aef06f9dd2af3e997bdbd6edae4c0309","modified":1523549388278},{"_id":"public/2018/04/12/201503-2015-03-29-memcache-perpetual-data-lose/index.html","hash":"85f2266ee45ef6288a44f16af978087aec7dac1c","modified":1523549388278},{"_id":"public/2018/04/12/201503-2015-03-30-memcache-multiget-hole-note/index.html","hash":"1fde8333c49a5119a27758462ff8a3f4e9cfa741","modified":1523549388278},{"_id":"public/2018/04/12/201503-2015-03-29-memcache-item-delete-note/index.html","hash":"e0664d576be78adebedc18232c3cd2af6d24505d","modified":1523549388278},{"_id":"public/2018/04/12/201503-2015-03-28-memcache-memory-manage-note/index.html","hash":"7250690883d5d48b9d06e54006d3321901862892","modified":1523549388278},{"_id":"public/2018/04/12/201503-2015-03-20-mysql-and-slave-test/index.html","hash":"c28863b96db280e6d3110c0303c74f9ab0a58eff","modified":1523549388278},{"_id":"public/2018/04/12/201503-2015-03-07-winter-holiday-conclusion/index.html","hash":"5210c723ad5089f879fe6127ea4c1d71e287f373","modified":1523549388278},{"_id":"public/2018/04/12/201502-2015-02-07-experience-of-kindle/index.html","hash":"e28996ee205624e8dc35acf7e33db8968d1f8799","modified":1523549388278},{"_id":"public/2018/04/12/201412-2014-12-22-vim-miracle-encrypt-note/index.html","hash":"9ff344c4bd35980b1af7e6b705d3033f813ca475","modified":1523549388278},{"_id":"public/2018/04/12/201412-2014-12-16-mysql-forget-passwd/index.html","hash":"65a28e53a0ce1d27fa92c7bb81d4b3bddc1af663","modified":1523549388278},{"_id":"public/2018/04/12/201412-2014-12-10-centos-compiler-lnmp-notes/index.html","hash":"21181c1edeb91919f529258956677b83f90736bd","modified":1523549388278},{"_id":"public/2018/04/12/201412-2014-12-01-program-with-each-other/index.html","hash":"3000c59cf882ddc2a6f07f5e4d4f450f9b8446d6","modified":1523549388278},{"_id":"public/2018/04/12/201411-2014-11-30-happy-tmux-note/index.html","hash":"a01fb137c9a51f2a303e28ee14d2b3dbdd82be37","modified":1523549388278},{"_id":"public/2018/04/12/201412-2014-12-01-copy-model-note/index.html","hash":"283e53e6094bc4d044ae91a3adc1b518322df77c","modified":1523549388279},{"_id":"public/2018/04/12/201411-2014-11-29-hello-tmux-note/index.html","hash":"8bdf7987e7c254f837bc816908b31e1de298fe7a","modified":1523549388279},{"_id":"public/2018/04/12/201411-2014-11-02-ssl-tls-secure-notes/index.html","hash":"9db546ef947caa0314e053e8ce0f249a65757f24","modified":1523549388279},{"_id":"public/2018/04/12/201410-2014-10-21-mysql-mysqlbinlog-dump-note/index.html","hash":"3cd840fb93295b5cc378d3d4ebc76db3ea6a1f1f","modified":1523549388279},{"_id":"public/2018/04/12/201410-2014-10-22-redis-linux-and-windows-setup/index.html","hash":"9d75b59e68f1f74c393cb4e030f74fb84fdf1528","modified":1523549388279},{"_id":"public/2018/04/12/201410-2014-10-30-how-to-manage-our-time/index.html","hash":"808fdbe12c614fafa7b4124d87279b49e5ccd9d1","modified":1523549388279},{"_id":"public/2018/04/12/201410-2014-10-19-mysql-myisam-data-optimize/index.html","hash":"ce48d5be527ac559546254bf0d617fed3b32ae23","modified":1523549388279},{"_id":"public/2018/04/12/201410-2014-10-15-check-gif-picture/index.html","hash":"2379516895c0aae847a5df062873e5b645dfbb3e","modified":1523549388279},{"_id":"public/2018/04/12/201410-2014-10-10-mysql-grant-and-manage-notes/index.html","hash":"78fe5b26356c4e9d9f76fbcf50f4504c24ac4b94","modified":1523549388279},{"_id":"public/2018/04/12/201410-2014-10-11-php-simulation-asynchroous/index.html","hash":"2a4dba08aec301dc70adf643b80a1885451d7947","modified":1523549388279},{"_id":"public/2018/04/12/201410-2014-10-07-the-regular-expression-look-around/index.html","hash":"d00d535210f2160a35cb02d7f4bef0cc69f72c7c","modified":1523549388279},{"_id":"public/2018/04/12/201409-2014-09-26-details-with-attitude/index.html","hash":"6860355d6a93b4136bbbabc26452a3bf12db61de","modified":1523549388279},{"_id":"public/2018/04/12/201409-2014-09-12-js-function-analysis/index.html","hash":"aea5916d18778e93e09fef6f00e4cf6e1dd10884","modified":1523549388279},{"_id":"public/2018/04/12/201409-2014-09-11-jquery-and-dom/index.html","hash":"8b258ccd7fcdaa0746f2086ea3b91e146ca46c65","modified":1523549388279},{"_id":"public/2018/04/12/201409-2014-09-05-ajax-upload-progress/index.html","hash":"7fe1519a4e568f0c715778d2fa4c3d9f6c025d29","modified":1523549388279},{"_id":"public/2018/04/12/201409-2014-09-07-ajax-file-slice-upload/index.html","hash":"acad8e2a8071c7727837caf76043029df6ccce12","modified":1523549388279},{"_id":"public/2018/04/12/201409-2014-09-03-ajax-jsonp-return/index.html","hash":"4da6e796e59011ee23f5d3dcd830adbe4052aa11","modified":1523549388280},{"_id":"public/2018/04/12/201408-2014-08-22-shell-script-source-and-bash/index.html","hash":"09e9f40a7a4ba41dcf1297d1e2067f914743f23a","modified":1523549388280},{"_id":"public/2018/04/12/201408-2014-08-11-vim-super-study/index.html","hash":"b9cfad805c8294dd67d326f24d2578238856bb60","modified":1523549388280},{"_id":"public/2018/04/12/201408-2014-08-17-sed-tool-notes/index.html","hash":"155002d4405322eebdda05a348f71018e1227d73","modified":1523549388280},{"_id":"public/2018/04/12/201408-2014-08-06-session-safe-notes/index.html","hash":"a1c01f765e04600da0c35b45e83647120d3f1f52","modified":1523549388280},{"_id":"public/2018/04/12/201408-2014-08-11-linux-code-type-note/index.html","hash":"dcef98c56ce851ae34d46953f84d00d569a76fe4","modified":1523549388280},{"_id":"public/2018/04/12/201407-2014-07-30-memcache-php-notes/index.html","hash":"3bffb9111d5afa94c37810366fcbcdec82874ba0","modified":1523549388280},{"_id":"public/2018/04/12/201407-2014-07-29-memcache-telnet-notes/index.html","hash":"077631ee15fe573785553e7116a1a92152960016","modified":1523549388280},{"_id":"public/2018/04/12/201407-2014-07-28-php-web-pay-notes/index.html","hash":"bac0792b89785937dd07597580e8729a97da6293","modified":1523549388280},{"_id":"public/2018/04/12/201407-2014-07-21-life-essay-3/index.html","hash":"38afd6c74b1f8c82efbd187df0229ae3224baada","modified":1523549388280},{"_id":"public/2018/04/12/201407-2014-07-15-git-summary-notes/index.html","hash":"294ec7057fccb6b930ba306f5aa7fe7edebffb6e","modified":1523549388280},{"_id":"public/2018/04/12/201407-2014-07-14-php-float-false-notes/index.html","hash":"389338278dcd22dc9fc6e6f5243c7022e439f144","modified":1523549388280},{"_id":"public/2018/04/12/201407-2014-07-13-php-distorted-code/index.html","hash":"9e25ab9a5476e162876bb6707b2f6f99ce3c80b3","modified":1523549388280},{"_id":"public/2018/04/12/201407-2014-07-15-git-create-git-server-notes/index.html","hash":"7f0a54307dce397dab0c8979f537d31881e39e2f","modified":1523549388280},{"_id":"public/2018/04/12/201407-2014-07-13-js-noscript-notes/index.html","hash":"d10328ad17ab63bd8e79e262ddeff916af321db7","modified":1523549388280},{"_id":"public/2018/04/12/201407-2014-07-12-memcached-install-notes/index.html","hash":"2ed1308f4d4d6d891846ac48966feff090e34107","modified":1523549388281},{"_id":"public/2018/04/12/201407-2014-07-10-life-essay-2/index.html","hash":"28e9e78a4931a5d692f1b65ed8fcd8d2b19a4f7b","modified":1523549388281},{"_id":"public/2018/04/12/201407-2014-07-07-git-config-aliase-notes/index.html","hash":"4accb72a558e2efce934280ba1bbe04e2a1f68d4","modified":1523549388281},{"_id":"public/2018/04/12/201407-2014-07-05-git-gitignore-file-notes/index.html","hash":"75c606114bfc2b75f26e25eef2ddb26c81a45fd6","modified":1523549388281},{"_id":"public/2018/04/12/201407-2014-07-04-git-create-tag-notes/index.html","hash":"4a75121f720cb5c83ba440d9610b01baee638b08","modified":1523549388281},{"_id":"public/2018/04/12/201407-2014-07-02-git-collaboration-notes/index.html","hash":"f84b465009f895fef3615b732db9f2dff81ca330","modified":1523549388281},{"_id":"public/2018/04/12/201406-2014-06-28-git-bug-branch-notes/index.html","hash":"f2d2cf7ddb4c98d3031d7e1d56f8d0e0f8dc4659","modified":1523549388281},{"_id":"public/2018/04/12/201406-2014-06-30-git-delete-unmerge-branch-notes/index.html","hash":"6df7bba67d1772386bff0a2a7c6fb87409f0065e","modified":1523549388281},{"_id":"public/2018/04/12/201406-2014-06-27-unix-dos-crlf-notes/index.html","hash":"a23191346b491dab48272c59b42ef05eb14a0c37","modified":1523549388281},{"_id":"public/2018/04/12/201406-2014-06-27-php-pdo-transaction-notes/index.html","hash":"3d45b51daa5b95bdfa4cb73c35ae737883c727ab","modified":1523549388281},{"_id":"public/2018/04/12/201406-2014-06-27-git-branch-manage-notes/index.html","hash":"d6d6baac9c0ad167e0660a0117d30785a2fdab92","modified":1523549388281},{"_id":"public/2018/04/12/201406-2014-06-26-git-branch-conflicts-notes/index.html","hash":"3d1da16712f5824131113138deb44f2ed7d6dfb8","modified":1523549388281},{"_id":"public/2018/04/12/201406-2014-06-26-linux-php-install-notes/index.html","hash":"a480ec2929e6bce2ba60c3bb621559f57f9ea185","modified":1523549388281},{"_id":"public/2018/04/12/201406-2014-06-24-q-git-create-and-merge-branch/index.html","hash":"86ba6d637ef62831a6ad0cffa71c31ebf0f8c5b4","modified":1523549388281},{"_id":"public/2018/04/12/201406-2014-06-24-php-a-use-function-notes/index.html","hash":"e9aebd5fce521c99455d7091a8a86ca4a6f6b90e","modified":1523549388281},{"_id":"public/2018/04/12/201406-2014-06-24-php-b-upload-file-notes/index.html","hash":"48e045c88ad8b2dae9fe15599a8fbad2ed7a8e20","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-23-git-b-add-and-clone-notes/index.html","hash":"93f5a10179ec3f93d0b2f6fe2d4687f53f24952e","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-23-git-a-remote-transmission-create-notes/index.html","hash":"dea76de37096d2c6cabe8925c93c61efc3a2b568","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-22-git-n-delete-file-notes/index.html","hash":"69a89a6a99e72027dc7fe632e82f40819cc01e94","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-22-git-manage-file-notes/index.html","hash":"b1dd7772e453e5ccbe9a40b1fc0c0009f6b5d11b","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-21-a-git-work-temporary-notes/index.html","hash":"af8c1c10a778129b598c6a28849cd1506d6f4584","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-20-git-version-back-notes/index.html","hash":"5a12255dad609eadd65a7ebb34e30e80d968caf8","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-19-git-kcreate-repository-notes/index.html","hash":"81754c70aac422eea66bc616e471761ba2d4cc8b","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-19-git-install-process-notes/index.html","hash":"d3ec975848959acf2289932098d7f9fa63cdabb0","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-18-web-font-ueditor-1/index.html","hash":"acd22777de386bd1bfc8dbeec2f9665eea87ab90","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-17-php-5-static-bind-1/index.html","hash":"06262e919c03270b7f3038479da4e0823c41d561","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-18-b-php-5-data-filter-1/index.html","hash":"30146f91a84f9cb82d10a71557b2d25575aac2c9","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-17-views-impression-1/index.html","hash":"5210c5a4a35b2b679908a41120ee53e00634a948","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-18-a-php-traits-notes-1/index.html","hash":"f59d05134d5907ddd67b801ac397734cb510fa29","modified":1523549388282},{"_id":"public/2018/04/12/201406-2014-06-16-life-essay-1/index.html","hash":"49c5eee2576a77339693dcceecf5822ddab58a66","modified":1523549388282},{"_id":"public/categories/随笔/index.html","hash":"c3dda83911075bfd5daf950c71ed7c6eb90e9233","modified":1523549388285},{"_id":"public/categories/PHP/index.html","hash":"0da2ec0ba15321971d0dbc991a3d62ba48e70145","modified":1523549388285},{"_id":"public/categories/PHP/page/2/index.html","hash":"b45718101b624155d003b20e465a768f774b647c","modified":1523549388285},{"_id":"public/categories/观点和感想/index.html","hash":"9fb48784a1a1682c9abee7580cace388c028ed0c","modified":1523549388285},{"_id":"public/categories/前端/index.html","hash":"c5867b69e16b99b0d534eb94c6962059c423814d","modified":1523549388285},{"_id":"public/categories/Git/index.html","hash":"0fd719d532a3b49fca6b070884678060b8d929a0","modified":1523549388285},{"_id":"public/categories/Git/page/2/index.html","hash":"a56090ec9827ea4852d5b22d0df46241dc97c83d","modified":1523549388285},{"_id":"public/categories/Linux/index.html","hash":"7240ac00379b51f67c987c91ece511178f4f1c5d","modified":1523549388285},{"_id":"public/categories/JavaScript/index.html","hash":"dff0f3a0f76ca45ec1f1a23d4ddd59aa792c3266","modified":1523549388285},{"_id":"public/categories/Memcached/index.html","hash":"e60a9831034af94df730e7889654a1a800442414","modified":1523549388285},{"_id":"public/categories/memcached/index.html","hash":"4662764bfdd8874961e66f51e1e2a4e89355db2b","modified":1523549388286},{"_id":"public/categories/VIM/index.html","hash":"ce01710eecd438c3c03998f6a2120f22e5cef818","modified":1523549388286},{"_id":"public/categories/Shell/index.html","hash":"5624055ec8ed92f16301efd325b94d9107c344af","modified":1523549388286},{"_id":"public/categories/Ajax/index.html","hash":"befdcde73d6617fe03be448579798c42841324e5","modified":1523549388286},{"_id":"public/categories/jQuery/index.html","hash":"ea014bba8bb02f9a41a082695b986a71dec74d20","modified":1523549388286},{"_id":"public/categories/javascript/index.html","hash":"6c1b2cce6a9d84f4388a6422db91a6834a2bde31","modified":1523549388286},{"_id":"public/categories/正则表达式/index.html","hash":"1f3ecae03d705d8a48f99ef9cedb84abfa4ef3b7","modified":1523549388286},{"_id":"public/categories/php/index.html","hash":"f6051fc460a198f107536143892ca592c48a6787","modified":1523549388286},{"_id":"public/categories/MySQL/index.html","hash":"3c3cc960dd76e20cba6ca907435f1c5a0a8373b3","modified":1523549388286},{"_id":"public/categories/Redis/index.html","hash":"3c71b6ff390999991c09b5a607e1e57c56e9f133","modified":1523549388286},{"_id":"public/categories/SSL-TLS/index.html","hash":"a1f3f7093e0ac1098aba0fd0c3747c4d75b739cb","modified":1523549388286},{"_id":"public/categories/Tmux/index.html","hash":"7a25d52b82a13e7cc5974dc45b46365f182cbaac","modified":1523549388286},{"_id":"public/categories/LNMP/index.html","hash":"e1869c28735b717fe472299dce724a17c4a951a5","modified":1523549388286},{"_id":"public/categories/Vim/index.html","hash":"147d7f947c24b6f819a177c8bf3bf0fc7a9ff616","modified":1523549388286},{"_id":"public/categories/Memcache/index.html","hash":"9abd7f2e996b74f0ba790b32c320ae13b254920f","modified":1523549388286},{"_id":"public/categories/mysql/index.html","hash":"92cccffb4651791db33183bb6424582bb454c335","modified":1523549388287},{"_id":"public/categories/面试/index.html","hash":"4f42085dd29f9a265aaa95692bff89f56173155a","modified":1523549388286},{"_id":"public/categories/Vue/index.html","hash":"836925b16aadada9b590c5fa54dd58636489c538","modified":1523549388287},{"_id":"public/archives/index.html","hash":"d7dcb36c2e66c496b12d28799e01366c18fb8685","modified":1523549388283},{"_id":"public/archives/page/2/index.html","hash":"929004a096339d4e28cf2f6717c2874d13f3b503","modified":1523549388283},{"_id":"public/archives/page/3/index.html","hash":"641b94be495b82f586a6c1d6a8f404c747df9323","modified":1523549388283},{"_id":"public/archives/page/4/index.html","hash":"f4d2923f949e9949c7e67472028a064536fdf289","modified":1523549388283},{"_id":"public/archives/page/5/index.html","hash":"a34e431ffa02d2cb05453c1bb929f2736d989d32","modified":1523549388283},{"_id":"public/archives/page/6/index.html","hash":"6820331c9a9d9b5607789ec3dee636ffd60dfdf3","modified":1523549388283},{"_id":"public/archives/page/7/index.html","hash":"aed3d95e79d2073ac23d511cf451e5f3c46fb5d1","modified":1523549388283},{"_id":"public/archives/page/8/index.html","hash":"c4e63f6641024afb57cb08feaa2a8d66567bab06","modified":1523549388283},{"_id":"public/archives/page/9/index.html","hash":"1658e5741c8605a78140e99764623f4c6bb0f6c3","modified":1523549388283},{"_id":"public/archives/2018/index.html","hash":"7335d2be786a92d41af21ecfe760f0e497d7297c","modified":1523549388283},{"_id":"public/archives/2018/page/2/index.html","hash":"1b5ec3a3941c95066f73afc38c8bb18c76062c77","modified":1523549388283},{"_id":"public/archives/2018/page/3/index.html","hash":"c2745e14c41c6ad391066b40f6dc408390ec364b","modified":1523549388283},{"_id":"public/archives/2018/page/4/index.html","hash":"929d6da0269badb1a0dc06f92988084099dda962","modified":1523549388283},{"_id":"public/archives/2018/page/5/index.html","hash":"f8ff2a31c44d60a3664c39b5a87dd31e9e824ce3","modified":1523549388283},{"_id":"public/archives/2018/page/6/index.html","hash":"b9b682d544bdabd36e3a11f58d5de9f10ac4b51d","modified":1523549388284},{"_id":"public/archives/2018/page/7/index.html","hash":"d6a38cc63a9717b94efd27927745da7cfab3d7c9","modified":1523549388284},{"_id":"public/archives/2018/page/8/index.html","hash":"6325f3f540cc869ddb727dc0bdd6e3c63a9d83ed","modified":1523549388284},{"_id":"public/archives/2018/page/9/index.html","hash":"96d6cc1ef8e39a69d05ae69dfa14e71ffee9be5f","modified":1523549388284},{"_id":"public/archives/2018/04/index.html","hash":"d89b1ebe6e86dca3898c61ea64026d6b040e92e7","modified":1523549388284},{"_id":"public/archives/2018/04/page/2/index.html","hash":"920c936379b36abc0e02e97ca9f2c6b54861cdd1","modified":1523549388284},{"_id":"public/archives/2018/04/page/3/index.html","hash":"5f0765bb5880045f9b2697a8972f45a69c45ab19","modified":1523549388284},{"_id":"public/archives/2018/04/page/4/index.html","hash":"88a83e865a6cab076ec2cc3893c05c1063dfa558","modified":1523549388284},{"_id":"public/archives/2018/04/page/5/index.html","hash":"6cd1d2277bc7593e5fb5bec2ff3275e4ce98201b","modified":1523549388284},{"_id":"public/archives/2018/04/page/6/index.html","hash":"aefcc44ef7d812ef722f5427ca508a227d42d07a","modified":1523549388284},{"_id":"public/archives/2018/04/page/7/index.html","hash":"2e1048d634dc03f445270135de58018db30bec10","modified":1523549388284},{"_id":"public/archives/2018/04/page/8/index.html","hash":"3d3a0ff4a6e79c26ad2222ec1f9369d383716bd4","modified":1523549388284},{"_id":"public/archives/2018/04/page/9/index.html","hash":"7b59921d8c8caa786faf57a0b2a8f7bb2835f705","modified":1523549388284},{"_id":"public/index.html","hash":"46c7ba174cdc0704922b0a8f7130f519566bc05e","modified":1523549388284},{"_id":"public/page/2/index.html","hash":"0f61def7f7f8730c30d00741e52e2e3640fa72e9","modified":1523549388284},{"_id":"public/page/3/index.html","hash":"46a0311200523055833862d0f9291a78d84a1d1b","modified":1523549388284},{"_id":"public/page/4/index.html","hash":"f8c9be91d5391bbf3683b74e3f3a3b054e686057","modified":1523549388284},{"_id":"public/page/5/index.html","hash":"d0314d918a1290985d507e358399d319da475a29","modified":1523549388285},{"_id":"public/page/6/index.html","hash":"4527d09565d00e523a4b723c1b8b3819c79442b6","modified":1523549388285},{"_id":"public/page/7/index.html","hash":"e728e623b8cb3a7ebf0725758658ac16c65d8d6c","modified":1523549388285},{"_id":"public/page/8/index.html","hash":"9e39a0987efa16921f3ec0632913d2ec8c60d41c","modified":1523549388285},{"_id":"public/page/9/index.html","hash":"975bb3ca6f29a005d0793da5825f1a49a53686e1","modified":1523549388285},{"_id":"public/tags/Essay/index.html","hash":"c3dda83911075bfd5daf950c71ed7c6eb90e9233","modified":1523549388287},{"_id":"public/tags/PHP/index.html","hash":"73eedad750c6a58f65818f5964762f1ab1340ba5","modified":1523549388287},{"_id":"public/tags/PHP-traits/index.html","hash":"3e9d66389ac8175d28968cf2514ad099e2f56766","modified":1523549388287},{"_id":"public/tags/Impression/index.html","hash":"9fb48784a1a1682c9abee7580cace388c028ed0c","modified":1523549388287},{"_id":"public/tags/PHP-递归/index.html","hash":"4be5f7e2ed904dd3c9b4388ea0b9ad73a1205355","modified":1523549388287},{"_id":"public/tags/UEditor/index.html","hash":"c5867b69e16b99b0d534eb94c6962059c423814d","modified":1523549388287},{"_id":"public/tags/分布式版本控制-Git/index.html","hash":"c585bf2c5b022ae3fa8e8d684a38a1d33cb26259","modified":1523549388290},{"_id":"public/tags/Git/index.html","hash":"54cb20008d5172731af135bfef8c64e5a559931e","modified":1523549388290},{"_id":"public/tags/Git/page/2/index.html","hash":"d37d2dcc15e5182076518b7233c9acf5511531ca","modified":1523549388290},{"_id":"public/tags/upload/index.html","hash":"eadba31946e9c8cd519ab2a77fb325dc3074a8b1","modified":1523549388290},{"_id":"public/tags/PHP内置方法/index.html","hash":"0d88c60da269d494cab8eea0a89cbcd5ec13d30a","modified":1523549388290},{"_id":"public/tags/Ubuntu-PHP/index.html","hash":"bd2e253e403125d665836ba1b89e60830d38f461","modified":1523549388290},{"_id":"public/tags/PHP-PDO/index.html","hash":"8e643dbeacffec0355a67fcbb88d38097224e53f","modified":1523549388290},{"_id":"public/tags/Linux/index.html","hash":"83446465919b12d3944a2416885bd86a2e5d013c","modified":1523549388290},{"_id":"public/tags/js/index.html","hash":"d00afa952e59beb2fea35f5d49271dc478a91715","modified":1523549388290},{"_id":"public/tags/Memcached/index.html","hash":"e60a9831034af94df730e7889654a1a800442414","modified":1523549388290},{"_id":"public/tags/telnet-memcached/index.html","hash":"4662764bfdd8874961e66f51e1e2a4e89355db2b","modified":1523549388290},{"_id":"public/tags/在线支付/index.html","hash":"10af0ef0874b9c36764232d802aff2919eeaf227","modified":1523549388290},{"_id":"public/tags/memcached/index.html","hash":"d39222dc7887549532c7ca1e2753b1e082d595d3","modified":1523549388291},{"_id":"public/tags/SESSION/index.html","hash":"1111980dcd21897314747373d7adedd6b1a247fa","modified":1523549388291},{"_id":"public/tags/Linux-Vim/index.html","hash":"ce01710eecd438c3c03998f6a2120f22e5cef818","modified":1523549388291},{"_id":"public/tags/sed-linux/index.html","hash":"d6b25f5b88e8722e492df0c510515bf533c4793b","modified":1523549388291},{"_id":"public/tags/Linux-Shell/index.html","hash":"5624055ec8ed92f16301efd325b94d9107c344af","modified":1523549388291},{"_id":"public/tags/Ajax/index.html","hash":"1b8fc4d79c6bbe7ed0f72deaa643b33eeaa399b2","modified":1523549388291},{"_id":"public/tags/Ajax-Jsonp/index.html","hash":"5bf714d61df4444d282530dae11cd8aeaf331712","modified":1523549388291},{"_id":"public/tags/jQuery-DOM/index.html","hash":"ea014bba8bb02f9a41a082695b986a71dec74d20","modified":1523549388291},{"_id":"public/tags/正则表达式/index.html","hash":"1f3ecae03d705d8a48f99ef9cedb84abfa4ef3b7","modified":1523549388291},{"_id":"public/tags/php-异步/index.html","hash":"1d86a0fbc0274de97bd03365fbe938b946e6c1c8","modified":1523549388291},{"_id":"public/tags/MySQL/index.html","hash":"6fde3ad048e6a3f916d7b714854fb650eb936a32","modified":1523549388291},{"_id":"public/tags/MySQL-MyISAM/index.html","hash":"ea2e816cc8c40912d51c5e289766ae60aaa9e7e7","modified":1523549388291},{"_id":"public/tags/php-gif/index.html","hash":"0ca8c55c2e02316a4f394fb7e5cc71b83a0aeda5","modified":1523549388291},{"_id":"public/tags/Redis/index.html","hash":"3c71b6ff390999991c09b5a607e1e57c56e9f133","modified":1523549388291},{"_id":"public/tags/SSL-HTTPS/index.html","hash":"a1f3f7093e0ac1098aba0fd0c3747c4d75b739cb","modified":1523549388291},{"_id":"public/tags/MySQL-增量备份/index.html","hash":"f4c03d50005c9b1159c7d9921232251c061aaa68","modified":1523549388291},{"_id":"public/tags/tmux/index.html","hash":"fd389682c287a742467c65199934d28f2c4fc5df","modified":1523549388292},{"_id":"public/tags/Tmux/index.html","hash":"5a623510fc8c507a816d60cb3fb3cec0051e7163","modified":1523549388292},{"_id":"public/tags/LNMP/index.html","hash":"e1869c28735b717fe472299dce724a17c4a951a5","modified":1523549388292},{"_id":"public/tags/Vim/index.html","hash":"147d7f947c24b6f819a177c8bf3bf0fc7a9ff616","modified":1523549388292},{"_id":"public/tags/Memcache/index.html","hash":"9abd7f2e996b74f0ba790b32c320ae13b254920f","modified":1523549388292},{"_id":"public/tags/php/index.html","hash":"2a3d1a04242daf6ca5c791227bb9eef59780427b","modified":1523549388292},{"_id":"public/tags/mysql/index.html","hash":"92cccffb4651791db33183bb6424582bb454c335","modified":1523549388292},{"_id":"public/tags/面试/index.html","hash":"4f42085dd29f9a265aaa95692bff89f56173155a","modified":1523549388292},{"_id":"public/tags/Vue/index.html","hash":"836925b16aadada9b590c5fa54dd58636489c538","modified":1523549388292},{"_id":"public/tags/PHP-Redis/index.html","hash":"78783e5fb6a12f8fa94815f83d830211d7fc994c","modified":1523549388292},{"_id":"public/2018/04/12/201703-2017-03-12-php-web请求流程/index.html","hash":"ade3933065010dbe7304c078964dc08e5eadb170","modified":1523549388293},{"_id":"public/2018/04/12/201409-2014-09-23-dropbox-mit-speech/index.html","hash":"bf6edb13e09d3eb5ef94f00fba56f58408ab983b","modified":1523549388293},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523549388310},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523549388310},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523549388310},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523549388310},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523549388310},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523549388310},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523549388310},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1523549388310},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1523549388310},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1523549388310},{"_id":"public/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1523549388310},{"_id":"public/images/201410/2014-10-11_124435.jpg","hash":"50b5146bd30030766e5334f3b7c7f6b2769c0a57","modified":1523549388310},{"_id":"public/images/201409/201409262015.jpg","hash":"8b4b9cd2119ad5b86cfb6680ac7846e3f97e3bce","modified":1523549388311},{"_id":"public/images/201410/2014-10-10_184137.jpg","hash":"d3f608c78bf428fc8576cc81232391cb0cbd08e0","modified":1523549388310},{"_id":"public/images/201410/2014-10-10_185303.jpg","hash":"32ff80476b5e9c3e090ba73509d97bf8baa1a3e2","modified":1523549388311},{"_id":"public/images/201410/2014-10-11_124539.jpg","hash":"439c4e164a4a6868156e5d3e5caf1840b17173e4","modified":1523549388311},{"_id":"public/images/201410/2014-10-19_123736.jpg","hash":"3f2946af463700159ecb5293738decda127b1bbc","modified":1523549388311},{"_id":"public/images/201410/2014-10-19_122342.jpg","hash":"999782ccee612f1c22843c40d158327e151346eb","modified":1523549388311},{"_id":"public/images/201410/2014-10-19_123227.jpg","hash":"c08b23789555ef9158637f1966248c46db2c4e26","modified":1523549388311},{"_id":"public/images/201410/2014-10-19_122734.jpg","hash":"828fd9eee96bf62f93c50c4bc91aa98f9fd01f95","modified":1523549388311},{"_id":"public/images/201410/2014-10-19_123408.jpg","hash":"ea5087b345add3fee07ac30f8f7e66a5bb0ea33d","modified":1523549388311},{"_id":"public/images/201410/2014-10-19_124327.jpg","hash":"072cf0fb2692af87711da82bb23b0298fa62999d","modified":1523549388311},{"_id":"public/images/201410/2014-10-22_114623.jpg","hash":"c082d465aa783c12733b85ac97b2cdace2253243","modified":1523549388311},{"_id":"public/images/201411/2014-11-05_200546.jpg","hash":"ec196bdd55c077f363812116b30d358cc5ed4a6a","modified":1523549388311},{"_id":"public/images/201411/2014-11-05_200206.jpg","hash":"5a9d2b3547f7f0ced6ebd0126d0dedafe05168da","modified":1523549388311},{"_id":"public/images/201411/bg2014020501.jpg","hash":"b0ab430718af0874fad4d9f89a1643ae1016f931","modified":1523549388311},{"_id":"public/images/201411/bg2014092004.png","hash":"1f3fb5a0fb30c41ae43284091656f81565ea9dc3","modified":1523549388311},{"_id":"public/images/201412/2014-12-18_143809.png","hash":"8c524ab5c0d6abbfb4955ed8eb7777ceb1ef1985","modified":1523549388312},{"_id":"public/images/201503/1866742045547134261.jpg","hash":"2c3f4264d40bb2b6d3ffb0d47644d2efbad95165","modified":1523549388312},{"_id":"public/images/201412/2014-12-10_173100.jpg","hash":"3ced790d4404306d8a3f56c0ea2caabb73e3f29d","modified":1523549388312},{"_id":"public/images/201503/1866742045547134262.jpg","hash":"d5bf7ae69a031671ab1adb6e9b85887201c48501","modified":1523549388312},{"_id":"public/images/201503/1866742045547134263.jpg","hash":"72e14606b327a7ba45cc00e0f41bc26f8b6c038c","modified":1523549388312},{"_id":"public/images/201503/2015-03-29_163610.jpg","hash":"45725c5dd739b5dfec964aa58e79ec5704a8a06c","modified":1523549388312},{"_id":"public/images/201503/2015-03-29_163855.jpg","hash":"b4d1707ee1abd85e12897c1d6f89a1d0c60ed8ad","modified":1523549388312},{"_id":"public/images/201503/2015-03-30_155818.jpg","hash":"6d6fea920adc3b51cddf0eabd98791bd7c0404af","modified":1523549388312},{"_id":"public/images/201506/2015-06-12_223756.jpg","hash":"09b3d8e56f28b407f09bf17fef23babd0ce4cd55","modified":1523549388312},{"_id":"public/images/201506/2015-06-20_004736.jpg","hash":"5bb1b9737dcc8e5c1295fcef6e0c0f634263ed89","modified":1523549388312},{"_id":"public/images/201506/2015-06-20_005013.jpg","hash":"6d03aa501ad32ffddfc394f1e66036b1016abb32","modified":1523549388312},{"_id":"public/images/201506/2015-06-20_005338.jpg","hash":"67fab18858185d9468997c1a0c90012c86d2dd30","modified":1523549388312},{"_id":"public/images/201506/2015-06-20_005428.jpg","hash":"117edcc9a1bdded7464385fe0669825115d0dbe0","modified":1523549388312},{"_id":"public/images/201507/xiaoyu01.JPG","hash":"c83564eb5d201dbcfa7483734ccb91f123f54a05","modified":1523549388312},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1523549388312},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1523549388313},{"_id":"public/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1523549388313},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1523549388795},{"_id":"public/images/201410/2014-10-22_113846.jpg","hash":"6261e480fabd3f6aff16a4d420d1317f0490f938","modified":1523549388796},{"_id":"public/images/201410/2014-10-22_114255.jpg","hash":"b955654c590f5dfa6934c6ab21d672838dc05425","modified":1523549388797},{"_id":"public/images/201410/2014-10-21_202809.jpg","hash":"edb48a9d3dd795ae65a193626156afde31e20a95","modified":1523549388796},{"_id":"public/images/201502/kindle_new.jpg","hash":"c42927436bcca721d0d72bc7ccd6a1dc47687c28","modified":1523549388797},{"_id":"public/images/201503/2015-03-28_203830.jpg","hash":"0066b70b59ec7f0422ed2184a9b633d250f6de6e","modified":1523549388797},{"_id":"public/images/201412/bc837715-8d0e-36b4-b659-4389e01f76d0.png","hash":"1fa23c9b392de25bf6813ce2e55fed20479b5c8c","modified":1523549388797},{"_id":"public/images/201503/2015-03-28_204133.jpg","hash":"dbb4b3ecf5b8f2124aa3a63e5b9be28de8d6061d","modified":1523549388797},{"_id":"public/images/201507/xiaoyu02.JPG","hash":"404dc427ac53998dd9e3f0dfbd9c87681a5911d5","modified":1523549388797},{"_id":"public/images/201504/2015-04-20_194920.jpg","hash":"2c692bef6469e1cda52dfcbaadb613b16f7974ef","modified":1523549388797},{"_id":"public/images/201504/2015-04-20_195130.jpg","hash":"5f856a2de62185ae0bbd19d4d2606857e65b5b9b","modified":1523549388797},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1523549388807},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1523549388807},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523549388807},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1523549388807},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1523549388807},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523549388807},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1523549388807},{"_id":"public/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1523549388807},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1523549388807},{"_id":"public/css/style.css","hash":"d4cfa90089c78a8b791252afae9fafa3b5658900","modified":1523549388808},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1523549388807},{"_id":"public/images/201412/2014-12-01_170202.jpg","hash":"9876460e078bfba61c872c918961cc44bdefad78","modified":1523549388817},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1523549388817},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1523549388817},{"_id":"public/images/201411/2014-11-29_141142.jpg","hash":"207b5be6b67da7d16ed9753b6de311b1a3576af4","modified":1523549388823}],"Category":[{"name":"随笔","_id":"cjfwomb3m0002ass6b7edxb37"},{"name":"PHP","_id":"cjfwomb3s0007ass6qdhrbvsn"},{"name":"观点和感想","_id":"cjfwomb40000iass6ot1q26t2"},{"name":"前端","_id":"cjfwomb46000uass6yxzgxx7r"},{"name":"Git","_id":"cjfwomb4a0011ass6oojkw9cq"},{"name":"Linux","_id":"cjfwomb55002qass6df8xll5f"},{"name":"JavaScript","_id":"cjfwomb59002yass6d99ejwz9"},{"name":"Memcached","_id":"cjfwomb5d0036ass6vekw8du2"},{"name":"memcached","_id":"cjfwomb5h003fass62774ppnj"},{"name":"VIM","_id":"cjfwomb5o003tass6tt1xrxww"},{"name":"Shell","_id":"cjfwomb5u0044ass6x6hb5uao"},{"name":"Ajax","_id":"cjfwomb60004eass616mx3k82"},{"name":"jQuery","_id":"cjfwomb6b0051ass6ywux0p21"},{"name":"javascript","_id":"cjfwomb6g0059ass6xs503dic"},{"name":"正则表达式","_id":"cjfwomb6j005gass6nnxcyiu6"},{"name":"php","_id":"cjfwomb6o005pass627loms7f"},{"name":"MySQL","_id":"cjfwomb6r005xass6va4v1fd9"},{"name":"Redis","_id":"cjfwomb70006bass60pcg3vot"},{"name":"SSL/TLS","_id":"cjfwomb72006iass6rffrd6t9"},{"name":"Tmux","_id":"cjfwomb790070ass6u4hh2kf5"},{"name":"LNMP","_id":"cjfwomb7k007rass64xgwoh43"},{"name":"Vim","_id":"cjfwomb7n007yass6xadu0ppx"},{"name":"Memcache","_id":"cjfwomb7q0086ass60omcmqa7"},{"name":"mysql","_id":"cjfwomb7x008sass690yguvao"},{"name":"面试","_id":"cjfwomb7y008xass6h6zbg8rr"},{"name":"Vue","_id":"cjfwomb800097ass6s4kflk8u"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"「序」世界，你好","_content":"\n今天是6月16日,晚上八点,[Caojunkai.github.io](http://caojunkai.github.io)正式搭建好上线了[csdn](http://blog.csdn.net/u012116169)上的内容会陆续搬到这个站点,今后,我将会在这个站点更新博客.看到它能正常被访问的时候,激动是溢于言表的,你知道,这是一个我自己的网站,完全自由,可以用任何的形式来表现.我再一次感受到了自由,希望这种感觉一直存在! :)\n\n写这篇博客只是为了宣布这个站点的第一篇文章,嘿嘿,工科男就是这样,就是不知道该怎么去写出心中的想法和情感(只是相对于一部分人),也许是碍于面子的原因,怕被别人称为“屌丝”,希望自己可以一直坚持下去。\n\n<!--more-->\n\n![图片](http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehkj2wsnguj20dw09840h.jpg)\n\n说实话，编程真的很枯燥，枯燥的有时会让人感觉到抑郁和染上心理强迫症，呵呵~~相信大家在不同的编程环境中都会遇到这样或者那样的困难和瓶颈，你们也会看到在这样的情况下，有的人选择了退出，有的人依然坚持了下来，我们不对他们的选择进行评价，毕竟每个人都有选择的空间的权利。我喜欢爬山，爬山和编程一样，当你觉得自己快要完蛋的时候，和自己说我能行就可以坚持下来。还是那句话，只要是喜欢，就不要轻易放弃。\n\n![图片](http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehkj330d43j20cu0h1wh7.jpg)\n\n刚不久看到的一句话，对于程序猿们，要开心写程序，快乐过生活，不要因为程序有很多的bug而痛苦，至少你们相爱过。我刚看到这句话时，就笑了，因为这句话的确抵触了心灵的最深处。呵呵~~~让大家笑话了！！！\n\nlamp兄弟连有个视频的片头是模仿聚美陈欧的，你只看到我学php敲代码，却没看到我的产品在改变着世界，你有你的女神，我也有我的cang老师，你嘲笑我苦逼屌丝命，我可怜你不懂编程之乐，你可以轻视我的代码，我会证明，这是谁的互联网时代，程序员注定是默默的逆袭，身边少不了口水和质疑，但那又怎样？哪怕前路崎岖，也要勇敢前行。\n\n真的是这样，哪怕遇到再多点的困难和质疑，但当我们的产品改变了世界时，其中的酸甜苦辣都值了......\n\n有时候，我们写博客，写的不是博客，是寂寞......\n\n但我觉得博客一定要坚持下去，一方面可以方便他人，也方便自己查阅。有些东西记录下来不一定会帮到多少人，但只要大家还有共同交流idea的愿望就有写下去的意义。\n","source":"_posts/201406/2014-06-16-life_essay_1.md","raw":"---\nlayout : post\ntitle : \"「序」世界，你好\"\ncategory : 随笔\ntags : Essay\n---\n\n今天是6月16日,晚上八点,[Caojunkai.github.io](http://caojunkai.github.io)正式搭建好上线了[csdn](http://blog.csdn.net/u012116169)上的内容会陆续搬到这个站点,今后,我将会在这个站点更新博客.看到它能正常被访问的时候,激动是溢于言表的,你知道,这是一个我自己的网站,完全自由,可以用任何的形式来表现.我再一次感受到了自由,希望这种感觉一直存在! :)\n\n写这篇博客只是为了宣布这个站点的第一篇文章,嘿嘿,工科男就是这样,就是不知道该怎么去写出心中的想法和情感(只是相对于一部分人),也许是碍于面子的原因,怕被别人称为“屌丝”,希望自己可以一直坚持下去。\n\n<!--more-->\n\n![图片](http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehkj2wsnguj20dw09840h.jpg)\n\n说实话，编程真的很枯燥，枯燥的有时会让人感觉到抑郁和染上心理强迫症，呵呵~~相信大家在不同的编程环境中都会遇到这样或者那样的困难和瓶颈，你们也会看到在这样的情况下，有的人选择了退出，有的人依然坚持了下来，我们不对他们的选择进行评价，毕竟每个人都有选择的空间的权利。我喜欢爬山，爬山和编程一样，当你觉得自己快要完蛋的时候，和自己说我能行就可以坚持下来。还是那句话，只要是喜欢，就不要轻易放弃。\n\n![图片](http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehkj330d43j20cu0h1wh7.jpg)\n\n刚不久看到的一句话，对于程序猿们，要开心写程序，快乐过生活，不要因为程序有很多的bug而痛苦，至少你们相爱过。我刚看到这句话时，就笑了，因为这句话的确抵触了心灵的最深处。呵呵~~~让大家笑话了！！！\n\nlamp兄弟连有个视频的片头是模仿聚美陈欧的，你只看到我学php敲代码，却没看到我的产品在改变着世界，你有你的女神，我也有我的cang老师，你嘲笑我苦逼屌丝命，我可怜你不懂编程之乐，你可以轻视我的代码，我会证明，这是谁的互联网时代，程序员注定是默默的逆袭，身边少不了口水和质疑，但那又怎样？哪怕前路崎岖，也要勇敢前行。\n\n真的是这样，哪怕遇到再多点的困难和质疑，但当我们的产品改变了世界时，其中的酸甜苦辣都值了......\n\n有时候，我们写博客，写的不是博客，是寂寞......\n\n但我觉得博客一定要坚持下去，一方面可以方便他人，也方便自己查阅。有些东西记录下来不一定会帮到多少人，但只要大家还有共同交流idea的愿望就有写下去的意义。\n","slug":"201406-2014-06-16-life-essay-1","published":1,"date":"2018-04-12T15:20:38.809Z","updated":"2018-04-12T15:20:38.810Z","comments":1,"photos":[],"link":"","_id":"cjfwomb3f0000ass61bmotqa2","content":"<p>今天是6月16日,晚上八点,<a href=\"http://caojunkai.github.io\" target=\"_blank\" rel=\"noopener\">Caojunkai.github.io</a>正式搭建好上线了<a href=\"http://blog.csdn.net/u012116169\" target=\"_blank\" rel=\"noopener\">csdn</a>上的内容会陆续搬到这个站点,今后,我将会在这个站点更新博客.看到它能正常被访问的时候,激动是溢于言表的,你知道,这是一个我自己的网站,完全自由,可以用任何的形式来表现.我再一次感受到了自由,希望这种感觉一直存在! :)</p>\n<p>写这篇博客只是为了宣布这个站点的第一篇文章,嘿嘿,工科男就是这样,就是不知道该怎么去写出心中的想法和情感(只是相对于一部分人),也许是碍于面子的原因,怕被别人称为“屌丝”,希望自己可以一直坚持下去。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehkj2wsnguj20dw09840h.jpg\" alt=\"图片\"></p>\n<p>说实话，编程真的很枯燥，枯燥的有时会让人感觉到抑郁和染上心理强迫症，呵呵~~相信大家在不同的编程环境中都会遇到这样或者那样的困难和瓶颈，你们也会看到在这样的情况下，有的人选择了退出，有的人依然坚持了下来，我们不对他们的选择进行评价，毕竟每个人都有选择的空间的权利。我喜欢爬山，爬山和编程一样，当你觉得自己快要完蛋的时候，和自己说我能行就可以坚持下来。还是那句话，只要是喜欢，就不要轻易放弃。</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehkj330d43j20cu0h1wh7.jpg\" alt=\"图片\"></p>\n<p>刚不久看到的一句话，对于程序猿们，要开心写程序，快乐过生活，不要因为程序有很多的bug而痛苦，至少你们相爱过。我刚看到这句话时，就笑了，因为这句话的确抵触了心灵的最深处。呵呵~~~让大家笑话了！！！</p>\n<p>lamp兄弟连有个视频的片头是模仿聚美陈欧的，你只看到我学php敲代码，却没看到我的产品在改变着世界，你有你的女神，我也有我的cang老师，你嘲笑我苦逼屌丝命，我可怜你不懂编程之乐，你可以轻视我的代码，我会证明，这是谁的互联网时代，程序员注定是默默的逆袭，身边少不了口水和质疑，但那又怎样？哪怕前路崎岖，也要勇敢前行。</p>\n<p>真的是这样，哪怕遇到再多点的困难和质疑，但当我们的产品改变了世界时，其中的酸甜苦辣都值了……</p>\n<p>有时候，我们写博客，写的不是博客，是寂寞……</p>\n<p>但我觉得博客一定要坚持下去，一方面可以方便他人，也方便自己查阅。有些东西记录下来不一定会帮到多少人，但只要大家还有共同交流idea的愿望就有写下去的意义。</p>\n","site":{"data":{}},"excerpt":"<p>今天是6月16日,晚上八点,<a href=\"http://caojunkai.github.io\" target=\"_blank\" rel=\"noopener\">Caojunkai.github.io</a>正式搭建好上线了<a href=\"http://blog.csdn.net/u012116169\" target=\"_blank\" rel=\"noopener\">csdn</a>上的内容会陆续搬到这个站点,今后,我将会在这个站点更新博客.看到它能正常被访问的时候,激动是溢于言表的,你知道,这是一个我自己的网站,完全自由,可以用任何的形式来表现.我再一次感受到了自由,希望这种感觉一直存在! :)</p>\n<p>写这篇博客只是为了宣布这个站点的第一篇文章,嘿嘿,工科男就是这样,就是不知道该怎么去写出心中的想法和情感(只是相对于一部分人),也许是碍于面子的原因,怕被别人称为“屌丝”,希望自己可以一直坚持下去。</p>","more":"<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehkj2wsnguj20dw09840h.jpg\" alt=\"图片\"></p>\n<p>说实话，编程真的很枯燥，枯燥的有时会让人感觉到抑郁和染上心理强迫症，呵呵~~相信大家在不同的编程环境中都会遇到这样或者那样的困难和瓶颈，你们也会看到在这样的情况下，有的人选择了退出，有的人依然坚持了下来，我们不对他们的选择进行评价，毕竟每个人都有选择的空间的权利。我喜欢爬山，爬山和编程一样，当你觉得自己快要完蛋的时候，和自己说我能行就可以坚持下来。还是那句话，只要是喜欢，就不要轻易放弃。</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehkj330d43j20cu0h1wh7.jpg\" alt=\"图片\"></p>\n<p>刚不久看到的一句话，对于程序猿们，要开心写程序，快乐过生活，不要因为程序有很多的bug而痛苦，至少你们相爱过。我刚看到这句话时，就笑了，因为这句话的确抵触了心灵的最深处。呵呵~~~让大家笑话了！！！</p>\n<p>lamp兄弟连有个视频的片头是模仿聚美陈欧的，你只看到我学php敲代码，却没看到我的产品在改变着世界，你有你的女神，我也有我的cang老师，你嘲笑我苦逼屌丝命，我可怜你不懂编程之乐，你可以轻视我的代码，我会证明，这是谁的互联网时代，程序员注定是默默的逆袭，身边少不了口水和质疑，但那又怎样？哪怕前路崎岖，也要勇敢前行。</p>\n<p>真的是这样，哪怕遇到再多点的困难和质疑，但当我们的产品改变了世界时，其中的酸甜苦辣都值了……</p>\n<p>有时候，我们写博客，写的不是博客，是寂寞……</p>\n<p>但我觉得博客一定要坚持下去，一方面可以方便他人，也方便自己查阅。有些东西记录下来不一定会帮到多少人，但只要大家还有共同交流idea的愿望就有写下去的意义。</p>"},{"layout":"post","title":"PHP延迟静态绑定机制","_content":"\n自 PHP 5.3.0 起，PHP 增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。准确说，后期静态绑定工作原理是存储了在上一个“非转发调用”的类名。当进行静态方法调用时，该类名即为明确指定的那个（通常在 ::  运算符左侧部分）；当进行非静态方法调用时，即为该对象所属的类。\n\n该功能从语言内部角度考虑被命名为“后期静态绑定”。“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为“静态绑定”，因为它可以用于（但不限于）静态方法的调用。\n\n使用 self:: 或者 \\_\\_CLASS\\_\\_ 对当前类的静态引用，取决于定义当前方法所在的类： \n\n\t<?php\n \tclass  A  {\n    \tpublic static function  who () {echo  __CLASS__ ;}\n    \tpublic static function  test () {self :: who ();}\n\t}\n\tclass  B  extends  A  {\n    \tpublic static function  who () {echo  __CLASS__ ;}\n\t}\n \tB :: test ();\n \t?> \n\n<!--more-->\n\n以上例程会输出： A\n\n**后期静态绑定**\n\n\t<?php\n \tclass  A  {\n    \tpublic static function  who () {echo  __CLASS__ ;}\n    \tpublic static function  test () {\n        \tstatic:: who ();  // 后期静态绑定从这里开始\n     \t}\n\t}\n\tclass  B  extends  A  {\n    \tpublic static function  who () {echo  __CLASS__ ;}\n\t｝\n \tB :: test ();\n \t?> \n\n该例会输出： B\n\n\n我们都知道静态方法还可以用作工厂方法，下面给大家看一个代码实例：\n\t\n\t<?php  \n\tClass Parent {  \n\t    //父类的一些方法...  \n\t} \n\tClass One extends Parent {  \n   \t\tStatic Public function _create () {  \n        \treturn new One();  \n   \t}  \n\t}  \n\tClass Two extends Parent {  \n  \t\tStatic Public function _create () {  \n        \treturn new Two();  \n    \t}  \n\t}  \n\t//......   \n\tprint_r(One::_create());  \n\tprint_r(Two::_create()); \n\t?>  \n\n在上面的父类Parent当中包含了很多的功能可被扩展类所调用，但是，他的两个派生类在创建自己的对象时使用了大量的重复代码，这是我们所不能忍受的，因为大量的重复代码很烦人也说明了你不是一个合格的coder。\n\n笔者一直都坚信：简单的就是最好的。那么我们能不能把_create（）方法放在父类当中被公共使用呢？\n来看下面的实例：\n\n\t<?php   \n\tClass Parent {  \n    \t//父类的一些方法...  \n    \tStatic Public function _create () {  \n        \treturn new self();  \n    \t}  \n\t}     \n\tClass One extends Parent {}  \n\tClass Two extends Parent {}  \n\t//......  \n\tprint_r(One::_create());  \n\tprint_r(Two::_create()); \n\t?>  \n\n这样仿佛我们就解决问题了，但是，由结果我们可以看出，并不是我们想要的One和Two类的实例对象，而是父类的实例，怎么回事呢？\n\n因为self指的不是调用上下文，而是解析上下文。因此，self被解析为定义\\_create()方法的Parent类。而不是解析为调用\\_create方法的One和Two类的实例对象。\n\n但是，在PHP中引入了延迟静态绑定机制，其实就是使用static关键字。而static类似于self和parent，但他指的是被调用的类不是包含类。\n\n下面，我们来使用static进行改进:\n\n\t<?php    \n\tClass Parent {  \n    \t//父类的一些方法\n    \tStatic Public function _create () {  \n\t\t\t //这里使用static延迟静态绑定关键字static  \n        \treturn new static();   \n    \t}  \n\t}      \n\tClass One extends Parent {}  \n\tClass Two extends Parent {}   \n\t//......   \n\tprint_r(One::_create());  \n\tprint_r(Two::_create());  \n\t?>  \n\n由打印结果可以看出，确实生成了One和Two类的实例化对象，是不是省去了很多的重复代码，static确实很好用. :)\n","source":"_posts/201406/2014-06-17-php_5_static_bind_1.md","raw":"---\nlayout : post\ntitle : \"PHP延迟静态绑定机制\"\ncategory : PHP\ntags : [PHP]\n---\n\n自 PHP 5.3.0 起，PHP 增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。准确说，后期静态绑定工作原理是存储了在上一个“非转发调用”的类名。当进行静态方法调用时，该类名即为明确指定的那个（通常在 ::  运算符左侧部分）；当进行非静态方法调用时，即为该对象所属的类。\n\n该功能从语言内部角度考虑被命名为“后期静态绑定”。“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为“静态绑定”，因为它可以用于（但不限于）静态方法的调用。\n\n使用 self:: 或者 \\_\\_CLASS\\_\\_ 对当前类的静态引用，取决于定义当前方法所在的类： \n\n\t<?php\n \tclass  A  {\n    \tpublic static function  who () {echo  __CLASS__ ;}\n    \tpublic static function  test () {self :: who ();}\n\t}\n\tclass  B  extends  A  {\n    \tpublic static function  who () {echo  __CLASS__ ;}\n\t}\n \tB :: test ();\n \t?> \n\n<!--more-->\n\n以上例程会输出： A\n\n**后期静态绑定**\n\n\t<?php\n \tclass  A  {\n    \tpublic static function  who () {echo  __CLASS__ ;}\n    \tpublic static function  test () {\n        \tstatic:: who ();  // 后期静态绑定从这里开始\n     \t}\n\t}\n\tclass  B  extends  A  {\n    \tpublic static function  who () {echo  __CLASS__ ;}\n\t｝\n \tB :: test ();\n \t?> \n\n该例会输出： B\n\n\n我们都知道静态方法还可以用作工厂方法，下面给大家看一个代码实例：\n\t\n\t<?php  \n\tClass Parent {  \n\t    //父类的一些方法...  \n\t} \n\tClass One extends Parent {  \n   \t\tStatic Public function _create () {  \n        \treturn new One();  \n   \t}  \n\t}  \n\tClass Two extends Parent {  \n  \t\tStatic Public function _create () {  \n        \treturn new Two();  \n    \t}  \n\t}  \n\t//......   \n\tprint_r(One::_create());  \n\tprint_r(Two::_create()); \n\t?>  \n\n在上面的父类Parent当中包含了很多的功能可被扩展类所调用，但是，他的两个派生类在创建自己的对象时使用了大量的重复代码，这是我们所不能忍受的，因为大量的重复代码很烦人也说明了你不是一个合格的coder。\n\n笔者一直都坚信：简单的就是最好的。那么我们能不能把_create（）方法放在父类当中被公共使用呢？\n来看下面的实例：\n\n\t<?php   \n\tClass Parent {  \n    \t//父类的一些方法...  \n    \tStatic Public function _create () {  \n        \treturn new self();  \n    \t}  \n\t}     \n\tClass One extends Parent {}  \n\tClass Two extends Parent {}  \n\t//......  \n\tprint_r(One::_create());  \n\tprint_r(Two::_create()); \n\t?>  \n\n这样仿佛我们就解决问题了，但是，由结果我们可以看出，并不是我们想要的One和Two类的实例对象，而是父类的实例，怎么回事呢？\n\n因为self指的不是调用上下文，而是解析上下文。因此，self被解析为定义\\_create()方法的Parent类。而不是解析为调用\\_create方法的One和Two类的实例对象。\n\n但是，在PHP中引入了延迟静态绑定机制，其实就是使用static关键字。而static类似于self和parent，但他指的是被调用的类不是包含类。\n\n下面，我们来使用static进行改进:\n\n\t<?php    \n\tClass Parent {  \n    \t//父类的一些方法\n    \tStatic Public function _create () {  \n\t\t\t //这里使用static延迟静态绑定关键字static  \n        \treturn new static();   \n    \t}  \n\t}      \n\tClass One extends Parent {}  \n\tClass Two extends Parent {}   \n\t//......   \n\tprint_r(One::_create());  \n\tprint_r(Two::_create());  \n\t?>  \n\n由打印结果可以看出，确实生成了One和Two类的实例化对象，是不是省去了很多的重复代码，static确实很好用. :)\n","slug":"201406-2014-06-17-php-5-static-bind-1","published":1,"date":"2018-04-12T15:20:38.810Z","updated":"2018-04-12T15:20:38.810Z","comments":1,"photos":[],"link":"","_id":"cjfwomb3k0001ass6bbtomwyg","content":"<p>自 PHP 5.3.0 起，PHP 增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。准确说，后期静态绑定工作原理是存储了在上一个“非转发调用”的类名。当进行静态方法调用时，该类名即为明确指定的那个（通常在 ::  运算符左侧部分）；当进行非静态方法调用时，即为该对象所属的类。</p>\n<p>该功能从语言内部角度考虑被命名为“后期静态绑定”。“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为“静态绑定”，因为它可以用于（但不限于）静态方法的调用。</p>\n<p>使用 self:: 或者 __CLASS__ 对当前类的静态引用，取决于定义当前方法所在的类： </p>\n<pre><code>&lt;?php\n class  A  {\n    public static function  who () {echo  __CLASS__ ;}\n    public static function  test () {self :: who ();}\n}\nclass  B  extends  A  {\n    public static function  who () {echo  __CLASS__ ;}\n}\n B :: test ();\n ?&gt; \n</code></pre><a id=\"more\"></a>\n<p>以上例程会输出： A</p>\n<p><strong>后期静态绑定</strong></p>\n<pre><code>&lt;?php\n class  A  {\n    public static function  who () {echo  __CLASS__ ;}\n    public static function  test () {\n        static:: who ();  // 后期静态绑定从这里开始\n     }\n}\nclass  B  extends  A  {\n    public static function  who () {echo  __CLASS__ ;}\n｝\n B :: test ();\n ?&gt; \n</code></pre><p>该例会输出： B</p>\n<p>我们都知道静态方法还可以用作工厂方法，下面给大家看一个代码实例：</p>\n<pre><code>&lt;?php  \nClass Parent {  \n    //父类的一些方法...  \n} \nClass One extends Parent {  \n       Static Public function _create () {  \n        return new One();  \n   }  \n}  \nClass Two extends Parent {  \n      Static Public function _create () {  \n        return new Two();  \n    }  \n}  \n//......   \nprint_r(One::_create());  \nprint_r(Two::_create()); \n?&gt;  \n</code></pre><p>在上面的父类Parent当中包含了很多的功能可被扩展类所调用，但是，他的两个派生类在创建自己的对象时使用了大量的重复代码，这是我们所不能忍受的，因为大量的重复代码很烦人也说明了你不是一个合格的coder。</p>\n<p>笔者一直都坚信：简单的就是最好的。那么我们能不能把_create（）方法放在父类当中被公共使用呢？<br>来看下面的实例：</p>\n<pre><code>&lt;?php   \nClass Parent {  \n    //父类的一些方法...  \n    Static Public function _create () {  \n        return new self();  \n    }  \n}     \nClass One extends Parent {}  \nClass Two extends Parent {}  \n//......  \nprint_r(One::_create());  \nprint_r(Two::_create()); \n?&gt;  \n</code></pre><p>这样仿佛我们就解决问题了，但是，由结果我们可以看出，并不是我们想要的One和Two类的实例对象，而是父类的实例，怎么回事呢？</p>\n<p>因为self指的不是调用上下文，而是解析上下文。因此，self被解析为定义_create()方法的Parent类。而不是解析为调用_create方法的One和Two类的实例对象。</p>\n<p>但是，在PHP中引入了延迟静态绑定机制，其实就是使用static关键字。而static类似于self和parent，但他指的是被调用的类不是包含类。</p>\n<p>下面，我们来使用static进行改进:</p>\n<pre><code>&lt;?php    \nClass Parent {  \n    //父类的一些方法\n    Static Public function _create () {  \n         //这里使用static延迟静态绑定关键字static  \n        return new static();   \n    }  \n}      \nClass One extends Parent {}  \nClass Two extends Parent {}   \n//......   \nprint_r(One::_create());  \nprint_r(Two::_create());  \n?&gt;  \n</code></pre><p>由打印结果可以看出，确实生成了One和Two类的实例化对象，是不是省去了很多的重复代码，static确实很好用. :)</p>\n","site":{"data":{}},"excerpt":"<p>自 PHP 5.3.0 起，PHP 增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。准确说，后期静态绑定工作原理是存储了在上一个“非转发调用”的类名。当进行静态方法调用时，该类名即为明确指定的那个（通常在 ::  运算符左侧部分）；当进行非静态方法调用时，即为该对象所属的类。</p>\n<p>该功能从语言内部角度考虑被命名为“后期静态绑定”。“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为“静态绑定”，因为它可以用于（但不限于）静态方法的调用。</p>\n<p>使用 self:: 或者 __CLASS__ 对当前类的静态引用，取决于定义当前方法所在的类： </p>\n<pre><code>&lt;?php\n class  A  {\n    public static function  who () {echo  __CLASS__ ;}\n    public static function  test () {self :: who ();}\n}\nclass  B  extends  A  {\n    public static function  who () {echo  __CLASS__ ;}\n}\n B :: test ();\n ?&gt; \n</code></pre>","more":"<p>以上例程会输出： A</p>\n<p><strong>后期静态绑定</strong></p>\n<pre><code>&lt;?php\n class  A  {\n    public static function  who () {echo  __CLASS__ ;}\n    public static function  test () {\n        static:: who ();  // 后期静态绑定从这里开始\n     }\n}\nclass  B  extends  A  {\n    public static function  who () {echo  __CLASS__ ;}\n｝\n B :: test ();\n ?&gt; \n</code></pre><p>该例会输出： B</p>\n<p>我们都知道静态方法还可以用作工厂方法，下面给大家看一个代码实例：</p>\n<pre><code>&lt;?php  \nClass Parent {  \n    //父类的一些方法...  \n} \nClass One extends Parent {  \n       Static Public function _create () {  \n        return new One();  \n   }  \n}  \nClass Two extends Parent {  \n      Static Public function _create () {  \n        return new Two();  \n    }  \n}  \n//......   \nprint_r(One::_create());  \nprint_r(Two::_create()); \n?&gt;  \n</code></pre><p>在上面的父类Parent当中包含了很多的功能可被扩展类所调用，但是，他的两个派生类在创建自己的对象时使用了大量的重复代码，这是我们所不能忍受的，因为大量的重复代码很烦人也说明了你不是一个合格的coder。</p>\n<p>笔者一直都坚信：简单的就是最好的。那么我们能不能把_create（）方法放在父类当中被公共使用呢？<br>来看下面的实例：</p>\n<pre><code>&lt;?php   \nClass Parent {  \n    //父类的一些方法...  \n    Static Public function _create () {  \n        return new self();  \n    }  \n}     \nClass One extends Parent {}  \nClass Two extends Parent {}  \n//......  \nprint_r(One::_create());  \nprint_r(Two::_create()); \n?&gt;  \n</code></pre><p>这样仿佛我们就解决问题了，但是，由结果我们可以看出，并不是我们想要的One和Two类的实例对象，而是父类的实例，怎么回事呢？</p>\n<p>因为self指的不是调用上下文，而是解析上下文。因此，self被解析为定义_create()方法的Parent类。而不是解析为调用_create方法的One和Two类的实例对象。</p>\n<p>但是，在PHP中引入了延迟静态绑定机制，其实就是使用static关键字。而static类似于self和parent，但他指的是被调用的类不是包含类。</p>\n<p>下面，我们来使用static进行改进:</p>\n<pre><code>&lt;?php    \nClass Parent {  \n    //父类的一些方法\n    Static Public function _create () {  \n         //这里使用static延迟静态绑定关键字static  \n        return new static();   \n    }  \n}      \nClass One extends Parent {}  \nClass Two extends Parent {}   \n//......   \nprint_r(One::_create());  \nprint_r(Two::_create());  \n?&gt;  \n</code></pre><p>由打印结果可以看出，确实生成了One和Two类的实例化对象，是不是省去了很多的重复代码，static确实很好用. :)</p>"},{"layout":"post","title":"PHP新增语法结构Traits","_content":"**面向对象**的优势在于类的复用，继承和多态都是对类进行复用，他们一个是类级别的复用，一个是方法级别的复用。其中提到继承必提组合，有什么区别呢。组合与继承都是提高代码可重用性的手段。通过总结，可以得出**继承是一种“是、像”的关系；而组合则是一种“需要”的关系**，利用这个“定律”可以很好的判断出是继承关系还是组合关系。\n\n继承最大的优点就是扩展简单、代码简洁，但是缺点大于优点。而组合却很灵活，仅通过唯一接口与外界通信，耦合度低于继承，但是却增加了代码量。\n\n如果既想要组合的灵活，又要继承的代码简洁，该怎么办呢？\n\n<!--more-->\n\n这是可以做到的，比如使用多重继承就可以实现。多重继承一个类会同时继承多个父类，组合两个父类的功能。但是多重继承过于灵活，可能会带来“*菱形问题*”,使模型变的复杂起来，因次大多数语言，都放弃了多重继承这一模型。\n\n---\n\nPHP5.4.0引入了新的语法结构Traits，实现了代码复用的方法。Traits 是一种为类似 PHP 的单继承语言而准备的代码复用机制，为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用方法集，是出extends、implements外的另外一种扩展对象的方式。\n\n下面总结下Traits的用法，先看下实例代码：\n\t\n\t<?php \n\ttrait traitName {\n\t\tfunction func_one () {/*code*/}\n\t\tfunction func_two () {/*code*/}\n\t}\n\tClass class_one {\n\t\tuse traitName;\n\t\t/*code*/\n\t}\n\tClass class_two {\n\t\tuse traitName;\n\t\t/*code*/\n\t}\n\t?> \n\n###优先级\n\n优先顺序是来自当前类的成员覆盖了trait的方法，而trait则覆盖了被继承的方法。\n\n\t<?php\n \tclass  Base  {\n    public function  sayHello () {\n        echo  'Hello ' ;\n    }\n\t}\n\ttrait  SayWorld  {\n    public function  sayHello () {\n        parent :: sayHello ();\n        echo  'World!' ;\n    }\n\t}\n\tclass  MyHelloWorld  extends  Base  {\n    \tuse  SayWorld ;\n\t}\n \t$o  = new  MyHelloWorld ();\n \t$o -> sayHello ();\n \t?>  \n\t输出：Hello World！\n\n###多个trait\n\n通过逗号分隔，在 use 声明列出多个 trait，可以都插入到一个类中。\n\n\t<?php \n\ttrait Hello {\n\t\tPublic function sayHello () {\n\t\t\techo 'Hello';\n\t\t}\n\t}\n\ttrait World {\n\t\tPublic function sayWorld () {\n\t\t\techo 'World';\n\t\t}\n\t}\n\tClass Say {\n\t\tuse Hello, World;\n\n\t}\n\t$a = new Say();\n\t$a->sayHello();\n\t$a->sayWorld();\n\t?>\n\t输出：HelloWorld\n\n\n###冲突的解决\n\n如果两个 trait 都插入了一个同名的方法，如果没有明确解决冲突将会产生一个致命错误。为了解决多个 trait 在同一个类中的命名冲突，需要使用 insteadof（*而不是的意思，可以这么理解*） 操作符来明确指定使用冲突方法中的哪一个。以上方式仅允许排除掉其它方法，as 操作符可以将其中一个冲突的方法以另一个名称来引入。\n\n\t<?php\n \ttrait  A  {\n    \tpublic function  smallTalk () {\n        \techo  'a' ;\n    \t}\n    \tpublic function  bigTalk () {\n        \techo  'A' ;\n    \t}\n\t}\n\n\ttrait  B  {\n    \tpublic function  smallTalk () {\n        \techo  'b' ;\n    \t}\n    \tpublic function  bigTalk () {\n        \techo  'B' ;\n    \t}\n\t}\n\n\tclass  Talker  {\n \t   use  A ,  B  {\n    \t     B :: smallTalk  insteadof  A ;\n    \t     A :: bigTalk  insteadof  B ;\n    \t}\n\t}\n\n\tclass  Aliased_Talker  {\n    \tuse  A ,  B  {\n      \t    B :: smallTalk  insteadof  A ;\n      \t    A :: bigTalk  insteadof  B ;\n     \t    B :: bigTalk  as  talk ;\n    \t}\n\t}\n \t?> \n\n###修改方法的访问控制\n\n使用 as 语法还可以用来调整方法的访问控制。\n\n\n\t<?php \n \ttrait  HelloWorld  {\n    \tpublic function  sayHello () {\n        \techo  'Hello World!' ;\n    \t}\n\t}\n \t// 修改 sayHello 的访问控制\n \tclass  MyClass1  {\n    \tuse  HelloWorld  {  sayHello  as protected; }\n\t}\n \t// 给方法一个改变了访问控制的别名\n\t// 原版 sayHello 的访问控制则没有发生变化\n \tclass  MyClass2  {\n    \tuse  HelloWorld  {  sayHello  as private  myPrivateHello ; }\n\t}\n\t$a = new MyClass1();\n\t$a->sayHello();\t\t//输出错误\n\t$b = new MyClass2();\n\t$b->sayHello();\t\t//输出Hello World!\n\t$b->myPrivateHello();\t\t//输出出错\n\t?>\n\n\n###从 trait 来组成 trait\n\n正如类能够使用 trait 一样，其它 trait 也能够使用 trait。在 trait 定义时通过使用一个或多个 trait，它能够组合其它 trait 中的部分或全部成员。\n\n\t<?php \n\ttrait Hello {\n\t\tfunction sayHello () {echo 'Hello';}\n\t}\n\ttrait World {\n\t\tfunction sayWorld () {echo 'World';}\n\t}\n\ttrait HelloWorld {\n\t\tuse Hello, World;\n\t}\n\n\tClass Say {\n\t\tuse HelloWorld;\n\t}\n\n\t$a = new Say();\n\t$a->sayHello();\n\t$a->sayWorld();\n\t?>\n\n###Trait 的抽象成员\n\n为了对使用的类施加强制要求，trait 支持抽象方法的使用。\n\n\t<?php \n\ttrait HelloWorld {\n\t\tfunction hello () {echo 'Hello';}\n\t\tabstract function world ();\n\t}\n\tClass Say {\n\t\tuse HelloWorld;\n\t\tfunction world () {\t\t//实现抽象方法\n\t\t\techo 'World!';\n\t\t}\n\t}\n\t?>\n\n###Trait 的静态成员\n\nTrait可以被静态成员静态方法定义。\n\n\t<?php \n\ttrait HelloWorld {\n\t\tStatic public function say () {echo 'Hello,World';}\n\t}\n\tClass Say {\n\t\tuse HelloWorld;\n\t}\n\tSay::say();\n\t?>\n\n###属性\n\nTrait 同样可以定义属性,如果 trait 定义了一个属性，那类将不能定义同样名称的属性，否则会产生一个错误。\n\n\t<?php \n\ttrait A {\n\t\tPublic $a = 'Hello World';\n\t}\n\tClass B {\n\t\tuse A;\n\t}\n\t$b = new B();\n\techo $b->a;\n\t?>\n\n**总结：**\n\n在笔者看来，Traits的用法在某些方面是跟类的继承很相似的，学习的时候可以对比着来使用，只是Traits使用起来更加的灵活方便，减少了语言单继承的限制，使得应用类的成员不需要继承。：)","source":"_posts/201406/2014-06-18-a_php_traits_notes_1.md","raw":"---\nlayout : post\ntitle : \"PHP新增语法结构Traits\"\ncategory : PHP\ntags : PHP traits\n---\n**面向对象**的优势在于类的复用，继承和多态都是对类进行复用，他们一个是类级别的复用，一个是方法级别的复用。其中提到继承必提组合，有什么区别呢。组合与继承都是提高代码可重用性的手段。通过总结，可以得出**继承是一种“是、像”的关系；而组合则是一种“需要”的关系**，利用这个“定律”可以很好的判断出是继承关系还是组合关系。\n\n继承最大的优点就是扩展简单、代码简洁，但是缺点大于优点。而组合却很灵活，仅通过唯一接口与外界通信，耦合度低于继承，但是却增加了代码量。\n\n如果既想要组合的灵活，又要继承的代码简洁，该怎么办呢？\n\n<!--more-->\n\n这是可以做到的，比如使用多重继承就可以实现。多重继承一个类会同时继承多个父类，组合两个父类的功能。但是多重继承过于灵活，可能会带来“*菱形问题*”,使模型变的复杂起来，因次大多数语言，都放弃了多重继承这一模型。\n\n---\n\nPHP5.4.0引入了新的语法结构Traits，实现了代码复用的方法。Traits 是一种为类似 PHP 的单继承语言而准备的代码复用机制，为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用方法集，是出extends、implements外的另外一种扩展对象的方式。\n\n下面总结下Traits的用法，先看下实例代码：\n\t\n\t<?php \n\ttrait traitName {\n\t\tfunction func_one () {/*code*/}\n\t\tfunction func_two () {/*code*/}\n\t}\n\tClass class_one {\n\t\tuse traitName;\n\t\t/*code*/\n\t}\n\tClass class_two {\n\t\tuse traitName;\n\t\t/*code*/\n\t}\n\t?> \n\n###优先级\n\n优先顺序是来自当前类的成员覆盖了trait的方法，而trait则覆盖了被继承的方法。\n\n\t<?php\n \tclass  Base  {\n    public function  sayHello () {\n        echo  'Hello ' ;\n    }\n\t}\n\ttrait  SayWorld  {\n    public function  sayHello () {\n        parent :: sayHello ();\n        echo  'World!' ;\n    }\n\t}\n\tclass  MyHelloWorld  extends  Base  {\n    \tuse  SayWorld ;\n\t}\n \t$o  = new  MyHelloWorld ();\n \t$o -> sayHello ();\n \t?>  \n\t输出：Hello World！\n\n###多个trait\n\n通过逗号分隔，在 use 声明列出多个 trait，可以都插入到一个类中。\n\n\t<?php \n\ttrait Hello {\n\t\tPublic function sayHello () {\n\t\t\techo 'Hello';\n\t\t}\n\t}\n\ttrait World {\n\t\tPublic function sayWorld () {\n\t\t\techo 'World';\n\t\t}\n\t}\n\tClass Say {\n\t\tuse Hello, World;\n\n\t}\n\t$a = new Say();\n\t$a->sayHello();\n\t$a->sayWorld();\n\t?>\n\t输出：HelloWorld\n\n\n###冲突的解决\n\n如果两个 trait 都插入了一个同名的方法，如果没有明确解决冲突将会产生一个致命错误。为了解决多个 trait 在同一个类中的命名冲突，需要使用 insteadof（*而不是的意思，可以这么理解*） 操作符来明确指定使用冲突方法中的哪一个。以上方式仅允许排除掉其它方法，as 操作符可以将其中一个冲突的方法以另一个名称来引入。\n\n\t<?php\n \ttrait  A  {\n    \tpublic function  smallTalk () {\n        \techo  'a' ;\n    \t}\n    \tpublic function  bigTalk () {\n        \techo  'A' ;\n    \t}\n\t}\n\n\ttrait  B  {\n    \tpublic function  smallTalk () {\n        \techo  'b' ;\n    \t}\n    \tpublic function  bigTalk () {\n        \techo  'B' ;\n    \t}\n\t}\n\n\tclass  Talker  {\n \t   use  A ,  B  {\n    \t     B :: smallTalk  insteadof  A ;\n    \t     A :: bigTalk  insteadof  B ;\n    \t}\n\t}\n\n\tclass  Aliased_Talker  {\n    \tuse  A ,  B  {\n      \t    B :: smallTalk  insteadof  A ;\n      \t    A :: bigTalk  insteadof  B ;\n     \t    B :: bigTalk  as  talk ;\n    \t}\n\t}\n \t?> \n\n###修改方法的访问控制\n\n使用 as 语法还可以用来调整方法的访问控制。\n\n\n\t<?php \n \ttrait  HelloWorld  {\n    \tpublic function  sayHello () {\n        \techo  'Hello World!' ;\n    \t}\n\t}\n \t// 修改 sayHello 的访问控制\n \tclass  MyClass1  {\n    \tuse  HelloWorld  {  sayHello  as protected; }\n\t}\n \t// 给方法一个改变了访问控制的别名\n\t// 原版 sayHello 的访问控制则没有发生变化\n \tclass  MyClass2  {\n    \tuse  HelloWorld  {  sayHello  as private  myPrivateHello ; }\n\t}\n\t$a = new MyClass1();\n\t$a->sayHello();\t\t//输出错误\n\t$b = new MyClass2();\n\t$b->sayHello();\t\t//输出Hello World!\n\t$b->myPrivateHello();\t\t//输出出错\n\t?>\n\n\n###从 trait 来组成 trait\n\n正如类能够使用 trait 一样，其它 trait 也能够使用 trait。在 trait 定义时通过使用一个或多个 trait，它能够组合其它 trait 中的部分或全部成员。\n\n\t<?php \n\ttrait Hello {\n\t\tfunction sayHello () {echo 'Hello';}\n\t}\n\ttrait World {\n\t\tfunction sayWorld () {echo 'World';}\n\t}\n\ttrait HelloWorld {\n\t\tuse Hello, World;\n\t}\n\n\tClass Say {\n\t\tuse HelloWorld;\n\t}\n\n\t$a = new Say();\n\t$a->sayHello();\n\t$a->sayWorld();\n\t?>\n\n###Trait 的抽象成员\n\n为了对使用的类施加强制要求，trait 支持抽象方法的使用。\n\n\t<?php \n\ttrait HelloWorld {\n\t\tfunction hello () {echo 'Hello';}\n\t\tabstract function world ();\n\t}\n\tClass Say {\n\t\tuse HelloWorld;\n\t\tfunction world () {\t\t//实现抽象方法\n\t\t\techo 'World!';\n\t\t}\n\t}\n\t?>\n\n###Trait 的静态成员\n\nTrait可以被静态成员静态方法定义。\n\n\t<?php \n\ttrait HelloWorld {\n\t\tStatic public function say () {echo 'Hello,World';}\n\t}\n\tClass Say {\n\t\tuse HelloWorld;\n\t}\n\tSay::say();\n\t?>\n\n###属性\n\nTrait 同样可以定义属性,如果 trait 定义了一个属性，那类将不能定义同样名称的属性，否则会产生一个错误。\n\n\t<?php \n\ttrait A {\n\t\tPublic $a = 'Hello World';\n\t}\n\tClass B {\n\t\tuse A;\n\t}\n\t$b = new B();\n\techo $b->a;\n\t?>\n\n**总结：**\n\n在笔者看来，Traits的用法在某些方面是跟类的继承很相似的，学习的时候可以对比着来使用，只是Traits使用起来更加的灵活方便，减少了语言单继承的限制，使得应用类的成员不需要继承。：)","slug":"201406-2014-06-18-a-php-traits-notes-1","published":1,"date":"2018-04-12T15:20:38.810Z","updated":"2018-04-12T15:20:38.810Z","comments":1,"photos":[],"link":"","_id":"cjfwomb3p0004ass6miquv1p2","content":"<p><strong>面向对象</strong>的优势在于类的复用，继承和多态都是对类进行复用，他们一个是类级别的复用，一个是方法级别的复用。其中提到继承必提组合，有什么区别呢。组合与继承都是提高代码可重用性的手段。通过总结，可以得出<strong>继承是一种“是、像”的关系；而组合则是一种“需要”的关系</strong>，利用这个“定律”可以很好的判断出是继承关系还是组合关系。</p>\n<p>继承最大的优点就是扩展简单、代码简洁，但是缺点大于优点。而组合却很灵活，仅通过唯一接口与外界通信，耦合度低于继承，但是却增加了代码量。</p>\n<p>如果既想要组合的灵活，又要继承的代码简洁，该怎么办呢？</p>\n<a id=\"more\"></a>\n<p>这是可以做到的，比如使用多重继承就可以实现。多重继承一个类会同时继承多个父类，组合两个父类的功能。但是多重继承过于灵活，可能会带来“<em>菱形问题</em>”,使模型变的复杂起来，因次大多数语言，都放弃了多重继承这一模型。</p>\n<hr>\n<p>PHP5.4.0引入了新的语法结构Traits，实现了代码复用的方法。Traits 是一种为类似 PHP 的单继承语言而准备的代码复用机制，为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用方法集，是出extends、implements外的另外一种扩展对象的方式。</p>\n<p>下面总结下Traits的用法，先看下实例代码：</p>\n<pre><code>&lt;?php \ntrait traitName {\n    function func_one () {/*code*/}\n    function func_two () {/*code*/}\n}\nClass class_one {\n    use traitName;\n    /*code*/\n}\nClass class_two {\n    use traitName;\n    /*code*/\n}\n?&gt; \n</code></pre><p>###优先级</p>\n<p>优先顺序是来自当前类的成员覆盖了trait的方法，而trait则覆盖了被继承的方法。</p>\n<pre><code>&lt;?php\n class  Base  {\npublic function  sayHello () {\n    echo  &apos;Hello &apos; ;\n}\n}\ntrait  SayWorld  {\npublic function  sayHello () {\n    parent :: sayHello ();\n    echo  &apos;World!&apos; ;\n}\n}\nclass  MyHelloWorld  extends  Base  {\n    use  SayWorld ;\n}\n $o  = new  MyHelloWorld ();\n $o -&gt; sayHello ();\n ?&gt;  \n输出：Hello World！\n</code></pre><p>###多个trait</p>\n<p>通过逗号分隔，在 use 声明列出多个 trait，可以都插入到一个类中。</p>\n<pre><code>&lt;?php \ntrait Hello {\n    Public function sayHello () {\n        echo &apos;Hello&apos;;\n    }\n}\ntrait World {\n    Public function sayWorld () {\n        echo &apos;World&apos;;\n    }\n}\nClass Say {\n    use Hello, World;\n\n}\n$a = new Say();\n$a-&gt;sayHello();\n$a-&gt;sayWorld();\n?&gt;\n输出：HelloWorld\n</code></pre><p>###冲突的解决</p>\n<p>如果两个 trait 都插入了一个同名的方法，如果没有明确解决冲突将会产生一个致命错误。为了解决多个 trait 在同一个类中的命名冲突，需要使用 insteadof（<em>而不是的意思，可以这么理解</em>） 操作符来明确指定使用冲突方法中的哪一个。以上方式仅允许排除掉其它方法，as 操作符可以将其中一个冲突的方法以另一个名称来引入。</p>\n<pre><code>&lt;?php\n trait  A  {\n    public function  smallTalk () {\n        echo  &apos;a&apos; ;\n    }\n    public function  bigTalk () {\n        echo  &apos;A&apos; ;\n    }\n}\n\ntrait  B  {\n    public function  smallTalk () {\n        echo  &apos;b&apos; ;\n    }\n    public function  bigTalk () {\n        echo  &apos;B&apos; ;\n    }\n}\n\nclass  Talker  {\n    use  A ,  B  {\n         B :: smallTalk  insteadof  A ;\n         A :: bigTalk  insteadof  B ;\n    }\n}\n\nclass  Aliased_Talker  {\n    use  A ,  B  {\n          B :: smallTalk  insteadof  A ;\n          A :: bigTalk  insteadof  B ;\n         B :: bigTalk  as  talk ;\n    }\n}\n ?&gt; \n</code></pre><p>###修改方法的访问控制</p>\n<p>使用 as 语法还可以用来调整方法的访问控制。</p>\n<pre><code>&lt;?php \n trait  HelloWorld  {\n    public function  sayHello () {\n        echo  &apos;Hello World!&apos; ;\n    }\n}\n // 修改 sayHello 的访问控制\n class  MyClass1  {\n    use  HelloWorld  {  sayHello  as protected; }\n}\n // 给方法一个改变了访问控制的别名\n// 原版 sayHello 的访问控制则没有发生变化\n class  MyClass2  {\n    use  HelloWorld  {  sayHello  as private  myPrivateHello ; }\n}\n$a = new MyClass1();\n$a-&gt;sayHello();        //输出错误\n$b = new MyClass2();\n$b-&gt;sayHello();        //输出Hello World!\n$b-&gt;myPrivateHello();        //输出出错\n?&gt;\n</code></pre><p>###从 trait 来组成 trait</p>\n<p>正如类能够使用 trait 一样，其它 trait 也能够使用 trait。在 trait 定义时通过使用一个或多个 trait，它能够组合其它 trait 中的部分或全部成员。</p>\n<pre><code>&lt;?php \ntrait Hello {\n    function sayHello () {echo &apos;Hello&apos;;}\n}\ntrait World {\n    function sayWorld () {echo &apos;World&apos;;}\n}\ntrait HelloWorld {\n    use Hello, World;\n}\n\nClass Say {\n    use HelloWorld;\n}\n\n$a = new Say();\n$a-&gt;sayHello();\n$a-&gt;sayWorld();\n?&gt;\n</code></pre><p>###Trait 的抽象成员</p>\n<p>为了对使用的类施加强制要求，trait 支持抽象方法的使用。</p>\n<pre><code>&lt;?php \ntrait HelloWorld {\n    function hello () {echo &apos;Hello&apos;;}\n    abstract function world ();\n}\nClass Say {\n    use HelloWorld;\n    function world () {        //实现抽象方法\n        echo &apos;World!&apos;;\n    }\n}\n?&gt;\n</code></pre><p>###Trait 的静态成员</p>\n<p>Trait可以被静态成员静态方法定义。</p>\n<pre><code>&lt;?php \ntrait HelloWorld {\n    Static public function say () {echo &apos;Hello,World&apos;;}\n}\nClass Say {\n    use HelloWorld;\n}\nSay::say();\n?&gt;\n</code></pre><p>###属性</p>\n<p>Trait 同样可以定义属性,如果 trait 定义了一个属性，那类将不能定义同样名称的属性，否则会产生一个错误。</p>\n<pre><code>&lt;?php \ntrait A {\n    Public $a = &apos;Hello World&apos;;\n}\nClass B {\n    use A;\n}\n$b = new B();\necho $b-&gt;a;\n?&gt;\n</code></pre><p><strong>总结：</strong></p>\n<p>在笔者看来，Traits的用法在某些方面是跟类的继承很相似的，学习的时候可以对比着来使用，只是Traits使用起来更加的灵活方便，减少了语言单继承的限制，使得应用类的成员不需要继承。：)</p>\n","site":{"data":{}},"excerpt":"<p><strong>面向对象</strong>的优势在于类的复用，继承和多态都是对类进行复用，他们一个是类级别的复用，一个是方法级别的复用。其中提到继承必提组合，有什么区别呢。组合与继承都是提高代码可重用性的手段。通过总结，可以得出<strong>继承是一种“是、像”的关系；而组合则是一种“需要”的关系</strong>，利用这个“定律”可以很好的判断出是继承关系还是组合关系。</p>\n<p>继承最大的优点就是扩展简单、代码简洁，但是缺点大于优点。而组合却很灵活，仅通过唯一接口与外界通信，耦合度低于继承，但是却增加了代码量。</p>\n<p>如果既想要组合的灵活，又要继承的代码简洁，该怎么办呢？</p>","more":"<p>这是可以做到的，比如使用多重继承就可以实现。多重继承一个类会同时继承多个父类，组合两个父类的功能。但是多重继承过于灵活，可能会带来“<em>菱形问题</em>”,使模型变的复杂起来，因次大多数语言，都放弃了多重继承这一模型。</p>\n<hr>\n<p>PHP5.4.0引入了新的语法结构Traits，实现了代码复用的方法。Traits 是一种为类似 PHP 的单继承语言而准备的代码复用机制，为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用方法集，是出extends、implements外的另外一种扩展对象的方式。</p>\n<p>下面总结下Traits的用法，先看下实例代码：</p>\n<pre><code>&lt;?php \ntrait traitName {\n    function func_one () {/*code*/}\n    function func_two () {/*code*/}\n}\nClass class_one {\n    use traitName;\n    /*code*/\n}\nClass class_two {\n    use traitName;\n    /*code*/\n}\n?&gt; \n</code></pre><p>###优先级</p>\n<p>优先顺序是来自当前类的成员覆盖了trait的方法，而trait则覆盖了被继承的方法。</p>\n<pre><code>&lt;?php\n class  Base  {\npublic function  sayHello () {\n    echo  &apos;Hello &apos; ;\n}\n}\ntrait  SayWorld  {\npublic function  sayHello () {\n    parent :: sayHello ();\n    echo  &apos;World!&apos; ;\n}\n}\nclass  MyHelloWorld  extends  Base  {\n    use  SayWorld ;\n}\n $o  = new  MyHelloWorld ();\n $o -&gt; sayHello ();\n ?&gt;  \n输出：Hello World！\n</code></pre><p>###多个trait</p>\n<p>通过逗号分隔，在 use 声明列出多个 trait，可以都插入到一个类中。</p>\n<pre><code>&lt;?php \ntrait Hello {\n    Public function sayHello () {\n        echo &apos;Hello&apos;;\n    }\n}\ntrait World {\n    Public function sayWorld () {\n        echo &apos;World&apos;;\n    }\n}\nClass Say {\n    use Hello, World;\n\n}\n$a = new Say();\n$a-&gt;sayHello();\n$a-&gt;sayWorld();\n?&gt;\n输出：HelloWorld\n</code></pre><p>###冲突的解决</p>\n<p>如果两个 trait 都插入了一个同名的方法，如果没有明确解决冲突将会产生一个致命错误。为了解决多个 trait 在同一个类中的命名冲突，需要使用 insteadof（<em>而不是的意思，可以这么理解</em>） 操作符来明确指定使用冲突方法中的哪一个。以上方式仅允许排除掉其它方法，as 操作符可以将其中一个冲突的方法以另一个名称来引入。</p>\n<pre><code>&lt;?php\n trait  A  {\n    public function  smallTalk () {\n        echo  &apos;a&apos; ;\n    }\n    public function  bigTalk () {\n        echo  &apos;A&apos; ;\n    }\n}\n\ntrait  B  {\n    public function  smallTalk () {\n        echo  &apos;b&apos; ;\n    }\n    public function  bigTalk () {\n        echo  &apos;B&apos; ;\n    }\n}\n\nclass  Talker  {\n    use  A ,  B  {\n         B :: smallTalk  insteadof  A ;\n         A :: bigTalk  insteadof  B ;\n    }\n}\n\nclass  Aliased_Talker  {\n    use  A ,  B  {\n          B :: smallTalk  insteadof  A ;\n          A :: bigTalk  insteadof  B ;\n         B :: bigTalk  as  talk ;\n    }\n}\n ?&gt; \n</code></pre><p>###修改方法的访问控制</p>\n<p>使用 as 语法还可以用来调整方法的访问控制。</p>\n<pre><code>&lt;?php \n trait  HelloWorld  {\n    public function  sayHello () {\n        echo  &apos;Hello World!&apos; ;\n    }\n}\n // 修改 sayHello 的访问控制\n class  MyClass1  {\n    use  HelloWorld  {  sayHello  as protected; }\n}\n // 给方法一个改变了访问控制的别名\n// 原版 sayHello 的访问控制则没有发生变化\n class  MyClass2  {\n    use  HelloWorld  {  sayHello  as private  myPrivateHello ; }\n}\n$a = new MyClass1();\n$a-&gt;sayHello();        //输出错误\n$b = new MyClass2();\n$b-&gt;sayHello();        //输出Hello World!\n$b-&gt;myPrivateHello();        //输出出错\n?&gt;\n</code></pre><p>###从 trait 来组成 trait</p>\n<p>正如类能够使用 trait 一样，其它 trait 也能够使用 trait。在 trait 定义时通过使用一个或多个 trait，它能够组合其它 trait 中的部分或全部成员。</p>\n<pre><code>&lt;?php \ntrait Hello {\n    function sayHello () {echo &apos;Hello&apos;;}\n}\ntrait World {\n    function sayWorld () {echo &apos;World&apos;;}\n}\ntrait HelloWorld {\n    use Hello, World;\n}\n\nClass Say {\n    use HelloWorld;\n}\n\n$a = new Say();\n$a-&gt;sayHello();\n$a-&gt;sayWorld();\n?&gt;\n</code></pre><p>###Trait 的抽象成员</p>\n<p>为了对使用的类施加强制要求，trait 支持抽象方法的使用。</p>\n<pre><code>&lt;?php \ntrait HelloWorld {\n    function hello () {echo &apos;Hello&apos;;}\n    abstract function world ();\n}\nClass Say {\n    use HelloWorld;\n    function world () {        //实现抽象方法\n        echo &apos;World!&apos;;\n    }\n}\n?&gt;\n</code></pre><p>###Trait 的静态成员</p>\n<p>Trait可以被静态成员静态方法定义。</p>\n<pre><code>&lt;?php \ntrait HelloWorld {\n    Static public function say () {echo &apos;Hello,World&apos;;}\n}\nClass Say {\n    use HelloWorld;\n}\nSay::say();\n?&gt;\n</code></pre><p>###属性</p>\n<p>Trait 同样可以定义属性,如果 trait 定义了一个属性，那类将不能定义同样名称的属性，否则会产生一个错误。</p>\n<pre><code>&lt;?php \ntrait A {\n    Public $a = &apos;Hello World&apos;;\n}\nClass B {\n    use A;\n}\n$b = new B();\necho $b-&gt;a;\n?&gt;\n</code></pre><p><strong>总结：</strong></p>\n<p>在笔者看来，Traits的用法在某些方面是跟类的继承很相似的，学习的时候可以对比着来使用，只是Traits使用起来更加的灵活方便，减少了语言单继承的限制，使得应用类的成员不需要继承。：)</p>"},{"layout":"post","title":"批判的价值","_content":"Author:YinWang\n\n总是有人告诉我，我不应该批评一些技术，特别是不应该在一些公认的“大牛”或者流行的技术头上动土。要做出自己的“成果”，这样才可以得到大家的“尊重”。首先，你可能没有发现，被我批判得最厉害的技术和人，其实也是最牛气哄哄，最以自己的地位压制其他人的（比如 Unix 和 Go 语言）。我从来没有尖锐地批评过一个朋友经过自己的努力，做出来的难看的小板凳。不管他如何幼稚，得到的总是我的鼓励和帮助，除非有一天他也变得牛气哄哄。而且，我觉得我的成果已经够多了，都是很多人想都想不到的东西，够写好几篇博士论文了。多得在我脑子里已经堆不下了，而且还在不断地产生。<!--more-->我从来不公开自己最新的想法，所以你们在这里看到的“惊人”的想法，全都是经过多年的思考和经验才得到的，全都是我司空见惯的。我的顶级水准的代码很多都放在网上，可是有谁知道它们是用来做什么的，它们的价值？所以我觉得虽然这种某些人希望我采用的“默默无闻”的方式，作为个人的策略，不失为一个混进“上流社会”好办法，然而这对于 IT 业和学术界的大环境，却并不能达到我希望的效果。其实恰恰相反，这种做法只会让我自己也成为这大环境的一部分，并且为维护它的各种谎言而耗费我的生命。\n\n我难道还不够“专心学术”吗？在 Cornell 和 Indiana 的日子里，有哪一天我不是沉迷于我梦想中的学术呢？在那段时间里，我从老师那里学会，外加自己的摸索，掌握了很多人难以想象的本质性的知识，纯净而美好的想法。我把学术都已经做到头了，做到超过世界的“前沿”很多年以后了。可是当我进入公司实习，进入业界工作，我看到了差距。这不是很多人所谓的“理想与现实的差距”，因为我所学到的并不是空洞而难以实现的“理想”，而是切实可行的，并且被证明为非常有效的做法。你能理解那种曾经生活在“未来”，现在却受累于各种历史包袱的感觉吗？我拥有“未来”的技术，为了它们我付出了巨额的生命和汗水。然而这种“未来”却是相对的，这些未来技术本应已经被广泛采用，却由于业界对各种低劣技术的商业炒作和宗教崇拜，显得离我们很远。或者更可怕一点，由于对低劣技术的商业炒作和宗教崇拜，被人认为是过时的东西。\n\n\n像很多有同样经历的人一样，我为了这些美好的理论和想法能被世人接受做出了努力。像他们一样，我不愿意得罪人，我做过好好先生，甚至说过奉承话。我以为只要我的想法比现有的好，就会逐渐被人接受，我觉得没有必要去批评不好的想法。有好几次在对一些事情进行尖锐的批评之后，我心理都在嘀咕，因为我深深地知道，我得罪了人，我烧毁了自己通向“成功”的桥梁，甚至也许会活不下去。有多少次把之前写过的文章藏起来，其实是为了让自己还可以继续在这个混世里面活下去。可是我发现这样下去，自己就活得越来越像一条狗，就像很多其他人一样。或者叫做沉默的羔羊。\n\n\n在这个技术的数字游戏里，只做加法而不做减法，是永远得不到正确的答案的，因为你的大作，将建立在摇摇欲坠的基础之上。你向混世妥协，然而混世并不会因此对你好一些。IT 公司里总是有人认为自己什么都懂，他们追随某些“大牛”的思想，因为那样他们就可以显得很牛，可以被重用。如果你有真知灼见，而这种人做了你的上司，那几乎是必然的矛盾，因为你将眼睁睁的看着自己憧憬中的项目一步步的走上一条不归的绝路。你的生命开始在“妥协”和“沟通”之间徘徊。你不好意思对上司的作法直接提出异议，然而当你想方设法进行“沟通”的时候，你发现虽然自己具有深入的洞察力，你的想法却总是被人们头脑中的各位“大牛”所压倒。你的洞察力和智力，比起那些水平其实不如你的大牛们的名气来说，简直一文不值。\n这些大牛哪里来的如此大的威力？因为他们实际做出过什么“成功”的技术吗？在经过调查之后你惊讶的发现，根据对“成功”的定义，也许是的，也许不是的。他们也许做出过一些很多人在用的东西，然而很多人用的，却不一定是好东西，有可能是一个人人叫骂的东西。如果真有什么看得见摸得着的技术还好，可是很多所谓“牛人”其实不过是写过一本书，或者领导过一个“成功”的公司，或者只是有一个著名的 blog，上面写着一些和蔼可亲的入门级读物（我貌似也有嫌疑，然而我的 blog 非常有深度，而且我还有其他东西 :P）。有些公司也许算是一个成功的公司，然而它有先进的技术吗？如果你把商业的成功和技术的成功混为一谈，那再来谈所谓“技术进步”，那还有什么意义呢？于是你就看到了很多人的“拜金主义”，一直拜到了技术那里：有钱人的技术都是好技术！\n\n\n可惜的是，有钱人的钱，不是你的钱；有钱人的技术，不但不能让你也成功，却能让你坠入万丈深渊。除了羡慕他们以外，你还能从他们那里得到什么呢？工作？绿卡？那些就是拴住你的无形锁链，让你为了别人的野心而廉价的出卖自己的青春。不得不说，出于“战略”考虑，你有时候确实可以妥协。然而不幸的是，自己妥协就算了，却总有人为了爬到更高处，把这种妥协作为教条，布道给更多的人。Blog 就是他们最重要的工具，写几个 post，抬出几个公司里的大牛，说自己跟他们关系多么接近，然后就把他们的“语录”下放给广大码农。最开头得到这信息的人，知道这只是临时的妥协，是这人往上爬的权宜之计。可是当这些东西越传越远，而没有人针锋相对，它就成为了真正的教条。所以“教主”们也许并不是罪魁祸首，而喜欢传教的人才是真正的罪魁祸首。不过也许，他们全都是罪魁祸首。这种罪，深深地植入到了每一个人的脑子里。\n\n\n这种现象发展到最后，就使得 IT 公司成为了最苦逼的工作场所。在你耳边，总是环绕着人们对各位大牛的崇拜之情。吃饭时谈论的，总是那些人的逸闻趣事。你的梦想，就是有一天能成为他们那样的人，或者能跟他们在同一个办公室工作。你失去了自己，你不再理解，世界上其实还有其它的活法。你永远不会明白，你所谓的“知识”和“技术”，是多么的肤浅。\n\n\n你低估了你自己的头脑的价值，这就是我想告诉你的。我批判你们心中的偶像，只不过是为了让我的身边存在几个拥有自己头脑的人，而不是每一次一起吃饭都无限卑微，让我慢慢地也感觉自己很卑微。你对大牛们的崇敬，你的“好学”精神，并不能得到我的好感。我只尊敬真正的勇士，那些尊敬他们自己的人。所以我写了这些东西，为了让你理解到你自己的价值，让你不再受蒙蔽，让你不再成为权威者们所谓的“知识”的奴隶，所谓的“技术”的学习者和执行者。\n\n\n我希望你成为一个创造者。每个人刚生下来的时候都是一个创造者。是所谓的“教育”，让你们失去了自己的思想。而真正的教育，其实是当你忘记在学校学会的知识之后，剩下来的东西。在这种意义上，任何国家的教育都是失败的，而不只是中国。所有的知识都是肤浅的，唯有得到它们的途径，才是真正的精髓。\n\nLink : [转载链接](http://www.yinwang.org/blog-cn/2014/05/04/value-of-criticism/)\n\n**ps：** 作者写的的确很发程序猿们深省，与大家共勉。:)\n","source":"_posts/201406/2014-06-17-views_impression_1.md","raw":"---\nlayout : post\ntitle : \"批判的价值\"\ncategory : 观点和感想\ntags : [Impression]\n---\nAuthor:YinWang\n\n总是有人告诉我，我不应该批评一些技术，特别是不应该在一些公认的“大牛”或者流行的技术头上动土。要做出自己的“成果”，这样才可以得到大家的“尊重”。首先，你可能没有发现，被我批判得最厉害的技术和人，其实也是最牛气哄哄，最以自己的地位压制其他人的（比如 Unix 和 Go 语言）。我从来没有尖锐地批评过一个朋友经过自己的努力，做出来的难看的小板凳。不管他如何幼稚，得到的总是我的鼓励和帮助，除非有一天他也变得牛气哄哄。而且，我觉得我的成果已经够多了，都是很多人想都想不到的东西，够写好几篇博士论文了。多得在我脑子里已经堆不下了，而且还在不断地产生。<!--more-->我从来不公开自己最新的想法，所以你们在这里看到的“惊人”的想法，全都是经过多年的思考和经验才得到的，全都是我司空见惯的。我的顶级水准的代码很多都放在网上，可是有谁知道它们是用来做什么的，它们的价值？所以我觉得虽然这种某些人希望我采用的“默默无闻”的方式，作为个人的策略，不失为一个混进“上流社会”好办法，然而这对于 IT 业和学术界的大环境，却并不能达到我希望的效果。其实恰恰相反，这种做法只会让我自己也成为这大环境的一部分，并且为维护它的各种谎言而耗费我的生命。\n\n我难道还不够“专心学术”吗？在 Cornell 和 Indiana 的日子里，有哪一天我不是沉迷于我梦想中的学术呢？在那段时间里，我从老师那里学会，外加自己的摸索，掌握了很多人难以想象的本质性的知识，纯净而美好的想法。我把学术都已经做到头了，做到超过世界的“前沿”很多年以后了。可是当我进入公司实习，进入业界工作，我看到了差距。这不是很多人所谓的“理想与现实的差距”，因为我所学到的并不是空洞而难以实现的“理想”，而是切实可行的，并且被证明为非常有效的做法。你能理解那种曾经生活在“未来”，现在却受累于各种历史包袱的感觉吗？我拥有“未来”的技术，为了它们我付出了巨额的生命和汗水。然而这种“未来”却是相对的，这些未来技术本应已经被广泛采用，却由于业界对各种低劣技术的商业炒作和宗教崇拜，显得离我们很远。或者更可怕一点，由于对低劣技术的商业炒作和宗教崇拜，被人认为是过时的东西。\n\n\n像很多有同样经历的人一样，我为了这些美好的理论和想法能被世人接受做出了努力。像他们一样，我不愿意得罪人，我做过好好先生，甚至说过奉承话。我以为只要我的想法比现有的好，就会逐渐被人接受，我觉得没有必要去批评不好的想法。有好几次在对一些事情进行尖锐的批评之后，我心理都在嘀咕，因为我深深地知道，我得罪了人，我烧毁了自己通向“成功”的桥梁，甚至也许会活不下去。有多少次把之前写过的文章藏起来，其实是为了让自己还可以继续在这个混世里面活下去。可是我发现这样下去，自己就活得越来越像一条狗，就像很多其他人一样。或者叫做沉默的羔羊。\n\n\n在这个技术的数字游戏里，只做加法而不做减法，是永远得不到正确的答案的，因为你的大作，将建立在摇摇欲坠的基础之上。你向混世妥协，然而混世并不会因此对你好一些。IT 公司里总是有人认为自己什么都懂，他们追随某些“大牛”的思想，因为那样他们就可以显得很牛，可以被重用。如果你有真知灼见，而这种人做了你的上司，那几乎是必然的矛盾，因为你将眼睁睁的看着自己憧憬中的项目一步步的走上一条不归的绝路。你的生命开始在“妥协”和“沟通”之间徘徊。你不好意思对上司的作法直接提出异议，然而当你想方设法进行“沟通”的时候，你发现虽然自己具有深入的洞察力，你的想法却总是被人们头脑中的各位“大牛”所压倒。你的洞察力和智力，比起那些水平其实不如你的大牛们的名气来说，简直一文不值。\n这些大牛哪里来的如此大的威力？因为他们实际做出过什么“成功”的技术吗？在经过调查之后你惊讶的发现，根据对“成功”的定义，也许是的，也许不是的。他们也许做出过一些很多人在用的东西，然而很多人用的，却不一定是好东西，有可能是一个人人叫骂的东西。如果真有什么看得见摸得着的技术还好，可是很多所谓“牛人”其实不过是写过一本书，或者领导过一个“成功”的公司，或者只是有一个著名的 blog，上面写着一些和蔼可亲的入门级读物（我貌似也有嫌疑，然而我的 blog 非常有深度，而且我还有其他东西 :P）。有些公司也许算是一个成功的公司，然而它有先进的技术吗？如果你把商业的成功和技术的成功混为一谈，那再来谈所谓“技术进步”，那还有什么意义呢？于是你就看到了很多人的“拜金主义”，一直拜到了技术那里：有钱人的技术都是好技术！\n\n\n可惜的是，有钱人的钱，不是你的钱；有钱人的技术，不但不能让你也成功，却能让你坠入万丈深渊。除了羡慕他们以外，你还能从他们那里得到什么呢？工作？绿卡？那些就是拴住你的无形锁链，让你为了别人的野心而廉价的出卖自己的青春。不得不说，出于“战略”考虑，你有时候确实可以妥协。然而不幸的是，自己妥协就算了，却总有人为了爬到更高处，把这种妥协作为教条，布道给更多的人。Blog 就是他们最重要的工具，写几个 post，抬出几个公司里的大牛，说自己跟他们关系多么接近，然后就把他们的“语录”下放给广大码农。最开头得到这信息的人，知道这只是临时的妥协，是这人往上爬的权宜之计。可是当这些东西越传越远，而没有人针锋相对，它就成为了真正的教条。所以“教主”们也许并不是罪魁祸首，而喜欢传教的人才是真正的罪魁祸首。不过也许，他们全都是罪魁祸首。这种罪，深深地植入到了每一个人的脑子里。\n\n\n这种现象发展到最后，就使得 IT 公司成为了最苦逼的工作场所。在你耳边，总是环绕着人们对各位大牛的崇拜之情。吃饭时谈论的，总是那些人的逸闻趣事。你的梦想，就是有一天能成为他们那样的人，或者能跟他们在同一个办公室工作。你失去了自己，你不再理解，世界上其实还有其它的活法。你永远不会明白，你所谓的“知识”和“技术”，是多么的肤浅。\n\n\n你低估了你自己的头脑的价值，这就是我想告诉你的。我批判你们心中的偶像，只不过是为了让我的身边存在几个拥有自己头脑的人，而不是每一次一起吃饭都无限卑微，让我慢慢地也感觉自己很卑微。你对大牛们的崇敬，你的“好学”精神，并不能得到我的好感。我只尊敬真正的勇士，那些尊敬他们自己的人。所以我写了这些东西，为了让你理解到你自己的价值，让你不再受蒙蔽，让你不再成为权威者们所谓的“知识”的奴隶，所谓的“技术”的学习者和执行者。\n\n\n我希望你成为一个创造者。每个人刚生下来的时候都是一个创造者。是所谓的“教育”，让你们失去了自己的思想。而真正的教育，其实是当你忘记在学校学会的知识之后，剩下来的东西。在这种意义上，任何国家的教育都是失败的，而不只是中国。所有的知识都是肤浅的，唯有得到它们的途径，才是真正的精髓。\n\nLink : [转载链接](http://www.yinwang.org/blog-cn/2014/05/04/value-of-criticism/)\n\n**ps：** 作者写的的确很发程序猿们深省，与大家共勉。:)\n","slug":"201406-2014-06-17-views-impression-1","published":1,"date":"2018-04-12T15:20:38.810Z","updated":"2018-04-12T15:20:38.810Z","comments":1,"photos":[],"link":"","_id":"cjfwomb3q0005ass6qzl97060","content":"<p>Author:YinWang</p>\n<p>总是有人告诉我，我不应该批评一些技术，特别是不应该在一些公认的“大牛”或者流行的技术头上动土。要做出自己的“成果”，这样才可以得到大家的“尊重”。首先，你可能没有发现，被我批判得最厉害的技术和人，其实也是最牛气哄哄，最以自己的地位压制其他人的（比如 Unix 和 Go 语言）。我从来没有尖锐地批评过一个朋友经过自己的努力，做出来的难看的小板凳。不管他如何幼稚，得到的总是我的鼓励和帮助，除非有一天他也变得牛气哄哄。而且，我觉得我的成果已经够多了，都是很多人想都想不到的东西，够写好几篇博士论文了。多得在我脑子里已经堆不下了，而且还在不断地产生。<a id=\"more\"></a>我从来不公开自己最新的想法，所以你们在这里看到的“惊人”的想法，全都是经过多年的思考和经验才得到的，全都是我司空见惯的。我的顶级水准的代码很多都放在网上，可是有谁知道它们是用来做什么的，它们的价值？所以我觉得虽然这种某些人希望我采用的“默默无闻”的方式，作为个人的策略，不失为一个混进“上流社会”好办法，然而这对于 IT 业和学术界的大环境，却并不能达到我希望的效果。其实恰恰相反，这种做法只会让我自己也成为这大环境的一部分，并且为维护它的各种谎言而耗费我的生命。</p>\n<p>我难道还不够“专心学术”吗？在 Cornell 和 Indiana 的日子里，有哪一天我不是沉迷于我梦想中的学术呢？在那段时间里，我从老师那里学会，外加自己的摸索，掌握了很多人难以想象的本质性的知识，纯净而美好的想法。我把学术都已经做到头了，做到超过世界的“前沿”很多年以后了。可是当我进入公司实习，进入业界工作，我看到了差距。这不是很多人所谓的“理想与现实的差距”，因为我所学到的并不是空洞而难以实现的“理想”，而是切实可行的，并且被证明为非常有效的做法。你能理解那种曾经生活在“未来”，现在却受累于各种历史包袱的感觉吗？我拥有“未来”的技术，为了它们我付出了巨额的生命和汗水。然而这种“未来”却是相对的，这些未来技术本应已经被广泛采用，却由于业界对各种低劣技术的商业炒作和宗教崇拜，显得离我们很远。或者更可怕一点，由于对低劣技术的商业炒作和宗教崇拜，被人认为是过时的东西。</p>\n<p>像很多有同样经历的人一样，我为了这些美好的理论和想法能被世人接受做出了努力。像他们一样，我不愿意得罪人，我做过好好先生，甚至说过奉承话。我以为只要我的想法比现有的好，就会逐渐被人接受，我觉得没有必要去批评不好的想法。有好几次在对一些事情进行尖锐的批评之后，我心理都在嘀咕，因为我深深地知道，我得罪了人，我烧毁了自己通向“成功”的桥梁，甚至也许会活不下去。有多少次把之前写过的文章藏起来，其实是为了让自己还可以继续在这个混世里面活下去。可是我发现这样下去，自己就活得越来越像一条狗，就像很多其他人一样。或者叫做沉默的羔羊。</p>\n<p>在这个技术的数字游戏里，只做加法而不做减法，是永远得不到正确的答案的，因为你的大作，将建立在摇摇欲坠的基础之上。你向混世妥协，然而混世并不会因此对你好一些。IT 公司里总是有人认为自己什么都懂，他们追随某些“大牛”的思想，因为那样他们就可以显得很牛，可以被重用。如果你有真知灼见，而这种人做了你的上司，那几乎是必然的矛盾，因为你将眼睁睁的看着自己憧憬中的项目一步步的走上一条不归的绝路。你的生命开始在“妥协”和“沟通”之间徘徊。你不好意思对上司的作法直接提出异议，然而当你想方设法进行“沟通”的时候，你发现虽然自己具有深入的洞察力，你的想法却总是被人们头脑中的各位“大牛”所压倒。你的洞察力和智力，比起那些水平其实不如你的大牛们的名气来说，简直一文不值。<br>这些大牛哪里来的如此大的威力？因为他们实际做出过什么“成功”的技术吗？在经过调查之后你惊讶的发现，根据对“成功”的定义，也许是的，也许不是的。他们也许做出过一些很多人在用的东西，然而很多人用的，却不一定是好东西，有可能是一个人人叫骂的东西。如果真有什么看得见摸得着的技术还好，可是很多所谓“牛人”其实不过是写过一本书，或者领导过一个“成功”的公司，或者只是有一个著名的 blog，上面写着一些和蔼可亲的入门级读物（我貌似也有嫌疑，然而我的 blog 非常有深度，而且我还有其他东西 :P）。有些公司也许算是一个成功的公司，然而它有先进的技术吗？如果你把商业的成功和技术的成功混为一谈，那再来谈所谓“技术进步”，那还有什么意义呢？于是你就看到了很多人的“拜金主义”，一直拜到了技术那里：有钱人的技术都是好技术！</p>\n<p>可惜的是，有钱人的钱，不是你的钱；有钱人的技术，不但不能让你也成功，却能让你坠入万丈深渊。除了羡慕他们以外，你还能从他们那里得到什么呢？工作？绿卡？那些就是拴住你的无形锁链，让你为了别人的野心而廉价的出卖自己的青春。不得不说，出于“战略”考虑，你有时候确实可以妥协。然而不幸的是，自己妥协就算了，却总有人为了爬到更高处，把这种妥协作为教条，布道给更多的人。Blog 就是他们最重要的工具，写几个 post，抬出几个公司里的大牛，说自己跟他们关系多么接近，然后就把他们的“语录”下放给广大码农。最开头得到这信息的人，知道这只是临时的妥协，是这人往上爬的权宜之计。可是当这些东西越传越远，而没有人针锋相对，它就成为了真正的教条。所以“教主”们也许并不是罪魁祸首，而喜欢传教的人才是真正的罪魁祸首。不过也许，他们全都是罪魁祸首。这种罪，深深地植入到了每一个人的脑子里。</p>\n<p>这种现象发展到最后，就使得 IT 公司成为了最苦逼的工作场所。在你耳边，总是环绕着人们对各位大牛的崇拜之情。吃饭时谈论的，总是那些人的逸闻趣事。你的梦想，就是有一天能成为他们那样的人，或者能跟他们在同一个办公室工作。你失去了自己，你不再理解，世界上其实还有其它的活法。你永远不会明白，你所谓的“知识”和“技术”，是多么的肤浅。</p>\n<p>你低估了你自己的头脑的价值，这就是我想告诉你的。我批判你们心中的偶像，只不过是为了让我的身边存在几个拥有自己头脑的人，而不是每一次一起吃饭都无限卑微，让我慢慢地也感觉自己很卑微。你对大牛们的崇敬，你的“好学”精神，并不能得到我的好感。我只尊敬真正的勇士，那些尊敬他们自己的人。所以我写了这些东西，为了让你理解到你自己的价值，让你不再受蒙蔽，让你不再成为权威者们所谓的“知识”的奴隶，所谓的“技术”的学习者和执行者。</p>\n<p>我希望你成为一个创造者。每个人刚生下来的时候都是一个创造者。是所谓的“教育”，让你们失去了自己的思想。而真正的教育，其实是当你忘记在学校学会的知识之后，剩下来的东西。在这种意义上，任何国家的教育都是失败的，而不只是中国。所有的知识都是肤浅的，唯有得到它们的途径，才是真正的精髓。</p>\n<p>Link : <a href=\"http://www.yinwang.org/blog-cn/2014/05/04/value-of-criticism/\" target=\"_blank\" rel=\"noopener\">转载链接</a></p>\n<p><strong>ps：</strong> 作者写的的确很发程序猿们深省，与大家共勉。:)</p>\n","site":{"data":{}},"excerpt":"<p>Author:YinWang</p>\n<p>总是有人告诉我，我不应该批评一些技术，特别是不应该在一些公认的“大牛”或者流行的技术头上动土。要做出自己的“成果”，这样才可以得到大家的“尊重”。首先，你可能没有发现，被我批判得最厉害的技术和人，其实也是最牛气哄哄，最以自己的地位压制其他人的（比如 Unix 和 Go 语言）。我从来没有尖锐地批评过一个朋友经过自己的努力，做出来的难看的小板凳。不管他如何幼稚，得到的总是我的鼓励和帮助，除非有一天他也变得牛气哄哄。而且，我觉得我的成果已经够多了，都是很多人想都想不到的东西，够写好几篇博士论文了。多得在我脑子里已经堆不下了，而且还在不断地产生。","more":"我从来不公开自己最新的想法，所以你们在这里看到的“惊人”的想法，全都是经过多年的思考和经验才得到的，全都是我司空见惯的。我的顶级水准的代码很多都放在网上，可是有谁知道它们是用来做什么的，它们的价值？所以我觉得虽然这种某些人希望我采用的“默默无闻”的方式，作为个人的策略，不失为一个混进“上流社会”好办法，然而这对于 IT 业和学术界的大环境，却并不能达到我希望的效果。其实恰恰相反，这种做法只会让我自己也成为这大环境的一部分，并且为维护它的各种谎言而耗费我的生命。</p>\n<p>我难道还不够“专心学术”吗？在 Cornell 和 Indiana 的日子里，有哪一天我不是沉迷于我梦想中的学术呢？在那段时间里，我从老师那里学会，外加自己的摸索，掌握了很多人难以想象的本质性的知识，纯净而美好的想法。我把学术都已经做到头了，做到超过世界的“前沿”很多年以后了。可是当我进入公司实习，进入业界工作，我看到了差距。这不是很多人所谓的“理想与现实的差距”，因为我所学到的并不是空洞而难以实现的“理想”，而是切实可行的，并且被证明为非常有效的做法。你能理解那种曾经生活在“未来”，现在却受累于各种历史包袱的感觉吗？我拥有“未来”的技术，为了它们我付出了巨额的生命和汗水。然而这种“未来”却是相对的，这些未来技术本应已经被广泛采用，却由于业界对各种低劣技术的商业炒作和宗教崇拜，显得离我们很远。或者更可怕一点，由于对低劣技术的商业炒作和宗教崇拜，被人认为是过时的东西。</p>\n<p>像很多有同样经历的人一样，我为了这些美好的理论和想法能被世人接受做出了努力。像他们一样，我不愿意得罪人，我做过好好先生，甚至说过奉承话。我以为只要我的想法比现有的好，就会逐渐被人接受，我觉得没有必要去批评不好的想法。有好几次在对一些事情进行尖锐的批评之后，我心理都在嘀咕，因为我深深地知道，我得罪了人，我烧毁了自己通向“成功”的桥梁，甚至也许会活不下去。有多少次把之前写过的文章藏起来，其实是为了让自己还可以继续在这个混世里面活下去。可是我发现这样下去，自己就活得越来越像一条狗，就像很多其他人一样。或者叫做沉默的羔羊。</p>\n<p>在这个技术的数字游戏里，只做加法而不做减法，是永远得不到正确的答案的，因为你的大作，将建立在摇摇欲坠的基础之上。你向混世妥协，然而混世并不会因此对你好一些。IT 公司里总是有人认为自己什么都懂，他们追随某些“大牛”的思想，因为那样他们就可以显得很牛，可以被重用。如果你有真知灼见，而这种人做了你的上司，那几乎是必然的矛盾，因为你将眼睁睁的看着自己憧憬中的项目一步步的走上一条不归的绝路。你的生命开始在“妥协”和“沟通”之间徘徊。你不好意思对上司的作法直接提出异议，然而当你想方设法进行“沟通”的时候，你发现虽然自己具有深入的洞察力，你的想法却总是被人们头脑中的各位“大牛”所压倒。你的洞察力和智力，比起那些水平其实不如你的大牛们的名气来说，简直一文不值。<br>这些大牛哪里来的如此大的威力？因为他们实际做出过什么“成功”的技术吗？在经过调查之后你惊讶的发现，根据对“成功”的定义，也许是的，也许不是的。他们也许做出过一些很多人在用的东西，然而很多人用的，却不一定是好东西，有可能是一个人人叫骂的东西。如果真有什么看得见摸得着的技术还好，可是很多所谓“牛人”其实不过是写过一本书，或者领导过一个“成功”的公司，或者只是有一个著名的 blog，上面写着一些和蔼可亲的入门级读物（我貌似也有嫌疑，然而我的 blog 非常有深度，而且我还有其他东西 :P）。有些公司也许算是一个成功的公司，然而它有先进的技术吗？如果你把商业的成功和技术的成功混为一谈，那再来谈所谓“技术进步”，那还有什么意义呢？于是你就看到了很多人的“拜金主义”，一直拜到了技术那里：有钱人的技术都是好技术！</p>\n<p>可惜的是，有钱人的钱，不是你的钱；有钱人的技术，不但不能让你也成功，却能让你坠入万丈深渊。除了羡慕他们以外，你还能从他们那里得到什么呢？工作？绿卡？那些就是拴住你的无形锁链，让你为了别人的野心而廉价的出卖自己的青春。不得不说，出于“战略”考虑，你有时候确实可以妥协。然而不幸的是，自己妥协就算了，却总有人为了爬到更高处，把这种妥协作为教条，布道给更多的人。Blog 就是他们最重要的工具，写几个 post，抬出几个公司里的大牛，说自己跟他们关系多么接近，然后就把他们的“语录”下放给广大码农。最开头得到这信息的人，知道这只是临时的妥协，是这人往上爬的权宜之计。可是当这些东西越传越远，而没有人针锋相对，它就成为了真正的教条。所以“教主”们也许并不是罪魁祸首，而喜欢传教的人才是真正的罪魁祸首。不过也许，他们全都是罪魁祸首。这种罪，深深地植入到了每一个人的脑子里。</p>\n<p>这种现象发展到最后，就使得 IT 公司成为了最苦逼的工作场所。在你耳边，总是环绕着人们对各位大牛的崇拜之情。吃饭时谈论的，总是那些人的逸闻趣事。你的梦想，就是有一天能成为他们那样的人，或者能跟他们在同一个办公室工作。你失去了自己，你不再理解，世界上其实还有其它的活法。你永远不会明白，你所谓的“知识”和“技术”，是多么的肤浅。</p>\n<p>你低估了你自己的头脑的价值，这就是我想告诉你的。我批判你们心中的偶像，只不过是为了让我的身边存在几个拥有自己头脑的人，而不是每一次一起吃饭都无限卑微，让我慢慢地也感觉自己很卑微。你对大牛们的崇敬，你的“好学”精神，并不能得到我的好感。我只尊敬真正的勇士，那些尊敬他们自己的人。所以我写了这些东西，为了让你理解到你自己的价值，让你不再受蒙蔽，让你不再成为权威者们所谓的“知识”的奴隶，所谓的“技术”的学习者和执行者。</p>\n<p>我希望你成为一个创造者。每个人刚生下来的时候都是一个创造者。是所谓的“教育”，让你们失去了自己的思想。而真正的教育，其实是当你忘记在学校学会的知识之后，剩下来的东西。在这种意义上，任何国家的教育都是失败的，而不只是中国。所有的知识都是肤浅的，唯有得到它们的途径，才是真正的精髓。</p>\n<p>Link : <a href=\"http://www.yinwang.org/blog-cn/2014/05/04/value-of-criticism/\" target=\"_blank\" rel=\"noopener\">转载链接</a></p>\n<p><strong>ps：</strong> 作者写的的确很发程序猿们深省，与大家共勉。:)</p>"},{"layout":"post","title":"PHP对数据库取出和插入数据进行过滤","_content":"首先，介绍个很有用的函数htmlspecialchars（），相信大家都不陌生吧，没错，这个函数就是把一些预定义的字符转换为HTML实体输出。\n\n包括的预定义字符有：\n\n    \n    & （和号） 成为 &amp;\n    \" （双引号） 成为 &quot;\n    ' （单引号） 成为 &#039;\n    < （小于） 成为 &lt;\n    > （大于） 成为 &gt;\n    \n\n当然，这里不仅仅只是为了介绍函数而总结的，那样就太没意思了...\n\n有时候，当我们在从模型中取出想要的数据时，可能包含一些预定义的字符（比如css、js样式），这时，如果我们不对它们进行处理就很可能破坏掉前端的页面，造成意想不到的后果，所以，对数据进行转义是个很好的习惯。\n\n<!--more-->\n\n**如果只是单纯的是处理字符串，我们可以这样处理：**\n\n    <?php   \n        //对数据库取出的数据进行递归过滤  \n        //$date默认为从数据库中取出的数据  \n        $str = htmlspecialchars($date);   \n    ?>  \n    \n**如果取出的数据是数组呢，怎么办奥？小意思，这样来...**\n\n     <?php   \n      //对数据库取出的数据进行递归过滤   \n      //$date默认为从数据库中取出的数据  \n       function htmlString ($date) {  \n            if (is_array($date)) {  \n                foreach ($date as $key => $value) {  \n                $str[$key] = htmlString($value);    //递归调用函数  \n                }  \n            } else {  \n                $str = htmlspecialchars($date);  \n            }  \n            return $str;  \n        }  \n    ?>  \n    \n**如果数据是对象呢，咋办？**\n\n    <?php   \n    //对数据库取出的数据进行递归过滤  \n    //$date默认为从数据库中取出的数据  \n    function htmlString ($date) {  \n        if (is_object($date)) {  \n            foreach ($date as $key => $value) {  \n            $str->$key = htmlString($value); //递归调用函数  \n            }  \n        } else {  \n            $str = htmlspecialchars($date);  \n        }  \n        return $str;  \n    }  \n    ?> \n    \n**总结一下，对于不知道类型的数据，我们当然得进行分类考虑了，而且使用递归调用处理数据，直接上代码：**\n    \n    <?php   \n    //对数据库取出的数据进行递归过滤  \n    //$date默认为从数据库中取出的数据  \n    function htmlString ($date) {  \n        if (is_array($date)) {  \n            //数组  \n            foreach ($date as $key => $value) {  \n                $_string[$key] = htmlString($value);    //递归  \n            }  \n        }elseif (is_object($date)) {  \n            //对象  \n            foreach ($date as $key => $value) {  \n                $_string->$key = htmlString($value); //递归  \n             }         \n        } else {  \n            //其他  \n            $_string = htmlspecialchars($date);  \n        }  \n        return $_string;  \n     }  \n    ?>  \n    \n\n**当然,这是从数据库取出数据来进行过滤的，那当插入数据峙该如何处理呢？当然是递归转义字符了，使用的是addslashes()函数，直接上代码：**\n\n    // 递归转义\n    function _addslashes($arr) {\n        foreach($arr as $k=>$v) {\n            if(is_string($v)) {\n                $arr[$k] = addslashes($v);\n            } else if(is_array($v)) {  // 再加判断,如果是数组,调用自身,再转\n                $arr[$k] = _addslashes($v);\n            }\n        }\n        return $arr;\n    }\n    \n*虽然，不是特别很有技术含量，不过，为了防止忘记这种过滤参数的方法，还是总结下来了:）*\n\n\n\n    \n\n    ","source":"_posts/201406/2014-06-18-b_php_5_data_filter_1.md","raw":"---\nlayout : post\ntitle : \"PHP对数据库取出和插入数据进行过滤\"\ncategory : PHP\ntags : PHP 递归 \n---\n首先，介绍个很有用的函数htmlspecialchars（），相信大家都不陌生吧，没错，这个函数就是把一些预定义的字符转换为HTML实体输出。\n\n包括的预定义字符有：\n\n    \n    & （和号） 成为 &amp;\n    \" （双引号） 成为 &quot;\n    ' （单引号） 成为 &#039;\n    < （小于） 成为 &lt;\n    > （大于） 成为 &gt;\n    \n\n当然，这里不仅仅只是为了介绍函数而总结的，那样就太没意思了...\n\n有时候，当我们在从模型中取出想要的数据时，可能包含一些预定义的字符（比如css、js样式），这时，如果我们不对它们进行处理就很可能破坏掉前端的页面，造成意想不到的后果，所以，对数据进行转义是个很好的习惯。\n\n<!--more-->\n\n**如果只是单纯的是处理字符串，我们可以这样处理：**\n\n    <?php   \n        //对数据库取出的数据进行递归过滤  \n        //$date默认为从数据库中取出的数据  \n        $str = htmlspecialchars($date);   \n    ?>  \n    \n**如果取出的数据是数组呢，怎么办奥？小意思，这样来...**\n\n     <?php   \n      //对数据库取出的数据进行递归过滤   \n      //$date默认为从数据库中取出的数据  \n       function htmlString ($date) {  \n            if (is_array($date)) {  \n                foreach ($date as $key => $value) {  \n                $str[$key] = htmlString($value);    //递归调用函数  \n                }  \n            } else {  \n                $str = htmlspecialchars($date);  \n            }  \n            return $str;  \n        }  \n    ?>  \n    \n**如果数据是对象呢，咋办？**\n\n    <?php   \n    //对数据库取出的数据进行递归过滤  \n    //$date默认为从数据库中取出的数据  \n    function htmlString ($date) {  \n        if (is_object($date)) {  \n            foreach ($date as $key => $value) {  \n            $str->$key = htmlString($value); //递归调用函数  \n            }  \n        } else {  \n            $str = htmlspecialchars($date);  \n        }  \n        return $str;  \n    }  \n    ?> \n    \n**总结一下，对于不知道类型的数据，我们当然得进行分类考虑了，而且使用递归调用处理数据，直接上代码：**\n    \n    <?php   \n    //对数据库取出的数据进行递归过滤  \n    //$date默认为从数据库中取出的数据  \n    function htmlString ($date) {  \n        if (is_array($date)) {  \n            //数组  \n            foreach ($date as $key => $value) {  \n                $_string[$key] = htmlString($value);    //递归  \n            }  \n        }elseif (is_object($date)) {  \n            //对象  \n            foreach ($date as $key => $value) {  \n                $_string->$key = htmlString($value); //递归  \n             }         \n        } else {  \n            //其他  \n            $_string = htmlspecialchars($date);  \n        }  \n        return $_string;  \n     }  \n    ?>  \n    \n\n**当然,这是从数据库取出数据来进行过滤的，那当插入数据峙该如何处理呢？当然是递归转义字符了，使用的是addslashes()函数，直接上代码：**\n\n    // 递归转义\n    function _addslashes($arr) {\n        foreach($arr as $k=>$v) {\n            if(is_string($v)) {\n                $arr[$k] = addslashes($v);\n            } else if(is_array($v)) {  // 再加判断,如果是数组,调用自身,再转\n                $arr[$k] = _addslashes($v);\n            }\n        }\n        return $arr;\n    }\n    \n*虽然，不是特别很有技术含量，不过，为了防止忘记这种过滤参数的方法，还是总结下来了:）*\n\n\n\n    \n\n    ","slug":"201406-2014-06-18-b-php-5-data-filter-1","published":1,"date":"2018-04-12T15:20:38.810Z","updated":"2018-04-12T15:20:38.810Z","comments":1,"photos":[],"link":"","_id":"cjfwomb3r0006ass6z7fkkjr7","content":"<p>首先，介绍个很有用的函数htmlspecialchars（），相信大家都不陌生吧，没错，这个函数就是把一些预定义的字符转换为HTML实体输出。</p>\n<p>包括的预定义字符有：</p>\n<pre><code>&amp; （和号） 成为 &amp;amp;\n&quot; （双引号） 成为 &amp;quot;\n&apos; （单引号） 成为 &amp;#039;\n&lt; （小于） 成为 &amp;lt;\n&gt; （大于） 成为 &amp;gt;\n</code></pre><p>当然，这里不仅仅只是为了介绍函数而总结的，那样就太没意思了…</p>\n<p>有时候，当我们在从模型中取出想要的数据时，可能包含一些预定义的字符（比如css、js样式），这时，如果我们不对它们进行处理就很可能破坏掉前端的页面，造成意想不到的后果，所以，对数据进行转义是个很好的习惯。</p>\n<a id=\"more\"></a>\n<p><strong>如果只是单纯的是处理字符串，我们可以这样处理：</strong></p>\n<pre><code>&lt;?php   \n    //对数据库取出的数据进行递归过滤  \n    //$date默认为从数据库中取出的数据  \n    $str = htmlspecialchars($date);   \n?&gt;  \n</code></pre><p><strong>如果取出的数据是数组呢，怎么办奥？小意思，这样来…</strong></p>\n<pre><code> &lt;?php   \n  //对数据库取出的数据进行递归过滤   \n  //$date默认为从数据库中取出的数据  \n   function htmlString ($date) {  \n        if (is_array($date)) {  \n            foreach ($date as $key =&gt; $value) {  \n            $str[$key] = htmlString($value);    //递归调用函数  \n            }  \n        } else {  \n            $str = htmlspecialchars($date);  \n        }  \n        return $str;  \n    }  \n?&gt;  \n</code></pre><p><strong>如果数据是对象呢，咋办？</strong></p>\n<pre><code>&lt;?php   \n//对数据库取出的数据进行递归过滤  \n//$date默认为从数据库中取出的数据  \nfunction htmlString ($date) {  \n    if (is_object($date)) {  \n        foreach ($date as $key =&gt; $value) {  \n        $str-&gt;$key = htmlString($value); //递归调用函数  \n        }  \n    } else {  \n        $str = htmlspecialchars($date);  \n    }  \n    return $str;  \n}  \n?&gt; \n</code></pre><p><strong>总结一下，对于不知道类型的数据，我们当然得进行分类考虑了，而且使用递归调用处理数据，直接上代码：</strong></p>\n<pre><code>&lt;?php   \n//对数据库取出的数据进行递归过滤  \n//$date默认为从数据库中取出的数据  \nfunction htmlString ($date) {  \n    if (is_array($date)) {  \n        //数组  \n        foreach ($date as $key =&gt; $value) {  \n            $_string[$key] = htmlString($value);    //递归  \n        }  \n    }elseif (is_object($date)) {  \n        //对象  \n        foreach ($date as $key =&gt; $value) {  \n            $_string-&gt;$key = htmlString($value); //递归  \n         }         \n    } else {  \n        //其他  \n        $_string = htmlspecialchars($date);  \n    }  \n    return $_string;  \n }  \n?&gt;  \n</code></pre><p><strong>当然,这是从数据库取出数据来进行过滤的，那当插入数据峙该如何处理呢？当然是递归转义字符了，使用的是addslashes()函数，直接上代码：</strong></p>\n<pre><code>// 递归转义\nfunction _addslashes($arr) {\n    foreach($arr as $k=&gt;$v) {\n        if(is_string($v)) {\n            $arr[$k] = addslashes($v);\n        } else if(is_array($v)) {  // 再加判断,如果是数组,调用自身,再转\n            $arr[$k] = _addslashes($v);\n        }\n    }\n    return $arr;\n}\n</code></pre><p><em>虽然，不是特别很有技术含量，不过，为了防止忘记这种过滤参数的方法，还是总结下来了:）</em></p>\n","site":{"data":{}},"excerpt":"<p>首先，介绍个很有用的函数htmlspecialchars（），相信大家都不陌生吧，没错，这个函数就是把一些预定义的字符转换为HTML实体输出。</p>\n<p>包括的预定义字符有：</p>\n<pre><code>&amp; （和号） 成为 &amp;amp;\n&quot; （双引号） 成为 &amp;quot;\n&apos; （单引号） 成为 &amp;#039;\n&lt; （小于） 成为 &amp;lt;\n&gt; （大于） 成为 &amp;gt;\n</code></pre><p>当然，这里不仅仅只是为了介绍函数而总结的，那样就太没意思了…</p>\n<p>有时候，当我们在从模型中取出想要的数据时，可能包含一些预定义的字符（比如css、js样式），这时，如果我们不对它们进行处理就很可能破坏掉前端的页面，造成意想不到的后果，所以，对数据进行转义是个很好的习惯。</p>","more":"<p><strong>如果只是单纯的是处理字符串，我们可以这样处理：</strong></p>\n<pre><code>&lt;?php   \n    //对数据库取出的数据进行递归过滤  \n    //$date默认为从数据库中取出的数据  \n    $str = htmlspecialchars($date);   \n?&gt;  \n</code></pre><p><strong>如果取出的数据是数组呢，怎么办奥？小意思，这样来…</strong></p>\n<pre><code> &lt;?php   \n  //对数据库取出的数据进行递归过滤   \n  //$date默认为从数据库中取出的数据  \n   function htmlString ($date) {  \n        if (is_array($date)) {  \n            foreach ($date as $key =&gt; $value) {  \n            $str[$key] = htmlString($value);    //递归调用函数  \n            }  \n        } else {  \n            $str = htmlspecialchars($date);  \n        }  \n        return $str;  \n    }  \n?&gt;  \n</code></pre><p><strong>如果数据是对象呢，咋办？</strong></p>\n<pre><code>&lt;?php   \n//对数据库取出的数据进行递归过滤  \n//$date默认为从数据库中取出的数据  \nfunction htmlString ($date) {  \n    if (is_object($date)) {  \n        foreach ($date as $key =&gt; $value) {  \n        $str-&gt;$key = htmlString($value); //递归调用函数  \n        }  \n    } else {  \n        $str = htmlspecialchars($date);  \n    }  \n    return $str;  \n}  \n?&gt; \n</code></pre><p><strong>总结一下，对于不知道类型的数据，我们当然得进行分类考虑了，而且使用递归调用处理数据，直接上代码：</strong></p>\n<pre><code>&lt;?php   \n//对数据库取出的数据进行递归过滤  \n//$date默认为从数据库中取出的数据  \nfunction htmlString ($date) {  \n    if (is_array($date)) {  \n        //数组  \n        foreach ($date as $key =&gt; $value) {  \n            $_string[$key] = htmlString($value);    //递归  \n        }  \n    }elseif (is_object($date)) {  \n        //对象  \n        foreach ($date as $key =&gt; $value) {  \n            $_string-&gt;$key = htmlString($value); //递归  \n         }         \n    } else {  \n        //其他  \n        $_string = htmlspecialchars($date);  \n    }  \n    return $_string;  \n }  \n?&gt;  \n</code></pre><p><strong>当然,这是从数据库取出数据来进行过滤的，那当插入数据峙该如何处理呢？当然是递归转义字符了，使用的是addslashes()函数，直接上代码：</strong></p>\n<pre><code>// 递归转义\nfunction _addslashes($arr) {\n    foreach($arr as $k=&gt;$v) {\n        if(is_string($v)) {\n            $arr[$k] = addslashes($v);\n        } else if(is_array($v)) {  // 再加判断,如果是数组,调用自身,再转\n            $arr[$k] = _addslashes($v);\n        }\n    }\n    return $arr;\n}\n</code></pre><p><em>虽然，不是特别很有技术含量，不过，为了防止忘记这种过滤参数的方法，还是总结下来了:）</em></p>"},{"layout":"post","title":"Web部署UEditor编辑器实现","_content":"当我们部署自己的博客或者其他内容管理系统站点时，都不可或缺的需要发布内容的编辑器来实现编写内容的功能模块，而网站内容发布编辑器有很多，下面介绍下UEditor的使用：\n\n**首先** 到官网下载最新的UEditor发布版本，[下载链接](http://ueditor.baidu.com/website/download.html)\n\n**其次** 解压缩下载包到本地的文件夹\n\n**然后** 在html页面中添加js代码\n\n\t<js file=\"路径/ueditor/ueditor.config.js\" />\n\t<js file=\"路径/ueditor/ueditor.all.min.js\" />\n\n<!--more-->\n\n**再然后** 设置编辑器，并添加编辑器的实例化代码：\n\n\t<script type=\"text/javascript\">\n\t\twindow.UEDITOR_HOME_URL = '路径/ueditor/';\n\t\twindow.onload = function () {\n\t\t\twindow.UEDITOR_CONFIG.initialFrameHeight = 600;\t//可更改\n\t\t\twindow.UEDITOR_CONFIG.initialFrameWidth = 1200; //可更改\n\t\t\tUE.getEditor('content');\n\t\t}\n\t</script>\n\n**最后** 如果看到以下这样的编辑器，说明已经部署成功：\n\n![图片](http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehkj3953ltj20yf043wfq.jpg)\n\n\n____\n_下面是压缩包解压缩后的目录_\n\n![图片](http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehkj36avaej208j07nwf3.jpg)\n\n\n\n\n","source":"_posts/201406/2014-06-18-web_font_ueditor_1.md","raw":"---\nlayout : post\ntitle : \"Web部署UEditor编辑器实现\"\ncategory : 前端\ntags : [UEditor]\n---\n当我们部署自己的博客或者其他内容管理系统站点时，都不可或缺的需要发布内容的编辑器来实现编写内容的功能模块，而网站内容发布编辑器有很多，下面介绍下UEditor的使用：\n\n**首先** 到官网下载最新的UEditor发布版本，[下载链接](http://ueditor.baidu.com/website/download.html)\n\n**其次** 解压缩下载包到本地的文件夹\n\n**然后** 在html页面中添加js代码\n\n\t<js file=\"路径/ueditor/ueditor.config.js\" />\n\t<js file=\"路径/ueditor/ueditor.all.min.js\" />\n\n<!--more-->\n\n**再然后** 设置编辑器，并添加编辑器的实例化代码：\n\n\t<script type=\"text/javascript\">\n\t\twindow.UEDITOR_HOME_URL = '路径/ueditor/';\n\t\twindow.onload = function () {\n\t\t\twindow.UEDITOR_CONFIG.initialFrameHeight = 600;\t//可更改\n\t\t\twindow.UEDITOR_CONFIG.initialFrameWidth = 1200; //可更改\n\t\t\tUE.getEditor('content');\n\t\t}\n\t</script>\n\n**最后** 如果看到以下这样的编辑器，说明已经部署成功：\n\n![图片](http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehkj3953ltj20yf043wfq.jpg)\n\n\n____\n_下面是压缩包解压缩后的目录_\n\n![图片](http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehkj36avaej208j07nwf3.jpg)\n\n\n\n\n","slug":"201406-2014-06-18-web-font-ueditor-1","published":1,"date":"2018-04-12T15:20:38.811Z","updated":"2018-04-12T15:20:38.811Z","comments":1,"photos":[],"link":"","_id":"cjfwomb3t000aass6tqukl225","content":"<p>当我们部署自己的博客或者其他内容管理系统站点时，都不可或缺的需要发布内容的编辑器来实现编写内容的功能模块，而网站内容发布编辑器有很多，下面介绍下UEditor的使用：</p>\n<p><strong>首先</strong> 到官网下载最新的UEditor发布版本，<a href=\"http://ueditor.baidu.com/website/download.html\" target=\"_blank\" rel=\"noopener\">下载链接</a></p>\n<p><strong>其次</strong> 解压缩下载包到本地的文件夹</p>\n<p><strong>然后</strong> 在html页面中添加js代码</p>\n<pre><code>&lt;js file=&quot;路径/ueditor/ueditor.config.js&quot; /&gt;\n&lt;js file=&quot;路径/ueditor/ueditor.all.min.js&quot; /&gt;\n</code></pre><a id=\"more\"></a>\n<p><strong>再然后</strong> 设置编辑器，并添加编辑器的实例化代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    window.UEDITOR_HOME_URL = &apos;路径/ueditor/&apos;;\n    window.onload = function () {\n        window.UEDITOR_CONFIG.initialFrameHeight = 600;    //可更改\n        window.UEDITOR_CONFIG.initialFrameWidth = 1200; //可更改\n        UE.getEditor(&apos;content&apos;);\n    }\n&lt;/script&gt;\n</code></pre><p><strong>最后</strong> 如果看到以下这样的编辑器，说明已经部署成功：</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehkj3953ltj20yf043wfq.jpg\" alt=\"图片\"></p>\n<hr>\n<p><em>下面是压缩包解压缩后的目录</em></p>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehkj36avaej208j07nwf3.jpg\" alt=\"图片\"></p>\n","site":{"data":{}},"excerpt":"<p>当我们部署自己的博客或者其他内容管理系统站点时，都不可或缺的需要发布内容的编辑器来实现编写内容的功能模块，而网站内容发布编辑器有很多，下面介绍下UEditor的使用：</p>\n<p><strong>首先</strong> 到官网下载最新的UEditor发布版本，<a href=\"http://ueditor.baidu.com/website/download.html\" target=\"_blank\" rel=\"noopener\">下载链接</a></p>\n<p><strong>其次</strong> 解压缩下载包到本地的文件夹</p>\n<p><strong>然后</strong> 在html页面中添加js代码</p>\n<pre><code>&lt;js file=&quot;路径/ueditor/ueditor.config.js&quot; /&gt;\n&lt;js file=&quot;路径/ueditor/ueditor.all.min.js&quot; /&gt;\n</code></pre>","more":"<p><strong>再然后</strong> 设置编辑器，并添加编辑器的实例化代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    window.UEDITOR_HOME_URL = &apos;路径/ueditor/&apos;;\n    window.onload = function () {\n        window.UEDITOR_CONFIG.initialFrameHeight = 600;    //可更改\n        window.UEDITOR_CONFIG.initialFrameWidth = 1200; //可更改\n        UE.getEditor(&apos;content&apos;);\n    }\n&lt;/script&gt;\n</code></pre><p><strong>最后</strong> 如果看到以下这样的编辑器，说明已经部署成功：</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehkj3953ltj20yf043wfq.jpg\" alt=\"图片\"></p>\n<hr>\n<p><em>下面是压缩包解压缩后的目录</em></p>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehkj36avaej208j07nwf3.jpg\" alt=\"图片\"></p>"},{"layout":"post","title":"安装分布式版本控制系统Git","_content":"Git是什么？Git是世界上最先进的分布式版本控制系统。\n\nGit有什么特点？简单说就是：高端大气上档次！\n\n那么什么是版本控制系统呢？自己[百度](http://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F)去。\n\n很多人都知道，李纳斯创建了开源的Linux，从那时起Linux不断发展，已经成为最大的服务器系统软件了。李纳斯虽然创建了Linux，但Linux的壮大是靠全世界热心的hacker参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？\n\n李纳斯花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！**大神**是怎么定义的呢？大家可以体会一下。\n\n<!--more-->\n\n要使用Git，毋庸置疑首先得要先安装Git了，现在Git已经在Unix、Linux、Mac和Windows上正常运行了。下面，一步步来安装Git：\n\n##Linux上安装Git\n\n首先，在命令行输入`git`查看系统是否已经安装好了。若你是用的是Debian或者Ubuntu，可以直接输入命令`sudo apt-get install git`就可以直接根据依赖关系自动安装好，很简单、方便。如果是Redhat系列的linux版本，则可以使用`yum`命令或者使用下载好的源代码来安装。\n\n源代码安装：\n\n\t./config\n\tmake\n\tmake install\n\n##Windows安装Git\n\n说实话，笔者是非常讨厌Windows操作系统的，存在各种兼容性等其他问题，而我们潜移默化都在受Windows的影响，对于Linux就不存在这个问题了，Linux的开源思想的确对本人影响很大，这里不再赘余这些。\n\n我么只需下载exe的Git安装程序，一直点‘下一步’默认安装就ok。在开始菜单里找到Git->Git bash，就说明安装成功。\n\n##安装后配置\n\n在命令行输入：\n\n\t$ git config -- global user.name \"你的名字\"\n\t$ git config -- global user.email \"你的邮箱\"\n\n因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。\n\n注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n","source":"_posts/201406/2014-06-19-git_install_process_notes.md","raw":"---\nlayout : post\ntitle : \"安装分布式版本控制系统Git\"\ncategory : Git\ntags : 分布式版本控制 Git\n---\nGit是什么？Git是世界上最先进的分布式版本控制系统。\n\nGit有什么特点？简单说就是：高端大气上档次！\n\n那么什么是版本控制系统呢？自己[百度](http://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F)去。\n\n很多人都知道，李纳斯创建了开源的Linux，从那时起Linux不断发展，已经成为最大的服务器系统软件了。李纳斯虽然创建了Linux，但Linux的壮大是靠全世界热心的hacker参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？\n\n李纳斯花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！**大神**是怎么定义的呢？大家可以体会一下。\n\n<!--more-->\n\n要使用Git，毋庸置疑首先得要先安装Git了，现在Git已经在Unix、Linux、Mac和Windows上正常运行了。下面，一步步来安装Git：\n\n##Linux上安装Git\n\n首先，在命令行输入`git`查看系统是否已经安装好了。若你是用的是Debian或者Ubuntu，可以直接输入命令`sudo apt-get install git`就可以直接根据依赖关系自动安装好，很简单、方便。如果是Redhat系列的linux版本，则可以使用`yum`命令或者使用下载好的源代码来安装。\n\n源代码安装：\n\n\t./config\n\tmake\n\tmake install\n\n##Windows安装Git\n\n说实话，笔者是非常讨厌Windows操作系统的，存在各种兼容性等其他问题，而我们潜移默化都在受Windows的影响，对于Linux就不存在这个问题了，Linux的开源思想的确对本人影响很大，这里不再赘余这些。\n\n我么只需下载exe的Git安装程序，一直点‘下一步’默认安装就ok。在开始菜单里找到Git->Git bash，就说明安装成功。\n\n##安装后配置\n\n在命令行输入：\n\n\t$ git config -- global user.name \"你的名字\"\n\t$ git config -- global user.email \"你的邮箱\"\n\n因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。\n\n注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n","slug":"201406-2014-06-19-git-install-process-notes","published":1,"date":"2018-04-12T15:20:38.811Z","updated":"2018-04-12T15:20:38.811Z","comments":1,"photos":[],"link":"","_id":"cjfwomb3v000bass6jgu27lz4","content":"<p>Git是什么？Git是世界上最先进的分布式版本控制系统。</p>\n<p>Git有什么特点？简单说就是：高端大气上档次！</p>\n<p>那么什么是版本控制系统呢？自己<a href=\"http://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F\" target=\"_blank\" rel=\"noopener\">百度</a>去。</p>\n<p>很多人都知道，李纳斯创建了开源的Linux，从那时起Linux不断发展，已经成为最大的服务器系统软件了。李纳斯虽然创建了Linux，但Linux的壮大是靠全世界热心的hacker参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p>\n<p>李纳斯花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！<strong>大神</strong>是怎么定义的呢？大家可以体会一下。</p>\n<a id=\"more\"></a>\n<p>要使用Git，毋庸置疑首先得要先安装Git了，现在Git已经在Unix、Linux、Mac和Windows上正常运行了。下面，一步步来安装Git：</p>\n<p>##Linux上安装Git</p>\n<p>首先，在命令行输入<code>git</code>查看系统是否已经安装好了。若你是用的是Debian或者Ubuntu，可以直接输入命令<code>sudo apt-get install git</code>就可以直接根据依赖关系自动安装好，很简单、方便。如果是Redhat系列的linux版本，则可以使用<code>yum</code>命令或者使用下载好的源代码来安装。</p>\n<p>源代码安装：</p>\n<pre><code>./config\nmake\nmake install\n</code></pre><p>##Windows安装Git</p>\n<p>说实话，笔者是非常讨厌Windows操作系统的，存在各种兼容性等其他问题，而我们潜移默化都在受Windows的影响，对于Linux就不存在这个问题了，Linux的开源思想的确对本人影响很大，这里不再赘余这些。</p>\n<p>我么只需下载exe的Git安装程序，一直点‘下一步’默认安装就ok。在开始菜单里找到Git-&gt;Git bash，就说明安装成功。</p>\n<p>##安装后配置</p>\n<p>在命令行输入：</p>\n<pre><code>$ git config -- global user.name &quot;你的名字&quot;\n$ git config -- global user.email &quot;你的邮箱&quot;\n</code></pre><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>\n<p>注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n","site":{"data":{}},"excerpt":"<p>Git是什么？Git是世界上最先进的分布式版本控制系统。</p>\n<p>Git有什么特点？简单说就是：高端大气上档次！</p>\n<p>那么什么是版本控制系统呢？自己<a href=\"http://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F\" target=\"_blank\" rel=\"noopener\">百度</a>去。</p>\n<p>很多人都知道，李纳斯创建了开源的Linux，从那时起Linux不断发展，已经成为最大的服务器系统软件了。李纳斯虽然创建了Linux，但Linux的壮大是靠全世界热心的hacker参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p>\n<p>李纳斯花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！<strong>大神</strong>是怎么定义的呢？大家可以体会一下。</p>","more":"<p>要使用Git，毋庸置疑首先得要先安装Git了，现在Git已经在Unix、Linux、Mac和Windows上正常运行了。下面，一步步来安装Git：</p>\n<p>##Linux上安装Git</p>\n<p>首先，在命令行输入<code>git</code>查看系统是否已经安装好了。若你是用的是Debian或者Ubuntu，可以直接输入命令<code>sudo apt-get install git</code>就可以直接根据依赖关系自动安装好，很简单、方便。如果是Redhat系列的linux版本，则可以使用<code>yum</code>命令或者使用下载好的源代码来安装。</p>\n<p>源代码安装：</p>\n<pre><code>./config\nmake\nmake install\n</code></pre><p>##Windows安装Git</p>\n<p>说实话，笔者是非常讨厌Windows操作系统的，存在各种兼容性等其他问题，而我们潜移默化都在受Windows的影响，对于Linux就不存在这个问题了，Linux的开源思想的确对本人影响很大，这里不再赘余这些。</p>\n<p>我么只需下载exe的Git安装程序，一直点‘下一步’默认安装就ok。在开始菜单里找到Git-&gt;Git bash，就说明安装成功。</p>\n<p>##安装后配置</p>\n<p>在命令行输入：</p>\n<pre><code>$ git config -- global user.name &quot;你的名字&quot;\n$ git config -- global user.email &quot;你的邮箱&quot;\n</code></pre><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>\n<p>注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>"},{"layout":"post","title":"Git创建版本库和查看工作区状态","_content":"什么是版本库呢？版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”.\n\n首先，选择一个合适的地方，创建一个空目录：\n\n\t$ mkdir learngit\n\t$ cd learngit\n\n**注意：** 如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。\n\n然后，通过`git init`命令把该目录变成Git可以管理的仓库：\n\n\t$ git init\n\n<!--more-->\n\n\n此时，Git就把仓库建好了，而且告诉你是一个空的仓库`empty Git repository`，可以发现当前目录下多了一个`.git`的目录，这个目录是Git来跟踪管理版本库的，不要随便修改里面的文件。\n\n###把文件添加到版本库\n\n*明确一下*，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。\n\n废话不多说，在learngit目录下我们创建一个`readme.md`文件，并添加一些内容：\n\t\n\t$ git is a free software.\n\n完成文件添加版本库，分两步一起来完成：\n\t\n第一步：使用`git add`告诉git把文件添加到版本库\n\n\t$ git add ./readme.md\n\n第二步，使用`git commit`告诉git把文件提交到仓库\n\n\t$ git commit -m 'add a new file'\n\n`git commit`命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。\n\n\n###查看工作区状态\n\n我们已经成功提交了一个readme.md文件，现在我们继续修改该文件，添加：\n\t\n\tGit is a distritbuted version control system.\n\nNow,我们运行`git status` 来查看此时的仓库状态：\n\t\n\t$ git status\n\ngit status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.md被修改过了，但还没有准备提交的修改。\n\n虽然Git告诉我们readme.md被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你周一上班时，已经记不清上次怎么修改的readme.md，所以，需要用`git diff`这个命令看看：\n\n\t$ git diff\n\n知道了做了什么修改后，就可以提交新文件了：\n\n\t$ git add ./readme.md\n\t$ git commit -m '***'\n\n此时，再次运行`git status`来查看状态，git会告诉我们当前没有需要提交的修改，工作目录是干净的`working directory clean`。\n\n\n###总结一下：\n\n1、初始化仓库：`git init`\n\n2、添加文件到仓库：\n\t\n\t第一步：git add \t//可添加多个文件\n\t第二步：git commit\n\n3、查看工作区状态：`git status`\n\n4、查看修改内容： `git diff`\n\n(完)\n\n","source":"_posts/201406/2014-06-19-git_kcreate_repository_notes.md","raw":"---\nlayout : post\ntitle : \"Git创建版本库和查看工作区状态\"\ncategory : Git\ntags : Git\n---\n什么是版本库呢？版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”.\n\n首先，选择一个合适的地方，创建一个空目录：\n\n\t$ mkdir learngit\n\t$ cd learngit\n\n**注意：** 如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。\n\n然后，通过`git init`命令把该目录变成Git可以管理的仓库：\n\n\t$ git init\n\n<!--more-->\n\n\n此时，Git就把仓库建好了，而且告诉你是一个空的仓库`empty Git repository`，可以发现当前目录下多了一个`.git`的目录，这个目录是Git来跟踪管理版本库的，不要随便修改里面的文件。\n\n###把文件添加到版本库\n\n*明确一下*，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。\n\n废话不多说，在learngit目录下我们创建一个`readme.md`文件，并添加一些内容：\n\t\n\t$ git is a free software.\n\n完成文件添加版本库，分两步一起来完成：\n\t\n第一步：使用`git add`告诉git把文件添加到版本库\n\n\t$ git add ./readme.md\n\n第二步，使用`git commit`告诉git把文件提交到仓库\n\n\t$ git commit -m 'add a new file'\n\n`git commit`命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。\n\n\n###查看工作区状态\n\n我们已经成功提交了一个readme.md文件，现在我们继续修改该文件，添加：\n\t\n\tGit is a distritbuted version control system.\n\nNow,我们运行`git status` 来查看此时的仓库状态：\n\t\n\t$ git status\n\ngit status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.md被修改过了，但还没有准备提交的修改。\n\n虽然Git告诉我们readme.md被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你周一上班时，已经记不清上次怎么修改的readme.md，所以，需要用`git diff`这个命令看看：\n\n\t$ git diff\n\n知道了做了什么修改后，就可以提交新文件了：\n\n\t$ git add ./readme.md\n\t$ git commit -m '***'\n\n此时，再次运行`git status`来查看状态，git会告诉我们当前没有需要提交的修改，工作目录是干净的`working directory clean`。\n\n\n###总结一下：\n\n1、初始化仓库：`git init`\n\n2、添加文件到仓库：\n\t\n\t第一步：git add \t//可添加多个文件\n\t第二步：git commit\n\n3、查看工作区状态：`git status`\n\n4、查看修改内容： `git diff`\n\n(完)\n\n","slug":"201406-2014-06-19-git-kcreate-repository-notes","published":1,"date":"2018-04-12T15:20:38.811Z","updated":"2018-04-12T15:20:38.811Z","comments":1,"photos":[],"link":"","_id":"cjfwomb3x000fass6r66lk9li","content":"<p>什么是版本库呢？版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”.</p>\n<p>首先，选择一个合适的地方，创建一个空目录：</p>\n<pre><code>$ mkdir learngit\n$ cd learngit\n</code></pre><p><strong>注意：</strong> 如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</p>\n<p>然后，通过<code>git init</code>命令把该目录变成Git可以管理的仓库：</p>\n<pre><code>$ git init\n</code></pre><a id=\"more\"></a>\n<p>此时，Git就把仓库建好了，而且告诉你是一个空的仓库<code>empty Git repository</code>，可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，不要随便修改里面的文件。</p>\n<p>###把文件添加到版本库</p>\n<p><em>明确一下</em>，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>\n<p>废话不多说，在learngit目录下我们创建一个<code>readme.md</code>文件，并添加一些内容：</p>\n<pre><code>$ git is a free software.\n</code></pre><p>完成文件添加版本库，分两步一起来完成：</p>\n<p>第一步：使用<code>git add</code>告诉git把文件添加到版本库</p>\n<pre><code>$ git add ./readme.md\n</code></pre><p>第二步，使用<code>git commit</code>告诉git把文件提交到仓库</p>\n<pre><code>$ git commit -m &apos;add a new file&apos;\n</code></pre><p><code>git commit</code>命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>\n<p>###查看工作区状态</p>\n<p>我们已经成功提交了一个readme.md文件，现在我们继续修改该文件，添加：</p>\n<pre><code>Git is a distritbuted version control system.\n</code></pre><p>Now,我们运行<code>git status</code> 来查看此时的仓库状态：</p>\n<pre><code>$ git status\n</code></pre><p>git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.md被修改过了，但还没有准备提交的修改。</p>\n<p>虽然Git告诉我们readme.md被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你周一上班时，已经记不清上次怎么修改的readme.md，所以，需要用<code>git diff</code>这个命令看看：</p>\n<pre><code>$ git diff\n</code></pre><p>知道了做了什么修改后，就可以提交新文件了：</p>\n<pre><code>$ git add ./readme.md\n$ git commit -m &apos;***&apos;\n</code></pre><p>此时，再次运行<code>git status</code>来查看状态，git会告诉我们当前没有需要提交的修改，工作目录是干净的<code>working directory clean</code>。</p>\n<p>###总结一下：</p>\n<p>1、初始化仓库：<code>git init</code></p>\n<p>2、添加文件到仓库：</p>\n<pre><code>第一步：git add     //可添加多个文件\n第二步：git commit\n</code></pre><p>3、查看工作区状态：<code>git status</code></p>\n<p>4、查看修改内容： <code>git diff</code></p>\n<p>(完)</p>\n","site":{"data":{}},"excerpt":"<p>什么是版本库呢？版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”.</p>\n<p>首先，选择一个合适的地方，创建一个空目录：</p>\n<pre><code>$ mkdir learngit\n$ cd learngit\n</code></pre><p><strong>注意：</strong> 如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</p>\n<p>然后，通过<code>git init</code>命令把该目录变成Git可以管理的仓库：</p>\n<pre><code>$ git init\n</code></pre>","more":"<p>此时，Git就把仓库建好了，而且告诉你是一个空的仓库<code>empty Git repository</code>，可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，不要随便修改里面的文件。</p>\n<p>###把文件添加到版本库</p>\n<p><em>明确一下</em>，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>\n<p>废话不多说，在learngit目录下我们创建一个<code>readme.md</code>文件，并添加一些内容：</p>\n<pre><code>$ git is a free software.\n</code></pre><p>完成文件添加版本库，分两步一起来完成：</p>\n<p>第一步：使用<code>git add</code>告诉git把文件添加到版本库</p>\n<pre><code>$ git add ./readme.md\n</code></pre><p>第二步，使用<code>git commit</code>告诉git把文件提交到仓库</p>\n<pre><code>$ git commit -m &apos;add a new file&apos;\n</code></pre><p><code>git commit</code>命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>\n<p>###查看工作区状态</p>\n<p>我们已经成功提交了一个readme.md文件，现在我们继续修改该文件，添加：</p>\n<pre><code>Git is a distritbuted version control system.\n</code></pre><p>Now,我们运行<code>git status</code> 来查看此时的仓库状态：</p>\n<pre><code>$ git status\n</code></pre><p>git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.md被修改过了，但还没有准备提交的修改。</p>\n<p>虽然Git告诉我们readme.md被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你周一上班时，已经记不清上次怎么修改的readme.md，所以，需要用<code>git diff</code>这个命令看看：</p>\n<pre><code>$ git diff\n</code></pre><p>知道了做了什么修改后，就可以提交新文件了：</p>\n<pre><code>$ git add ./readme.md\n$ git commit -m &apos;***&apos;\n</code></pre><p>此时，再次运行<code>git status</code>来查看状态，git会告诉我们当前没有需要提交的修改，工作目录是干净的<code>working directory clean</code>。</p>\n<p>###总结一下：</p>\n<p>1、初始化仓库：<code>git init</code></p>\n<p>2、添加文件到仓库：</p>\n<pre><code>第一步：git add     //可添加多个文件\n第二步：git commit\n</code></pre><p>3、查看工作区状态：<code>git status</code></p>\n<p>4、查看修改内容： <code>git diff</code></p>\n<p>(完)</p>"},{"layout":"post","title":"Git实现版本回退功能","_content":"现在，我们重新修改下文件并添加和提交到版本库：\n\n\t$ echo '再次添加新内容' >> readme.md\n\t$ git add ./readme.md\n\t$ git commit -m '更新内容'\n\n\n像这样，我们不断的对文件进行修改，并一次一次的提交到版本库。就像我们在玩游戏时，每过一关我们都会保存当前的状态，以防备哪次被打败了，我们就可以选择重新读取保存的状态，然后可以从最近的地方重新开始玩。Git也是一样的道理，每当你觉得文件修改到一定程度的时候，就可以保存一个**快照**，这个快照在Git中被称为**commit**。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。\n\n<!--more-->\n\n那么，我们人的脑子怎么可能记住一个有几千行的代码文件都修改过什么啊，所以Git自由其智能之处，我们可以使用`git log`来查看\n\n\t$ git log\n\tcommit 45c00ae6775bce4833f8541cf978781966f78565\n\tAuthor: Hanson <yafengdoudou@gmail.com>\n\tDate:   Fri Jun 20 20:08:58 2014 +0800\n\n    更新内容\n\n\tcommit 3de50f6d891bf7c7432edc2a959fd2fbfa9286b0\n\tAuthor: Hanson <yafengdoudou@gmail.com>\n\tDate:   Fri Jun 20 19:51:30 2014 +0800\n\n    添加hello git\n\n\t**此处省略**\n\n\tcommit 6e5f32ab6d7319274800f1d751e63fdc67008562\n\tAuthor: Hanson <yafengdoudou@gmail.com>\n\tDate:   Thu Jun 19 15:00:45 2014 +0800\n\n    new file\n\n如果嫌输出的信息太多，我们可以使用`git log --pretty=oneline`来查看啦\n\n\t$ git log --pretty=oneline\n\t45c00ae6775bce4833f8541cf978781966f78565 更新内容\n\t3de50f6d891bf7c7432edc2a959fd2fbfa9286b0 添加hello\n\t8edeaca3329ec0b38a1a66b948dabd8cb6e7dfa8 update fil\n\td7d25794ef327789dae190d4ea9f65775d54d741 提交测试文\n\t67a36db3844043c7f97910cb177c6631d2f1cd2b add php\n\t6e5f32ab6d7319274800f1d751e63fdc67008562 new file\n\n需要友情提示的是，你看到的一大串类似“ 45c00ae...6f78565”的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字(40位)，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。\n\n现在，我们开始回退到上一个版本，首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交“ 45c00ae...6f78565”（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。\n\n我们可以使用`git reset`回退到某个版本：\n\t\n\t$ git reset --hard HEAD^\n\tHEAD is now at 3de50f6 添加hello git\n\n再次`git log --pretty=oneline`下：\n\n\t$ git log --pretty=oneline\n\t3de50f6d891bf7c7432edc2a959fd2fbfa9286b0 添加hello git\n\t8edeaca3329ec0b38a1a66b948dabd8cb6e7dfa8 update file\n\td7d25794ef327789dae190d4ea9f65775d54d741 提交测试文件\n\t67a36db3844043c7f97910cb177c6631d2f1cd2b add php\n\t6e5f32ab6d7319274800f1d751e63fdc67008562 new file\n\n我们可以直观的看到“更新内容”不见了，那要是我们后悔回退了，想再次返到最新的版本，该怎么办呢？我们只需要在窗口没关掉之前找到最新版本的commit id`45c00ae...`即可:\n\t\n\t$ git reset --hard 45c00ae\n\tHEAD is now at 45c00ae 更新内容\n\n现在，就可以回到最新的版本了。**注意：这里只需输入commit id的前几位就ok。**\n\n假如，我们已经关掉了窗口，又想到回到某个版本该怎么办呢？不用担心，Git是有后悔药给我们吃的啦。Git提供了一个命令`git reflog`用来记录你的每一次命令:\n\n\t$ git reflog\n\t45c00ae HEAD@{0}: reset: moving to 45c00a\n\t3de50f6 HEAD@{1}: reset: moving to HEAD^\n\t45c00ae HEAD@{2}: commit: 更新内容\n\n此时，我们可以根据前面的commit id返回到想要的版本库，仿佛穿梭于历史之间，很酷吧。\n\n**Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向“添加hello git”：**\n\n---\n\n**小结**：\n\t\nHEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`。\n\n回退前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。\n\n要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。\n\n\t\n","source":"_posts/201406/2014-06-20-git_version_back_notes.md","raw":"---\nlayout : post\ntitle : \"Git实现版本回退功能\"\ncategory : Git\ntags : Git\n---\n现在，我们重新修改下文件并添加和提交到版本库：\n\n\t$ echo '再次添加新内容' >> readme.md\n\t$ git add ./readme.md\n\t$ git commit -m '更新内容'\n\n\n像这样，我们不断的对文件进行修改，并一次一次的提交到版本库。就像我们在玩游戏时，每过一关我们都会保存当前的状态，以防备哪次被打败了，我们就可以选择重新读取保存的状态，然后可以从最近的地方重新开始玩。Git也是一样的道理，每当你觉得文件修改到一定程度的时候，就可以保存一个**快照**，这个快照在Git中被称为**commit**。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。\n\n<!--more-->\n\n那么，我们人的脑子怎么可能记住一个有几千行的代码文件都修改过什么啊，所以Git自由其智能之处，我们可以使用`git log`来查看\n\n\t$ git log\n\tcommit 45c00ae6775bce4833f8541cf978781966f78565\n\tAuthor: Hanson <yafengdoudou@gmail.com>\n\tDate:   Fri Jun 20 20:08:58 2014 +0800\n\n    更新内容\n\n\tcommit 3de50f6d891bf7c7432edc2a959fd2fbfa9286b0\n\tAuthor: Hanson <yafengdoudou@gmail.com>\n\tDate:   Fri Jun 20 19:51:30 2014 +0800\n\n    添加hello git\n\n\t**此处省略**\n\n\tcommit 6e5f32ab6d7319274800f1d751e63fdc67008562\n\tAuthor: Hanson <yafengdoudou@gmail.com>\n\tDate:   Thu Jun 19 15:00:45 2014 +0800\n\n    new file\n\n如果嫌输出的信息太多，我们可以使用`git log --pretty=oneline`来查看啦\n\n\t$ git log --pretty=oneline\n\t45c00ae6775bce4833f8541cf978781966f78565 更新内容\n\t3de50f6d891bf7c7432edc2a959fd2fbfa9286b0 添加hello\n\t8edeaca3329ec0b38a1a66b948dabd8cb6e7dfa8 update fil\n\td7d25794ef327789dae190d4ea9f65775d54d741 提交测试文\n\t67a36db3844043c7f97910cb177c6631d2f1cd2b add php\n\t6e5f32ab6d7319274800f1d751e63fdc67008562 new file\n\n需要友情提示的是，你看到的一大串类似“ 45c00ae...6f78565”的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字(40位)，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。\n\n现在，我们开始回退到上一个版本，首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交“ 45c00ae...6f78565”（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。\n\n我们可以使用`git reset`回退到某个版本：\n\t\n\t$ git reset --hard HEAD^\n\tHEAD is now at 3de50f6 添加hello git\n\n再次`git log --pretty=oneline`下：\n\n\t$ git log --pretty=oneline\n\t3de50f6d891bf7c7432edc2a959fd2fbfa9286b0 添加hello git\n\t8edeaca3329ec0b38a1a66b948dabd8cb6e7dfa8 update file\n\td7d25794ef327789dae190d4ea9f65775d54d741 提交测试文件\n\t67a36db3844043c7f97910cb177c6631d2f1cd2b add php\n\t6e5f32ab6d7319274800f1d751e63fdc67008562 new file\n\n我们可以直观的看到“更新内容”不见了，那要是我们后悔回退了，想再次返到最新的版本，该怎么办呢？我们只需要在窗口没关掉之前找到最新版本的commit id`45c00ae...`即可:\n\t\n\t$ git reset --hard 45c00ae\n\tHEAD is now at 45c00ae 更新内容\n\n现在，就可以回到最新的版本了。**注意：这里只需输入commit id的前几位就ok。**\n\n假如，我们已经关掉了窗口，又想到回到某个版本该怎么办呢？不用担心，Git是有后悔药给我们吃的啦。Git提供了一个命令`git reflog`用来记录你的每一次命令:\n\n\t$ git reflog\n\t45c00ae HEAD@{0}: reset: moving to 45c00a\n\t3de50f6 HEAD@{1}: reset: moving to HEAD^\n\t45c00ae HEAD@{2}: commit: 更新内容\n\n此时，我们可以根据前面的commit id返回到想要的版本库，仿佛穿梭于历史之间，很酷吧。\n\n**Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向“添加hello git”：**\n\n---\n\n**小结**：\n\t\nHEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`。\n\n回退前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。\n\n要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。\n\n\t\n","slug":"201406-2014-06-20-git-version-back-notes","published":1,"date":"2018-04-12T15:20:38.812Z","updated":"2018-04-12T15:20:38.812Z","comments":1,"photos":[],"link":"","_id":"cjfwomb3y000hass6y5xkjn97","content":"<p>现在，我们重新修改下文件并添加和提交到版本库：</p>\n<pre><code>$ echo &apos;再次添加新内容&apos; &gt;&gt; readme.md\n$ git add ./readme.md\n$ git commit -m &apos;更新内容&apos;\n</code></pre><p>像这样，我们不断的对文件进行修改，并一次一次的提交到版本库。就像我们在玩游戏时，每过一关我们都会保存当前的状态，以防备哪次被打败了，我们就可以选择重新读取保存的状态，然后可以从最近的地方重新开始玩。Git也是一样的道理，每当你觉得文件修改到一定程度的时候，就可以保存一个<strong>快照</strong>，这个快照在Git中被称为<strong>commit</strong>。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p>\n<a id=\"more\"></a>\n<p>那么，我们人的脑子怎么可能记住一个有几千行的代码文件都修改过什么啊，所以Git自由其智能之处，我们可以使用<code>git log</code>来查看</p>\n<pre><code>$ git log\ncommit 45c00ae6775bce4833f8541cf978781966f78565\nAuthor: Hanson &lt;yafengdoudou@gmail.com&gt;\nDate:   Fri Jun 20 20:08:58 2014 +0800\n\n更新内容\n\ncommit 3de50f6d891bf7c7432edc2a959fd2fbfa9286b0\nAuthor: Hanson &lt;yafengdoudou@gmail.com&gt;\nDate:   Fri Jun 20 19:51:30 2014 +0800\n\n添加hello git\n\n**此处省略**\n\ncommit 6e5f32ab6d7319274800f1d751e63fdc67008562\nAuthor: Hanson &lt;yafengdoudou@gmail.com&gt;\nDate:   Thu Jun 19 15:00:45 2014 +0800\n\nnew file\n</code></pre><p>如果嫌输出的信息太多，我们可以使用<code>git log --pretty=oneline</code>来查看啦</p>\n<pre><code>$ git log --pretty=oneline\n45c00ae6775bce4833f8541cf978781966f78565 更新内容\n3de50f6d891bf7c7432edc2a959fd2fbfa9286b0 添加hello\n8edeaca3329ec0b38a1a66b948dabd8cb6e7dfa8 update fil\nd7d25794ef327789dae190d4ea9f65775d54d741 提交测试文\n67a36db3844043c7f97910cb177c6631d2f1cd2b add php\n6e5f32ab6d7319274800f1d751e63fdc67008562 new file\n</code></pre><p>需要友情提示的是，你看到的一大串类似“ 45c00ae…6f78565”的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字(40位)，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p>\n<p>现在，我们开始回退到上一个版本，首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交“ 45c00ae…6f78565”（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p>\n<p>我们可以使用<code>git reset</code>回退到某个版本：</p>\n<pre><code>$ git reset --hard HEAD^\nHEAD is now at 3de50f6 添加hello git\n</code></pre><p>再次<code>git log --pretty=oneline</code>下：</p>\n<pre><code>$ git log --pretty=oneline\n3de50f6d891bf7c7432edc2a959fd2fbfa9286b0 添加hello git\n8edeaca3329ec0b38a1a66b948dabd8cb6e7dfa8 update file\nd7d25794ef327789dae190d4ea9f65775d54d741 提交测试文件\n67a36db3844043c7f97910cb177c6631d2f1cd2b add php\n6e5f32ab6d7319274800f1d751e63fdc67008562 new file\n</code></pre><p>我们可以直观的看到“更新内容”不见了，那要是我们后悔回退了，想再次返到最新的版本，该怎么办呢？我们只需要在窗口没关掉之前找到最新版本的commit id<code>45c00ae...</code>即可:</p>\n<pre><code>$ git reset --hard 45c00ae\nHEAD is now at 45c00ae 更新内容\n</code></pre><p>现在，就可以回到最新的版本了。<strong>注意：这里只需输入commit id的前几位就ok。</strong></p>\n<p>假如，我们已经关掉了窗口，又想到回到某个版本该怎么办呢？不用担心，Git是有后悔药给我们吃的啦。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令:</p>\n<pre><code>$ git reflog\n45c00ae HEAD@{0}: reset: moving to 45c00a\n3de50f6 HEAD@{1}: reset: moving to HEAD^\n45c00ae HEAD@{2}: commit: 更新内容\n</code></pre><p>此时，我们可以根据前面的commit id返回到想要的版本库，仿佛穿梭于历史之间，很酷吧。</p>\n<p><strong>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向“添加hello git”：</strong></p>\n<hr>\n<p><strong>小结</strong>：</p>\n<p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</p>\n<p>回退前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p>\n<p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>\n","site":{"data":{}},"excerpt":"<p>现在，我们重新修改下文件并添加和提交到版本库：</p>\n<pre><code>$ echo &apos;再次添加新内容&apos; &gt;&gt; readme.md\n$ git add ./readme.md\n$ git commit -m &apos;更新内容&apos;\n</code></pre><p>像这样，我们不断的对文件进行修改，并一次一次的提交到版本库。就像我们在玩游戏时，每过一关我们都会保存当前的状态，以防备哪次被打败了，我们就可以选择重新读取保存的状态，然后可以从最近的地方重新开始玩。Git也是一样的道理，每当你觉得文件修改到一定程度的时候，就可以保存一个<strong>快照</strong>，这个快照在Git中被称为<strong>commit</strong>。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p>","more":"<p>那么，我们人的脑子怎么可能记住一个有几千行的代码文件都修改过什么啊，所以Git自由其智能之处，我们可以使用<code>git log</code>来查看</p>\n<pre><code>$ git log\ncommit 45c00ae6775bce4833f8541cf978781966f78565\nAuthor: Hanson &lt;yafengdoudou@gmail.com&gt;\nDate:   Fri Jun 20 20:08:58 2014 +0800\n\n更新内容\n\ncommit 3de50f6d891bf7c7432edc2a959fd2fbfa9286b0\nAuthor: Hanson &lt;yafengdoudou@gmail.com&gt;\nDate:   Fri Jun 20 19:51:30 2014 +0800\n\n添加hello git\n\n**此处省略**\n\ncommit 6e5f32ab6d7319274800f1d751e63fdc67008562\nAuthor: Hanson &lt;yafengdoudou@gmail.com&gt;\nDate:   Thu Jun 19 15:00:45 2014 +0800\n\nnew file\n</code></pre><p>如果嫌输出的信息太多，我们可以使用<code>git log --pretty=oneline</code>来查看啦</p>\n<pre><code>$ git log --pretty=oneline\n45c00ae6775bce4833f8541cf978781966f78565 更新内容\n3de50f6d891bf7c7432edc2a959fd2fbfa9286b0 添加hello\n8edeaca3329ec0b38a1a66b948dabd8cb6e7dfa8 update fil\nd7d25794ef327789dae190d4ea9f65775d54d741 提交测试文\n67a36db3844043c7f97910cb177c6631d2f1cd2b add php\n6e5f32ab6d7319274800f1d751e63fdc67008562 new file\n</code></pre><p>需要友情提示的是，你看到的一大串类似“ 45c00ae…6f78565”的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字(40位)，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p>\n<p>现在，我们开始回退到上一个版本，首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交“ 45c00ae…6f78565”（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p>\n<p>我们可以使用<code>git reset</code>回退到某个版本：</p>\n<pre><code>$ git reset --hard HEAD^\nHEAD is now at 3de50f6 添加hello git\n</code></pre><p>再次<code>git log --pretty=oneline</code>下：</p>\n<pre><code>$ git log --pretty=oneline\n3de50f6d891bf7c7432edc2a959fd2fbfa9286b0 添加hello git\n8edeaca3329ec0b38a1a66b948dabd8cb6e7dfa8 update file\nd7d25794ef327789dae190d4ea9f65775d54d741 提交测试文件\n67a36db3844043c7f97910cb177c6631d2f1cd2b add php\n6e5f32ab6d7319274800f1d751e63fdc67008562 new file\n</code></pre><p>我们可以直观的看到“更新内容”不见了，那要是我们后悔回退了，想再次返到最新的版本，该怎么办呢？我们只需要在窗口没关掉之前找到最新版本的commit id<code>45c00ae...</code>即可:</p>\n<pre><code>$ git reset --hard 45c00ae\nHEAD is now at 45c00ae 更新内容\n</code></pre><p>现在，就可以回到最新的版本了。<strong>注意：这里只需输入commit id的前几位就ok。</strong></p>\n<p>假如，我们已经关掉了窗口，又想到回到某个版本该怎么办呢？不用担心，Git是有后悔药给我们吃的啦。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令:</p>\n<pre><code>$ git reflog\n45c00ae HEAD@{0}: reset: moving to 45c00a\n3de50f6 HEAD@{1}: reset: moving to HEAD^\n45c00ae HEAD@{2}: commit: 更新内容\n</code></pre><p>此时，我们可以根据前面的commit id返回到想要的版本库，仿佛穿梭于历史之间，很酷吧。</p>\n<p><strong>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向“添加hello git”：</strong></p>\n<hr>\n<p><strong>小结</strong>：</p>\n<p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</p>\n<p>回退前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p>\n<p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>"},{"layout":"post","title":"Git工作区和暂存区","_content":"首先，我们要清楚Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。下面来看几个概念：\n\n###工作区\n\n工作区就是我们在电脑里看到的目录，比如我的learngit就是一个工作区。\n\n###版本库\n\n在工作区中都有一个.git隐藏文件夹，这个就是所谓的Git版本库。\n\n###暂存区\n\nGit的版本库里有很多的文件，其中比较重要的就是stage(或者index)文件，这个就是**暂存区**。还有Git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD。\n\n<!--more-->\n\n![pic](http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehlvgkz640j20cq06i74g.jpg)\n\n前面我们知道，当我们要提交修改的文件时是分为两步的：\n\n* 第一步：`git add`把文件添加进去，实际上是把文件修改添加到暂存区。\n* 第二步：`git commit`把文件提交给版本库，实际上是把暂存区的所有内容提交到当前的分支。\n\n\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，commit就是往master分支上提交更改。\n\n可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。\n\n一旦提交后，如果又没有对工作区做任何修改，那么工作区就是“干净”的：\n\n\t$ git status\n\t# On branch master\n\tnothing to commit (working directory clean)\n\n###小结\n\n暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。\n","source":"_posts/201406/2014-06-21-a_git_work_temporary_notes.md","raw":"---\nlayout : post\ntitle : \"Git工作区和暂存区\"\ncategory : Git\ntags : Git\n---\n首先，我们要清楚Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。下面来看几个概念：\n\n###工作区\n\n工作区就是我们在电脑里看到的目录，比如我的learngit就是一个工作区。\n\n###版本库\n\n在工作区中都有一个.git隐藏文件夹，这个就是所谓的Git版本库。\n\n###暂存区\n\nGit的版本库里有很多的文件，其中比较重要的就是stage(或者index)文件，这个就是**暂存区**。还有Git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD。\n\n<!--more-->\n\n![pic](http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehlvgkz640j20cq06i74g.jpg)\n\n前面我们知道，当我们要提交修改的文件时是分为两步的：\n\n* 第一步：`git add`把文件添加进去，实际上是把文件修改添加到暂存区。\n* 第二步：`git commit`把文件提交给版本库，实际上是把暂存区的所有内容提交到当前的分支。\n\n\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，commit就是往master分支上提交更改。\n\n可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。\n\n一旦提交后，如果又没有对工作区做任何修改，那么工作区就是“干净”的：\n\n\t$ git status\n\t# On branch master\n\tnothing to commit (working directory clean)\n\n###小结\n\n暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。\n","slug":"201406-2014-06-21-a-git-work-temporary-notes","published":1,"date":"2018-04-12T15:20:38.812Z","updated":"2018-04-12T15:20:38.812Z","comments":1,"photos":[],"link":"","_id":"cjfwomb41000lass6bz9oajv4","content":"<p>首先，我们要清楚Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。下面来看几个概念：</p>\n<p>###工作区</p>\n<p>工作区就是我们在电脑里看到的目录，比如我的learngit就是一个工作区。</p>\n<p>###版本库</p>\n<p>在工作区中都有一个.git隐藏文件夹，这个就是所谓的Git版本库。</p>\n<p>###暂存区</p>\n<p>Git的版本库里有很多的文件，其中比较重要的就是stage(或者index)文件，这个就是<strong>暂存区</strong>。还有Git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehlvgkz640j20cq06i74g.jpg\" alt=\"pic\"></p>\n<p>前面我们知道，当我们要提交修改的文件时是分为两步的：</p>\n<ul>\n<li>第一步：<code>git add</code>把文件添加进去，实际上是把文件修改添加到暂存区。</li>\n<li>第二步：<code>git commit</code>把文件提交给版本库，实际上是把暂存区的所有内容提交到当前的分支。</li>\n</ul>\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，commit就是往master分支上提交更改。</p>\n<p>可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n<p>一旦提交后，如果又没有对工作区做任何修改，那么工作区就是“干净”的：</p>\n<pre><code>$ git status\n# On branch master\nnothing to commit (working directory clean)\n</code></pre><p>###小结</p>\n<p>暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。</p>\n","site":{"data":{}},"excerpt":"<p>首先，我们要清楚Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。下面来看几个概念：</p>\n<p>###工作区</p>\n<p>工作区就是我们在电脑里看到的目录，比如我的learngit就是一个工作区。</p>\n<p>###版本库</p>\n<p>在工作区中都有一个.git隐藏文件夹，这个就是所谓的Git版本库。</p>\n<p>###暂存区</p>\n<p>Git的版本库里有很多的文件，其中比较重要的就是stage(或者index)文件，这个就是<strong>暂存区</strong>。还有Git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD。</p>","more":"<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehlvgkz640j20cq06i74g.jpg\" alt=\"pic\"></p>\n<p>前面我们知道，当我们要提交修改的文件时是分为两步的：</p>\n<ul>\n<li>第一步：<code>git add</code>把文件添加进去，实际上是把文件修改添加到暂存区。</li>\n<li>第二步：<code>git commit</code>把文件提交给版本库，实际上是把暂存区的所有内容提交到当前的分支。</li>\n</ul>\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，commit就是往master分支上提交更改。</p>\n<p>可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n<p>一旦提交后，如果又没有对工作区做任何修改，那么工作区就是“干净”的：</p>\n<pre><code>$ git status\n# On branch master\nnothing to commit (working directory clean)\n</code></pre><p>###小结</p>\n<p>暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。</p>"},{"layout":"post","title":"版本库文件的管理","_content":"##撤销修改\n\n现在，我们查看下`one.txt`文件：\n\n\t$ cat one.txt\n\tgit is the best\n\tI love git\n\terror content\n\n假如，当我们没提交前，又想撤销这次的修改，那该怎么办呢？这时我们可以直接手动删除修改的内容，恢复到原来的版本。此时，我们可以使用`git status`查看下：\n\n<!--more-->\n\n\t$ git status\n\t# On branch master\n\t# Your branch is ahead of 'origin/master' by 1 commit.\n\t#   (use \"git push\" to publish your local commits)\n\t#\n\t# Changes not staged for commit:\n\t#   (use \"git add <file>...\" to update what will be committed)\n\t#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n\t#\n\t#       modified:   one.txt\n\t#\n\tno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\n你可以发现，Git会告诉你，git checkout -- file可以丢弃工作区的修改：\n\n\n\t$ git checkout -- one.txt\n\n命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：\n\n1、 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n\n2、一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\ngit checkout -- file命令中的“--”很重要，没有“--”，就变成了“创建一个新分支”的命令.\n\n当我们使用`git add`添加到暂存区后，有想要撤消修改，咋办呢？\n\n\t$ git status\n\t# On branch master\n\t# Your branch is ahead of 'origin/master' by 1 commit.\n\t#   (use \"git push\" to publish your local commits)\n\t#\n\t# Changes to be committed:\n\t#   (use \"git reset HEAD <file>...\" to unstage)\n\t#\n\t#       modified:   one.txt\n\t#\n\nGit同样告诉我们，用命令`git reset HEAD file`可以把暂存区的修改撤销掉（unstage），重新放回工作区.\n\ngit reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。\n\n那如何恢复工作区的修改呢？还记得`git checkout --file`吗，对，就是这个命令：\n\n\t$ git checkout -- one.txt\n\n现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。\n\n##小结\n\n*   当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n\n*   当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD file`，就回到了场景1，第二步按场景1操作。\n\n*   已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n\t\n\n","source":"_posts/201406/2014-06-22-git_manage_file_notes.md","raw":"---\nlayout : post\ntitle : \"版本库文件的管理\"\ncategory : Git\ntags : Git\n---\n##撤销修改\n\n现在，我们查看下`one.txt`文件：\n\n\t$ cat one.txt\n\tgit is the best\n\tI love git\n\terror content\n\n假如，当我们没提交前，又想撤销这次的修改，那该怎么办呢？这时我们可以直接手动删除修改的内容，恢复到原来的版本。此时，我们可以使用`git status`查看下：\n\n<!--more-->\n\n\t$ git status\n\t# On branch master\n\t# Your branch is ahead of 'origin/master' by 1 commit.\n\t#   (use \"git push\" to publish your local commits)\n\t#\n\t# Changes not staged for commit:\n\t#   (use \"git add <file>...\" to update what will be committed)\n\t#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n\t#\n\t#       modified:   one.txt\n\t#\n\tno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\n你可以发现，Git会告诉你，git checkout -- file可以丢弃工作区的修改：\n\n\n\t$ git checkout -- one.txt\n\n命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：\n\n1、 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n\n2、一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\ngit checkout -- file命令中的“--”很重要，没有“--”，就变成了“创建一个新分支”的命令.\n\n当我们使用`git add`添加到暂存区后，有想要撤消修改，咋办呢？\n\n\t$ git status\n\t# On branch master\n\t# Your branch is ahead of 'origin/master' by 1 commit.\n\t#   (use \"git push\" to publish your local commits)\n\t#\n\t# Changes to be committed:\n\t#   (use \"git reset HEAD <file>...\" to unstage)\n\t#\n\t#       modified:   one.txt\n\t#\n\nGit同样告诉我们，用命令`git reset HEAD file`可以把暂存区的修改撤销掉（unstage），重新放回工作区.\n\ngit reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。\n\n那如何恢复工作区的修改呢？还记得`git checkout --file`吗，对，就是这个命令：\n\n\t$ git checkout -- one.txt\n\n现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。\n\n##小结\n\n*   当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n\n*   当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD file`，就回到了场景1，第二步按场景1操作。\n\n*   已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n\t\n\n","slug":"201406-2014-06-22-git-manage-file-notes","published":1,"date":"2018-04-12T15:20:38.812Z","updated":"2018-04-12T15:20:38.812Z","comments":1,"photos":[],"link":"","_id":"cjfwomb42000nass6uj92dkqn","content":"<p>##撤销修改</p>\n<p>现在，我们查看下<code>one.txt</code>文件：</p>\n<pre><code>$ cat one.txt\ngit is the best\nI love git\nerror content\n</code></pre><p>假如，当我们没提交前，又想撤销这次的修改，那该怎么办呢？这时我们可以直接手动删除修改的内容，恢复到原来的版本。此时，我们可以使用<code>git status</code>查看下：</p>\n<a id=\"more\"></a>\n<pre><code>$ git status\n# On branch master\n# Your branch is ahead of &apos;origin/master&apos; by 1 commit.\n#   (use &quot;git push&quot; to publish your local commits)\n#\n# Changes not staged for commit:\n#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n#\n#       modified:   one.txt\n#\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\n</code></pre><p>你可以发现，Git会告诉你，git checkout – file可以丢弃工作区的修改：</p>\n<pre><code>$ git checkout -- one.txt\n</code></pre><p>命令git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：</p>\n<p>1、 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>2、一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>\n<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<p>git checkout – file命令中的“–”很重要，没有“–”，就变成了“创建一个新分支”的命令.</p>\n<p>当我们使用<code>git add</code>添加到暂存区后，有想要撤消修改，咋办呢？</p>\n<pre><code>$ git status\n# On branch master\n# Your branch is ahead of &apos;origin/master&apos; by 1 commit.\n#   (use &quot;git push&quot; to publish your local commits)\n#\n# Changes to be committed:\n#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n#\n#       modified:   one.txt\n#\n</code></pre><p>Git同样告诉我们，用命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区.</p>\n<p>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p>\n<p>那如何恢复工作区的修改呢？还记得<code>git checkout --file</code>吗，对，就是这个命令：</p>\n<pre><code>$ git checkout -- one.txt\n</code></pre><p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。</p>\n<p>##小结</p>\n<ul>\n<li><p>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>\n</li>\n<li><p>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p>\n</li>\n<li><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>##撤销修改</p>\n<p>现在，我们查看下<code>one.txt</code>文件：</p>\n<pre><code>$ cat one.txt\ngit is the best\nI love git\nerror content\n</code></pre><p>假如，当我们没提交前，又想撤销这次的修改，那该怎么办呢？这时我们可以直接手动删除修改的内容，恢复到原来的版本。此时，我们可以使用<code>git status</code>查看下：</p>","more":"<pre><code>$ git status\n# On branch master\n# Your branch is ahead of &apos;origin/master&apos; by 1 commit.\n#   (use &quot;git push&quot; to publish your local commits)\n#\n# Changes not staged for commit:\n#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n#\n#       modified:   one.txt\n#\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\n</code></pre><p>你可以发现，Git会告诉你，git checkout – file可以丢弃工作区的修改：</p>\n<pre><code>$ git checkout -- one.txt\n</code></pre><p>命令git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：</p>\n<p>1、 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>2、一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>\n<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<p>git checkout – file命令中的“–”很重要，没有“–”，就变成了“创建一个新分支”的命令.</p>\n<p>当我们使用<code>git add</code>添加到暂存区后，有想要撤消修改，咋办呢？</p>\n<pre><code>$ git status\n# On branch master\n# Your branch is ahead of &apos;origin/master&apos; by 1 commit.\n#   (use &quot;git push&quot; to publish your local commits)\n#\n# Changes to be committed:\n#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n#\n#       modified:   one.txt\n#\n</code></pre><p>Git同样告诉我们，用命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区.</p>\n<p>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p>\n<p>那如何恢复工作区的修改呢？还记得<code>git checkout --file</code>吗，对，就是这个命令：</p>\n<pre><code>$ git checkout -- one.txt\n</code></pre><p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。</p>\n<p>##小结</p>\n<ul>\n<li><p>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>\n</li>\n<li><p>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p>\n</li>\n<li><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n</li>\n</ul>"},{"layout":"post","title":"版本库删除文件操作","_content":"首先，我们要知道在Git中任何的操作都是一个修改，那删除文件肯定也是一个修改操作了，在工作区删除一个文件可以使用`rm -f file`的命令来操作：\n\n    $ rm -f one.txt\n    \n此时，Git已经知道你删除了文件，这时候的工作区和版本库也不一样了，可以使用`git status`来查看：\n\n    hanson@host-linux:~/learngit$ git status \n    # On branch master\n    # Changes not staged for commit:\n    #   (use \"git add/rm <file>...\" to update what will be committed)\n    #   (use \"git checkout -- <file>...\" to discard changes in working directory)\n    #\n    #   deleted:    one.txt\n    #\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n<!--more-->\n\n\n现在有两个选择，一是确实要从版本库中删除该文件，那就用命令`git rm`删掉，并且commit：\n\n    hanson@host-linux:~/learngit$ git rm one.txt\n    rm 'one.txt'\n    hanson@host-linux:~/learngit$ git commit  -m 'delete file'\n    [master 3ec942f] delete file\n     1 file changed, 2 deletions(-)\n     delete mode 100644 one.txt\n\n现在，我们就彻底删除one.txt文件了。\n\n另一种情况是我们失手删错了，因为我们版本库里还有该文件，我们可以使用`git checkout --file`来恢复：\n\n    $ git checkout -- one.txt\n\ngit checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。\n\n---\n###小结\n命令`git rm`用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。I\n","source":"_posts/201406/2014-06-22-git_n_delete_file_notes.md","raw":"---\nlayout : post\ntitle : \"版本库删除文件操作\"\ncategory : Git\ntags : Git\n---\n首先，我们要知道在Git中任何的操作都是一个修改，那删除文件肯定也是一个修改操作了，在工作区删除一个文件可以使用`rm -f file`的命令来操作：\n\n    $ rm -f one.txt\n    \n此时，Git已经知道你删除了文件，这时候的工作区和版本库也不一样了，可以使用`git status`来查看：\n\n    hanson@host-linux:~/learngit$ git status \n    # On branch master\n    # Changes not staged for commit:\n    #   (use \"git add/rm <file>...\" to update what will be committed)\n    #   (use \"git checkout -- <file>...\" to discard changes in working directory)\n    #\n    #   deleted:    one.txt\n    #\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n<!--more-->\n\n\n现在有两个选择，一是确实要从版本库中删除该文件，那就用命令`git rm`删掉，并且commit：\n\n    hanson@host-linux:~/learngit$ git rm one.txt\n    rm 'one.txt'\n    hanson@host-linux:~/learngit$ git commit  -m 'delete file'\n    [master 3ec942f] delete file\n     1 file changed, 2 deletions(-)\n     delete mode 100644 one.txt\n\n现在，我们就彻底删除one.txt文件了。\n\n另一种情况是我们失手删错了，因为我们版本库里还有该文件，我们可以使用`git checkout --file`来恢复：\n\n    $ git checkout -- one.txt\n\ngit checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。\n\n---\n###小结\n命令`git rm`用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。I\n","slug":"201406-2014-06-22-git-n-delete-file-notes","published":1,"date":"2018-04-12T15:20:38.813Z","updated":"2018-04-12T15:20:38.813Z","comments":1,"photos":[],"link":"","_id":"cjfwomb44000rass6m4805m4o","content":"<p>首先，我们要知道在Git中任何的操作都是一个修改，那删除文件肯定也是一个修改操作了，在工作区删除一个文件可以使用<code>rm -f file</code>的命令来操作：</p>\n<pre><code>$ rm -f one.txt\n</code></pre><p>此时，Git已经知道你删除了文件，这时候的工作区和版本库也不一样了，可以使用<code>git status</code>来查看：</p>\n<pre><code>hanson@host-linux:~/learngit$ git status \n# On branch master\n# Changes not staged for commit:\n#   (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)\n#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n#\n#   deleted:    one.txt\n#\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\n</code></pre><a id=\"more\"></a>\n<p>现在有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且commit：</p>\n<pre><code>hanson@host-linux:~/learngit$ git rm one.txt\nrm &apos;one.txt&apos;\nhanson@host-linux:~/learngit$ git commit  -m &apos;delete file&apos;\n[master 3ec942f] delete file\n 1 file changed, 2 deletions(-)\n delete mode 100644 one.txt\n</code></pre><p>现在，我们就彻底删除one.txt文件了。</p>\n<p>另一种情况是我们失手删错了，因为我们版本库里还有该文件，我们可以使用<code>git checkout --file</code>来恢复：</p>\n<pre><code>$ git checkout -- one.txt\n</code></pre><p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>\n<hr>\n<p>###小结<br>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。I</p>\n","site":{"data":{}},"excerpt":"<p>首先，我们要知道在Git中任何的操作都是一个修改，那删除文件肯定也是一个修改操作了，在工作区删除一个文件可以使用<code>rm -f file</code>的命令来操作：</p>\n<pre><code>$ rm -f one.txt\n</code></pre><p>此时，Git已经知道你删除了文件，这时候的工作区和版本库也不一样了，可以使用<code>git status</code>来查看：</p>\n<pre><code>hanson@host-linux:~/learngit$ git status \n# On branch master\n# Changes not staged for commit:\n#   (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)\n#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n#\n#   deleted:    one.txt\n#\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\n</code></pre>","more":"<p>现在有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且commit：</p>\n<pre><code>hanson@host-linux:~/learngit$ git rm one.txt\nrm &apos;one.txt&apos;\nhanson@host-linux:~/learngit$ git commit  -m &apos;delete file&apos;\n[master 3ec942f] delete file\n 1 file changed, 2 deletions(-)\n delete mode 100644 one.txt\n</code></pre><p>现在，我们就彻底删除one.txt文件了。</p>\n<p>另一种情况是我们失手删错了，因为我们版本库里还有该文件，我们可以使用<code>git checkout --file</code>来恢复：</p>\n<pre><code>$ git checkout -- one.txt\n</code></pre><p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>\n<hr>\n<p>###小结<br>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。I</p>"},{"layout":"post","title":"Git远程仓库配置","_content":"首先，我们要了解[Github](https://github.com/)这个神奇的网站，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。所以我们要先注册一个github帐号。\n\n由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，下面介绍一下具体的配置：\n\n第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），输入命令创建SSH Key：\n\n\t$ ssh-keygen -t rsa -C \"youremail@example.com\"\n\n<!--more-->\n\n你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可.\n\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n\n第2步：登陆[Github](https://github.com/)，打开“Account settings”，“SSH Keys”页面,\n然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容,下面是图示：\n\n![图片](http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehobvqxm5rj20s70gydjg.jpg)\n\n点击`Add key`就ok了。\n\n下面使用命令`ssh -T git@github.com`来查看是否设置成功：\n\n\t$ ssh -T git@github.com\n\tHi YourName! You've successfully authenticated, but GitHub does not provide shell access.\n\n为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n\n当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。\n\n**最后友情提示：**在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。","source":"_posts/201406/2014-06-23-git_a_remote_transmission_create_notes.md","raw":"---\nlayout : post\ntitle : \"Git远程仓库配置\"\ncategory : Git\ntags : Git\n---\n首先，我们要了解[Github](https://github.com/)这个神奇的网站，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。所以我们要先注册一个github帐号。\n\n由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，下面介绍一下具体的配置：\n\n第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），输入命令创建SSH Key：\n\n\t$ ssh-keygen -t rsa -C \"youremail@example.com\"\n\n<!--more-->\n\n你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可.\n\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n\n第2步：登陆[Github](https://github.com/)，打开“Account settings”，“SSH Keys”页面,\n然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容,下面是图示：\n\n![图片](http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehobvqxm5rj20s70gydjg.jpg)\n\n点击`Add key`就ok了。\n\n下面使用命令`ssh -T git@github.com`来查看是否设置成功：\n\n\t$ ssh -T git@github.com\n\tHi YourName! You've successfully authenticated, but GitHub does not provide shell access.\n\n为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n\n当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。\n\n**最后友情提示：**在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。","slug":"201406-2014-06-23-git-a-remote-transmission-create-notes","published":1,"date":"2018-04-12T15:20:38.813Z","updated":"2018-04-12T15:20:38.813Z","comments":1,"photos":[],"link":"","_id":"cjfwomb45000tass64b3amjov","content":"<p>首先，我们要了解<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>这个神奇的网站，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。所以我们要先注册一个github帐号。</p>\n<p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，下面介绍一下具体的配置：</p>\n<p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），输入命令创建SSH Key：</p>\n<pre><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;\n</code></pre><a id=\"more\"></a>\n<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可.</p>\n<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>\n<p>第2步：登陆<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>，打开“Account settings”，“SSH Keys”页面,<br>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容,下面是图示：</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehobvqxm5rj20s70gydjg.jpg\" alt=\"图片\"></p>\n<p>点击<code>Add key</code>就ok了。</p>\n<p>下面使用命令<code>ssh -T git@github.com</code>来查看是否设置成功：</p>\n<pre><code>$ ssh -T git@github.com\nHi YourName! You&apos;ve successfully authenticated, but GitHub does not provide shell access.\n</code></pre><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n<p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p>\n<p><strong>最后友情提示：</strong>在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p>\n","site":{"data":{}},"excerpt":"<p>首先，我们要了解<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>这个神奇的网站，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。所以我们要先注册一个github帐号。</p>\n<p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，下面介绍一下具体的配置：</p>\n<p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），输入命令创建SSH Key：</p>\n<pre><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;\n</code></pre>","more":"<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可.</p>\n<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>\n<p>第2步：登陆<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>，打开“Account settings”，“SSH Keys”页面,<br>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容,下面是图示：</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehobvqxm5rj20s70gydjg.jpg\" alt=\"图片\"></p>\n<p>点击<code>Add key</code>就ok了。</p>\n<p>下面使用命令<code>ssh -T git@github.com</code>来查看是否设置成功：</p>\n<pre><code>$ ssh -T git@github.com\nHi YourName! You&apos;ve successfully authenticated, but GitHub does not provide shell access.\n</code></pre><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n<p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p>\n<p><strong>最后友情提示：</strong>在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p>"},{"layout":"post","title":"添加远程仓库和从远程仓库克隆","_content":"现在，我们已经在本地创建了一个版本库，那么如何在Github创建了一个仓库，并且让这两个仓库进行远程同步呢？\n\n##添加远程库\n\n首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：\n\n<!--more-->\n\n![图片](http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehocqkjinqj20rl0elack.jpg)\n\n目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。\n\n现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：\n\n\t$ git remote add origin git@github.com:GithubName/learngit.git\n\n请千万注意，把上面的GithubName替换成你自己的GitHub账户名.\n\n添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。\n\n下一步，就可以把本地库的所有内容推送到远程库上：\n\n\t$ git push -u origin master\n\n把本地库的内容推送到远程，用`git push`命令，实际上是把当前分支master推送到远程。\n\n由于远程库是空的，我们第一次推送master分支时，加上了`-u`参数，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n从现在起，只要本地作了提交，就可以通过命令：\n\n\t$ git push origin master\n\n把本地master分支的最新修改推送至GitHub，现在，就拥有了真正的分布式版本库！\n\n##克隆远程库\n\n现在，我们已经有了一个远程learngit仓库，假设我们没有本地的版本仓库，那么就需要从远程进行克隆了。\n\n要克隆远程仓库，可以使用`git clone`命令来达到目的,最后可以加上一个自己命名的文件名，不写则使用默认的。\n\n\t$ git clone git@github.com:GithubName/learngit.git （可以自己加上文件名）\n\tCloning into 'learngit'...\n\tremote: Counting objects: 3, done.\n\tremote: Total 3 (delta 0), reused 0 (delta 0)\n\tReceiving objects: 100% (3/3), done.\n\n如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。\n\n你也许还注意到，GitHub给出的地址不止一个，还可以用`https://github.com/GIthubName/learngit.git`这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。\n\n**注意**\n\n使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令。\n\n---\n\n###小结\n\n要关联一个远程库，使用命令`git remote add origin git@github.com/GithubName/***.git`\n\n关联后，使用命令`git push -u origin master`第一次推送**master**分支的所有内容；\n\n此后，每次本地提交后，就可以使用命令`git push origin master`推送最新修改；\n\n要克隆一个仓库，首先必须知道仓库的地址，然后使用`git clone`命令克隆。\n\nGit支持多种协议，包括https，**但通过ssh支持的原生git协议速度最快**。\n\n分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！\n\n\n\n\n","source":"_posts/201406/2014-06-23-git_b_add_and_clone_notes.md","raw":"---\nlayout : post\ntitle : \"添加远程仓库和从远程仓库克隆\"\ncategory : Git\ntags : Git\n---\n现在，我们已经在本地创建了一个版本库，那么如何在Github创建了一个仓库，并且让这两个仓库进行远程同步呢？\n\n##添加远程库\n\n首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：\n\n<!--more-->\n\n![图片](http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehocqkjinqj20rl0elack.jpg)\n\n目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。\n\n现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：\n\n\t$ git remote add origin git@github.com:GithubName/learngit.git\n\n请千万注意，把上面的GithubName替换成你自己的GitHub账户名.\n\n添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。\n\n下一步，就可以把本地库的所有内容推送到远程库上：\n\n\t$ git push -u origin master\n\n把本地库的内容推送到远程，用`git push`命令，实际上是把当前分支master推送到远程。\n\n由于远程库是空的，我们第一次推送master分支时，加上了`-u`参数，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n从现在起，只要本地作了提交，就可以通过命令：\n\n\t$ git push origin master\n\n把本地master分支的最新修改推送至GitHub，现在，就拥有了真正的分布式版本库！\n\n##克隆远程库\n\n现在，我们已经有了一个远程learngit仓库，假设我们没有本地的版本仓库，那么就需要从远程进行克隆了。\n\n要克隆远程仓库，可以使用`git clone`命令来达到目的,最后可以加上一个自己命名的文件名，不写则使用默认的。\n\n\t$ git clone git@github.com:GithubName/learngit.git （可以自己加上文件名）\n\tCloning into 'learngit'...\n\tremote: Counting objects: 3, done.\n\tremote: Total 3 (delta 0), reused 0 (delta 0)\n\tReceiving objects: 100% (3/3), done.\n\n如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。\n\n你也许还注意到，GitHub给出的地址不止一个，还可以用`https://github.com/GIthubName/learngit.git`这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。\n\n**注意**\n\n使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令。\n\n---\n\n###小结\n\n要关联一个远程库，使用命令`git remote add origin git@github.com/GithubName/***.git`\n\n关联后，使用命令`git push -u origin master`第一次推送**master**分支的所有内容；\n\n此后，每次本地提交后，就可以使用命令`git push origin master`推送最新修改；\n\n要克隆一个仓库，首先必须知道仓库的地址，然后使用`git clone`命令克隆。\n\nGit支持多种协议，包括https，**但通过ssh支持的原生git协议速度最快**。\n\n分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！\n\n\n\n\n","slug":"201406-2014-06-23-git-b-add-and-clone-notes","published":1,"date":"2018-04-12T15:20:38.813Z","updated":"2018-04-12T15:20:38.813Z","comments":1,"photos":[],"link":"","_id":"cjfwomb47000wass6onq5bpvf","content":"<p>现在，我们已经在本地创建了一个版本库，那么如何在Github创建了一个仓库，并且让这两个仓库进行远程同步呢？</p>\n<p>##添加远程库</p>\n<p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：</p>\n<a id=\"more\"></a>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehocqkjinqj20rl0elack.jpg\" alt=\"图片\"></p>\n<p>目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>\n<p>现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：</p>\n<pre><code>$ git remote add origin git@github.com:GithubName/learngit.git\n</code></pre><p>请千万注意，把上面的GithubName替换成你自己的GitHub账户名.</p>\n<p>添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p>\n<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>\n<pre><code>$ git push -u origin master\n</code></pre><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支master推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送master分支时，加上了<code>-u</code>参数，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p>从现在起，只要本地作了提交，就可以通过命令：</p>\n<pre><code>$ git push origin master\n</code></pre><p>把本地master分支的最新修改推送至GitHub，现在，就拥有了真正的分布式版本库！</p>\n<p>##克隆远程库</p>\n<p>现在，我们已经有了一个远程learngit仓库，假设我们没有本地的版本仓库，那么就需要从远程进行克隆了。</p>\n<p>要克隆远程仓库，可以使用<code>git clone</code>命令来达到目的,最后可以加上一个自己命名的文件名，不写则使用默认的。</p>\n<pre><code>$ git clone git@github.com:GithubName/learngit.git （可以自己加上文件名）\nCloning into &apos;learngit&apos;...\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (3/3), done.\n</code></pre><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p>\n<p>你也许还注意到，GitHub给出的地址不止一个，还可以用<code>https://github.com/GIthubName/learngit.git</code>这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。</p>\n<p><strong>注意</strong></p>\n<p>使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令。</p>\n<hr>\n<p>###小结</p>\n<p>要关联一个远程库，使用命令<code>git remote add origin git@github.com/GithubName/***.git</code></p>\n<p>关联后，使用命令<code>git push -u origin master</code>第一次推送<strong>master</strong>分支的所有内容；</p>\n<p>此后，每次本地提交后，就可以使用命令<code>git push origin master</code>推送最新修改；</p>\n<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p>\n<p>Git支持多种协议，包括https，<strong>但通过ssh支持的原生git协议速度最快</strong>。</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>\n","site":{"data":{}},"excerpt":"<p>现在，我们已经在本地创建了一个版本库，那么如何在Github创建了一个仓库，并且让这两个仓库进行远程同步呢？</p>\n<p>##添加远程库</p>\n<p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：</p>","more":"<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehocqkjinqj20rl0elack.jpg\" alt=\"图片\"></p>\n<p>目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>\n<p>现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：</p>\n<pre><code>$ git remote add origin git@github.com:GithubName/learngit.git\n</code></pre><p>请千万注意，把上面的GithubName替换成你自己的GitHub账户名.</p>\n<p>添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p>\n<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>\n<pre><code>$ git push -u origin master\n</code></pre><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支master推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送master分支时，加上了<code>-u</code>参数，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p>从现在起，只要本地作了提交，就可以通过命令：</p>\n<pre><code>$ git push origin master\n</code></pre><p>把本地master分支的最新修改推送至GitHub，现在，就拥有了真正的分布式版本库！</p>\n<p>##克隆远程库</p>\n<p>现在，我们已经有了一个远程learngit仓库，假设我们没有本地的版本仓库，那么就需要从远程进行克隆了。</p>\n<p>要克隆远程仓库，可以使用<code>git clone</code>命令来达到目的,最后可以加上一个自己命名的文件名，不写则使用默认的。</p>\n<pre><code>$ git clone git@github.com:GithubName/learngit.git （可以自己加上文件名）\nCloning into &apos;learngit&apos;...\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (3/3), done.\n</code></pre><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p>\n<p>你也许还注意到，GitHub给出的地址不止一个，还可以用<code>https://github.com/GIthubName/learngit.git</code>这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。</p>\n<p><strong>注意</strong></p>\n<p>使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令。</p>\n<hr>\n<p>###小结</p>\n<p>要关联一个远程库，使用命令<code>git remote add origin git@github.com/GithubName/***.git</code></p>\n<p>关联后，使用命令<code>git push -u origin master</code>第一次推送<strong>master</strong>分支的所有内容；</p>\n<p>此后，每次本地提交后，就可以使用命令<code>git push origin master</code>推送最新修改；</p>\n<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p>\n<p>Git支持多种协议，包括https，<strong>但通过ssh支持的原生git协议速度最快</strong>。</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>"},{"layout":"post","title":"PHP实现文件上传机制","_content":"在Web开发中，经常需要将本地的文件上传到Web服务器上，也可以从服务器上进行文件的下载。文件的上传和下载十分的广泛，在PHP中可以接受来自几乎所有类型浏览器上传的文件，还允许对服务器的上传和下载进行控制。\n\n上传文件过程：\n\n* 本地浏览器客户端选择磁盘文件，并进行上传；\n* 服务器接受并处理来自客户端上传的文件。\n\n##客户端上传设置\n\n最基本的方法，是使用html的表单选择本地文件并进行提交，在form表单中使用`<input type=\"file\">`标签来选择本地文件。如果想要支持文件上传，还必须在form中加入`enctype`和`method`属性：\n\n<!--more-->\n\n* `enctype=\"multipart/form-data\"`用来指明表单编码数据方式。让服务器知道我们要上传一个文件\n* `method=\"POST\"`必须使用POST的发送方法\n\n下面是一个表单的样式：\n\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head><title>上传文件</title></head>\n\t<body>\n\t\t<form action=\"upload.php\" method=\"POST\" enctype=\"multipart/form-data\">\n\t\t\t选择文件：<input type=\"file\" name=\"picture\"><br />\n\t\t\t<input type=\"submit\" value=\"提交\">\n\t\t</form>\n\t</body>\n\t</html>\n\n\n##服务器端PHP处理上传\n\n当客户端提交上传文件给服务器后，剩下的就交给PHP来处理了。\n\n首先，服务器端是把上传的文件和与文件相关的信息存储在$\\_FILES这个超全局数组中的，其他的数据由$\\_POST去接受，我们可以使用print\\_r打印下$\\_FILES这个数组。\t\n\t\n\t\n\tArray\n\t(\n    \t[picture] => Array\n        \t(\n            \t[name] => 1_120809092822_7.jpg\n            \t[type] => image/jpeg\n            \t[tmp_name] => C:\\Windows\\Temp\\php1A5D.tmp\n            \t[error] => 0\n            \t[size] => 11424\n        \t)\n\n\t)\n\n\n下面说明代表的含义：\n\n1、name：上传文件的原名称，带扩展名\n\n2、type:说明了上传文件的主类型和子类型\n\n3、tmp_name：代表的是文件被上传到服务器后临时存储的目录\n\n4、size:代表上传文件的大小，单位是字节\n\n5、error：代表上传文件后产生的错误信息：\n\n* 0：表示上传成功\n* 1：表示文件大小超过了PHP配置文件中upload_max_filesize限制的值\n* 2：表示文件大小超过了html表单MAX_FILE_SIZE限制的值\n* 3：表示文件被部分上传\n* 4：表示没有上传任何文件\n\n\n**函数is\\_uploaded\\_file()**\n\n该函数判断指定的文件是否是通过HTTP POST上传的，如果是则返回true，否则则返回false；唯一的参数是$\\_FILES数组中的tmp\\_name变量。\n\n**函数move\\_uploaded\\_file()**\n\n文件上传成功后，会首先存储在服务器的临时目录内，可以使用该函数将上传的文件移动到指定的目录内，并且该函数可以判断上传的文件是不是合法的上传文件。其中第一个参数是$\\_FILES数组找那个的tmp\\_name变量，第二个参数是指定被移动到的文件。\n\n下面是一个处理上传文件的简单实例：\n\n\t<?php \n\t$file = $_FILES;\n\tif (is_uploaded_file($file['picture']['tmp_name'])) {\n\t\tmove_uploaded_file($file['picture']['tmp_name'], './uploads/' . $file['picture']['name']);\n\t} else {\n\t\texit('错误');\n\t}\n\t?>\n\n---\n###小结\n\n这里只是简单总结了下上传文件的过程和原理，以及服务器是如何处理的，实际开发中肯定还是更复杂的配置和处理的。\n\n\t\n\n","source":"_posts/201406/2014-06-24-php_b_upload_file_notes.md","raw":"---\nlayout : post\ntitle : \"PHP实现文件上传机制\"\ncategory : PHP\ntags : upload\n---\n在Web开发中，经常需要将本地的文件上传到Web服务器上，也可以从服务器上进行文件的下载。文件的上传和下载十分的广泛，在PHP中可以接受来自几乎所有类型浏览器上传的文件，还允许对服务器的上传和下载进行控制。\n\n上传文件过程：\n\n* 本地浏览器客户端选择磁盘文件，并进行上传；\n* 服务器接受并处理来自客户端上传的文件。\n\n##客户端上传设置\n\n最基本的方法，是使用html的表单选择本地文件并进行提交，在form表单中使用`<input type=\"file\">`标签来选择本地文件。如果想要支持文件上传，还必须在form中加入`enctype`和`method`属性：\n\n<!--more-->\n\n* `enctype=\"multipart/form-data\"`用来指明表单编码数据方式。让服务器知道我们要上传一个文件\n* `method=\"POST\"`必须使用POST的发送方法\n\n下面是一个表单的样式：\n\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head><title>上传文件</title></head>\n\t<body>\n\t\t<form action=\"upload.php\" method=\"POST\" enctype=\"multipart/form-data\">\n\t\t\t选择文件：<input type=\"file\" name=\"picture\"><br />\n\t\t\t<input type=\"submit\" value=\"提交\">\n\t\t</form>\n\t</body>\n\t</html>\n\n\n##服务器端PHP处理上传\n\n当客户端提交上传文件给服务器后，剩下的就交给PHP来处理了。\n\n首先，服务器端是把上传的文件和与文件相关的信息存储在$\\_FILES这个超全局数组中的，其他的数据由$\\_POST去接受，我们可以使用print\\_r打印下$\\_FILES这个数组。\t\n\t\n\t\n\tArray\n\t(\n    \t[picture] => Array\n        \t(\n            \t[name] => 1_120809092822_7.jpg\n            \t[type] => image/jpeg\n            \t[tmp_name] => C:\\Windows\\Temp\\php1A5D.tmp\n            \t[error] => 0\n            \t[size] => 11424\n        \t)\n\n\t)\n\n\n下面说明代表的含义：\n\n1、name：上传文件的原名称，带扩展名\n\n2、type:说明了上传文件的主类型和子类型\n\n3、tmp_name：代表的是文件被上传到服务器后临时存储的目录\n\n4、size:代表上传文件的大小，单位是字节\n\n5、error：代表上传文件后产生的错误信息：\n\n* 0：表示上传成功\n* 1：表示文件大小超过了PHP配置文件中upload_max_filesize限制的值\n* 2：表示文件大小超过了html表单MAX_FILE_SIZE限制的值\n* 3：表示文件被部分上传\n* 4：表示没有上传任何文件\n\n\n**函数is\\_uploaded\\_file()**\n\n该函数判断指定的文件是否是通过HTTP POST上传的，如果是则返回true，否则则返回false；唯一的参数是$\\_FILES数组中的tmp\\_name变量。\n\n**函数move\\_uploaded\\_file()**\n\n文件上传成功后，会首先存储在服务器的临时目录内，可以使用该函数将上传的文件移动到指定的目录内，并且该函数可以判断上传的文件是不是合法的上传文件。其中第一个参数是$\\_FILES数组找那个的tmp\\_name变量，第二个参数是指定被移动到的文件。\n\n下面是一个处理上传文件的简单实例：\n\n\t<?php \n\t$file = $_FILES;\n\tif (is_uploaded_file($file['picture']['tmp_name'])) {\n\t\tmove_uploaded_file($file['picture']['tmp_name'], './uploads/' . $file['picture']['name']);\n\t} else {\n\t\texit('错误');\n\t}\n\t?>\n\n---\n###小结\n\n这里只是简单总结了下上传文件的过程和原理，以及服务器是如何处理的，实际开发中肯定还是更复杂的配置和处理的。\n\n\t\n\n","slug":"201406-2014-06-24-php-b-upload-file-notes","published":1,"date":"2018-04-12T15:20:38.814Z","updated":"2018-04-12T15:20:38.814Z","comments":1,"photos":[],"link":"","_id":"cjfwomb48000zass6v6dca0ac","content":"<p>在Web开发中，经常需要将本地的文件上传到Web服务器上，也可以从服务器上进行文件的下载。文件的上传和下载十分的广泛，在PHP中可以接受来自几乎所有类型浏览器上传的文件，还允许对服务器的上传和下载进行控制。</p>\n<p>上传文件过程：</p>\n<ul>\n<li>本地浏览器客户端选择磁盘文件，并进行上传；</li>\n<li>服务器接受并处理来自客户端上传的文件。</li>\n</ul>\n<p>##客户端上传设置</p>\n<p>最基本的方法，是使用html的表单选择本地文件并进行提交，在form表单中使用<code>&lt;input type=&quot;file&quot;&gt;</code>标签来选择本地文件。如果想要支持文件上传，还必须在form中加入<code>enctype</code>和<code>method</code>属性：</p>\n<a id=\"more\"></a>\n<ul>\n<li><code>enctype=&quot;multipart/form-data&quot;</code>用来指明表单编码数据方式。让服务器知道我们要上传一个文件</li>\n<li><code>method=&quot;POST&quot;</code>必须使用POST的发送方法</li>\n</ul>\n<p>下面是一个表单的样式：</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;&lt;title&gt;上传文件&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;form action=&quot;upload.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;\n        选择文件：&lt;input type=&quot;file&quot; name=&quot;picture&quot;&gt;&lt;br /&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>##服务器端PHP处理上传</p>\n<p>当客户端提交上传文件给服务器后，剩下的就交给PHP来处理了。</p>\n<p>首先，服务器端是把上传的文件和与文件相关的信息存储在$_FILES这个超全局数组中的，其他的数据由$_POST去接受，我们可以使用print_r打印下$_FILES这个数组。    </p>\n<pre><code>Array\n(\n    [picture] =&gt; Array\n        (\n            [name] =&gt; 1_120809092822_7.jpg\n            [type] =&gt; image/jpeg\n            [tmp_name] =&gt; C:\\Windows\\Temp\\php1A5D.tmp\n            [error] =&gt; 0\n            [size] =&gt; 11424\n        )\n\n)\n</code></pre><p>下面说明代表的含义：</p>\n<p>1、name：上传文件的原名称，带扩展名</p>\n<p>2、type:说明了上传文件的主类型和子类型</p>\n<p>3、tmp_name：代表的是文件被上传到服务器后临时存储的目录</p>\n<p>4、size:代表上传文件的大小，单位是字节</p>\n<p>5、error：代表上传文件后产生的错误信息：</p>\n<ul>\n<li>0：表示上传成功</li>\n<li>1：表示文件大小超过了PHP配置文件中upload_max_filesize限制的值</li>\n<li>2：表示文件大小超过了html表单MAX_FILE_SIZE限制的值</li>\n<li>3：表示文件被部分上传</li>\n<li>4：表示没有上传任何文件</li>\n</ul>\n<p><strong>函数is_uploaded_file()</strong></p>\n<p>该函数判断指定的文件是否是通过HTTP POST上传的，如果是则返回true，否则则返回false；唯一的参数是$_FILES数组中的tmp_name变量。</p>\n<p><strong>函数move_uploaded_file()</strong></p>\n<p>文件上传成功后，会首先存储在服务器的临时目录内，可以使用该函数将上传的文件移动到指定的目录内，并且该函数可以判断上传的文件是不是合法的上传文件。其中第一个参数是$_FILES数组找那个的tmp_name变量，第二个参数是指定被移动到的文件。</p>\n<p>下面是一个处理上传文件的简单实例：</p>\n<pre><code>&lt;?php \n$file = $_FILES;\nif (is_uploaded_file($file[&apos;picture&apos;][&apos;tmp_name&apos;])) {\n    move_uploaded_file($file[&apos;picture&apos;][&apos;tmp_name&apos;], &apos;./uploads/&apos; . $file[&apos;picture&apos;][&apos;name&apos;]);\n} else {\n    exit(&apos;错误&apos;);\n}\n?&gt;\n</code></pre><hr>\n<p>###小结</p>\n<p>这里只是简单总结了下上传文件的过程和原理，以及服务器是如何处理的，实际开发中肯定还是更复杂的配置和处理的。</p>\n","site":{"data":{}},"excerpt":"<p>在Web开发中，经常需要将本地的文件上传到Web服务器上，也可以从服务器上进行文件的下载。文件的上传和下载十分的广泛，在PHP中可以接受来自几乎所有类型浏览器上传的文件，还允许对服务器的上传和下载进行控制。</p>\n<p>上传文件过程：</p>\n<ul>\n<li>本地浏览器客户端选择磁盘文件，并进行上传；</li>\n<li>服务器接受并处理来自客户端上传的文件。</li>\n</ul>\n<p>##客户端上传设置</p>\n<p>最基本的方法，是使用html的表单选择本地文件并进行提交，在form表单中使用<code>&lt;input type=&quot;file&quot;&gt;</code>标签来选择本地文件。如果想要支持文件上传，还必须在form中加入<code>enctype</code>和<code>method</code>属性：</p>","more":"<ul>\n<li><code>enctype=&quot;multipart/form-data&quot;</code>用来指明表单编码数据方式。让服务器知道我们要上传一个文件</li>\n<li><code>method=&quot;POST&quot;</code>必须使用POST的发送方法</li>\n</ul>\n<p>下面是一个表单的样式：</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;&lt;title&gt;上传文件&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;form action=&quot;upload.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;\n        选择文件：&lt;input type=&quot;file&quot; name=&quot;picture&quot;&gt;&lt;br /&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>##服务器端PHP处理上传</p>\n<p>当客户端提交上传文件给服务器后，剩下的就交给PHP来处理了。</p>\n<p>首先，服务器端是把上传的文件和与文件相关的信息存储在$_FILES这个超全局数组中的，其他的数据由$_POST去接受，我们可以使用print_r打印下$_FILES这个数组。    </p>\n<pre><code>Array\n(\n    [picture] =&gt; Array\n        (\n            [name] =&gt; 1_120809092822_7.jpg\n            [type] =&gt; image/jpeg\n            [tmp_name] =&gt; C:\\Windows\\Temp\\php1A5D.tmp\n            [error] =&gt; 0\n            [size] =&gt; 11424\n        )\n\n)\n</code></pre><p>下面说明代表的含义：</p>\n<p>1、name：上传文件的原名称，带扩展名</p>\n<p>2、type:说明了上传文件的主类型和子类型</p>\n<p>3、tmp_name：代表的是文件被上传到服务器后临时存储的目录</p>\n<p>4、size:代表上传文件的大小，单位是字节</p>\n<p>5、error：代表上传文件后产生的错误信息：</p>\n<ul>\n<li>0：表示上传成功</li>\n<li>1：表示文件大小超过了PHP配置文件中upload_max_filesize限制的值</li>\n<li>2：表示文件大小超过了html表单MAX_FILE_SIZE限制的值</li>\n<li>3：表示文件被部分上传</li>\n<li>4：表示没有上传任何文件</li>\n</ul>\n<p><strong>函数is_uploaded_file()</strong></p>\n<p>该函数判断指定的文件是否是通过HTTP POST上传的，如果是则返回true，否则则返回false；唯一的参数是$_FILES数组中的tmp_name变量。</p>\n<p><strong>函数move_uploaded_file()</strong></p>\n<p>文件上传成功后，会首先存储在服务器的临时目录内，可以使用该函数将上传的文件移动到指定的目录内，并且该函数可以判断上传的文件是不是合法的上传文件。其中第一个参数是$_FILES数组找那个的tmp_name变量，第二个参数是指定被移动到的文件。</p>\n<p>下面是一个处理上传文件的简单实例：</p>\n<pre><code>&lt;?php \n$file = $_FILES;\nif (is_uploaded_file($file[&apos;picture&apos;][&apos;tmp_name&apos;])) {\n    move_uploaded_file($file[&apos;picture&apos;][&apos;tmp_name&apos;], &apos;./uploads/&apos; . $file[&apos;picture&apos;][&apos;name&apos;]);\n} else {\n    exit(&apos;错误&apos;);\n}\n?&gt;\n</code></pre><hr>\n<p>###小结</p>\n<p>这里只是简单总结了下上传文件的过程和原理，以及服务器是如何处理的，实际开发中肯定还是更复杂的配置和处理的。</p>"},{"layout":"post","title":"关于PHP生成验证码字符串的一点思考","_content":"在PHP中创建验证码很方便，创建好验证字符串和使用GD库函数创建图像就ok了。这里不说明怎么去创建验证码，其中当我们来创建验证字符时，我们是怎么做到的呢？\n\n下面比较下作者见到的两种方式来生成字符：\n\n**第一种方式**\n\n\t<?php\n\t$str = 'abcdefghigkmnprstuvwxyABCDEFGHGKLMNPQRSTUVWXY3456789';\t\n\t$n = 6;\t\t//生成字符的个数\n\t$code = '';\n\t$length = strlen($str);\n\tfor ($i=0; $i < $n; $i++) { \n\t\t$code .= $str[mt_rand(0, $length-1)];\n\t}\n\techo $code;\n\t?>\n\n<!--more-->\n\n**第二种方式**\n\n\t<?php\n\t$str = 'abcdefghigkmnprstuvwxyABCDEFGHGKLMNPQRSTUVWXY3456789';\t\n\t$n = 6;\t\t//生成字符的个数\n\t$str = str_shuffle($str);\n\t$code = substr($str, 0, $n);\n\techo $code;\n\t?>\n\n\n观察这两种方式，有没有觉得第二种方式很简洁、清晰呢，是的，在第一种方式中我们使用了for循环以及定义了额外临时变量。再看第二种方式，我们只是充分使用了PHP自带的`str_shuffle`（打乱字符串顺序）和`substr`（截取字符串）函数，就达到了我们想要的目的。\n\n---\n\n###作者的观点\n\n学习某一种语言或者技术，我们不仅要学好其本身的语法与规范，还要充分利用好该语言或者技术自身的优点和捷径来达到我们的目的。比如，当我们费了很大力气终于完成某个功能，没准其内部已经提供好了方法或者接口，只等着我们来调用就ok了。\n","source":"_posts/201406/2014-06-24-php_a_use_function_notes.md","raw":"---\nlayout : post\ntitle : \"关于PHP生成验证码字符串的一点思考\"\ncategory : PHP\ntags : PHP内置方法\n---\n在PHP中创建验证码很方便，创建好验证字符串和使用GD库函数创建图像就ok了。这里不说明怎么去创建验证码，其中当我们来创建验证字符时，我们是怎么做到的呢？\n\n下面比较下作者见到的两种方式来生成字符：\n\n**第一种方式**\n\n\t<?php\n\t$str = 'abcdefghigkmnprstuvwxyABCDEFGHGKLMNPQRSTUVWXY3456789';\t\n\t$n = 6;\t\t//生成字符的个数\n\t$code = '';\n\t$length = strlen($str);\n\tfor ($i=0; $i < $n; $i++) { \n\t\t$code .= $str[mt_rand(0, $length-1)];\n\t}\n\techo $code;\n\t?>\n\n<!--more-->\n\n**第二种方式**\n\n\t<?php\n\t$str = 'abcdefghigkmnprstuvwxyABCDEFGHGKLMNPQRSTUVWXY3456789';\t\n\t$n = 6;\t\t//生成字符的个数\n\t$str = str_shuffle($str);\n\t$code = substr($str, 0, $n);\n\techo $code;\n\t?>\n\n\n观察这两种方式，有没有觉得第二种方式很简洁、清晰呢，是的，在第一种方式中我们使用了for循环以及定义了额外临时变量。再看第二种方式，我们只是充分使用了PHP自带的`str_shuffle`（打乱字符串顺序）和`substr`（截取字符串）函数，就达到了我们想要的目的。\n\n---\n\n###作者的观点\n\n学习某一种语言或者技术，我们不仅要学好其本身的语法与规范，还要充分利用好该语言或者技术自身的优点和捷径来达到我们的目的。比如，当我们费了很大力气终于完成某个功能，没准其内部已经提供好了方法或者接口，只等着我们来调用就ok了。\n","slug":"201406-2014-06-24-php-a-use-function-notes","published":1,"date":"2018-04-12T15:20:38.814Z","updated":"2018-04-12T15:20:38.814Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4a0012ass61uewhf4m","content":"<p>在PHP中创建验证码很方便，创建好验证字符串和使用GD库函数创建图像就ok了。这里不说明怎么去创建验证码，其中当我们来创建验证字符时，我们是怎么做到的呢？</p>\n<p>下面比较下作者见到的两种方式来生成字符：</p>\n<p><strong>第一种方式</strong></p>\n<pre><code>&lt;?php\n$str = &apos;abcdefghigkmnprstuvwxyABCDEFGHGKLMNPQRSTUVWXY3456789&apos;;    \n$n = 6;        //生成字符的个数\n$code = &apos;&apos;;\n$length = strlen($str);\nfor ($i=0; $i &lt; $n; $i++) { \n    $code .= $str[mt_rand(0, $length-1)];\n}\necho $code;\n?&gt;\n</code></pre><a id=\"more\"></a>\n<p><strong>第二种方式</strong></p>\n<pre><code>&lt;?php\n$str = &apos;abcdefghigkmnprstuvwxyABCDEFGHGKLMNPQRSTUVWXY3456789&apos;;    \n$n = 6;        //生成字符的个数\n$str = str_shuffle($str);\n$code = substr($str, 0, $n);\necho $code;\n?&gt;\n</code></pre><p>观察这两种方式，有没有觉得第二种方式很简洁、清晰呢，是的，在第一种方式中我们使用了for循环以及定义了额外临时变量。再看第二种方式，我们只是充分使用了PHP自带的<code>str_shuffle</code>（打乱字符串顺序）和<code>substr</code>（截取字符串）函数，就达到了我们想要的目的。</p>\n<hr>\n<p>###作者的观点</p>\n<p>学习某一种语言或者技术，我们不仅要学好其本身的语法与规范，还要充分利用好该语言或者技术自身的优点和捷径来达到我们的目的。比如，当我们费了很大力气终于完成某个功能，没准其内部已经提供好了方法或者接口，只等着我们来调用就ok了。</p>\n","site":{"data":{}},"excerpt":"<p>在PHP中创建验证码很方便，创建好验证字符串和使用GD库函数创建图像就ok了。这里不说明怎么去创建验证码，其中当我们来创建验证字符时，我们是怎么做到的呢？</p>\n<p>下面比较下作者见到的两种方式来生成字符：</p>\n<p><strong>第一种方式</strong></p>\n<pre><code>&lt;?php\n$str = &apos;abcdefghigkmnprstuvwxyABCDEFGHGKLMNPQRSTUVWXY3456789&apos;;    \n$n = 6;        //生成字符的个数\n$code = &apos;&apos;;\n$length = strlen($str);\nfor ($i=0; $i &lt; $n; $i++) { \n    $code .= $str[mt_rand(0, $length-1)];\n}\necho $code;\n?&gt;\n</code></pre>","more":"<p><strong>第二种方式</strong></p>\n<pre><code>&lt;?php\n$str = &apos;abcdefghigkmnprstuvwxyABCDEFGHGKLMNPQRSTUVWXY3456789&apos;;    \n$n = 6;        //生成字符的个数\n$str = str_shuffle($str);\n$code = substr($str, 0, $n);\necho $code;\n?&gt;\n</code></pre><p>观察这两种方式，有没有觉得第二种方式很简洁、清晰呢，是的，在第一种方式中我们使用了for循环以及定义了额外临时变量。再看第二种方式，我们只是充分使用了PHP自带的<code>str_shuffle</code>（打乱字符串顺序）和<code>substr</code>（截取字符串）函数，就达到了我们想要的目的。</p>\n<hr>\n<p>###作者的观点</p>\n<p>学习某一种语言或者技术，我们不仅要学好其本身的语法与规范，还要充分利用好该语言或者技术自身的优点和捷径来达到我们的目的。比如，当我们费了很大力气终于完成某个功能，没准其内部已经提供好了方法或者接口，只等着我们来调用就ok了。</p>"},{"layout":"post","title":"创建与合并分支","_content":"分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。\n\n如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN,是不是很棒、很神奇啊！\n\n一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：\n\n<!--more-->\n\n\n![picture](http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehpf84llcnj208d047wee.jpg)\n\n每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长.\n\n###创建分支\n\n创建dev分支，然后切换到该分支：\n\n\t$ git checkout -b dev\n\tSwitched to a new branch 'dev'\n\n`git checkout`命令加上`-b`参数表示创建并切换，相当于以下两条命令：\n\n\t$ git branch dev\n\t$ git checkout dev\n\tSwitched to a new branch 'dev'\n\n使用`git beanch`查看当前分支：\n\n\t$ git branch\n\t* dev\n  \tmaster\n\n`git branch`命令会列出所有分支，当前分支前面会标一个`*`号.\n\n下面我们在dev分支上添加文件添加内容，并进行提交：\n\t\n\t$ touch three.txt\n\t$ echo 'using dev branch' >> three.txt\n\n然后提交：\n\t\n\t$ git add three.txt\n\t$ git commit -m 'dev branch'\n\n现在我们切换回master分支，使用`git checkout master`命令：\n\n\t$ git checkout master\n\tSwitched to branch 'master'\n\n切换回master分支后，再查看一个three.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：\n\n![picture](http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehpfp10rioj20bn066t8p.jpg)\n\n那怎么才能把dev分支的工作合并到master上呢？使用`git merge`命令：\n\n\t$ git merge dev\n\tUpdating f8077c3..b1b45f5\n\tFast-forward\n \tthree.txt | 2 +-\n \t1 file changed, 1 insertion(+), 1 deletion(-)\n\n`git merge`命令用于**合并指定分支到当前分支**。合并后，再查看three.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。\n\n注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。\n\n现在，我们该怎么删除刚创建的dev分支呢？使用`git branch -d `命令：\n\n\t$ git branch -d dev\n\tDeleted branch dev (was b1b45f5).\n\n**注意：**\n\n要删除某个分支时，必须切出要删除的分支，要不然会报错。\n\n删除后，查看branch，就只剩下master分支了：\n\n\t$ git branch\n\t* master\n\n因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全\n\n---\n\n###小结\n\n查看当前分支：`git branch`\n\n创建分支：`git branch name`\n\n切换分支：`git checkout name`\n\n创建+切换分支：`git checkout -b name`\n\n合并某分支到当前分支： `git merge name`\n\n删除某分支: `git branch -d name`\n\n\n","source":"_posts/201406/2014-06-24-q_git_create_and_merge_branch.md","raw":"---\nlayout : post\ntitle : \"创建与合并分支\"\ncategory : Git\ntags : Git\n---\n分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。\n\n如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN,是不是很棒、很神奇啊！\n\n一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：\n\n<!--more-->\n\n\n![picture](http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehpf84llcnj208d047wee.jpg)\n\n每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长.\n\n###创建分支\n\n创建dev分支，然后切换到该分支：\n\n\t$ git checkout -b dev\n\tSwitched to a new branch 'dev'\n\n`git checkout`命令加上`-b`参数表示创建并切换，相当于以下两条命令：\n\n\t$ git branch dev\n\t$ git checkout dev\n\tSwitched to a new branch 'dev'\n\n使用`git beanch`查看当前分支：\n\n\t$ git branch\n\t* dev\n  \tmaster\n\n`git branch`命令会列出所有分支，当前分支前面会标一个`*`号.\n\n下面我们在dev分支上添加文件添加内容，并进行提交：\n\t\n\t$ touch three.txt\n\t$ echo 'using dev branch' >> three.txt\n\n然后提交：\n\t\n\t$ git add three.txt\n\t$ git commit -m 'dev branch'\n\n现在我们切换回master分支，使用`git checkout master`命令：\n\n\t$ git checkout master\n\tSwitched to branch 'master'\n\n切换回master分支后，再查看一个three.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：\n\n![picture](http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehpfp10rioj20bn066t8p.jpg)\n\n那怎么才能把dev分支的工作合并到master上呢？使用`git merge`命令：\n\n\t$ git merge dev\n\tUpdating f8077c3..b1b45f5\n\tFast-forward\n \tthree.txt | 2 +-\n \t1 file changed, 1 insertion(+), 1 deletion(-)\n\n`git merge`命令用于**合并指定分支到当前分支**。合并后，再查看three.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。\n\n注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。\n\n现在，我们该怎么删除刚创建的dev分支呢？使用`git branch -d `命令：\n\n\t$ git branch -d dev\n\tDeleted branch dev (was b1b45f5).\n\n**注意：**\n\n要删除某个分支时，必须切出要删除的分支，要不然会报错。\n\n删除后，查看branch，就只剩下master分支了：\n\n\t$ git branch\n\t* master\n\n因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全\n\n---\n\n###小结\n\n查看当前分支：`git branch`\n\n创建分支：`git branch name`\n\n切换分支：`git checkout name`\n\n创建+切换分支：`git checkout -b name`\n\n合并某分支到当前分支： `git merge name`\n\n删除某分支: `git branch -d name`\n\n\n","slug":"201406-2014-06-24-q-git-create-and-merge-branch","published":1,"date":"2018-04-12T15:20:38.814Z","updated":"2018-04-12T15:20:38.814Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4b0014ass6l36j27ju","content":"<p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>\n<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN,是不是很棒、很神奇啊！</p>\n<p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：</p>\n<a id=\"more\"></a>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehpf84llcnj208d047wee.jpg\" alt=\"picture\"></p>\n<p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长.</p>\n<p>###创建分支</p>\n<p>创建dev分支，然后切换到该分支：</p>\n<pre><code>$ git checkout -b dev\nSwitched to a new branch &apos;dev&apos;\n</code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p>\n<pre><code>$ git branch dev\n$ git checkout dev\nSwitched to a new branch &apos;dev&apos;\n</code></pre><p>使用<code>git beanch</code>查看当前分支：</p>\n<pre><code>$ git branch\n* dev\n  master\n</code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号.</p>\n<p>下面我们在dev分支上添加文件添加内容，并进行提交：</p>\n<pre><code>$ touch three.txt\n$ echo &apos;using dev branch&apos; &gt;&gt; three.txt\n</code></pre><p>然后提交：</p>\n<pre><code>$ git add three.txt\n$ git commit -m &apos;dev branch&apos;\n</code></pre><p>现在我们切换回master分支，使用<code>git checkout master</code>命令：</p>\n<pre><code>$ git checkout master\nSwitched to branch &apos;master&apos;\n</code></pre><p>切换回master分支后，再查看一个three.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehpfp10rioj20bn066t8p.jpg\" alt=\"picture\"></p>\n<p>那怎么才能把dev分支的工作合并到master上呢？使用<code>git merge</code>命令：</p>\n<pre><code>$ git merge dev\nUpdating f8077c3..b1b45f5\nFast-forward\n three.txt | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre><p><code>git merge</code>命令用于<strong>合并指定分支到当前分支</strong>。合并后，再查看three.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。</p>\n<p>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p>\n<p>现在，我们该怎么删除刚创建的dev分支呢？使用<code>git branch -d</code>命令：</p>\n<pre><code>$ git branch -d dev\nDeleted branch dev (was b1b45f5).\n</code></pre><p><strong>注意：</strong></p>\n<p>要删除某个分支时，必须切出要删除的分支，要不然会报错。</p>\n<p>删除后，查看branch，就只剩下master分支了：</p>\n<pre><code>$ git branch\n* master\n</code></pre><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全</p>\n<hr>\n<p>###小结</p>\n<p>查看当前分支：<code>git branch</code></p>\n<p>创建分支：<code>git branch name</code></p>\n<p>切换分支：<code>git checkout name</code></p>\n<p>创建+切换分支：<code>git checkout -b name</code></p>\n<p>合并某分支到当前分支： <code>git merge name</code></p>\n<p>删除某分支: <code>git branch -d name</code></p>\n","site":{"data":{}},"excerpt":"<p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>\n<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN,是不是很棒、很神奇啊！</p>\n<p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：</p>","more":"<p><img src=\"http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehpf84llcnj208d047wee.jpg\" alt=\"picture\"></p>\n<p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长.</p>\n<p>###创建分支</p>\n<p>创建dev分支，然后切换到该分支：</p>\n<pre><code>$ git checkout -b dev\nSwitched to a new branch &apos;dev&apos;\n</code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p>\n<pre><code>$ git branch dev\n$ git checkout dev\nSwitched to a new branch &apos;dev&apos;\n</code></pre><p>使用<code>git beanch</code>查看当前分支：</p>\n<pre><code>$ git branch\n* dev\n  master\n</code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号.</p>\n<p>下面我们在dev分支上添加文件添加内容，并进行提交：</p>\n<pre><code>$ touch three.txt\n$ echo &apos;using dev branch&apos; &gt;&gt; three.txt\n</code></pre><p>然后提交：</p>\n<pre><code>$ git add three.txt\n$ git commit -m &apos;dev branch&apos;\n</code></pre><p>现在我们切换回master分支，使用<code>git checkout master</code>命令：</p>\n<pre><code>$ git checkout master\nSwitched to branch &apos;master&apos;\n</code></pre><p>切换回master分支后，再查看一个three.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63gw1ehpfp10rioj20bn066t8p.jpg\" alt=\"picture\"></p>\n<p>那怎么才能把dev分支的工作合并到master上呢？使用<code>git merge</code>命令：</p>\n<pre><code>$ git merge dev\nUpdating f8077c3..b1b45f5\nFast-forward\n three.txt | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre><p><code>git merge</code>命令用于<strong>合并指定分支到当前分支</strong>。合并后，再查看three.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。</p>\n<p>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p>\n<p>现在，我们该怎么删除刚创建的dev分支呢？使用<code>git branch -d</code>命令：</p>\n<pre><code>$ git branch -d dev\nDeleted branch dev (was b1b45f5).\n</code></pre><p><strong>注意：</strong></p>\n<p>要删除某个分支时，必须切出要删除的分支，要不然会报错。</p>\n<p>删除后，查看branch，就只剩下master分支了：</p>\n<pre><code>$ git branch\n* master\n</code></pre><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全</p>\n<hr>\n<p>###小结</p>\n<p>查看当前分支：<code>git branch</code></p>\n<p>创建分支：<code>git branch name</code></p>\n<p>切换分支：<code>git checkout name</code></p>\n<p>创建+切换分支：<code>git checkout -b name</code></p>\n<p>合并某分支到当前分支： <code>git merge name</code></p>\n<p>删除某分支: <code>git branch -d name</code></p>"},{"layout":"post","title":"解决分支冲突问题","_content":"我们已经知道了如何去创建分支以及合并分支，但实际工作中合并分支并不总是像我们想象的那么一帆风顺，总会发生这样那样的冲突，下面说明下如何去解决如此的问题。\n\n首先，创建一个分支dev，并添加新内容：\n\t\n\t$ git checkout -b dev\n\t$ echo 'Hello Php' >> one.md\n\n到此，我们在dev分支上进行添加与提交：\n\n\t$ git add ./one.md\n\t$ git commit -m 'I am dev'\n\n<!--more-->\n\n现在，我们切换分支到master：\n\n\t$ git checkout master\n\n在master分支上添加新内容到one.md文件\n\n\t$ echo 'I am master' >> one.md\n\n现在，在master分支上提交：\n\n\t$ git add one.md\n\t$ git commit -m 'I am master'\n\n到这一步时，我们已经很清楚的知道master分支与dev分支都进行了一次提交，图示如下：\n\n![picture](http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehrtiazeufj20br06x3yl.jpg)\n\n这时，对这两个分支进行合并，会发生什么呢？来看下：\n\n>git merge dev\n\n>Auto-merging one.md\n\n>CONFLICT (content): Merge conflict in one.md\n\n>Automatic merge failed; fix conflicts and then commit the result.\n\n这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突.\n\n果然冲突了！Git告诉我们，one.md文件存在冲突，必须手动解决冲突后再提交。`git status`也可以告诉我们冲突的文件：\n\n\t$ git status\n\t# On branch master\n\t# You have unmerged paths.\n\t#   (fix conflicts and run \"git commit\")\n\t#\n\t# Unmerged paths:\n\t#   (use \"git add <file>...\" to mark resolution)\n\t#\n\t#       both modified:      one.md\n\t#\n\tno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n直接查看one.md文件，看看有什么：\n\n\t$ cat one.md\n\thello php\n\thello php\n\tI am branch\n\tI am master\n\t<<<<<< HEAD\n\tHello Python\n\t=======\n\tHello Php\n\t>>>>>>> dev\n\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存:\n\n>Hello Python\n\n再次提交：\n\n\t$ git add one.md\n\t$ git commit -m 'update'\n\t[master 9eb72e8] update\n\n可以使用带参数的`git log`也可以看到分支的合并情况：\n\n\t$  git log --graph --pretty=oneline --abbrev-commit\n\n![picture](http://ww2.sinaimg.cn/mw690/bd5a4d63gw1ehrt4j4i4qj205v04yaac.jpg)\n\n现在，删除dev分支：\n\n\t$ git branch -d dev\n\tDeleted branch dev (was f4b1974)\n\n---\n\n###小结\n\t\n当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n\n用`git log --graph`命令可以看到分支合并图。\n\n\n\n\n","source":"_posts/201406/2014-06-26-git_branch_conflicts_notes.md","raw":"---\nlayout : post\ntitle : 解决分支冲突问题\ncategory : Git\ntags : Git\n---\n我们已经知道了如何去创建分支以及合并分支，但实际工作中合并分支并不总是像我们想象的那么一帆风顺，总会发生这样那样的冲突，下面说明下如何去解决如此的问题。\n\n首先，创建一个分支dev，并添加新内容：\n\t\n\t$ git checkout -b dev\n\t$ echo 'Hello Php' >> one.md\n\n到此，我们在dev分支上进行添加与提交：\n\n\t$ git add ./one.md\n\t$ git commit -m 'I am dev'\n\n<!--more-->\n\n现在，我们切换分支到master：\n\n\t$ git checkout master\n\n在master分支上添加新内容到one.md文件\n\n\t$ echo 'I am master' >> one.md\n\n现在，在master分支上提交：\n\n\t$ git add one.md\n\t$ git commit -m 'I am master'\n\n到这一步时，我们已经很清楚的知道master分支与dev分支都进行了一次提交，图示如下：\n\n![picture](http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehrtiazeufj20br06x3yl.jpg)\n\n这时，对这两个分支进行合并，会发生什么呢？来看下：\n\n>git merge dev\n\n>Auto-merging one.md\n\n>CONFLICT (content): Merge conflict in one.md\n\n>Automatic merge failed; fix conflicts and then commit the result.\n\n这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突.\n\n果然冲突了！Git告诉我们，one.md文件存在冲突，必须手动解决冲突后再提交。`git status`也可以告诉我们冲突的文件：\n\n\t$ git status\n\t# On branch master\n\t# You have unmerged paths.\n\t#   (fix conflicts and run \"git commit\")\n\t#\n\t# Unmerged paths:\n\t#   (use \"git add <file>...\" to mark resolution)\n\t#\n\t#       both modified:      one.md\n\t#\n\tno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n直接查看one.md文件，看看有什么：\n\n\t$ cat one.md\n\thello php\n\thello php\n\tI am branch\n\tI am master\n\t<<<<<< HEAD\n\tHello Python\n\t=======\n\tHello Php\n\t>>>>>>> dev\n\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存:\n\n>Hello Python\n\n再次提交：\n\n\t$ git add one.md\n\t$ git commit -m 'update'\n\t[master 9eb72e8] update\n\n可以使用带参数的`git log`也可以看到分支的合并情况：\n\n\t$  git log --graph --pretty=oneline --abbrev-commit\n\n![picture](http://ww2.sinaimg.cn/mw690/bd5a4d63gw1ehrt4j4i4qj205v04yaac.jpg)\n\n现在，删除dev分支：\n\n\t$ git branch -d dev\n\tDeleted branch dev (was f4b1974)\n\n---\n\n###小结\n\t\n当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n\n用`git log --graph`命令可以看到分支合并图。\n\n\n\n\n","slug":"201406-2014-06-26-git-branch-conflicts-notes","published":1,"date":"2018-04-12T15:20:38.815Z","updated":"2018-04-12T15:20:38.815Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4d0017ass6q75pyq0v","content":"<p>我们已经知道了如何去创建分支以及合并分支，但实际工作中合并分支并不总是像我们想象的那么一帆风顺，总会发生这样那样的冲突，下面说明下如何去解决如此的问题。</p>\n<p>首先，创建一个分支dev，并添加新内容：</p>\n<pre><code>$ git checkout -b dev\n$ echo &apos;Hello Php&apos; &gt;&gt; one.md\n</code></pre><p>到此，我们在dev分支上进行添加与提交：</p>\n<pre><code>$ git add ./one.md\n$ git commit -m &apos;I am dev&apos;\n</code></pre><a id=\"more\"></a>\n<p>现在，我们切换分支到master：</p>\n<pre><code>$ git checkout master\n</code></pre><p>在master分支上添加新内容到one.md文件</p>\n<pre><code>$ echo &apos;I am master&apos; &gt;&gt; one.md\n</code></pre><p>现在，在master分支上提交：</p>\n<pre><code>$ git add one.md\n$ git commit -m &apos;I am master&apos;\n</code></pre><p>到这一步时，我们已经很清楚的知道master分支与dev分支都进行了一次提交，图示如下：</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehrtiazeufj20br06x3yl.jpg\" alt=\"picture\"></p>\n<p>这时，对这两个分支进行合并，会发生什么呢？来看下：</p>\n<blockquote>\n<p>git merge dev</p>\n</blockquote>\n<blockquote>\n<p>Auto-merging one.md</p>\n</blockquote>\n<blockquote>\n<p>CONFLICT (content): Merge conflict in one.md</p>\n</blockquote>\n<blockquote>\n<p>Automatic merge failed; fix conflicts and then commit the result.</p>\n</blockquote>\n<p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突.</p>\n<p>果然冲突了！Git告诉我们，one.md文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p>\n<pre><code>$ git status\n# On branch master\n# You have unmerged paths.\n#   (fix conflicts and run &quot;git commit&quot;)\n#\n# Unmerged paths:\n#   (use &quot;git add &lt;file&gt;...&quot; to mark resolution)\n#\n#       both modified:      one.md\n#\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\n</code></pre><p>直接查看one.md文件，看看有什么：</p>\n<pre><code>$ cat one.md\nhello php\nhello php\nI am branch\nI am master\n&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nHello Python\n=======\nHello Php\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev\n</code></pre><p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存:</p>\n<blockquote>\n<p>Hello Python</p>\n</blockquote>\n<p>再次提交：</p>\n<pre><code>$ git add one.md\n$ git commit -m &apos;update&apos;\n[master 9eb72e8] update\n</code></pre><p>可以使用带参数的<code>git log</code>也可以看到分支的合并情况：</p>\n<pre><code>$  git log --graph --pretty=oneline --abbrev-commit\n</code></pre><p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63gw1ehrt4j4i4qj205v04yaac.jpg\" alt=\"picture\"></p>\n<p>现在，删除dev分支：</p>\n<pre><code>$ git branch -d dev\nDeleted branch dev (was f4b1974)\n</code></pre><hr>\n<p>###小结</p>\n<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>\n<p>用<code>git log --graph</code>命令可以看到分支合并图。</p>\n","site":{"data":{}},"excerpt":"<p>我们已经知道了如何去创建分支以及合并分支，但实际工作中合并分支并不总是像我们想象的那么一帆风顺，总会发生这样那样的冲突，下面说明下如何去解决如此的问题。</p>\n<p>首先，创建一个分支dev，并添加新内容：</p>\n<pre><code>$ git checkout -b dev\n$ echo &apos;Hello Php&apos; &gt;&gt; one.md\n</code></pre><p>到此，我们在dev分支上进行添加与提交：</p>\n<pre><code>$ git add ./one.md\n$ git commit -m &apos;I am dev&apos;\n</code></pre>","more":"<p>现在，我们切换分支到master：</p>\n<pre><code>$ git checkout master\n</code></pre><p>在master分支上添加新内容到one.md文件</p>\n<pre><code>$ echo &apos;I am master&apos; &gt;&gt; one.md\n</code></pre><p>现在，在master分支上提交：</p>\n<pre><code>$ git add one.md\n$ git commit -m &apos;I am master&apos;\n</code></pre><p>到这一步时，我们已经很清楚的知道master分支与dev分支都进行了一次提交，图示如下：</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehrtiazeufj20br06x3yl.jpg\" alt=\"picture\"></p>\n<p>这时，对这两个分支进行合并，会发生什么呢？来看下：</p>\n<blockquote>\n<p>git merge dev</p>\n</blockquote>\n<blockquote>\n<p>Auto-merging one.md</p>\n</blockquote>\n<blockquote>\n<p>CONFLICT (content): Merge conflict in one.md</p>\n</blockquote>\n<blockquote>\n<p>Automatic merge failed; fix conflicts and then commit the result.</p>\n</blockquote>\n<p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突.</p>\n<p>果然冲突了！Git告诉我们，one.md文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p>\n<pre><code>$ git status\n# On branch master\n# You have unmerged paths.\n#   (fix conflicts and run &quot;git commit&quot;)\n#\n# Unmerged paths:\n#   (use &quot;git add &lt;file&gt;...&quot; to mark resolution)\n#\n#       both modified:      one.md\n#\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\n</code></pre><p>直接查看one.md文件，看看有什么：</p>\n<pre><code>$ cat one.md\nhello php\nhello php\nI am branch\nI am master\n&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nHello Python\n=======\nHello Php\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev\n</code></pre><p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存:</p>\n<blockquote>\n<p>Hello Python</p>\n</blockquote>\n<p>再次提交：</p>\n<pre><code>$ git add one.md\n$ git commit -m &apos;update&apos;\n[master 9eb72e8] update\n</code></pre><p>可以使用带参数的<code>git log</code>也可以看到分支的合并情况：</p>\n<pre><code>$  git log --graph --pretty=oneline --abbrev-commit\n</code></pre><p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63gw1ehrt4j4i4qj205v04yaac.jpg\" alt=\"picture\"></p>\n<p>现在，删除dev分支：</p>\n<pre><code>$ git branch -d dev\nDeleted branch dev (was f4b1974)\n</code></pre><hr>\n<p>###小结</p>\n<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>\n<p>用<code>git log --graph</code>命令可以看到分支合并图。</p>"},{"layout":"post","title":"Linux下搭建PHP环境","_content":"下面分别介绍使用`apt-get`方式在Linux下搭建PHP+Mysql+Apache运行环境，如果是root权限的话可不加`sudo`,普通用户需要使用`sudo`获取临时root权限来进行安装：\n\n###安装Mysql\n\n\tsudo apt-get install mysql-server\n\tsudo apt-get install mysql-client\n\n###安装Apache\n\n\tsudo apt-get install apache2\n\n<!--more-->\n\n###安装PHP\n\n\tsudo apt-get install php5\n\tsudo apt-get install libapache2-mod-auth-mysql\n\tsudo apt-get install php5-mysql\n\n到此，基本就已经安装成功了，下面进行一些测试与权限修改：\n\n**检测Mysql是否正常**\n\n在终端中输入：`mysql -uusername -ppassword `(将username和password替换为你所设置的)看是否可以正常登陆\n\n**检测Apache是否正常**\n\n在浏览器中打开：http://localhost/\n\n如果出现如下信息，则表明正常。\n\n\tIt works!\n\n**检测PHP是否正常**\n\nUbuntu下Apache的默认安装路径为/var/www/html/，到其目录下新建test.php文件，文件内容为：\n\n\t<?php\n\t\tphpinfo();\n\t?>\n\n然后在浏览器中打开：http://localhost/test.php 看是否正常,若能显示PHP版本等其他模块一些信息则代表正常。\n\n**注意：**\n\n在默认情况下，该/var/www目录是有权限的，只能是root管理员进行修改和创建，\n我们可以把权限修改下：\n\n\tsu -\n\n输入root用户密码，然后进入/var目录下，输入：\n\n\tchmod -R 0777 ./www/\n\n切回普通用户：\n\n\tsu - username\n\n查看权限：\n\n\tls -al\n\n普通用户也就有权限了。\n","source":"_posts/201406/2014-06-26-linux_php_install_notes.md","raw":"---\nlayout : post\ntitle : \"Linux下搭建PHP环境\"\ncategory : PHP\ntags : Ubuntu PHP\n---\n下面分别介绍使用`apt-get`方式在Linux下搭建PHP+Mysql+Apache运行环境，如果是root权限的话可不加`sudo`,普通用户需要使用`sudo`获取临时root权限来进行安装：\n\n###安装Mysql\n\n\tsudo apt-get install mysql-server\n\tsudo apt-get install mysql-client\n\n###安装Apache\n\n\tsudo apt-get install apache2\n\n<!--more-->\n\n###安装PHP\n\n\tsudo apt-get install php5\n\tsudo apt-get install libapache2-mod-auth-mysql\n\tsudo apt-get install php5-mysql\n\n到此，基本就已经安装成功了，下面进行一些测试与权限修改：\n\n**检测Mysql是否正常**\n\n在终端中输入：`mysql -uusername -ppassword `(将username和password替换为你所设置的)看是否可以正常登陆\n\n**检测Apache是否正常**\n\n在浏览器中打开：http://localhost/\n\n如果出现如下信息，则表明正常。\n\n\tIt works!\n\n**检测PHP是否正常**\n\nUbuntu下Apache的默认安装路径为/var/www/html/，到其目录下新建test.php文件，文件内容为：\n\n\t<?php\n\t\tphpinfo();\n\t?>\n\n然后在浏览器中打开：http://localhost/test.php 看是否正常,若能显示PHP版本等其他模块一些信息则代表正常。\n\n**注意：**\n\n在默认情况下，该/var/www目录是有权限的，只能是root管理员进行修改和创建，\n我们可以把权限修改下：\n\n\tsu -\n\n输入root用户密码，然后进入/var目录下，输入：\n\n\tchmod -R 0777 ./www/\n\n切回普通用户：\n\n\tsu - username\n\n查看权限：\n\n\tls -al\n\n普通用户也就有权限了。\n","slug":"201406-2014-06-26-linux-php-install-notes","published":1,"date":"2018-04-12T15:20:38.815Z","updated":"2018-04-12T15:20:38.815Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4f001bass6spfuqlu1","content":"<p>下面分别介绍使用<code>apt-get</code>方式在Linux下搭建PHP+Mysql+Apache运行环境，如果是root权限的话可不加<code>sudo</code>,普通用户需要使用<code>sudo</code>获取临时root权限来进行安装：</p>\n<p>###安装Mysql</p>\n<pre><code>sudo apt-get install mysql-server\nsudo apt-get install mysql-client\n</code></pre><p>###安装Apache</p>\n<pre><code>sudo apt-get install apache2\n</code></pre><a id=\"more\"></a>\n<p>###安装PHP</p>\n<pre><code>sudo apt-get install php5\nsudo apt-get install libapache2-mod-auth-mysql\nsudo apt-get install php5-mysql\n</code></pre><p>到此，基本就已经安装成功了，下面进行一些测试与权限修改：</p>\n<p><strong>检测Mysql是否正常</strong></p>\n<p>在终端中输入：<code>mysql -uusername -ppassword</code>(将username和password替换为你所设置的)看是否可以正常登陆</p>\n<p><strong>检测Apache是否正常</strong></p>\n<p>在浏览器中打开：<a href=\"http://localhost/\" target=\"_blank\" rel=\"noopener\">http://localhost/</a></p>\n<p>如果出现如下信息，则表明正常。</p>\n<pre><code>It works!\n</code></pre><p><strong>检测PHP是否正常</strong></p>\n<p>Ubuntu下Apache的默认安装路径为/var/www/html/，到其目录下新建test.php文件，文件内容为：</p>\n<pre><code>&lt;?php\n    phpinfo();\n?&gt;\n</code></pre><p>然后在浏览器中打开：<a href=\"http://localhost/test.php\" target=\"_blank\" rel=\"noopener\">http://localhost/test.php</a> 看是否正常,若能显示PHP版本等其他模块一些信息则代表正常。</p>\n<p><strong>注意：</strong></p>\n<p>在默认情况下，该/var/www目录是有权限的，只能是root管理员进行修改和创建，<br>我们可以把权限修改下：</p>\n<pre><code>su -\n</code></pre><p>输入root用户密码，然后进入/var目录下，输入：</p>\n<pre><code>chmod -R 0777 ./www/\n</code></pre><p>切回普通用户：</p>\n<pre><code>su - username\n</code></pre><p>查看权限：</p>\n<pre><code>ls -al\n</code></pre><p>普通用户也就有权限了。</p>\n","site":{"data":{}},"excerpt":"<p>下面分别介绍使用<code>apt-get</code>方式在Linux下搭建PHP+Mysql+Apache运行环境，如果是root权限的话可不加<code>sudo</code>,普通用户需要使用<code>sudo</code>获取临时root权限来进行安装：</p>\n<p>###安装Mysql</p>\n<pre><code>sudo apt-get install mysql-server\nsudo apt-get install mysql-client\n</code></pre><p>###安装Apache</p>\n<pre><code>sudo apt-get install apache2\n</code></pre>","more":"<p>###安装PHP</p>\n<pre><code>sudo apt-get install php5\nsudo apt-get install libapache2-mod-auth-mysql\nsudo apt-get install php5-mysql\n</code></pre><p>到此，基本就已经安装成功了，下面进行一些测试与权限修改：</p>\n<p><strong>检测Mysql是否正常</strong></p>\n<p>在终端中输入：<code>mysql -uusername -ppassword</code>(将username和password替换为你所设置的)看是否可以正常登陆</p>\n<p><strong>检测Apache是否正常</strong></p>\n<p>在浏览器中打开：<a href=\"http://localhost/\" target=\"_blank\" rel=\"noopener\">http://localhost/</a></p>\n<p>如果出现如下信息，则表明正常。</p>\n<pre><code>It works!\n</code></pre><p><strong>检测PHP是否正常</strong></p>\n<p>Ubuntu下Apache的默认安装路径为/var/www/html/，到其目录下新建test.php文件，文件内容为：</p>\n<pre><code>&lt;?php\n    phpinfo();\n?&gt;\n</code></pre><p>然后在浏览器中打开：<a href=\"http://localhost/test.php\" target=\"_blank\" rel=\"noopener\">http://localhost/test.php</a> 看是否正常,若能显示PHP版本等其他模块一些信息则代表正常。</p>\n<p><strong>注意：</strong></p>\n<p>在默认情况下，该/var/www目录是有权限的，只能是root管理员进行修改和创建，<br>我们可以把权限修改下：</p>\n<pre><code>su -\n</code></pre><p>输入root用户密码，然后进入/var目录下，输入：</p>\n<pre><code>chmod -R 0777 ./www/\n</code></pre><p>切回普通用户：</p>\n<pre><code>su - username\n</code></pre><p>查看权限：</p>\n<pre><code>ls -al\n</code></pre><p>普通用户也就有权限了。</p>"},{"layout":"post","title":"分支管理策略","_content":"通常，合并分支时，如果可能，Git会用`“Fast forward”`模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用`“Fast forward”`模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。为了保证版本演进的清晰，希望采用这种做法.\n\n首先，我们创建一个dev分支，并且切换到该分支：\n\n\t$ git checkout -b dev\n\tSwitched to a new branch 'dev'\n\n修改one.md文件，并提交修改：\n\n\t$ echo 'add branch manage' >> one.md\n\t$ git add ./one.md\n\t$ git commit -m 'dev branch'\n\n<!--more-->\n\n现在，切换到master分支：\n\n\t$ git checkout master\n\n准备合并dev分支，请注意`--no-ff`参数，表示禁用“Fast forward”：\n\n\t$ git merge --no-ff -m 'merge with no-ff' dev\n\tMerge made by the 'recursive' strategy.\n \tone.md | 1 +\n \t1 file changed, 1 insertion(+)\n\n因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。\n\n合并后，我们用git log看看分支历史：\n\n\t$ git log --graph --pretty=oneline --abbrev-commit\n\t*   98aa0eb merge with no-ff\n\t|\\\n\t| * 0b6f37c dev branch\n\t|/\n\t*   9eb72e8 update\n\t|\\\n\t| * f4b1974 I am dev\n\t* | 6fb4e38 I am master\n\t|/\n\n可以看到，不使用“Fast forward”模式，merge后就像这样：\n\n![picture](http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehswmf2jhhj20dc07574c.jpg)\n\n###分支策略\n\n在实际开发中，我们应该按照几个基本原则进行分支管理：\n\n首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；\n\n那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；\n\n你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。\n\n所以，团队合作的分支看起来就像这样：\n\n![pic](http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehswp18k3xj20du03haab.jpg)\n\n---\n###小结\n\n**Git分支十分强大，在团队开发中应该充分应用。**\n\n合并分支时，加上`--no-ff`参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而`fast forward`合并就看不出来曾经做过合并。","source":"_posts/201406/2014-06-27-git_branch_manage_notes.md","raw":"---\nlayout : post\ntitle : 分支管理策略\ncategory : Git\ntags : Git\n---\n通常，合并分支时，如果可能，Git会用`“Fast forward”`模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用`“Fast forward”`模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。为了保证版本演进的清晰，希望采用这种做法.\n\n首先，我们创建一个dev分支，并且切换到该分支：\n\n\t$ git checkout -b dev\n\tSwitched to a new branch 'dev'\n\n修改one.md文件，并提交修改：\n\n\t$ echo 'add branch manage' >> one.md\n\t$ git add ./one.md\n\t$ git commit -m 'dev branch'\n\n<!--more-->\n\n现在，切换到master分支：\n\n\t$ git checkout master\n\n准备合并dev分支，请注意`--no-ff`参数，表示禁用“Fast forward”：\n\n\t$ git merge --no-ff -m 'merge with no-ff' dev\n\tMerge made by the 'recursive' strategy.\n \tone.md | 1 +\n \t1 file changed, 1 insertion(+)\n\n因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。\n\n合并后，我们用git log看看分支历史：\n\n\t$ git log --graph --pretty=oneline --abbrev-commit\n\t*   98aa0eb merge with no-ff\n\t|\\\n\t| * 0b6f37c dev branch\n\t|/\n\t*   9eb72e8 update\n\t|\\\n\t| * f4b1974 I am dev\n\t* | 6fb4e38 I am master\n\t|/\n\n可以看到，不使用“Fast forward”模式，merge后就像这样：\n\n![picture](http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehswmf2jhhj20dc07574c.jpg)\n\n###分支策略\n\n在实际开发中，我们应该按照几个基本原则进行分支管理：\n\n首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；\n\n那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；\n\n你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。\n\n所以，团队合作的分支看起来就像这样：\n\n![pic](http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehswp18k3xj20du03haab.jpg)\n\n---\n###小结\n\n**Git分支十分强大，在团队开发中应该充分应用。**\n\n合并分支时，加上`--no-ff`参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而`fast forward`合并就看不出来曾经做过合并。","slug":"201406-2014-06-27-git-branch-manage-notes","published":1,"date":"2018-04-12T15:20:38.815Z","updated":"2018-04-12T15:20:38.815Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4h001eass6r1azrau4","content":"<p>通常，合并分支时，如果可能，Git会用<code>“Fast forward”</code>模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用<code>“Fast forward”</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。为了保证版本演进的清晰，希望采用这种做法.</p>\n<p>首先，我们创建一个dev分支，并且切换到该分支：</p>\n<pre><code>$ git checkout -b dev\nSwitched to a new branch &apos;dev&apos;\n</code></pre><p>修改one.md文件，并提交修改：</p>\n<pre><code>$ echo &apos;add branch manage&apos; &gt;&gt; one.md\n$ git add ./one.md\n$ git commit -m &apos;dev branch&apos;\n</code></pre><a id=\"more\"></a>\n<p>现在，切换到master分支：</p>\n<pre><code>$ git checkout master\n</code></pre><p>准备合并dev分支，请注意<code>--no-ff</code>参数，表示禁用“Fast forward”：</p>\n<pre><code>$ git merge --no-ff -m &apos;merge with no-ff&apos; dev\nMerge made by the &apos;recursive&apos; strategy.\n one.md | 1 +\n 1 file changed, 1 insertion(+)\n</code></pre><p>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</p>\n<p>合并后，我们用git log看看分支历史：</p>\n<pre><code>$ git log --graph --pretty=oneline --abbrev-commit\n*   98aa0eb merge with no-ff\n|\\\n| * 0b6f37c dev branch\n|/\n*   9eb72e8 update\n|\\\n| * f4b1974 I am dev\n* | 6fb4e38 I am master\n|/\n</code></pre><p>可以看到，不使用“Fast forward”模式，merge后就像这样：</p>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehswmf2jhhj20dc07574c.jpg\" alt=\"picture\"></p>\n<p>###分支策略</p>\n<p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>\n<p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>\n<p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p>\n<p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p>\n<p>所以，团队合作的分支看起来就像这样：</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehswp18k3xj20du03haab.jpg\" alt=\"pic\"></p>\n<hr>\n<p>###小结</p>\n<p><strong>Git分支十分强大，在团队开发中应该充分应用。</strong></p>\n<p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p>\n","site":{"data":{}},"excerpt":"<p>通常，合并分支时，如果可能，Git会用<code>“Fast forward”</code>模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用<code>“Fast forward”</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。为了保证版本演进的清晰，希望采用这种做法.</p>\n<p>首先，我们创建一个dev分支，并且切换到该分支：</p>\n<pre><code>$ git checkout -b dev\nSwitched to a new branch &apos;dev&apos;\n</code></pre><p>修改one.md文件，并提交修改：</p>\n<pre><code>$ echo &apos;add branch manage&apos; &gt;&gt; one.md\n$ git add ./one.md\n$ git commit -m &apos;dev branch&apos;\n</code></pre>","more":"<p>现在，切换到master分支：</p>\n<pre><code>$ git checkout master\n</code></pre><p>准备合并dev分支，请注意<code>--no-ff</code>参数，表示禁用“Fast forward”：</p>\n<pre><code>$ git merge --no-ff -m &apos;merge with no-ff&apos; dev\nMerge made by the &apos;recursive&apos; strategy.\n one.md | 1 +\n 1 file changed, 1 insertion(+)\n</code></pre><p>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</p>\n<p>合并后，我们用git log看看分支历史：</p>\n<pre><code>$ git log --graph --pretty=oneline --abbrev-commit\n*   98aa0eb merge with no-ff\n|\\\n| * 0b6f37c dev branch\n|/\n*   9eb72e8 update\n|\\\n| * f4b1974 I am dev\n* | 6fb4e38 I am master\n|/\n</code></pre><p>可以看到，不使用“Fast forward”模式，merge后就像这样：</p>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/bd5a4d63gw1ehswmf2jhhj20dc07574c.jpg\" alt=\"picture\"></p>\n<p>###分支策略</p>\n<p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>\n<p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>\n<p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p>\n<p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p>\n<p>所以，团队合作的分支看起来就像这样：</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63gw1ehswp18k3xj20du03haab.jpg\" alt=\"pic\"></p>\n<hr>\n<p>###小结</p>\n<p><strong>Git分支十分强大，在团队开发中应该充分应用。</strong></p>\n<p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p>"},{"layout":"post","title":"PDO事务处理","_content":"事务是确保数据库一致的机制，作为一个单元的一组有序的数据库操作。在事务的组中哪怕有一个环节操作失败，事务也不成功，则整个事务将被回滚，该事务中的所有操作都将被撤销。只有组中的所有SQL语句都操作成功，则认为事务成功，事务才被提交。\n\n下面，介绍几个PDO中要用到的关于事务处理的函数：\n\n###`beginTransaction()`函数：\n\n该方法来启动一个事务，标明了回滚起始点。如果底层驱动成程序不支持事务，那么PHP将会抛出一个PDOException的异常。\n\n<!--more-->\n\n###`commit()`函数：\n\n该函数用来提交一个事务，并且执行SQl。\n\n###`rollback()`函数：\n\n该函数用来回滚一个事务。\n\n---\n\n下面来构建一个事务处理的程序：\n\n在淘宝购物时，当我们选好一个价格为100元的宝贝，我们采用网银进行转账。假设用户A向B转账100元。首先在demo数据库准备好一个InnoDB引擎的数据表account。废话不多说，直接上代码：\n\n\t<?php\n\t//PDO事务处理练习\n\t$dsn = 'mysql:host=localhost;dbname=demo';\n\t$user = 'root';\n\t$pwd = 'password';\n\t$pdo = new PDO($dsn, $user, $pwd);\n\t$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);      //设置异常处理模式\n\t$pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 0);                        //关闭自动提交\n\n\t//异常处理转账事务\n\ttry {\n    \t$price = 100;\n    \t$pdo->beginTransaction();          //开启一个事务\n\n    \t$affected_rows = $pdo-exec(\"update account set cash=cash-{$price} where name='A'\");     //转账\n\n    \tif ($affected_rows > 0) {\n        \techo 'A转出{$price}成功';\n    \t} else {\n        \tthrow new PDOException ('A转账失败');       //抛出异常\n    \t}\n\n    \t$affected_rows = $pdo-exec(\"update account set cash=cash+{$price} where name='B'\");     //转入\n    \n    \tif ($affected_rows > 0) {\n        \techo 'B转入{$price}成功';\n    \t} else {\n        \tthrow new PDOException ('B转入失败');       //抛出异常\n    \t}\n    \n    \techo '交易成功';\n    \t$pdo->commit();       //事务执行成功\n\t} catch (PDOException $e) {\n    \techo '交易失败' .$e->getMessage();\n    \t$pdo->rollback();     //事务回滚\n\t}\n\t?>\n\n这个事务处理的过程需要两条sql更新语句来一起合作完成，所以采用事务处理来确保两条sql语句对数据操作的一致性。一旦发生错误，则catch快就可以捕获异常并进行回滚事务发生的所有更改，并打印一条错误信息。\n","source":"_posts/201406/2014-06-27-php_pdo_transaction_notes.md","raw":"---\nlayout : post\ntitle : PDO事务处理\ncategory : PHP\ntags : PHP PDO\n---\n事务是确保数据库一致的机制，作为一个单元的一组有序的数据库操作。在事务的组中哪怕有一个环节操作失败，事务也不成功，则整个事务将被回滚，该事务中的所有操作都将被撤销。只有组中的所有SQL语句都操作成功，则认为事务成功，事务才被提交。\n\n下面，介绍几个PDO中要用到的关于事务处理的函数：\n\n###`beginTransaction()`函数：\n\n该方法来启动一个事务，标明了回滚起始点。如果底层驱动成程序不支持事务，那么PHP将会抛出一个PDOException的异常。\n\n<!--more-->\n\n###`commit()`函数：\n\n该函数用来提交一个事务，并且执行SQl。\n\n###`rollback()`函数：\n\n该函数用来回滚一个事务。\n\n---\n\n下面来构建一个事务处理的程序：\n\n在淘宝购物时，当我们选好一个价格为100元的宝贝，我们采用网银进行转账。假设用户A向B转账100元。首先在demo数据库准备好一个InnoDB引擎的数据表account。废话不多说，直接上代码：\n\n\t<?php\n\t//PDO事务处理练习\n\t$dsn = 'mysql:host=localhost;dbname=demo';\n\t$user = 'root';\n\t$pwd = 'password';\n\t$pdo = new PDO($dsn, $user, $pwd);\n\t$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);      //设置异常处理模式\n\t$pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 0);                        //关闭自动提交\n\n\t//异常处理转账事务\n\ttry {\n    \t$price = 100;\n    \t$pdo->beginTransaction();          //开启一个事务\n\n    \t$affected_rows = $pdo-exec(\"update account set cash=cash-{$price} where name='A'\");     //转账\n\n    \tif ($affected_rows > 0) {\n        \techo 'A转出{$price}成功';\n    \t} else {\n        \tthrow new PDOException ('A转账失败');       //抛出异常\n    \t}\n\n    \t$affected_rows = $pdo-exec(\"update account set cash=cash+{$price} where name='B'\");     //转入\n    \n    \tif ($affected_rows > 0) {\n        \techo 'B转入{$price}成功';\n    \t} else {\n        \tthrow new PDOException ('B转入失败');       //抛出异常\n    \t}\n    \n    \techo '交易成功';\n    \t$pdo->commit();       //事务执行成功\n\t} catch (PDOException $e) {\n    \techo '交易失败' .$e->getMessage();\n    \t$pdo->rollback();     //事务回滚\n\t}\n\t?>\n\n这个事务处理的过程需要两条sql更新语句来一起合作完成，所以采用事务处理来确保两条sql语句对数据操作的一致性。一旦发生错误，则catch快就可以捕获异常并进行回滚事务发生的所有更改，并打印一条错误信息。\n","slug":"201406-2014-06-27-php-pdo-transaction-notes","published":1,"date":"2018-04-12T15:20:38.816Z","updated":"2018-04-12T15:20:38.816Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4j001iass6wgny7icz","content":"<p>事务是确保数据库一致的机制，作为一个单元的一组有序的数据库操作。在事务的组中哪怕有一个环节操作失败，事务也不成功，则整个事务将被回滚，该事务中的所有操作都将被撤销。只有组中的所有SQL语句都操作成功，则认为事务成功，事务才被提交。</p>\n<p>下面，介绍几个PDO中要用到的关于事务处理的函数：</p>\n<p>###<code>beginTransaction()</code>函数：</p>\n<p>该方法来启动一个事务，标明了回滚起始点。如果底层驱动成程序不支持事务，那么PHP将会抛出一个PDOException的异常。</p>\n<a id=\"more\"></a>\n<p>###<code>commit()</code>函数：</p>\n<p>该函数用来提交一个事务，并且执行SQl。</p>\n<p>###<code>rollback()</code>函数：</p>\n<p>该函数用来回滚一个事务。</p>\n<hr>\n<p>下面来构建一个事务处理的程序：</p>\n<p>在淘宝购物时，当我们选好一个价格为100元的宝贝，我们采用网银进行转账。假设用户A向B转账100元。首先在demo数据库准备好一个InnoDB引擎的数据表account。废话不多说，直接上代码：</p>\n<pre><code>&lt;?php\n//PDO事务处理练习\n$dsn = &apos;mysql:host=localhost;dbname=demo&apos;;\n$user = &apos;root&apos;;\n$pwd = &apos;password&apos;;\n$pdo = new PDO($dsn, $user, $pwd);\n$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);      //设置异常处理模式\n$pdo-&gt;setAttribute(PDO::ATTR_AUTOCOMMIT, 0);                        //关闭自动提交\n\n//异常处理转账事务\ntry {\n    $price = 100;\n    $pdo-&gt;beginTransaction();          //开启一个事务\n\n    $affected_rows = $pdo-exec(&quot;update account set cash=cash-{$price} where name=&apos;A&apos;&quot;);     //转账\n\n    if ($affected_rows &gt; 0) {\n        echo &apos;A转出{$price}成功&apos;;\n    } else {\n        throw new PDOException (&apos;A转账失败&apos;);       //抛出异常\n    }\n\n    $affected_rows = $pdo-exec(&quot;update account set cash=cash+{$price} where name=&apos;B&apos;&quot;);     //转入\n\n    if ($affected_rows &gt; 0) {\n        echo &apos;B转入{$price}成功&apos;;\n    } else {\n        throw new PDOException (&apos;B转入失败&apos;);       //抛出异常\n    }\n\n    echo &apos;交易成功&apos;;\n    $pdo-&gt;commit();       //事务执行成功\n} catch (PDOException $e) {\n    echo &apos;交易失败&apos; .$e-&gt;getMessage();\n    $pdo-&gt;rollback();     //事务回滚\n}\n?&gt;\n</code></pre><p>这个事务处理的过程需要两条sql更新语句来一起合作完成，所以采用事务处理来确保两条sql语句对数据操作的一致性。一旦发生错误，则catch快就可以捕获异常并进行回滚事务发生的所有更改，并打印一条错误信息。</p>\n","site":{"data":{}},"excerpt":"<p>事务是确保数据库一致的机制，作为一个单元的一组有序的数据库操作。在事务的组中哪怕有一个环节操作失败，事务也不成功，则整个事务将被回滚，该事务中的所有操作都将被撤销。只有组中的所有SQL语句都操作成功，则认为事务成功，事务才被提交。</p>\n<p>下面，介绍几个PDO中要用到的关于事务处理的函数：</p>\n<p>###<code>beginTransaction()</code>函数：</p>\n<p>该方法来启动一个事务，标明了回滚起始点。如果底层驱动成程序不支持事务，那么PHP将会抛出一个PDOException的异常。</p>","more":"<p>###<code>commit()</code>函数：</p>\n<p>该函数用来提交一个事务，并且执行SQl。</p>\n<p>###<code>rollback()</code>函数：</p>\n<p>该函数用来回滚一个事务。</p>\n<hr>\n<p>下面来构建一个事务处理的程序：</p>\n<p>在淘宝购物时，当我们选好一个价格为100元的宝贝，我们采用网银进行转账。假设用户A向B转账100元。首先在demo数据库准备好一个InnoDB引擎的数据表account。废话不多说，直接上代码：</p>\n<pre><code>&lt;?php\n//PDO事务处理练习\n$dsn = &apos;mysql:host=localhost;dbname=demo&apos;;\n$user = &apos;root&apos;;\n$pwd = &apos;password&apos;;\n$pdo = new PDO($dsn, $user, $pwd);\n$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);      //设置异常处理模式\n$pdo-&gt;setAttribute(PDO::ATTR_AUTOCOMMIT, 0);                        //关闭自动提交\n\n//异常处理转账事务\ntry {\n    $price = 100;\n    $pdo-&gt;beginTransaction();          //开启一个事务\n\n    $affected_rows = $pdo-exec(&quot;update account set cash=cash-{$price} where name=&apos;A&apos;&quot;);     //转账\n\n    if ($affected_rows &gt; 0) {\n        echo &apos;A转出{$price}成功&apos;;\n    } else {\n        throw new PDOException (&apos;A转账失败&apos;);       //抛出异常\n    }\n\n    $affected_rows = $pdo-exec(&quot;update account set cash=cash+{$price} where name=&apos;B&apos;&quot;);     //转入\n\n    if ($affected_rows &gt; 0) {\n        echo &apos;B转入{$price}成功&apos;;\n    } else {\n        throw new PDOException (&apos;B转入失败&apos;);       //抛出异常\n    }\n\n    echo &apos;交易成功&apos;;\n    $pdo-&gt;commit();       //事务执行成功\n} catch (PDOException $e) {\n    echo &apos;交易失败&apos; .$e-&gt;getMessage();\n    $pdo-&gt;rollback();     //事务回滚\n}\n?&gt;\n</code></pre><p>这个事务处理的过程需要两条sql更新语句来一起合作完成，所以采用事务处理来确保两条sql语句对数据操作的一致性。一旦发生错误，则catch快就可以捕获异常并进行回滚事务发生的所有更改，并打印一条错误信息。</p>"},{"layout":"post","title":"Linux与Windows的断行符问题","_content":"\n在Linux系统中，当我们使用`cat -A`命令来查看以Windows建立的文件的格式时，可以发现在Windows中使用的断行符是`^M$`,被称为“CRLF”。而以Linux建立的文件格式却只有LF($)这个断行符号。\n\nLinux下面的命令在开始执行时，他的判断依据是[ENTER],而且Linux的[ENTER]为LF符号。由于Windows的断行符是CRLF，也就是说多出了一个`^M`的符号来。这时候，如果去执行一个shell script的脚本文件时，可能就会出现问题。\n\n<!--more-->\n\n那么，该怎么办呢？很简单，把格式转换为Linux格式即可，难道要vim进入该文件，一个一个去删除`^M`字符吗，肯定不是拉，我们可以使用命令来进行格式转换。\n\n    dos2UNIX [-kn] file [newfile]\n    UNIX2dos [-kn] file [newfile]\n\n参数：\n\t\n\t-k:保留原本文件的mtime格式\n\t-n:保留原本的文件，将转换后的文件输出到新文件 [如：dos2UNIX -n oldfile newfile]\n\n下面将从Windows传到Linux的hello.sh文件进行格式的转换：\n\n    hanson@linux-host:/tmp$ dos2unix -k -n hello.sh new.hello.sh\n    dos2unix: converting file hello.sh to file new.hello.sh in Unix format ...\n\n使用`ls -l`查看下：\n\n    hanson@linux-host:/tmp$ ls -l\n    -rwxr-xr-x 1 hanson hanson   59  6月 27 20:22 hello.sh\n    -rwxr-xr-x 1 hanson hanson   50  6月 27 20:25 new.hello.sh\n\n因为，断行符`^M`少了，所以文件大小也变小了。\n\n同理：可以使用`unix2dos`命令来将文件转换为Windows格式断行。\n\n---\n\n###小结\n\n现在，我们知道在Linux下与Windows下的断行格式有冲突，因此，不建议在Windows系统当中将文件编辑好后传到Linux，会发生错误问题。不过，当在不同的系统之间进行文件的复制时，千万记得要使用unix2dos或者dos2unix命令来转换下格式。\n\t\n","source":"_posts/201406/2014-06-27-unix_dos_crlf_notes.md","raw":"---\nlayout : post\ntitle : Linux与Windows的断行符问题\ncategory : Linux\ntags : Linux\n---\n\n在Linux系统中，当我们使用`cat -A`命令来查看以Windows建立的文件的格式时，可以发现在Windows中使用的断行符是`^M$`,被称为“CRLF”。而以Linux建立的文件格式却只有LF($)这个断行符号。\n\nLinux下面的命令在开始执行时，他的判断依据是[ENTER],而且Linux的[ENTER]为LF符号。由于Windows的断行符是CRLF，也就是说多出了一个`^M`的符号来。这时候，如果去执行一个shell script的脚本文件时，可能就会出现问题。\n\n<!--more-->\n\n那么，该怎么办呢？很简单，把格式转换为Linux格式即可，难道要vim进入该文件，一个一个去删除`^M`字符吗，肯定不是拉，我们可以使用命令来进行格式转换。\n\n    dos2UNIX [-kn] file [newfile]\n    UNIX2dos [-kn] file [newfile]\n\n参数：\n\t\n\t-k:保留原本文件的mtime格式\n\t-n:保留原本的文件，将转换后的文件输出到新文件 [如：dos2UNIX -n oldfile newfile]\n\n下面将从Windows传到Linux的hello.sh文件进行格式的转换：\n\n    hanson@linux-host:/tmp$ dos2unix -k -n hello.sh new.hello.sh\n    dos2unix: converting file hello.sh to file new.hello.sh in Unix format ...\n\n使用`ls -l`查看下：\n\n    hanson@linux-host:/tmp$ ls -l\n    -rwxr-xr-x 1 hanson hanson   59  6月 27 20:22 hello.sh\n    -rwxr-xr-x 1 hanson hanson   50  6月 27 20:25 new.hello.sh\n\n因为，断行符`^M`少了，所以文件大小也变小了。\n\n同理：可以使用`unix2dos`命令来将文件转换为Windows格式断行。\n\n---\n\n###小结\n\n现在，我们知道在Linux下与Windows下的断行格式有冲突，因此，不建议在Windows系统当中将文件编辑好后传到Linux，会发生错误问题。不过，当在不同的系统之间进行文件的复制时，千万记得要使用unix2dos或者dos2unix命令来转换下格式。\n\t\n","slug":"201406-2014-06-27-unix-dos-crlf-notes","published":1,"date":"2018-04-12T15:20:38.816Z","updated":"2018-04-12T15:20:38.816Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4k001lass65de3nrxh","content":"<p>在Linux系统中，当我们使用<code>cat -A</code>命令来查看以Windows建立的文件的格式时，可以发现在Windows中使用的断行符是<code>^M$</code>,被称为“CRLF”。而以Linux建立的文件格式却只有LF($)这个断行符号。</p>\n<p>Linux下面的命令在开始执行时，他的判断依据是[ENTER],而且Linux的[ENTER]为LF符号。由于Windows的断行符是CRLF，也就是说多出了一个<code>^M</code>的符号来。这时候，如果去执行一个shell script的脚本文件时，可能就会出现问题。</p>\n<a id=\"more\"></a>\n<p>那么，该怎么办呢？很简单，把格式转换为Linux格式即可，难道要vim进入该文件，一个一个去删除<code>^M</code>字符吗，肯定不是拉，我们可以使用命令来进行格式转换。</p>\n<pre><code>dos2UNIX [-kn] file [newfile]\nUNIX2dos [-kn] file [newfile]\n</code></pre><p>参数：</p>\n<pre><code>-k:保留原本文件的mtime格式\n-n:保留原本的文件，将转换后的文件输出到新文件 [如：dos2UNIX -n oldfile newfile]\n</code></pre><p>下面将从Windows传到Linux的hello.sh文件进行格式的转换：</p>\n<pre><code>hanson@linux-host:/tmp$ dos2unix -k -n hello.sh new.hello.sh\ndos2unix: converting file hello.sh to file new.hello.sh in Unix format ...\n</code></pre><p>使用<code>ls -l</code>查看下：</p>\n<pre><code>hanson@linux-host:/tmp$ ls -l\n-rwxr-xr-x 1 hanson hanson   59  6月 27 20:22 hello.sh\n-rwxr-xr-x 1 hanson hanson   50  6月 27 20:25 new.hello.sh\n</code></pre><p>因为，断行符<code>^M</code>少了，所以文件大小也变小了。</p>\n<p>同理：可以使用<code>unix2dos</code>命令来将文件转换为Windows格式断行。</p>\n<hr>\n<p>###小结</p>\n<p>现在，我们知道在Linux下与Windows下的断行格式有冲突，因此，不建议在Windows系统当中将文件编辑好后传到Linux，会发生错误问题。不过，当在不同的系统之间进行文件的复制时，千万记得要使用unix2dos或者dos2unix命令来转换下格式。</p>\n","site":{"data":{}},"excerpt":"<p>在Linux系统中，当我们使用<code>cat -A</code>命令来查看以Windows建立的文件的格式时，可以发现在Windows中使用的断行符是<code>^M$</code>,被称为“CRLF”。而以Linux建立的文件格式却只有LF($)这个断行符号。</p>\n<p>Linux下面的命令在开始执行时，他的判断依据是[ENTER],而且Linux的[ENTER]为LF符号。由于Windows的断行符是CRLF，也就是说多出了一个<code>^M</code>的符号来。这时候，如果去执行一个shell script的脚本文件时，可能就会出现问题。</p>","more":"<p>那么，该怎么办呢？很简单，把格式转换为Linux格式即可，难道要vim进入该文件，一个一个去删除<code>^M</code>字符吗，肯定不是拉，我们可以使用命令来进行格式转换。</p>\n<pre><code>dos2UNIX [-kn] file [newfile]\nUNIX2dos [-kn] file [newfile]\n</code></pre><p>参数：</p>\n<pre><code>-k:保留原本文件的mtime格式\n-n:保留原本的文件，将转换后的文件输出到新文件 [如：dos2UNIX -n oldfile newfile]\n</code></pre><p>下面将从Windows传到Linux的hello.sh文件进行格式的转换：</p>\n<pre><code>hanson@linux-host:/tmp$ dos2unix -k -n hello.sh new.hello.sh\ndos2unix: converting file hello.sh to file new.hello.sh in Unix format ...\n</code></pre><p>使用<code>ls -l</code>查看下：</p>\n<pre><code>hanson@linux-host:/tmp$ ls -l\n-rwxr-xr-x 1 hanson hanson   59  6月 27 20:22 hello.sh\n-rwxr-xr-x 1 hanson hanson   50  6月 27 20:25 new.hello.sh\n</code></pre><p>因为，断行符<code>^M</code>少了，所以文件大小也变小了。</p>\n<p>同理：可以使用<code>unix2dos</code>命令来将文件转换为Windows格式断行。</p>\n<hr>\n<p>###小结</p>\n<p>现在，我们知道在Linux下与Windows下的断行格式有冲突，因此，不建议在Windows系统当中将文件编辑好后传到Linux，会发生错误问题。不过，当在不同的系统之间进行文件的复制时，千万记得要使用unix2dos或者dos2unix命令来转换下格式。</p>"},{"layout":"post","title":"Feature分支","_content":"添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。\n\n假设我们创建了一个feature分支来开发新功能：\n\n\t$ git checkout -b feature\n\n当我们开发好新功能，并且已经提交完成：\n\n\t$ git add two.md\n\t$ git commit -m 'feature branch'\n\n<!--more-->\n\n此时，切换到master分支：\n\n\t$ git checkout master\n\n如果一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。\n\n但是，就在此时接到通知，要删除这个新功能：\n\n\t$ git branch -d feature\n\terror: The branch 'feature' is not fully merged.\n\tIf you are sure you want to delete it, run 'git branch -D feature'.\n\n销毁失败。Git友情提醒，feature分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令`git branch -D feature`。\n\n现在我们强行删除：\n\n\t$ git branch -D feature\n\tDeleted branch feature (was 80ab808).\n\n终于删除成功！\n\n---\n\n###小结\n\n当开发一个新功能时，最好新创建一feature分支。\n\n如果要丢弃一个没有被合并过的分支，可以通过`git branch -D name`强行删除。","source":"_posts/201406/2014-06-30-git_delete_unmerge_branch_notes.md","raw":"---\nlayout : post\ntitle : Feature分支\ncategory : Git\ntags : Git\n---\n添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。\n\n假设我们创建了一个feature分支来开发新功能：\n\n\t$ git checkout -b feature\n\n当我们开发好新功能，并且已经提交完成：\n\n\t$ git add two.md\n\t$ git commit -m 'feature branch'\n\n<!--more-->\n\n此时，切换到master分支：\n\n\t$ git checkout master\n\n如果一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。\n\n但是，就在此时接到通知，要删除这个新功能：\n\n\t$ git branch -d feature\n\terror: The branch 'feature' is not fully merged.\n\tIf you are sure you want to delete it, run 'git branch -D feature'.\n\n销毁失败。Git友情提醒，feature分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令`git branch -D feature`。\n\n现在我们强行删除：\n\n\t$ git branch -D feature\n\tDeleted branch feature (was 80ab808).\n\n终于删除成功！\n\n---\n\n###小结\n\n当开发一个新功能时，最好新创建一feature分支。\n\n如果要丢弃一个没有被合并过的分支，可以通过`git branch -D name`强行删除。","slug":"201406-2014-06-30-git-delete-unmerge-branch-notes","published":1,"date":"2018-04-12T15:20:38.816Z","updated":"2018-04-12T15:20:38.817Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4m001qass60bnujkeh","content":"<p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>\n<p>假设我们创建了一个feature分支来开发新功能：</p>\n<pre><code>$ git checkout -b feature\n</code></pre><p>当我们开发好新功能，并且已经提交完成：</p>\n<pre><code>$ git add two.md\n$ git commit -m &apos;feature branch&apos;\n</code></pre><a id=\"more\"></a>\n<p>此时，切换到master分支：</p>\n<pre><code>$ git checkout master\n</code></pre><p>如果一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p>\n<p>但是，就在此时接到通知，要删除这个新功能：</p>\n<pre><code>$ git branch -d feature\nerror: The branch &apos;feature&apos; is not fully merged.\nIf you are sure you want to delete it, run &apos;git branch -D feature&apos;.\n</code></pre><p>销毁失败。Git友情提醒，feature分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令<code>git branch -D feature</code>。</p>\n<p>现在我们强行删除：</p>\n<pre><code>$ git branch -D feature\nDeleted branch feature (was 80ab808).\n</code></pre><p>终于删除成功！</p>\n<hr>\n<p>###小结</p>\n<p>当开发一个新功能时，最好新创建一feature分支。</p>\n<p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D name</code>强行删除。</p>\n","site":{"data":{}},"excerpt":"<p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>\n<p>假设我们创建了一个feature分支来开发新功能：</p>\n<pre><code>$ git checkout -b feature\n</code></pre><p>当我们开发好新功能，并且已经提交完成：</p>\n<pre><code>$ git add two.md\n$ git commit -m &apos;feature branch&apos;\n</code></pre>","more":"<p>此时，切换到master分支：</p>\n<pre><code>$ git checkout master\n</code></pre><p>如果一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p>\n<p>但是，就在此时接到通知，要删除这个新功能：</p>\n<pre><code>$ git branch -d feature\nerror: The branch &apos;feature&apos; is not fully merged.\nIf you are sure you want to delete it, run &apos;git branch -D feature&apos;.\n</code></pre><p>销毁失败。Git友情提醒，feature分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令<code>git branch -D feature</code>。</p>\n<p>现在我们强行删除：</p>\n<pre><code>$ git branch -D feature\nDeleted branch feature (was 80ab808).\n</code></pre><p>终于删除成功！</p>\n<hr>\n<p>###小结</p>\n<p>当开发一个新功能时，最好新创建一feature分支。</p>\n<p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D name</code>强行删除。</p>"},{"layout":"post","title":"管理Bug分支","_content":"在项目开发中，bug就像家常便饭一样，随时都会出现。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。\n\n当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支bug-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：\n\n\t$ git status\n\t# On branch dev\n\t# Changes not staged for commit:\n\t#   (use \"git add <file>...\" to update what will be committed)\n\t#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n\t#\n\t#       modified:   one.md\n\t#\n\tno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n<!--more-->\n\n并不是你不想提交，而是工作只进行到一半，还没法提交，那咋办？\n\nGit给我们提供了一个`stash`功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：\n\n\t$ git stash\n\tSaved working directory and index state WIP on dev: 98aa0eb merge with no-ff\n\tHEAD is now at 98aa0eb merge with no-ff\n\n现在，使用`git status`查看下：\n\n\t$ git status\n\t# On branch dev\n\tnothing to commit, working directory clean\n\n发现工作区已经是干净的了。我们可以放心的去创建分支来修复bug。\n\n首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：\n\n\t$ git checkout master\n\t$ git checkout -b bug-101\n\tSwitched to a new branch 'bug-101'\n\n现在我们来修复bug，并提交：\n\n\t$ git add ./one.md\n\t$ git commit -m '修复bug101'\n\t[bug-101 ddc86c4] 修复bug101\n \t1 file changed, 1 insertion(+), 1 deletion(-)\n\n修复完成后，切换到master分支，并完成合并，最后删除bug-101分支：\n\n\t$ git checkout master\n\t$ git merge --no-ff -m 'merge bug-101' bug-101\n\tMerge made by the 'recursive' strategy.\n \tone.md | 2 +-\n \t1 file changed, 1 insertion(+), 1 deletion(-)\n\t$ git branch -d bug-101\n\n太好了，现在已经修复完成了，该回到dev分支工作了。\n\n\t$ git checkout dev\n\t$ git status\n\t# On branch dev\n\tnothing to commit (working directory clean)\n\n工作区是干净的，刚才的工作现场存到哪去了？用`git stash list`命令看看:\n\n\t$ git stash list\n\tstash@{0}: WIP on dev: 98aa0eb merge with no-ff\n\n工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：\n\n一是用`git stash apply`恢复，但是恢复后，stash内容并不删除，你需要用`git stash drop`来删除\n\n另一种方式是用`git stash pop`，恢复的同时把stash内容也删了：\n\n\t$ git stash pop\n\t# On branch dev\n\t# Changes not staged for commit:\n\t#   (use \"git add <file>...\" to update what will be committed)\n\t#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n\t#\n\t#       modified:   one.md\n\t#\n\tno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\tDropped refs/stash@{0} (06be1e02d3a4d183b0585339a3ffc232b031abf1)\n\n可以发现，最后一行已经告诉我们把stash内容删除了。\n\n现在使用`git stash list`，可以看到stash是空的。\n\n也可以多次stash，恢复的时候，先用`git stash list`查看，然后恢复指定的stash，用命令：\n\n\t$ git stash apply stash@{0}\n\n---\n\n###小结\n\n修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n\n当手头工作没有完成时，先把工作现场`git stash`一下，然后去修复bug，修复后，再`git stash pop`，回到工作现场。\n\n\t\n\n\n\n\n\n\n","source":"_posts/201406/2014-06-28-git_bug_branch_notes.md","raw":"---\nlayout : post\ntitle : 管理Bug分支\ncategory : Git\ntags : Git\n---\n在项目开发中，bug就像家常便饭一样，随时都会出现。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。\n\n当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支bug-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：\n\n\t$ git status\n\t# On branch dev\n\t# Changes not staged for commit:\n\t#   (use \"git add <file>...\" to update what will be committed)\n\t#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n\t#\n\t#       modified:   one.md\n\t#\n\tno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n<!--more-->\n\n并不是你不想提交，而是工作只进行到一半，还没法提交，那咋办？\n\nGit给我们提供了一个`stash`功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：\n\n\t$ git stash\n\tSaved working directory and index state WIP on dev: 98aa0eb merge with no-ff\n\tHEAD is now at 98aa0eb merge with no-ff\n\n现在，使用`git status`查看下：\n\n\t$ git status\n\t# On branch dev\n\tnothing to commit, working directory clean\n\n发现工作区已经是干净的了。我们可以放心的去创建分支来修复bug。\n\n首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：\n\n\t$ git checkout master\n\t$ git checkout -b bug-101\n\tSwitched to a new branch 'bug-101'\n\n现在我们来修复bug，并提交：\n\n\t$ git add ./one.md\n\t$ git commit -m '修复bug101'\n\t[bug-101 ddc86c4] 修复bug101\n \t1 file changed, 1 insertion(+), 1 deletion(-)\n\n修复完成后，切换到master分支，并完成合并，最后删除bug-101分支：\n\n\t$ git checkout master\n\t$ git merge --no-ff -m 'merge bug-101' bug-101\n\tMerge made by the 'recursive' strategy.\n \tone.md | 2 +-\n \t1 file changed, 1 insertion(+), 1 deletion(-)\n\t$ git branch -d bug-101\n\n太好了，现在已经修复完成了，该回到dev分支工作了。\n\n\t$ git checkout dev\n\t$ git status\n\t# On branch dev\n\tnothing to commit (working directory clean)\n\n工作区是干净的，刚才的工作现场存到哪去了？用`git stash list`命令看看:\n\n\t$ git stash list\n\tstash@{0}: WIP on dev: 98aa0eb merge with no-ff\n\n工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：\n\n一是用`git stash apply`恢复，但是恢复后，stash内容并不删除，你需要用`git stash drop`来删除\n\n另一种方式是用`git stash pop`，恢复的同时把stash内容也删了：\n\n\t$ git stash pop\n\t# On branch dev\n\t# Changes not staged for commit:\n\t#   (use \"git add <file>...\" to update what will be committed)\n\t#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n\t#\n\t#       modified:   one.md\n\t#\n\tno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\tDropped refs/stash@{0} (06be1e02d3a4d183b0585339a3ffc232b031abf1)\n\n可以发现，最后一行已经告诉我们把stash内容删除了。\n\n现在使用`git stash list`，可以看到stash是空的。\n\n也可以多次stash，恢复的时候，先用`git stash list`查看，然后恢复指定的stash，用命令：\n\n\t$ git stash apply stash@{0}\n\n---\n\n###小结\n\n修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n\n当手头工作没有完成时，先把工作现场`git stash`一下，然后去修复bug，修复后，再`git stash pop`，回到工作现场。\n\n\t\n\n\n\n\n\n\n","slug":"201406-2014-06-28-git-bug-branch-notes","published":1,"date":"2018-04-12T15:20:38.816Z","updated":"2018-04-12T15:20:38.816Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4o001tass6n33jhofk","content":"<p>在项目开发中，bug就像家常便饭一样，随时都会出现。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p>\n<p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支bug-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：</p>\n<pre><code>$ git status\n# On branch dev\n# Changes not staged for commit:\n#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n#\n#       modified:   one.md\n#\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\n</code></pre><a id=\"more\"></a>\n<p>并不是你不想提交，而是工作只进行到一半，还没法提交，那咋办？</p>\n<p>Git给我们提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p>\n<pre><code>$ git stash\nSaved working directory and index state WIP on dev: 98aa0eb merge with no-ff\nHEAD is now at 98aa0eb merge with no-ff\n</code></pre><p>现在，使用<code>git status</code>查看下：</p>\n<pre><code>$ git status\n# On branch dev\nnothing to commit, working directory clean\n</code></pre><p>发现工作区已经是干净的了。我们可以放心的去创建分支来修复bug。</p>\n<p>首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：</p>\n<pre><code>$ git checkout master\n$ git checkout -b bug-101\nSwitched to a new branch &apos;bug-101&apos;\n</code></pre><p>现在我们来修复bug，并提交：</p>\n<pre><code>$ git add ./one.md\n$ git commit -m &apos;修复bug101&apos;\n[bug-101 ddc86c4] 修复bug101\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre><p>修复完成后，切换到master分支，并完成合并，最后删除bug-101分支：</p>\n<pre><code>$ git checkout master\n$ git merge --no-ff -m &apos;merge bug-101&apos; bug-101\nMerge made by the &apos;recursive&apos; strategy.\n one.md | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ git branch -d bug-101\n</code></pre><p>太好了，现在已经修复完成了，该回到dev分支工作了。</p>\n<pre><code>$ git checkout dev\n$ git status\n# On branch dev\nnothing to commit (working directory clean)\n</code></pre><p>工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看:</p>\n<pre><code>$ git stash list\nstash@{0}: WIP on dev: 98aa0eb merge with no-ff\n</code></pre><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p>\n<p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除</p>\n<p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p>\n<pre><code>$ git stash pop\n# On branch dev\n# Changes not staged for commit:\n#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n#\n#       modified:   one.md\n#\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\nDropped refs/stash@{0} (06be1e02d3a4d183b0585339a3ffc232b031abf1)\n</code></pre><p>可以发现，最后一行已经告诉我们把stash内容删除了。</p>\n<p>现在使用<code>git stash list</code>，可以看到stash是空的。</p>\n<p>也可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：</p>\n<pre><code>$ git stash apply stash@{0}\n</code></pre><hr>\n<p>###小结</p>\n<p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>\n<p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</p>\n","site":{"data":{}},"excerpt":"<p>在项目开发中，bug就像家常便饭一样，随时都会出现。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p>\n<p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支bug-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：</p>\n<pre><code>$ git status\n# On branch dev\n# Changes not staged for commit:\n#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n#\n#       modified:   one.md\n#\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\n</code></pre>","more":"<p>并不是你不想提交，而是工作只进行到一半，还没法提交，那咋办？</p>\n<p>Git给我们提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p>\n<pre><code>$ git stash\nSaved working directory and index state WIP on dev: 98aa0eb merge with no-ff\nHEAD is now at 98aa0eb merge with no-ff\n</code></pre><p>现在，使用<code>git status</code>查看下：</p>\n<pre><code>$ git status\n# On branch dev\nnothing to commit, working directory clean\n</code></pre><p>发现工作区已经是干净的了。我们可以放心的去创建分支来修复bug。</p>\n<p>首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：</p>\n<pre><code>$ git checkout master\n$ git checkout -b bug-101\nSwitched to a new branch &apos;bug-101&apos;\n</code></pre><p>现在我们来修复bug，并提交：</p>\n<pre><code>$ git add ./one.md\n$ git commit -m &apos;修复bug101&apos;\n[bug-101 ddc86c4] 修复bug101\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre><p>修复完成后，切换到master分支，并完成合并，最后删除bug-101分支：</p>\n<pre><code>$ git checkout master\n$ git merge --no-ff -m &apos;merge bug-101&apos; bug-101\nMerge made by the &apos;recursive&apos; strategy.\n one.md | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ git branch -d bug-101\n</code></pre><p>太好了，现在已经修复完成了，该回到dev分支工作了。</p>\n<pre><code>$ git checkout dev\n$ git status\n# On branch dev\nnothing to commit (working directory clean)\n</code></pre><p>工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看:</p>\n<pre><code>$ git stash list\nstash@{0}: WIP on dev: 98aa0eb merge with no-ff\n</code></pre><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p>\n<p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除</p>\n<p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p>\n<pre><code>$ git stash pop\n# On branch dev\n# Changes not staged for commit:\n#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n#\n#       modified:   one.md\n#\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\nDropped refs/stash@{0} (06be1e02d3a4d183b0585339a3ffc232b031abf1)\n</code></pre><p>可以发现，最后一行已经告诉我们把stash内容删除了。</p>\n<p>现在使用<code>git stash list</code>，可以看到stash是空的。</p>\n<p>也可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：</p>\n<pre><code>$ git stash apply stash@{0}\n</code></pre><hr>\n<p>###小结</p>\n<p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>\n<p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</p>"},{"layout":"post","title":"Git推送分支和抓取分支","_content":"当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。\n\n要查看远程库的信息，用`git remote`：\n\n\t$ git remote\n\torigin\n\n可以使用`git remote -v`查看更详细的信息：\n\n\t$ git remote -v\n\torigin  https://github.com/YourName/YourName.git (fetch)\n\torigin  https://github.com/YourName/YourName.git (push)\n\n上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。\n\n<!--more-->\n\n##推送分支\n\n推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：\n\n\t$ git push origin master\n\n如果要推送其他分支，比如dev，就改成：\n\n\t$ git push origin dev\n\n但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？\n\n*\tmaster分支是主分支，因此要时刻与远程同步；\n\n*\tdev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；\n\n*\tbug分支只用于在本地修复bug，就没必要推到远程了；\n\n*\tfeature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n\n##抓取分支\n\n多人协作时，大家都会往master和dev分支上推送各自的修改。\n\n当你的小伙伴使用`git clone`命令进行远程克隆时，默认情况下，他只能看到本地的master分支。\n\n现在，你的小伙伴要在dev分支上开发，就必须创建远程**origin的dev**分支到本地，于是他用这个命令创建本地dev分支：\n\n\t$ git checkout -b dev origin/dev\n\n现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：\n\n\t$ git push origin dev\n\n假如，某时候，你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送，此时，就会发生推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用`git pull`把最新的提交从`origin/dev`抓下来，然后，在本地合并，解决冲突，再推送：\n\n\t$ git pull\n\n当`git pull`也失败了呢？那原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：\n\n\t$ git branch --set-upstream dev origin/dev\n\tBranch dev set up to track remote branch dev from origin.\n\n再pull：\n\n\t$ git pull\n\t...\n\tAutomatic merge failed; fix conflicts and then commit the result.\n\n这回`git pull`成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：\n\n\t$ git push origin dev\n\n因此，多人协作的工作模式通常是这样：\n\n首先，可以试图用`git push origin branch-name`推送自己的修改；\n\n如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；\n\n如果合并有冲突，则解决冲突，并在本地提交；\n\n没有冲突或者解决掉冲突后，再用`git push origin branch-name`推送就能成功！\n\n如果`git pull`提示`“no tracking information”`，则说明本地分支和远程分支的链接关系没有创建，用命令`git branch --set-upstream branch-name origin/branch-name`。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n---\n\n###小结\n\n查看远程库信息，使用`git remote -v`；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用git pull抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n\n从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。\n\n\n\n","source":"_posts/201407/2014-07-02-git_collaboration_notes.md","raw":"---\nlayout : post\ntitle : Git推送分支和抓取分支\ncategory : Git\ntags : Git\n---\n当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。\n\n要查看远程库的信息，用`git remote`：\n\n\t$ git remote\n\torigin\n\n可以使用`git remote -v`查看更详细的信息：\n\n\t$ git remote -v\n\torigin  https://github.com/YourName/YourName.git (fetch)\n\torigin  https://github.com/YourName/YourName.git (push)\n\n上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。\n\n<!--more-->\n\n##推送分支\n\n推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：\n\n\t$ git push origin master\n\n如果要推送其他分支，比如dev，就改成：\n\n\t$ git push origin dev\n\n但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？\n\n*\tmaster分支是主分支，因此要时刻与远程同步；\n\n*\tdev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；\n\n*\tbug分支只用于在本地修复bug，就没必要推到远程了；\n\n*\tfeature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n\n##抓取分支\n\n多人协作时，大家都会往master和dev分支上推送各自的修改。\n\n当你的小伙伴使用`git clone`命令进行远程克隆时，默认情况下，他只能看到本地的master分支。\n\n现在，你的小伙伴要在dev分支上开发，就必须创建远程**origin的dev**分支到本地，于是他用这个命令创建本地dev分支：\n\n\t$ git checkout -b dev origin/dev\n\n现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：\n\n\t$ git push origin dev\n\n假如，某时候，你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送，此时，就会发生推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用`git pull`把最新的提交从`origin/dev`抓下来，然后，在本地合并，解决冲突，再推送：\n\n\t$ git pull\n\n当`git pull`也失败了呢？那原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：\n\n\t$ git branch --set-upstream dev origin/dev\n\tBranch dev set up to track remote branch dev from origin.\n\n再pull：\n\n\t$ git pull\n\t...\n\tAutomatic merge failed; fix conflicts and then commit the result.\n\n这回`git pull`成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：\n\n\t$ git push origin dev\n\n因此，多人协作的工作模式通常是这样：\n\n首先，可以试图用`git push origin branch-name`推送自己的修改；\n\n如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；\n\n如果合并有冲突，则解决冲突，并在本地提交；\n\n没有冲突或者解决掉冲突后，再用`git push origin branch-name`推送就能成功！\n\n如果`git pull`提示`“no tracking information”`，则说明本地分支和远程分支的链接关系没有创建，用命令`git branch --set-upstream branch-name origin/branch-name`。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n---\n\n###小结\n\n查看远程库信息，使用`git remote -v`；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用git pull抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n\n从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。\n\n\n\n","slug":"201407-2014-07-02-git-collaboration-notes","published":1,"date":"2018-04-12T15:20:38.817Z","updated":"2018-04-12T15:20:38.817Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4r001yass62770zocc","content":"<p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p>\n<p>要查看远程库的信息，用<code>git remote</code>：</p>\n<pre><code>$ git remote\norigin\n</code></pre><p>可以使用<code>git remote -v</code>查看更详细的信息：</p>\n<pre><code>$ git remote -v\norigin  https://github.com/YourName/YourName.git (fetch)\norigin  https://github.com/YourName/YourName.git (push)\n</code></pre><p>上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。</p>\n<a id=\"more\"></a>\n<p>##推送分支</p>\n<p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>\n<pre><code>$ git push origin master\n</code></pre><p>如果要推送其他分支，比如dev，就改成：</p>\n<pre><code>$ git push origin dev\n</code></pre><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>\n<ul>\n<li><p>master分支是主分支，因此要时刻与远程同步；</p>\n</li>\n<li><p>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>\n</li>\n<li><p>bug分支只用于在本地修复bug，就没必要推到远程了；</p>\n</li>\n<li><p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>\n</li>\n</ul>\n<p>##抓取分支</p>\n<p>多人协作时，大家都会往master和dev分支上推送各自的修改。</p>\n<p>当你的小伙伴使用<code>git clone</code>命令进行远程克隆时，默认情况下，他只能看到本地的master分支。</p>\n<p>现在，你的小伙伴要在dev分支上开发，就必须创建远程<strong>origin的dev</strong>分支到本地，于是他用这个命令创建本地dev分支：</p>\n<pre><code>$ git checkout -b dev origin/dev\n</code></pre><p>现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：</p>\n<pre><code>$ git push origin dev\n</code></pre><p>假如，某时候，你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送，此时，就会发生推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p>\n<pre><code>$ git pull\n</code></pre><p>当<code>git pull</code>也失败了呢？那原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</p>\n<pre><code>$ git branch --set-upstream dev origin/dev\nBranch dev set up to track remote branch dev from origin.\n</code></pre><p>再pull：</p>\n<pre><code>$ git pull\n...\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre><p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：</p>\n<pre><code>$ git push origin dev\n</code></pre><p>因此，多人协作的工作模式通常是这样：</p>\n<p>首先，可以试图用<code>git push origin branch-name</code>推送自己的修改；</p>\n<p>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</p>\n<p>如果合并有冲突，则解决冲突，并在本地提交；</p>\n<p>没有冲突或者解决掉冲突后，再用<code>git push origin branch-name</code>推送就能成功！</p>\n<p>如果<code>git pull</code>提示<code>“no tracking information”</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream branch-name origin/branch-name</code>。</p>\n<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>\n<hr>\n<p>###小结</p>\n<p>查看远程库信息，使用<code>git remote -v</code>；</p>\n<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n<p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用git pull抓取远程的新提交；</p>\n<p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>\n<p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>\n<p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>\n","site":{"data":{}},"excerpt":"<p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p>\n<p>要查看远程库的信息，用<code>git remote</code>：</p>\n<pre><code>$ git remote\norigin\n</code></pre><p>可以使用<code>git remote -v</code>查看更详细的信息：</p>\n<pre><code>$ git remote -v\norigin  https://github.com/YourName/YourName.git (fetch)\norigin  https://github.com/YourName/YourName.git (push)\n</code></pre><p>上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。</p>","more":"<p>##推送分支</p>\n<p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>\n<pre><code>$ git push origin master\n</code></pre><p>如果要推送其他分支，比如dev，就改成：</p>\n<pre><code>$ git push origin dev\n</code></pre><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>\n<ul>\n<li><p>master分支是主分支，因此要时刻与远程同步；</p>\n</li>\n<li><p>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>\n</li>\n<li><p>bug分支只用于在本地修复bug，就没必要推到远程了；</p>\n</li>\n<li><p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>\n</li>\n</ul>\n<p>##抓取分支</p>\n<p>多人协作时，大家都会往master和dev分支上推送各自的修改。</p>\n<p>当你的小伙伴使用<code>git clone</code>命令进行远程克隆时，默认情况下，他只能看到本地的master分支。</p>\n<p>现在，你的小伙伴要在dev分支上开发，就必须创建远程<strong>origin的dev</strong>分支到本地，于是他用这个命令创建本地dev分支：</p>\n<pre><code>$ git checkout -b dev origin/dev\n</code></pre><p>现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：</p>\n<pre><code>$ git push origin dev\n</code></pre><p>假如，某时候，你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送，此时，就会发生推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p>\n<pre><code>$ git pull\n</code></pre><p>当<code>git pull</code>也失败了呢？那原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</p>\n<pre><code>$ git branch --set-upstream dev origin/dev\nBranch dev set up to track remote branch dev from origin.\n</code></pre><p>再pull：</p>\n<pre><code>$ git pull\n...\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre><p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：</p>\n<pre><code>$ git push origin dev\n</code></pre><p>因此，多人协作的工作模式通常是这样：</p>\n<p>首先，可以试图用<code>git push origin branch-name</code>推送自己的修改；</p>\n<p>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</p>\n<p>如果合并有冲突，则解决冲突，并在本地提交；</p>\n<p>没有冲突或者解决掉冲突后，再用<code>git push origin branch-name</code>推送就能成功！</p>\n<p>如果<code>git pull</code>提示<code>“no tracking information”</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream branch-name origin/branch-name</code>。</p>\n<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>\n<hr>\n<p>###小结</p>\n<p>查看远程库信息，使用<code>git remote -v</code>；</p>\n<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n<p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用git pull抓取远程的新提交；</p>\n<p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>\n<p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>\n<p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>"},{"layout":"post","title":"创建标签和操作标签","_content":"提交一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。\n\n###创建标签\n\n使用`git tag name`命令来创建新标签：\n\n\t$ git tag v1.0\n\n使用`git tag`来查看所有标签：\n\n\t$ git tag\n\tv1.0\n\n<!--more-->\n\n注意，标签不是按时间顺序列出，而是按字母排序的。\n\n默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？\n\n方法是找到历史提交的`commit id`，然后打上就可以了：\n\n\t$ git log --pretty=oneline --abbrev-commit\n\tea4c0c6 merge bug-101\n\t98aa0eb merge with no-ff\n\t0b6f37c dev branch\n\t9eb72e8 update\n\n假如要对“bug-101”加标签，那么他的commit id是“ea4c0c6”:\n\n\t$ git tag v2.0 ea4c0c6\n\n可以用`git show tagname`查看标签信息：\n\n\t$ git show v2.0\n\tcommit ea4c0c6f646b3f38d586fc803817a73915b3753e\n\tMerge: 98aa0eb ddc86c4\n\tAuthor: Hanson <YourMail@gmail.com>\n\tDate:   Sat Jun 28 17:05:31 2014 +0800\n\n    \tmerge bug-101\n\n还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：\n\n\t$ git tag -a v3.0 -m 'dev branch' 0b6f37c\n\n还可以通过-s用私钥签名一个标签：\n\n\t$ git tag -s v4.0 -m \"merege with dev\" 0b6f7c\n\n---\n\n###小结\n\n命令`git tag name`用于新建一个标签，默认为HEAD，也可以指定一个`commit id`；\n\n`git tag -a tagname -m \"blablabla...\"`可以指定标签信息；\n\n`git tag -s tagname -m \"blablabla...\"`可以用PGP签名标签；\n\n命令`git tag`可以查看所有标签；\n命令`git show tagname`来查看标签信息；\n\n\n###操作标签\n\n删除某个标签，使用`git tag -d tagname`:\n\n\t$ git tag -d v1.0\n\n因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。\n\n如果要推送某个标签到远程，使用命令`git push origin tagname`：\n\n\t$ git push origin v2.0\n\n或者，一次性推送全部尚未推送到远程的本地标签：\n\n\t$ git push origin --tags\n\n如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除,然后再远程删除：\n\n\t$ git tag -d v2.0   //本地删除\n\t$ git push origin :refs/tags/v2.0\t\t//远程删除\n\n要看看是否真的从远程库删除了标签，可以登陆Github查看。\n\n---\n\n###小结\n\n命令`git push origin tagname`可以推送一个本地标签；\n\n命令`git push origin --tags`可以推送全部未推送过的本地标签；\n\n命令`git tag -d tagname`可以删除一个本地标签；\n\n命令`git push origin :refs/tags/tagname`可以删除一个远程标签。\n\n","source":"_posts/201407/2014-07-04-git_create_tag_notes.md","raw":"---\nlayout : post\ntitle : 创建标签和操作标签\ncategory : Git\ntags : Git\n---\n提交一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。\n\n###创建标签\n\n使用`git tag name`命令来创建新标签：\n\n\t$ git tag v1.0\n\n使用`git tag`来查看所有标签：\n\n\t$ git tag\n\tv1.0\n\n<!--more-->\n\n注意，标签不是按时间顺序列出，而是按字母排序的。\n\n默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？\n\n方法是找到历史提交的`commit id`，然后打上就可以了：\n\n\t$ git log --pretty=oneline --abbrev-commit\n\tea4c0c6 merge bug-101\n\t98aa0eb merge with no-ff\n\t0b6f37c dev branch\n\t9eb72e8 update\n\n假如要对“bug-101”加标签，那么他的commit id是“ea4c0c6”:\n\n\t$ git tag v2.0 ea4c0c6\n\n可以用`git show tagname`查看标签信息：\n\n\t$ git show v2.0\n\tcommit ea4c0c6f646b3f38d586fc803817a73915b3753e\n\tMerge: 98aa0eb ddc86c4\n\tAuthor: Hanson <YourMail@gmail.com>\n\tDate:   Sat Jun 28 17:05:31 2014 +0800\n\n    \tmerge bug-101\n\n还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：\n\n\t$ git tag -a v3.0 -m 'dev branch' 0b6f37c\n\n还可以通过-s用私钥签名一个标签：\n\n\t$ git tag -s v4.0 -m \"merege with dev\" 0b6f7c\n\n---\n\n###小结\n\n命令`git tag name`用于新建一个标签，默认为HEAD，也可以指定一个`commit id`；\n\n`git tag -a tagname -m \"blablabla...\"`可以指定标签信息；\n\n`git tag -s tagname -m \"blablabla...\"`可以用PGP签名标签；\n\n命令`git tag`可以查看所有标签；\n命令`git show tagname`来查看标签信息；\n\n\n###操作标签\n\n删除某个标签，使用`git tag -d tagname`:\n\n\t$ git tag -d v1.0\n\n因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。\n\n如果要推送某个标签到远程，使用命令`git push origin tagname`：\n\n\t$ git push origin v2.0\n\n或者，一次性推送全部尚未推送到远程的本地标签：\n\n\t$ git push origin --tags\n\n如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除,然后再远程删除：\n\n\t$ git tag -d v2.0   //本地删除\n\t$ git push origin :refs/tags/v2.0\t\t//远程删除\n\n要看看是否真的从远程库删除了标签，可以登陆Github查看。\n\n---\n\n###小结\n\n命令`git push origin tagname`可以推送一个本地标签；\n\n命令`git push origin --tags`可以推送全部未推送过的本地标签；\n\n命令`git tag -d tagname`可以删除一个本地标签；\n\n命令`git push origin :refs/tags/tagname`可以删除一个远程标签。\n\n","slug":"201407-2014-07-04-git-create-tag-notes","published":1,"date":"2018-04-12T15:20:38.817Z","updated":"2018-04-12T15:20:38.817Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4s0021ass61ku2o06d","content":"<p>提交一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p>\n<p>###创建标签</p>\n<p>使用<code>git tag name</code>命令来创建新标签：</p>\n<pre><code>$ git tag v1.0\n</code></pre><p>使用<code>git tag</code>来查看所有标签：</p>\n<pre><code>$ git tag\nv1.0\n</code></pre><a id=\"more\"></a>\n<p>注意，标签不是按时间顺序列出，而是按字母排序的。</p>\n<p>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？</p>\n<p>方法是找到历史提交的<code>commit id</code>，然后打上就可以了：</p>\n<pre><code>$ git log --pretty=oneline --abbrev-commit\nea4c0c6 merge bug-101\n98aa0eb merge with no-ff\n0b6f37c dev branch\n9eb72e8 update\n</code></pre><p>假如要对“bug-101”加标签，那么他的commit id是“ea4c0c6”:</p>\n<pre><code>$ git tag v2.0 ea4c0c6\n</code></pre><p>可以用<code>git show tagname</code>查看标签信息：</p>\n<pre><code>$ git show v2.0\ncommit ea4c0c6f646b3f38d586fc803817a73915b3753e\nMerge: 98aa0eb ddc86c4\nAuthor: Hanson &lt;YourMail@gmail.com&gt;\nDate:   Sat Jun 28 17:05:31 2014 +0800\n\n    merge bug-101\n</code></pre><p>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：</p>\n<pre><code>$ git tag -a v3.0 -m &apos;dev branch&apos; 0b6f37c\n</code></pre><p>还可以通过-s用私钥签名一个标签：</p>\n<pre><code>$ git tag -s v4.0 -m &quot;merege with dev&quot; 0b6f7c\n</code></pre><hr>\n<p>###小结</p>\n<p>命令<code>git tag name</code>用于新建一个标签，默认为HEAD，也可以指定一个<code>commit id</code>；</p>\n<p><code>git tag -a tagname -m &quot;blablabla...&quot;</code>可以指定标签信息；</p>\n<p><code>git tag -s tagname -m &quot;blablabla...&quot;</code>可以用PGP签名标签；</p>\n<p>命令<code>git tag</code>可以查看所有标签；<br>命令<code>git show tagname</code>来查看标签信息；</p>\n<p>###操作标签</p>\n<p>删除某个标签，使用<code>git tag -d tagname</code>:</p>\n<pre><code>$ git tag -d v1.0\n</code></pre><p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p>\n<p>如果要推送某个标签到远程，使用命令<code>git push origin tagname</code>：</p>\n<pre><code>$ git push origin v2.0\n</code></pre><p>或者，一次性推送全部尚未推送到远程的本地标签：</p>\n<pre><code>$ git push origin --tags\n</code></pre><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除,然后再远程删除：</p>\n<pre><code>$ git tag -d v2.0   //本地删除\n$ git push origin :refs/tags/v2.0        //远程删除\n</code></pre><p>要看看是否真的从远程库删除了标签，可以登陆Github查看。</p>\n<hr>\n<p>###小结</p>\n<p>命令<code>git push origin tagname</code>可以推送一个本地标签；</p>\n<p>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p>\n<p>命令<code>git tag -d tagname</code>可以删除一个本地标签；</p>\n<p>命令<code>git push origin :refs/tags/tagname</code>可以删除一个远程标签。</p>\n","site":{"data":{}},"excerpt":"<p>提交一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p>\n<p>###创建标签</p>\n<p>使用<code>git tag name</code>命令来创建新标签：</p>\n<pre><code>$ git tag v1.0\n</code></pre><p>使用<code>git tag</code>来查看所有标签：</p>\n<pre><code>$ git tag\nv1.0\n</code></pre>","more":"<p>注意，标签不是按时间顺序列出，而是按字母排序的。</p>\n<p>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？</p>\n<p>方法是找到历史提交的<code>commit id</code>，然后打上就可以了：</p>\n<pre><code>$ git log --pretty=oneline --abbrev-commit\nea4c0c6 merge bug-101\n98aa0eb merge with no-ff\n0b6f37c dev branch\n9eb72e8 update\n</code></pre><p>假如要对“bug-101”加标签，那么他的commit id是“ea4c0c6”:</p>\n<pre><code>$ git tag v2.0 ea4c0c6\n</code></pre><p>可以用<code>git show tagname</code>查看标签信息：</p>\n<pre><code>$ git show v2.0\ncommit ea4c0c6f646b3f38d586fc803817a73915b3753e\nMerge: 98aa0eb ddc86c4\nAuthor: Hanson &lt;YourMail@gmail.com&gt;\nDate:   Sat Jun 28 17:05:31 2014 +0800\n\n    merge bug-101\n</code></pre><p>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：</p>\n<pre><code>$ git tag -a v3.0 -m &apos;dev branch&apos; 0b6f37c\n</code></pre><p>还可以通过-s用私钥签名一个标签：</p>\n<pre><code>$ git tag -s v4.0 -m &quot;merege with dev&quot; 0b6f7c\n</code></pre><hr>\n<p>###小结</p>\n<p>命令<code>git tag name</code>用于新建一个标签，默认为HEAD，也可以指定一个<code>commit id</code>；</p>\n<p><code>git tag -a tagname -m &quot;blablabla...&quot;</code>可以指定标签信息；</p>\n<p><code>git tag -s tagname -m &quot;blablabla...&quot;</code>可以用PGP签名标签；</p>\n<p>命令<code>git tag</code>可以查看所有标签；<br>命令<code>git show tagname</code>来查看标签信息；</p>\n<p>###操作标签</p>\n<p>删除某个标签，使用<code>git tag -d tagname</code>:</p>\n<pre><code>$ git tag -d v1.0\n</code></pre><p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p>\n<p>如果要推送某个标签到远程，使用命令<code>git push origin tagname</code>：</p>\n<pre><code>$ git push origin v2.0\n</code></pre><p>或者，一次性推送全部尚未推送到远程的本地标签：</p>\n<pre><code>$ git push origin --tags\n</code></pre><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除,然后再远程删除：</p>\n<pre><code>$ git tag -d v2.0   //本地删除\n$ git push origin :refs/tags/v2.0        //远程删除\n</code></pre><p>要看看是否真的从远程库删除了标签，可以登陆Github查看。</p>\n<hr>\n<p>###小结</p>\n<p>命令<code>git push origin tagname</code>可以推送一个本地标签；</p>\n<p>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p>\n<p>命令<code>git tag -d tagname</code>可以删除一个本地标签；</p>\n<p>命令<code>git push origin :refs/tags/tagname</code>可以删除一个远程标签。</p>"},{"layout":"post","title":"Gitignore忽略特殊文件操作","_content":"有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次`git status`都会显示“`Untracked files ...`”，有强迫症的心里肯定不爽。\n\n好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的`.gitignore`文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。\n\n不需要从头写`.gitignore`文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。\n\n<!--more-->\n\n**忽略文件的原则是：**\n\n*\t忽略系统自动生成的文件等；\n\n*\t忽略编译生成的中间文件、可执行文件等；\n\n*\t忽略你自己的带有敏感信息的配置文件，比如数据库密码的配置文件。\n\n假如你是进行JAVA开发的，那么在文件编译时就会产生`.class`文件，这种文件是不希望被提交到github上面的，以及一些数据库配置文件`db.conf`,最终得到一个完整的.gitignore文件，内容如下：\n\n\t//忽略编译产生的中间文件\n\t*.class\n\t\n\t//一些配置问津\n\tdb.conf\n\t*.ini\n\t\n\t等等...\n\n最后一步就是把`.gitignore`也提交到Git，就完成了！当然检验`.gitignore`的标准是`git status`命令是不是说“working directory clean”。\n\n###注意：\n\n使用Windows的童鞋注意了，如果你在资源管理器里新建一个`.gitignore`文件，它会非常弱智地提示你必须输入文件名，但是**在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了**。\n\n---\n\n###小结\n\n*\t忽略某些文件时，需要编写`.gitignore`。\n\n*\t`.gitignore`文件本身要放到版本库里，并且可以对`.gitignore`做版本管理！\n\n\t","source":"_posts/201407/2014-07-05-git_gitignore_file_notes.md","raw":"---\nlayout : post\ntitle : Gitignore忽略特殊文件操作\ncategory : Git\ntags : Git\n---\n有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次`git status`都会显示“`Untracked files ...`”，有强迫症的心里肯定不爽。\n\n好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的`.gitignore`文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。\n\n不需要从头写`.gitignore`文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。\n\n<!--more-->\n\n**忽略文件的原则是：**\n\n*\t忽略系统自动生成的文件等；\n\n*\t忽略编译生成的中间文件、可执行文件等；\n\n*\t忽略你自己的带有敏感信息的配置文件，比如数据库密码的配置文件。\n\n假如你是进行JAVA开发的，那么在文件编译时就会产生`.class`文件，这种文件是不希望被提交到github上面的，以及一些数据库配置文件`db.conf`,最终得到一个完整的.gitignore文件，内容如下：\n\n\t//忽略编译产生的中间文件\n\t*.class\n\t\n\t//一些配置问津\n\tdb.conf\n\t*.ini\n\t\n\t等等...\n\n最后一步就是把`.gitignore`也提交到Git，就完成了！当然检验`.gitignore`的标准是`git status`命令是不是说“working directory clean”。\n\n###注意：\n\n使用Windows的童鞋注意了，如果你在资源管理器里新建一个`.gitignore`文件，它会非常弱智地提示你必须输入文件名，但是**在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了**。\n\n---\n\n###小结\n\n*\t忽略某些文件时，需要编写`.gitignore`。\n\n*\t`.gitignore`文件本身要放到版本库里，并且可以对`.gitignore`做版本管理！\n\n\t","slug":"201407-2014-07-05-git-gitignore-file-notes","published":1,"date":"2018-04-12T15:20:38.818Z","updated":"2018-04-12T15:20:38.818Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4u0026ass607xk55e4","content":"<p>有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次<code>git status</code>都会显示“<code>Untracked files ...</code>”，有强迫症的心里肯定不爽。</p>\n<p>好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p>\n<p>不需要从头写<code>.gitignore</code>文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。</p>\n<a id=\"more\"></a>\n<p><strong>忽略文件的原则是：</strong></p>\n<ul>\n<li><p>忽略系统自动生成的文件等；</p>\n</li>\n<li><p>忽略编译生成的中间文件、可执行文件等；</p>\n</li>\n<li><p>忽略你自己的带有敏感信息的配置文件，比如数据库密码的配置文件。</p>\n</li>\n</ul>\n<p>假如你是进行JAVA开发的，那么在文件编译时就会产生<code>.class</code>文件，这种文件是不希望被提交到github上面的，以及一些数据库配置文件<code>db.conf</code>,最终得到一个完整的.gitignore文件，内容如下：</p>\n<pre><code>//忽略编译产生的中间文件\n*.class\n\n//一些配置问津\ndb.conf\n*.ini\n\n等等...\n</code></pre><p>最后一步就是把<code>.gitignore</code>也提交到Git，就完成了！当然检验<code>.gitignore</code>的标准是<code>git status</code>命令是不是说“working directory clean”。</p>\n<p>###注意：</p>\n<p>使用Windows的童鞋注意了，如果你在资源管理器里新建一个<code>.gitignore</code>文件，它会非常弱智地提示你必须输入文件名，但是<strong>在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了</strong>。</p>\n<hr>\n<p>###小结</p>\n<ul>\n<li><p>忽略某些文件时，需要编写<code>.gitignore</code>。</p>\n</li>\n<li><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次<code>git status</code>都会显示“<code>Untracked files ...</code>”，有强迫症的心里肯定不爽。</p>\n<p>好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p>\n<p>不需要从头写<code>.gitignore</code>文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。</p>","more":"<p><strong>忽略文件的原则是：</strong></p>\n<ul>\n<li><p>忽略系统自动生成的文件等；</p>\n</li>\n<li><p>忽略编译生成的中间文件、可执行文件等；</p>\n</li>\n<li><p>忽略你自己的带有敏感信息的配置文件，比如数据库密码的配置文件。</p>\n</li>\n</ul>\n<p>假如你是进行JAVA开发的，那么在文件编译时就会产生<code>.class</code>文件，这种文件是不希望被提交到github上面的，以及一些数据库配置文件<code>db.conf</code>,最终得到一个完整的.gitignore文件，内容如下：</p>\n<pre><code>//忽略编译产生的中间文件\n*.class\n\n//一些配置问津\ndb.conf\n*.ini\n\n等等...\n</code></pre><p>最后一步就是把<code>.gitignore</code>也提交到Git，就完成了！当然检验<code>.gitignore</code>的标准是<code>git status</code>命令是不是说“working directory clean”。</p>\n<p>###注意：</p>\n<p>使用Windows的童鞋注意了，如果你在资源管理器里新建一个<code>.gitignore</code>文件，它会非常弱智地提示你必须输入文件名，但是<strong>在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了</strong>。</p>\n<hr>\n<p>###小结</p>\n<ul>\n<li><p>忽略某些文件时，需要编写<code>.gitignore</code>。</p>\n</li>\n<li><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</p>\n</li>\n</ul>"},{"layout":"post","title":"版本控制系统配置别名","_content":"有时候，会觉得Git的命令太长又不好记住，那么能不能做到简短呢？答案当然是肯定的啦！\n\n比如说`git status`这个命令对有些人来说就很长，不容易记住，如果可以这样`git st`使用那就好了，我们强大的Git版本控制可是很人性化的哦，已经为你设计好可以为命令设计别名来达到你“偷懒”的目的。\n\n我们只需要敲一行命令，告诉Git，以后st就表示status：\n\n\t$ git config --global alias.st status\n\nok，现在在命令行敲入`git st`查看效果吧。\n\n<!--more-->\n\n当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：\n\n\t$ git config --global alias.co checkout\n\t$ git config --global alias.ci commit\n\t$ git config --global alias.br branch\n\n`--global`参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。\n\n下面是配置别名的格式：\n\n\t$ git config --global alias.别名 命令\n\n这样就ok了，你可以尽情的去配置你喜欢的别名，妈妈以后再也不用担心我的学习了:)\n\n---\n\n###小结\n\n给Git配置好别名，就可以输入命令时偷个懒。记住，偷懒不一定是坏事哦！！","source":"_posts/201407/2014-07-07-git_config_aliase_notes.md","raw":"---\nlayout : post\ntitle : 版本控制系统配置别名\ncategory : Git\ntags : Git\n---\n有时候，会觉得Git的命令太长又不好记住，那么能不能做到简短呢？答案当然是肯定的啦！\n\n比如说`git status`这个命令对有些人来说就很长，不容易记住，如果可以这样`git st`使用那就好了，我们强大的Git版本控制可是很人性化的哦，已经为你设计好可以为命令设计别名来达到你“偷懒”的目的。\n\n我们只需要敲一行命令，告诉Git，以后st就表示status：\n\n\t$ git config --global alias.st status\n\nok，现在在命令行敲入`git st`查看效果吧。\n\n<!--more-->\n\n当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：\n\n\t$ git config --global alias.co checkout\n\t$ git config --global alias.ci commit\n\t$ git config --global alias.br branch\n\n`--global`参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。\n\n下面是配置别名的格式：\n\n\t$ git config --global alias.别名 命令\n\n这样就ok了，你可以尽情的去配置你喜欢的别名，妈妈以后再也不用担心我的学习了:)\n\n---\n\n###小结\n\n给Git配置好别名，就可以输入命令时偷个懒。记住，偷懒不一定是坏事哦！！","slug":"201407-2014-07-07-git-config-aliase-notes","published":1,"date":"2018-04-12T15:20:38.818Z","updated":"2018-04-12T15:20:38.818Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4w0029ass6xeb7su9i","content":"<p>有时候，会觉得Git的命令太长又不好记住，那么能不能做到简短呢？答案当然是肯定的啦！</p>\n<p>比如说<code>git status</code>这个命令对有些人来说就很长，不容易记住，如果可以这样<code>git st</code>使用那就好了，我们强大的Git版本控制可是很人性化的哦，已经为你设计好可以为命令设计别名来达到你“偷懒”的目的。</p>\n<p>我们只需要敲一行命令，告诉Git，以后st就表示status：</p>\n<pre><code>$ git config --global alias.st status\n</code></pre><p>ok，现在在命令行敲入<code>git st</code>查看效果吧。</p>\n<a id=\"more\"></a>\n<p>当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：</p>\n<pre><code>$ git config --global alias.co checkout\n$ git config --global alias.ci commit\n$ git config --global alias.br branch\n</code></pre><p><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p>\n<p>下面是配置别名的格式：</p>\n<pre><code>$ git config --global alias.别名 命令\n</code></pre><p>这样就ok了，你可以尽情的去配置你喜欢的别名，妈妈以后再也不用担心我的学习了:)</p>\n<hr>\n<p>###小结</p>\n<p>给Git配置好别名，就可以输入命令时偷个懒。记住，偷懒不一定是坏事哦！！</p>\n","site":{"data":{}},"excerpt":"<p>有时候，会觉得Git的命令太长又不好记住，那么能不能做到简短呢？答案当然是肯定的啦！</p>\n<p>比如说<code>git status</code>这个命令对有些人来说就很长，不容易记住，如果可以这样<code>git st</code>使用那就好了，我们强大的Git版本控制可是很人性化的哦，已经为你设计好可以为命令设计别名来达到你“偷懒”的目的。</p>\n<p>我们只需要敲一行命令，告诉Git，以后st就表示status：</p>\n<pre><code>$ git config --global alias.st status\n</code></pre><p>ok，现在在命令行敲入<code>git st</code>查看效果吧。</p>","more":"<p>当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：</p>\n<pre><code>$ git config --global alias.co checkout\n$ git config --global alias.ci commit\n$ git config --global alias.br branch\n</code></pre><p><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p>\n<p>下面是配置别名的格式：</p>\n<pre><code>$ git config --global alias.别名 命令\n</code></pre><p>这样就ok了，你可以尽情的去配置你喜欢的别名，妈妈以后再也不用担心我的学习了:)</p>\n<hr>\n<p>###小结</p>\n<p>给Git配置好别名，就可以输入命令时偷个懒。记住，偷懒不一定是坏事哦！！</p>"},{"layout":"post","title":"就当我在扯淡","_content":"今天是学校暑假放假回家后的第一天，我不知道这个暑假会不会是最后一次在家过暑假了，但总感觉很有可能是，因为也快要出去实习了嘛，以前在总觉得实习离我还很遥远，就那样“悠闲的”度过了我的大一大二，暑假过后我就该升入大三了，也就是江湖传言说学校里的“老大”，因为大四都滚蛋出去实习了嘛，哈哈:)\n\n暑假在家的作息的确跟学校里的不一样，在学校是晚睡、晚起，你没看错，就是晚起，但起码能保证白天的任务量基本可以完成。在家就不一样了，早睡、晚起，白天老想睡会儿，真不知道闹得是哪出.中午在屋子里又想睡会，想到自己大一大二貌似学了很多、懂了很多、沉淀了很多，其实细细想想也没学到很多技术，然后感叹了下大学浮躁的生活，想到这里，还是说服自己起来，打开自己的本本，写下了这篇貌似**扯淡**的博客。\n\n<!--more-->\n\n\n##做自己\n\n为什么要说做自己，因为笔者的确曾经有过一段迷茫期，期间自己却把自己给误导了，所以总结了下教训，留作经验，如果你看到了，希望给你一点经验做参考。\n\n由于，在大一时就进入了我们软件学院的实验室，其实也谈不上实验室，就是几个小伙伴还有学长学姐在一起学技术、交流、共同进步以及一起做项目。自从进入实验室，我的大学生活就被改变了，白天没事几乎都呆在实验室学技术，晚上九点半回去，差不多十点前到寝室，因为必须赶到晚上十点宿管阿姨要关寝室门之前到达，要不就被锁到寝室外面了。因此，跟同学呆在一起的时间就只有上专业课（排除偶尔还有翘个课啥的），然后就是晚上回到寝室的短短一两个点的时间，另外有时候回到寝室还要看下技术方面的东东（别叫我学霸，个人认为学霸不是一个褒义词，还是叫学屌把，哈哈）。所以，当时个人就觉得跟同学呆在一起的时间太少了，这样不好，怀疑会不会慢慢关系变得疏远了啊，所以曾经一段时间为了不疏远同学，晚上回去就去转下寝室，跟他们玩下，以及偶尔陪他们玩下电脑游戏（CF、LOL都玩过，虽然很渣）。当然，本人比较排斥电脑游戏，因为玩物丧志的例子不在少数，但为了陪同学还是玩了一阵子，至少不会因为走在路上他们谈游戏我却插不上嘴的尴尬出现，就那样过了很长一段时...\n\n![picture](http://ww1.sinaimg.cn/mw690/bd5a4d63tw1ei904yqgp4j20p00godju.jpg)\n\n那段时间，在我看来是痛苦的，因为自己总觉得是在为别人而过大学的生活，当然不是我所想要的。后来再次看了一遍高中时很喜欢的一部印度电影[三傻大闹宝莱坞](http://baike.baidu.com/subview/4059797/7366389.htm?fr=aladdin)，看完后想了很多，觉得自己不应该这样，固然出发点是好的，但是自己却把自己给“卖了”，痛定思痛毅然决定把游戏卸载了，小白三星笔记本win7系统全部格掉，装上了我最喜欢的Ubuntu系统，从那时起开始专心研究技术（技术控嘛），生活开始爽歪歪了！\n\n其实，有时候都是自己的内心在作怪，老是想一些杞人忧天的东西，不如静下心来学技术，追求自己真正想要的。还是就是怕与同学之间的关系疏远，陪他们玩游戏当然是我当时做出的最失败的选择，方式有很多，比如偶尔一起去打球啊、跑步啊、出去旅游啊什么的都是很好的方式，想不通自己当时为什么会做出那么愚蠢的选择。\n\n如果你是一个专于做技术却又害怕疏远与同学的距离，你也许会有跟我同样的烦恼，不用烦恼，解决拌饭有很多，希望你不要跟我一样犯下同样弱智的错误。\n\n\n##不装逼\n\n首先，你要明白这是一个浮躁的社会，连曾经被人们认为最纯洁的学校也更是这样，所以有必要说一下这个问题，为什么呢？答案就是，如果你想走的更远更高更想实现人生的价值（别说价值就是扯淡，那是你才说的），必须要静下心来做技术或者学问，不要嘲笑我迂腐，试问现在哪个成功的人当初不是脚踏实地慢慢干起的！\n\n因为，我还没有毕业，所以我只说下大学的现象，社会上也是雷同的。刚进大学时，装逼现象就已经盛行，仿佛装逼才是大学不可或缺的“文化”，真是对大学生的讽刺以及极高的嘲笑，后来才明白原来那才是学长泡学妹的独家法宝，而且屡试不爽，呜呼哀哉！！！由于来大学前就有人说在大学要进学生会啊什么的傻逼经验，造成本人神经错乱滴进入了传说中的“学生会”，进去后才发现，跟这里的装逼现象比先前的真的就不值得一提了，真是小巫见大巫。学生会分为主席团、部长级、干事这三个大体级别，首先老师或者主任交代的任务，主席连个屁都不敢放就接了，承诺肯定完成任务，然后就交给部长去完成，部长不想惹主席啊，因为来年他要竞选主席（你懂得），部长然后交给干事去完成，然后就是苦逼的干事毫无厘头的去干了，他也不想惹部长，因为他来年要竞选部长啊（你肯定懂得），最终可能是干事给老师汇报了，因为其他人不懂啊，再然后就是死循环了，学过编程的都知道。真受不了那些人，明明胸无点墨，却还要装的牛逼轰轰的样子，这只是冰山一角，笔者看不惯，毅然第二年退出了江湖传言的“学生会”，第二年纳新时我只想告诉学弟学妹说们说，学生会纳新了，大家快跑啊！！\n\n![picture](http://ww2.sinaimg.cn/mw690/bd5a4d63tw1ei92gbz6nxj21hc0xcjzq.jpg)\n\n我是软件工程专业的，所以对计算机技术也有想说的。学计算机也算是高端的行业了，因此造就了一大批装逼人士，也许你稍微懂一点计算机的知识，就可以跟其他学院的妹子来显摆了，说什么内存太小啊、处理器跟不上啊、装系统啊、不兼容啊、显卡不行啊都是ok的，只要你说他们绝对蒙，因为他们真的不知道，其实你也是只知道这几个专业名词而已，没错，你只是知道，然后你目的达到了。还有就是走在路上，你只要随便说一个话题，就立刻有人出来装出一副仿佛很牛掰的样子来反驳你，然后她们觉得自己很有面子，因为他们觉得你会觉得他很牛逼啊，其实你对他根本不屑一顾，只是看透不说透。\n\n装逼现象很盛行，说到底就是自己的虚荣心和功利心在作祟，这也早就了学校的浮躁。希望大家都不要心浮气躁、急功近利，让自己的心静下来、沉淀下来，学会低调做人，放低自己的姿态，踏踏实实去学技术，追求卓越，肯定会学有所成的。低调是我在进实验室时，实验室负责人首先告诉我们的，也是我们实验室的传承，自己确实受益很多。\n\n\n##有追求\n\n说到追求，让我想起了李开复自传的一本书《世界因你而不同》，其中讲述了他在卡内基梅隆大学缩学到的哲学思想，就是让世界因为有你而不同，想象有两个世界，一个世界有你，另外一个世界没有你，然后放大两个世界的不同，这就是人生的价值。\n\n我在大学发现现在的大学生普遍存在一种现象，就是迷茫和毫无追求。当我们在高中时，问你的追求是什么，大部分人都会不假思索说考一所好一点的大学。而当我们考上了大学，再问你的追求是什么时，我不知道还有多少人能说出来，大部分人只会一笑了之。这不是你的悲哀吗，然后大部分人就因为空闲时间多没有什么计划就玩起了游戏或者处了对象，然后就周而复始的渡过了两三年。也许会有人说我要考研，你还好意思说你要考研，大一大二几乎没学过什么，期末考试背下别人整理好的，然后跟别人得瑟说不挂科很容易嘛。也许你会反驳，大一大二玩下，大三大四就开始准备考研，那么我在打击你下，也许你后来真的去准备考研了，首先考研有一大部分是从众来的，然后就是你没什么基础，你确定你能坚持下来吗，到时候，你肯定会说考研太无聊了，还是学个技术去实习吧，这时候已经快大四了，身边的人陆陆续续去实习了，宿舍剩下没几个人了，你确定你还能静下心来从头开始学技术吗！\n\n所以告诫大家记忆身边的同学，大一大二已经过去，大三即将到来，希望大家珍惜好这一年。这辈子，总得有点追求和奋斗的目标吧。\n\n\n##切勿玩物丧志\n\n由于身边的同学玩游戏的太多了，这个话题必须说，为什么放到最后，当然是有理由的，自己想吧！！！\n\n说道玩游戏，这真是一个老生常态的话题了，这里本人只想说下自己的观点、自己内心的想法。大学的确不像在高中，空闲时间的确很多，多的你都不知道该怎么安排，导致很多人都迷上了玩游戏，对于玩游戏真的是看人的情况，有的人确实对游戏不感冒，有的人却很热衷甚至迷恋。为什么会出现这个情况呢，答案就是打发时间，也许你会笑，但是的确是这样。\n\n![pic](http://ww2.sinaimg.cn/mw690/bd5a4d63tw1ei93soqvtdj21400p0n7r.jpg)\n\n上图是最近比较火的一款游戏，不知道残害了多少大学生及其他人，也许有人会说玩游戏是别人的事跟我有什么关系，的确，跟我没关系。但是身边的例子太多太多，起先我有尝试过给别人介绍现在什么技术比较好，让他们去学，但是结果却不容乐观，他们还是低档不了游戏的诱惑，尝试了太多次后，我都已经麻木了，已经力不从心了。这里只是替他们感到惋惜，也会感叹他们的时间真多，有的人觉得时间不够用，而他们可以这样去挥霍、去浪费。\n\n笔者不是说玩游戏一定不好，一定误人子弟，只是不希望大家玩物丧志，且过且珍惜。\n\n---\n\n这篇博客不管在你看来是偏激，还是片面的，只是笔者在此说下自己的感想和观点。你可权当是在“扯淡”，哈哈，所以拟标题为[就当我在扯淡]。\n\n\n\n\n\n","source":"_posts/201407/2014-07-10-life_essay_2.md","raw":"---\nlayout : post\ntitle : 就当我在扯淡\ncategory : 随笔\ntags : Essay\n---\n今天是学校暑假放假回家后的第一天，我不知道这个暑假会不会是最后一次在家过暑假了，但总感觉很有可能是，因为也快要出去实习了嘛，以前在总觉得实习离我还很遥远，就那样“悠闲的”度过了我的大一大二，暑假过后我就该升入大三了，也就是江湖传言说学校里的“老大”，因为大四都滚蛋出去实习了嘛，哈哈:)\n\n暑假在家的作息的确跟学校里的不一样，在学校是晚睡、晚起，你没看错，就是晚起，但起码能保证白天的任务量基本可以完成。在家就不一样了，早睡、晚起，白天老想睡会儿，真不知道闹得是哪出.中午在屋子里又想睡会，想到自己大一大二貌似学了很多、懂了很多、沉淀了很多，其实细细想想也没学到很多技术，然后感叹了下大学浮躁的生活，想到这里，还是说服自己起来，打开自己的本本，写下了这篇貌似**扯淡**的博客。\n\n<!--more-->\n\n\n##做自己\n\n为什么要说做自己，因为笔者的确曾经有过一段迷茫期，期间自己却把自己给误导了，所以总结了下教训，留作经验，如果你看到了，希望给你一点经验做参考。\n\n由于，在大一时就进入了我们软件学院的实验室，其实也谈不上实验室，就是几个小伙伴还有学长学姐在一起学技术、交流、共同进步以及一起做项目。自从进入实验室，我的大学生活就被改变了，白天没事几乎都呆在实验室学技术，晚上九点半回去，差不多十点前到寝室，因为必须赶到晚上十点宿管阿姨要关寝室门之前到达，要不就被锁到寝室外面了。因此，跟同学呆在一起的时间就只有上专业课（排除偶尔还有翘个课啥的），然后就是晚上回到寝室的短短一两个点的时间，另外有时候回到寝室还要看下技术方面的东东（别叫我学霸，个人认为学霸不是一个褒义词，还是叫学屌把，哈哈）。所以，当时个人就觉得跟同学呆在一起的时间太少了，这样不好，怀疑会不会慢慢关系变得疏远了啊，所以曾经一段时间为了不疏远同学，晚上回去就去转下寝室，跟他们玩下，以及偶尔陪他们玩下电脑游戏（CF、LOL都玩过，虽然很渣）。当然，本人比较排斥电脑游戏，因为玩物丧志的例子不在少数，但为了陪同学还是玩了一阵子，至少不会因为走在路上他们谈游戏我却插不上嘴的尴尬出现，就那样过了很长一段时...\n\n![picture](http://ww1.sinaimg.cn/mw690/bd5a4d63tw1ei904yqgp4j20p00godju.jpg)\n\n那段时间，在我看来是痛苦的，因为自己总觉得是在为别人而过大学的生活，当然不是我所想要的。后来再次看了一遍高中时很喜欢的一部印度电影[三傻大闹宝莱坞](http://baike.baidu.com/subview/4059797/7366389.htm?fr=aladdin)，看完后想了很多，觉得自己不应该这样，固然出发点是好的，但是自己却把自己给“卖了”，痛定思痛毅然决定把游戏卸载了，小白三星笔记本win7系统全部格掉，装上了我最喜欢的Ubuntu系统，从那时起开始专心研究技术（技术控嘛），生活开始爽歪歪了！\n\n其实，有时候都是自己的内心在作怪，老是想一些杞人忧天的东西，不如静下心来学技术，追求自己真正想要的。还是就是怕与同学之间的关系疏远，陪他们玩游戏当然是我当时做出的最失败的选择，方式有很多，比如偶尔一起去打球啊、跑步啊、出去旅游啊什么的都是很好的方式，想不通自己当时为什么会做出那么愚蠢的选择。\n\n如果你是一个专于做技术却又害怕疏远与同学的距离，你也许会有跟我同样的烦恼，不用烦恼，解决拌饭有很多，希望你不要跟我一样犯下同样弱智的错误。\n\n\n##不装逼\n\n首先，你要明白这是一个浮躁的社会，连曾经被人们认为最纯洁的学校也更是这样，所以有必要说一下这个问题，为什么呢？答案就是，如果你想走的更远更高更想实现人生的价值（别说价值就是扯淡，那是你才说的），必须要静下心来做技术或者学问，不要嘲笑我迂腐，试问现在哪个成功的人当初不是脚踏实地慢慢干起的！\n\n因为，我还没有毕业，所以我只说下大学的现象，社会上也是雷同的。刚进大学时，装逼现象就已经盛行，仿佛装逼才是大学不可或缺的“文化”，真是对大学生的讽刺以及极高的嘲笑，后来才明白原来那才是学长泡学妹的独家法宝，而且屡试不爽，呜呼哀哉！！！由于来大学前就有人说在大学要进学生会啊什么的傻逼经验，造成本人神经错乱滴进入了传说中的“学生会”，进去后才发现，跟这里的装逼现象比先前的真的就不值得一提了，真是小巫见大巫。学生会分为主席团、部长级、干事这三个大体级别，首先老师或者主任交代的任务，主席连个屁都不敢放就接了，承诺肯定完成任务，然后就交给部长去完成，部长不想惹主席啊，因为来年他要竞选主席（你懂得），部长然后交给干事去完成，然后就是苦逼的干事毫无厘头的去干了，他也不想惹部长，因为他来年要竞选部长啊（你肯定懂得），最终可能是干事给老师汇报了，因为其他人不懂啊，再然后就是死循环了，学过编程的都知道。真受不了那些人，明明胸无点墨，却还要装的牛逼轰轰的样子，这只是冰山一角，笔者看不惯，毅然第二年退出了江湖传言的“学生会”，第二年纳新时我只想告诉学弟学妹说们说，学生会纳新了，大家快跑啊！！\n\n![picture](http://ww2.sinaimg.cn/mw690/bd5a4d63tw1ei92gbz6nxj21hc0xcjzq.jpg)\n\n我是软件工程专业的，所以对计算机技术也有想说的。学计算机也算是高端的行业了，因此造就了一大批装逼人士，也许你稍微懂一点计算机的知识，就可以跟其他学院的妹子来显摆了，说什么内存太小啊、处理器跟不上啊、装系统啊、不兼容啊、显卡不行啊都是ok的，只要你说他们绝对蒙，因为他们真的不知道，其实你也是只知道这几个专业名词而已，没错，你只是知道，然后你目的达到了。还有就是走在路上，你只要随便说一个话题，就立刻有人出来装出一副仿佛很牛掰的样子来反驳你，然后她们觉得自己很有面子，因为他们觉得你会觉得他很牛逼啊，其实你对他根本不屑一顾，只是看透不说透。\n\n装逼现象很盛行，说到底就是自己的虚荣心和功利心在作祟，这也早就了学校的浮躁。希望大家都不要心浮气躁、急功近利，让自己的心静下来、沉淀下来，学会低调做人，放低自己的姿态，踏踏实实去学技术，追求卓越，肯定会学有所成的。低调是我在进实验室时，实验室负责人首先告诉我们的，也是我们实验室的传承，自己确实受益很多。\n\n\n##有追求\n\n说到追求，让我想起了李开复自传的一本书《世界因你而不同》，其中讲述了他在卡内基梅隆大学缩学到的哲学思想，就是让世界因为有你而不同，想象有两个世界，一个世界有你，另外一个世界没有你，然后放大两个世界的不同，这就是人生的价值。\n\n我在大学发现现在的大学生普遍存在一种现象，就是迷茫和毫无追求。当我们在高中时，问你的追求是什么，大部分人都会不假思索说考一所好一点的大学。而当我们考上了大学，再问你的追求是什么时，我不知道还有多少人能说出来，大部分人只会一笑了之。这不是你的悲哀吗，然后大部分人就因为空闲时间多没有什么计划就玩起了游戏或者处了对象，然后就周而复始的渡过了两三年。也许会有人说我要考研，你还好意思说你要考研，大一大二几乎没学过什么，期末考试背下别人整理好的，然后跟别人得瑟说不挂科很容易嘛。也许你会反驳，大一大二玩下，大三大四就开始准备考研，那么我在打击你下，也许你后来真的去准备考研了，首先考研有一大部分是从众来的，然后就是你没什么基础，你确定你能坚持下来吗，到时候，你肯定会说考研太无聊了，还是学个技术去实习吧，这时候已经快大四了，身边的人陆陆续续去实习了，宿舍剩下没几个人了，你确定你还能静下心来从头开始学技术吗！\n\n所以告诫大家记忆身边的同学，大一大二已经过去，大三即将到来，希望大家珍惜好这一年。这辈子，总得有点追求和奋斗的目标吧。\n\n\n##切勿玩物丧志\n\n由于身边的同学玩游戏的太多了，这个话题必须说，为什么放到最后，当然是有理由的，自己想吧！！！\n\n说道玩游戏，这真是一个老生常态的话题了，这里本人只想说下自己的观点、自己内心的想法。大学的确不像在高中，空闲时间的确很多，多的你都不知道该怎么安排，导致很多人都迷上了玩游戏，对于玩游戏真的是看人的情况，有的人确实对游戏不感冒，有的人却很热衷甚至迷恋。为什么会出现这个情况呢，答案就是打发时间，也许你会笑，但是的确是这样。\n\n![pic](http://ww2.sinaimg.cn/mw690/bd5a4d63tw1ei93soqvtdj21400p0n7r.jpg)\n\n上图是最近比较火的一款游戏，不知道残害了多少大学生及其他人，也许有人会说玩游戏是别人的事跟我有什么关系，的确，跟我没关系。但是身边的例子太多太多，起先我有尝试过给别人介绍现在什么技术比较好，让他们去学，但是结果却不容乐观，他们还是低档不了游戏的诱惑，尝试了太多次后，我都已经麻木了，已经力不从心了。这里只是替他们感到惋惜，也会感叹他们的时间真多，有的人觉得时间不够用，而他们可以这样去挥霍、去浪费。\n\n笔者不是说玩游戏一定不好，一定误人子弟，只是不希望大家玩物丧志，且过且珍惜。\n\n---\n\n这篇博客不管在你看来是偏激，还是片面的，只是笔者在此说下自己的感想和观点。你可权当是在“扯淡”，哈哈，所以拟标题为[就当我在扯淡]。\n\n\n\n\n\n","slug":"201407-2014-07-10-life-essay-2","published":1,"date":"2018-04-12T15:20:38.818Z","updated":"2018-04-12T15:20:38.818Z","comments":1,"photos":[],"link":"","_id":"cjfwomb4y002eass66jmzder2","content":"<p>今天是学校暑假放假回家后的第一天，我不知道这个暑假会不会是最后一次在家过暑假了，但总感觉很有可能是，因为也快要出去实习了嘛，以前在总觉得实习离我还很遥远，就那样“悠闲的”度过了我的大一大二，暑假过后我就该升入大三了，也就是江湖传言说学校里的“老大”，因为大四都滚蛋出去实习了嘛，哈哈:)</p>\n<p>暑假在家的作息的确跟学校里的不一样，在学校是晚睡、晚起，你没看错，就是晚起，但起码能保证白天的任务量基本可以完成。在家就不一样了，早睡、晚起，白天老想睡会儿，真不知道闹得是哪出.中午在屋子里又想睡会，想到自己大一大二貌似学了很多、懂了很多、沉淀了很多，其实细细想想也没学到很多技术，然后感叹了下大学浮躁的生活，想到这里，还是说服自己起来，打开自己的本本，写下了这篇貌似<strong>扯淡</strong>的博客。</p>\n<a id=\"more\"></a>\n<p>##做自己</p>\n<p>为什么要说做自己，因为笔者的确曾经有过一段迷茫期，期间自己却把自己给误导了，所以总结了下教训，留作经验，如果你看到了，希望给你一点经验做参考。</p>\n<p>由于，在大一时就进入了我们软件学院的实验室，其实也谈不上实验室，就是几个小伙伴还有学长学姐在一起学技术、交流、共同进步以及一起做项目。自从进入实验室，我的大学生活就被改变了，白天没事几乎都呆在实验室学技术，晚上九点半回去，差不多十点前到寝室，因为必须赶到晚上十点宿管阿姨要关寝室门之前到达，要不就被锁到寝室外面了。因此，跟同学呆在一起的时间就只有上专业课（排除偶尔还有翘个课啥的），然后就是晚上回到寝室的短短一两个点的时间，另外有时候回到寝室还要看下技术方面的东东（别叫我学霸，个人认为学霸不是一个褒义词，还是叫学屌把，哈哈）。所以，当时个人就觉得跟同学呆在一起的时间太少了，这样不好，怀疑会不会慢慢关系变得疏远了啊，所以曾经一段时间为了不疏远同学，晚上回去就去转下寝室，跟他们玩下，以及偶尔陪他们玩下电脑游戏（CF、LOL都玩过，虽然很渣）。当然，本人比较排斥电脑游戏，因为玩物丧志的例子不在少数，但为了陪同学还是玩了一阵子，至少不会因为走在路上他们谈游戏我却插不上嘴的尴尬出现，就那样过了很长一段时…</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63tw1ei904yqgp4j20p00godju.jpg\" alt=\"picture\"></p>\n<p>那段时间，在我看来是痛苦的，因为自己总觉得是在为别人而过大学的生活，当然不是我所想要的。后来再次看了一遍高中时很喜欢的一部印度电影<a href=\"http://baike.baidu.com/subview/4059797/7366389.htm?fr=aladdin\" target=\"_blank\" rel=\"noopener\">三傻大闹宝莱坞</a>，看完后想了很多，觉得自己不应该这样，固然出发点是好的，但是自己却把自己给“卖了”，痛定思痛毅然决定把游戏卸载了，小白三星笔记本win7系统全部格掉，装上了我最喜欢的Ubuntu系统，从那时起开始专心研究技术（技术控嘛），生活开始爽歪歪了！</p>\n<p>其实，有时候都是自己的内心在作怪，老是想一些杞人忧天的东西，不如静下心来学技术，追求自己真正想要的。还是就是怕与同学之间的关系疏远，陪他们玩游戏当然是我当时做出的最失败的选择，方式有很多，比如偶尔一起去打球啊、跑步啊、出去旅游啊什么的都是很好的方式，想不通自己当时为什么会做出那么愚蠢的选择。</p>\n<p>如果你是一个专于做技术却又害怕疏远与同学的距离，你也许会有跟我同样的烦恼，不用烦恼，解决拌饭有很多，希望你不要跟我一样犯下同样弱智的错误。</p>\n<p>##不装逼</p>\n<p>首先，你要明白这是一个浮躁的社会，连曾经被人们认为最纯洁的学校也更是这样，所以有必要说一下这个问题，为什么呢？答案就是，如果你想走的更远更高更想实现人生的价值（别说价值就是扯淡，那是你才说的），必须要静下心来做技术或者学问，不要嘲笑我迂腐，试问现在哪个成功的人当初不是脚踏实地慢慢干起的！</p>\n<p>因为，我还没有毕业，所以我只说下大学的现象，社会上也是雷同的。刚进大学时，装逼现象就已经盛行，仿佛装逼才是大学不可或缺的“文化”，真是对大学生的讽刺以及极高的嘲笑，后来才明白原来那才是学长泡学妹的独家法宝，而且屡试不爽，呜呼哀哉！！！由于来大学前就有人说在大学要进学生会啊什么的傻逼经验，造成本人神经错乱滴进入了传说中的“学生会”，进去后才发现，跟这里的装逼现象比先前的真的就不值得一提了，真是小巫见大巫。学生会分为主席团、部长级、干事这三个大体级别，首先老师或者主任交代的任务，主席连个屁都不敢放就接了，承诺肯定完成任务，然后就交给部长去完成，部长不想惹主席啊，因为来年他要竞选主席（你懂得），部长然后交给干事去完成，然后就是苦逼的干事毫无厘头的去干了，他也不想惹部长，因为他来年要竞选部长啊（你肯定懂得），最终可能是干事给老师汇报了，因为其他人不懂啊，再然后就是死循环了，学过编程的都知道。真受不了那些人，明明胸无点墨，却还要装的牛逼轰轰的样子，这只是冰山一角，笔者看不惯，毅然第二年退出了江湖传言的“学生会”，第二年纳新时我只想告诉学弟学妹说们说，学生会纳新了，大家快跑啊！！</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63tw1ei92gbz6nxj21hc0xcjzq.jpg\" alt=\"picture\"></p>\n<p>我是软件工程专业的，所以对计算机技术也有想说的。学计算机也算是高端的行业了，因此造就了一大批装逼人士，也许你稍微懂一点计算机的知识，就可以跟其他学院的妹子来显摆了，说什么内存太小啊、处理器跟不上啊、装系统啊、不兼容啊、显卡不行啊都是ok的，只要你说他们绝对蒙，因为他们真的不知道，其实你也是只知道这几个专业名词而已，没错，你只是知道，然后你目的达到了。还有就是走在路上，你只要随便说一个话题，就立刻有人出来装出一副仿佛很牛掰的样子来反驳你，然后她们觉得自己很有面子，因为他们觉得你会觉得他很牛逼啊，其实你对他根本不屑一顾，只是看透不说透。</p>\n<p>装逼现象很盛行，说到底就是自己的虚荣心和功利心在作祟，这也早就了学校的浮躁。希望大家都不要心浮气躁、急功近利，让自己的心静下来、沉淀下来，学会低调做人，放低自己的姿态，踏踏实实去学技术，追求卓越，肯定会学有所成的。低调是我在进实验室时，实验室负责人首先告诉我们的，也是我们实验室的传承，自己确实受益很多。</p>\n<p>##有追求</p>\n<p>说到追求，让我想起了李开复自传的一本书《世界因你而不同》，其中讲述了他在卡内基梅隆大学缩学到的哲学思想，就是让世界因为有你而不同，想象有两个世界，一个世界有你，另外一个世界没有你，然后放大两个世界的不同，这就是人生的价值。</p>\n<p>我在大学发现现在的大学生普遍存在一种现象，就是迷茫和毫无追求。当我们在高中时，问你的追求是什么，大部分人都会不假思索说考一所好一点的大学。而当我们考上了大学，再问你的追求是什么时，我不知道还有多少人能说出来，大部分人只会一笑了之。这不是你的悲哀吗，然后大部分人就因为空闲时间多没有什么计划就玩起了游戏或者处了对象，然后就周而复始的渡过了两三年。也许会有人说我要考研，你还好意思说你要考研，大一大二几乎没学过什么，期末考试背下别人整理好的，然后跟别人得瑟说不挂科很容易嘛。也许你会反驳，大一大二玩下，大三大四就开始准备考研，那么我在打击你下，也许你后来真的去准备考研了，首先考研有一大部分是从众来的，然后就是你没什么基础，你确定你能坚持下来吗，到时候，你肯定会说考研太无聊了，还是学个技术去实习吧，这时候已经快大四了，身边的人陆陆续续去实习了，宿舍剩下没几个人了，你确定你还能静下心来从头开始学技术吗！</p>\n<p>所以告诫大家记忆身边的同学，大一大二已经过去，大三即将到来，希望大家珍惜好这一年。这辈子，总得有点追求和奋斗的目标吧。</p>\n<p>##切勿玩物丧志</p>\n<p>由于身边的同学玩游戏的太多了，这个话题必须说，为什么放到最后，当然是有理由的，自己想吧！！！</p>\n<p>说道玩游戏，这真是一个老生常态的话题了，这里本人只想说下自己的观点、自己内心的想法。大学的确不像在高中，空闲时间的确很多，多的你都不知道该怎么安排，导致很多人都迷上了玩游戏，对于玩游戏真的是看人的情况，有的人确实对游戏不感冒，有的人却很热衷甚至迷恋。为什么会出现这个情况呢，答案就是打发时间，也许你会笑，但是的确是这样。</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63tw1ei93soqvtdj21400p0n7r.jpg\" alt=\"pic\"></p>\n<p>上图是最近比较火的一款游戏，不知道残害了多少大学生及其他人，也许有人会说玩游戏是别人的事跟我有什么关系，的确，跟我没关系。但是身边的例子太多太多，起先我有尝试过给别人介绍现在什么技术比较好，让他们去学，但是结果却不容乐观，他们还是低档不了游戏的诱惑，尝试了太多次后，我都已经麻木了，已经力不从心了。这里只是替他们感到惋惜，也会感叹他们的时间真多，有的人觉得时间不够用，而他们可以这样去挥霍、去浪费。</p>\n<p>笔者不是说玩游戏一定不好，一定误人子弟，只是不希望大家玩物丧志，且过且珍惜。</p>\n<hr>\n<p>这篇博客不管在你看来是偏激，还是片面的，只是笔者在此说下自己的感想和观点。你可权当是在“扯淡”，哈哈，所以拟标题为[就当我在扯淡]。</p>\n","site":{"data":{}},"excerpt":"<p>今天是学校暑假放假回家后的第一天，我不知道这个暑假会不会是最后一次在家过暑假了，但总感觉很有可能是，因为也快要出去实习了嘛，以前在总觉得实习离我还很遥远，就那样“悠闲的”度过了我的大一大二，暑假过后我就该升入大三了，也就是江湖传言说学校里的“老大”，因为大四都滚蛋出去实习了嘛，哈哈:)</p>\n<p>暑假在家的作息的确跟学校里的不一样，在学校是晚睡、晚起，你没看错，就是晚起，但起码能保证白天的任务量基本可以完成。在家就不一样了，早睡、晚起，白天老想睡会儿，真不知道闹得是哪出.中午在屋子里又想睡会，想到自己大一大二貌似学了很多、懂了很多、沉淀了很多，其实细细想想也没学到很多技术，然后感叹了下大学浮躁的生活，想到这里，还是说服自己起来，打开自己的本本，写下了这篇貌似<strong>扯淡</strong>的博客。</p>","more":"<p>##做自己</p>\n<p>为什么要说做自己，因为笔者的确曾经有过一段迷茫期，期间自己却把自己给误导了，所以总结了下教训，留作经验，如果你看到了，希望给你一点经验做参考。</p>\n<p>由于，在大一时就进入了我们软件学院的实验室，其实也谈不上实验室，就是几个小伙伴还有学长学姐在一起学技术、交流、共同进步以及一起做项目。自从进入实验室，我的大学生活就被改变了，白天没事几乎都呆在实验室学技术，晚上九点半回去，差不多十点前到寝室，因为必须赶到晚上十点宿管阿姨要关寝室门之前到达，要不就被锁到寝室外面了。因此，跟同学呆在一起的时间就只有上专业课（排除偶尔还有翘个课啥的），然后就是晚上回到寝室的短短一两个点的时间，另外有时候回到寝室还要看下技术方面的东东（别叫我学霸，个人认为学霸不是一个褒义词，还是叫学屌把，哈哈）。所以，当时个人就觉得跟同学呆在一起的时间太少了，这样不好，怀疑会不会慢慢关系变得疏远了啊，所以曾经一段时间为了不疏远同学，晚上回去就去转下寝室，跟他们玩下，以及偶尔陪他们玩下电脑游戏（CF、LOL都玩过，虽然很渣）。当然，本人比较排斥电脑游戏，因为玩物丧志的例子不在少数，但为了陪同学还是玩了一阵子，至少不会因为走在路上他们谈游戏我却插不上嘴的尴尬出现，就那样过了很长一段时…</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63tw1ei904yqgp4j20p00godju.jpg\" alt=\"picture\"></p>\n<p>那段时间，在我看来是痛苦的，因为自己总觉得是在为别人而过大学的生活，当然不是我所想要的。后来再次看了一遍高中时很喜欢的一部印度电影<a href=\"http://baike.baidu.com/subview/4059797/7366389.htm?fr=aladdin\" target=\"_blank\" rel=\"noopener\">三傻大闹宝莱坞</a>，看完后想了很多，觉得自己不应该这样，固然出发点是好的，但是自己却把自己给“卖了”，痛定思痛毅然决定把游戏卸载了，小白三星笔记本win7系统全部格掉，装上了我最喜欢的Ubuntu系统，从那时起开始专心研究技术（技术控嘛），生活开始爽歪歪了！</p>\n<p>其实，有时候都是自己的内心在作怪，老是想一些杞人忧天的东西，不如静下心来学技术，追求自己真正想要的。还是就是怕与同学之间的关系疏远，陪他们玩游戏当然是我当时做出的最失败的选择，方式有很多，比如偶尔一起去打球啊、跑步啊、出去旅游啊什么的都是很好的方式，想不通自己当时为什么会做出那么愚蠢的选择。</p>\n<p>如果你是一个专于做技术却又害怕疏远与同学的距离，你也许会有跟我同样的烦恼，不用烦恼，解决拌饭有很多，希望你不要跟我一样犯下同样弱智的错误。</p>\n<p>##不装逼</p>\n<p>首先，你要明白这是一个浮躁的社会，连曾经被人们认为最纯洁的学校也更是这样，所以有必要说一下这个问题，为什么呢？答案就是，如果你想走的更远更高更想实现人生的价值（别说价值就是扯淡，那是你才说的），必须要静下心来做技术或者学问，不要嘲笑我迂腐，试问现在哪个成功的人当初不是脚踏实地慢慢干起的！</p>\n<p>因为，我还没有毕业，所以我只说下大学的现象，社会上也是雷同的。刚进大学时，装逼现象就已经盛行，仿佛装逼才是大学不可或缺的“文化”，真是对大学生的讽刺以及极高的嘲笑，后来才明白原来那才是学长泡学妹的独家法宝，而且屡试不爽，呜呼哀哉！！！由于来大学前就有人说在大学要进学生会啊什么的傻逼经验，造成本人神经错乱滴进入了传说中的“学生会”，进去后才发现，跟这里的装逼现象比先前的真的就不值得一提了，真是小巫见大巫。学生会分为主席团、部长级、干事这三个大体级别，首先老师或者主任交代的任务，主席连个屁都不敢放就接了，承诺肯定完成任务，然后就交给部长去完成，部长不想惹主席啊，因为来年他要竞选主席（你懂得），部长然后交给干事去完成，然后就是苦逼的干事毫无厘头的去干了，他也不想惹部长，因为他来年要竞选部长啊（你肯定懂得），最终可能是干事给老师汇报了，因为其他人不懂啊，再然后就是死循环了，学过编程的都知道。真受不了那些人，明明胸无点墨，却还要装的牛逼轰轰的样子，这只是冰山一角，笔者看不惯，毅然第二年退出了江湖传言的“学生会”，第二年纳新时我只想告诉学弟学妹说们说，学生会纳新了，大家快跑啊！！</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63tw1ei92gbz6nxj21hc0xcjzq.jpg\" alt=\"picture\"></p>\n<p>我是软件工程专业的，所以对计算机技术也有想说的。学计算机也算是高端的行业了，因此造就了一大批装逼人士，也许你稍微懂一点计算机的知识，就可以跟其他学院的妹子来显摆了，说什么内存太小啊、处理器跟不上啊、装系统啊、不兼容啊、显卡不行啊都是ok的，只要你说他们绝对蒙，因为他们真的不知道，其实你也是只知道这几个专业名词而已，没错，你只是知道，然后你目的达到了。还有就是走在路上，你只要随便说一个话题，就立刻有人出来装出一副仿佛很牛掰的样子来反驳你，然后她们觉得自己很有面子，因为他们觉得你会觉得他很牛逼啊，其实你对他根本不屑一顾，只是看透不说透。</p>\n<p>装逼现象很盛行，说到底就是自己的虚荣心和功利心在作祟，这也早就了学校的浮躁。希望大家都不要心浮气躁、急功近利，让自己的心静下来、沉淀下来，学会低调做人，放低自己的姿态，踏踏实实去学技术，追求卓越，肯定会学有所成的。低调是我在进实验室时，实验室负责人首先告诉我们的，也是我们实验室的传承，自己确实受益很多。</p>\n<p>##有追求</p>\n<p>说到追求，让我想起了李开复自传的一本书《世界因你而不同》，其中讲述了他在卡内基梅隆大学缩学到的哲学思想，就是让世界因为有你而不同，想象有两个世界，一个世界有你，另外一个世界没有你，然后放大两个世界的不同，这就是人生的价值。</p>\n<p>我在大学发现现在的大学生普遍存在一种现象，就是迷茫和毫无追求。当我们在高中时，问你的追求是什么，大部分人都会不假思索说考一所好一点的大学。而当我们考上了大学，再问你的追求是什么时，我不知道还有多少人能说出来，大部分人只会一笑了之。这不是你的悲哀吗，然后大部分人就因为空闲时间多没有什么计划就玩起了游戏或者处了对象，然后就周而复始的渡过了两三年。也许会有人说我要考研，你还好意思说你要考研，大一大二几乎没学过什么，期末考试背下别人整理好的，然后跟别人得瑟说不挂科很容易嘛。也许你会反驳，大一大二玩下，大三大四就开始准备考研，那么我在打击你下，也许你后来真的去准备考研了，首先考研有一大部分是从众来的，然后就是你没什么基础，你确定你能坚持下来吗，到时候，你肯定会说考研太无聊了，还是学个技术去实习吧，这时候已经快大四了，身边的人陆陆续续去实习了，宿舍剩下没几个人了，你确定你还能静下心来从头开始学技术吗！</p>\n<p>所以告诫大家记忆身边的同学，大一大二已经过去，大三即将到来，希望大家珍惜好这一年。这辈子，总得有点追求和奋斗的目标吧。</p>\n<p>##切勿玩物丧志</p>\n<p>由于身边的同学玩游戏的太多了，这个话题必须说，为什么放到最后，当然是有理由的，自己想吧！！！</p>\n<p>说道玩游戏，这真是一个老生常态的话题了，这里本人只想说下自己的观点、自己内心的想法。大学的确不像在高中，空闲时间的确很多，多的你都不知道该怎么安排，导致很多人都迷上了玩游戏，对于玩游戏真的是看人的情况，有的人确实对游戏不感冒，有的人却很热衷甚至迷恋。为什么会出现这个情况呢，答案就是打发时间，也许你会笑，但是的确是这样。</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63tw1ei93soqvtdj21400p0n7r.jpg\" alt=\"pic\"></p>\n<p>上图是最近比较火的一款游戏，不知道残害了多少大学生及其他人，也许有人会说玩游戏是别人的事跟我有什么关系，的确，跟我没关系。但是身边的例子太多太多，起先我有尝试过给别人介绍现在什么技术比较好，让他们去学，但是结果却不容乐观，他们还是低档不了游戏的诱惑，尝试了太多次后，我都已经麻木了，已经力不从心了。这里只是替他们感到惋惜，也会感叹他们的时间真多，有的人觉得时间不够用，而他们可以这样去挥霍、去浪费。</p>\n<p>笔者不是说玩游戏一定不好，一定误人子弟，只是不希望大家玩物丧志，且过且珍惜。</p>\n<hr>\n<p>这篇博客不管在你看来是偏激，还是片面的，只是笔者在此说下自己的感想和观点。你可权当是在“扯淡”，哈哈，所以拟标题为[就当我在扯淡]。</p>"},{"layout":"post","title":"noscript元素","_content":"今天，我把自己的浏览器脚本给禁用了，为了想看下他们是如何处理的，然后登录了一些网站：\n\n百度帐号都无法登录，163邮箱无法登录也没给出任何的友好显示，淘宝、京东也是一团糟，新浪还好些，新浪邮箱给出了HTML文档提示：\n\n![pic](http://ww1.sinaimg.cn/mw690/bd5a4d63tw1eib12a25aij20co049jrr.jpg)\n\n潦潦看了一下，爆出的毛病都是些不友好的界面，大家都知道“一切input都是邪恶的，js验证只是给君子使用的”.\n<!--more-->\n\n早期浏览器都面临一个特殊的问题，就是当浏览器不支持js或者js脚本被禁用时如何让页面平稳的退化。对这个问题的最终解决办法是创建一个<noscript\\>元素，用以在不支持js或禁用js脚本的浏览器中使用。这个元素能够包含出现在文档<body>中的任何html元素\\-\\-\\-<script\\>元素除外，<noscript\\>元素只有在以下条件下才会显示出来：\n\n*\t浏览器不支持脚本\n*\t浏览器支持脚本，但脚本被禁用\n\n符合以上任何一个条件，浏览器就会显示noscript中的内容，除此之外的任何情况下，都不会呈现noscript中的内容，下面看一个例子：\n\n\t<!DOCTYPE HTML>\n\t<html>\n    \t<head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n        <title>Noscript</title>\n        <script type=\"text/javascript\" defer=\"defer\" src=\"./js/noscript.js\"></script>\n    \t</head>\n    \t<body>\n        <noscript>\n            <h1>本页面已禁用js脚本</h1>\n        </noscript>\n    \t</body>\n\t</html>\n\n\n这个页面会在脚本无效的情况下向用户显示一条信息，而在启用了脚本的浏览器中，用户永远也不会看到他，尽管他是页面的一部分。\n\n\n\n\n","source":"_posts/201407/2014-07-13-js_noscript_notes.md","raw":"---\nlayout : post\ntitle : noscript元素\ncategory : JavaScript\ntags : js\n---\n今天，我把自己的浏览器脚本给禁用了，为了想看下他们是如何处理的，然后登录了一些网站：\n\n百度帐号都无法登录，163邮箱无法登录也没给出任何的友好显示，淘宝、京东也是一团糟，新浪还好些，新浪邮箱给出了HTML文档提示：\n\n![pic](http://ww1.sinaimg.cn/mw690/bd5a4d63tw1eib12a25aij20co049jrr.jpg)\n\n潦潦看了一下，爆出的毛病都是些不友好的界面，大家都知道“一切input都是邪恶的，js验证只是给君子使用的”.\n<!--more-->\n\n早期浏览器都面临一个特殊的问题，就是当浏览器不支持js或者js脚本被禁用时如何让页面平稳的退化。对这个问题的最终解决办法是创建一个<noscript\\>元素，用以在不支持js或禁用js脚本的浏览器中使用。这个元素能够包含出现在文档<body>中的任何html元素\\-\\-\\-<script\\>元素除外，<noscript\\>元素只有在以下条件下才会显示出来：\n\n*\t浏览器不支持脚本\n*\t浏览器支持脚本，但脚本被禁用\n\n符合以上任何一个条件，浏览器就会显示noscript中的内容，除此之外的任何情况下，都不会呈现noscript中的内容，下面看一个例子：\n\n\t<!DOCTYPE HTML>\n\t<html>\n    \t<head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n        <title>Noscript</title>\n        <script type=\"text/javascript\" defer=\"defer\" src=\"./js/noscript.js\"></script>\n    \t</head>\n    \t<body>\n        <noscript>\n            <h1>本页面已禁用js脚本</h1>\n        </noscript>\n    \t</body>\n\t</html>\n\n\n这个页面会在脚本无效的情况下向用户显示一条信息，而在启用了脚本的浏览器中，用户永远也不会看到他，尽管他是页面的一部分。\n\n\n\n\n","slug":"201407-2014-07-13-js-noscript-notes","published":1,"date":"2018-04-12T15:20:38.819Z","updated":"2018-04-12T15:20:38.819Z","comments":1,"photos":[],"link":"","_id":"cjfwomb50002hass6djihsfrt","content":"<p>今天，我把自己的浏览器脚本给禁用了，为了想看下他们是如何处理的，然后登录了一些网站：</p>\n<p>百度帐号都无法登录，163邮箱无法登录也没给出任何的友好显示，淘宝、京东也是一团糟，新浪还好些，新浪邮箱给出了HTML文档提示：</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63tw1eib12a25aij20co049jrr.jpg\" alt=\"pic\"></p>\n<p>潦潦看了一下，爆出的毛病都是些不友好的界面，大家都知道“一切input都是邪恶的，js验证只是给君子使用的”.<br><a id=\"more\"></a></p>\n<p>早期浏览器都面临一个特殊的问题，就是当浏览器不支持js或者js脚本被禁用时如何让页面平稳的退化。对这个问题的最终解决办法是创建一个&lt;noscript>元素，用以在不支持js或禁用js脚本的浏览器中使用。这个元素能够包含出现在文档<body>中的任何html元素---&lt;script>元素除外，&lt;noscript>元素只有在以下条件下才会显示出来：</body></p>\n<ul>\n<li>浏览器不支持脚本</li>\n<li>浏览器支持脚本，但脚本被禁用</li>\n</ul>\n<p>符合以上任何一个条件，浏览器就会显示noscript中的内容，除此之外的任何情况下，都不会呈现noscript中的内容，下面看一个例子：</p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n    &lt;head&gt;\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;\n    &lt;title&gt;Noscript&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;./js/noscript.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;noscript&gt;\n        &lt;h1&gt;本页面已禁用js脚本&lt;/h1&gt;\n    &lt;/noscript&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>这个页面会在脚本无效的情况下向用户显示一条信息，而在启用了脚本的浏览器中，用户永远也不会看到他，尽管他是页面的一部分。</p>\n","site":{"data":{}},"excerpt":"<p>今天，我把自己的浏览器脚本给禁用了，为了想看下他们是如何处理的，然后登录了一些网站：</p>\n<p>百度帐号都无法登录，163邮箱无法登录也没给出任何的友好显示，淘宝、京东也是一团糟，新浪还好些，新浪邮箱给出了HTML文档提示：</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63tw1eib12a25aij20co049jrr.jpg\" alt=\"pic\"></p>\n<p>潦潦看了一下，爆出的毛病都是些不友好的界面，大家都知道“一切input都是邪恶的，js验证只是给君子使用的”.<br>","more":"</p>\n<p>早期浏览器都面临一个特殊的问题，就是当浏览器不支持js或者js脚本被禁用时如何让页面平稳的退化。对这个问题的最终解决办法是创建一个&lt;noscript>元素，用以在不支持js或禁用js脚本的浏览器中使用。这个元素能够包含出现在文档<body>中的任何html元素---&lt;script>元素除外，&lt;noscript>元素只有在以下条件下才会显示出来：</body></p>\n<ul>\n<li>浏览器不支持脚本</li>\n<li>浏览器支持脚本，但脚本被禁用</li>\n</ul>\n<p>符合以上任何一个条件，浏览器就会显示noscript中的内容，除此之外的任何情况下，都不会呈现noscript中的内容，下面看一个例子：</p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n    &lt;head&gt;\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;\n    &lt;title&gt;Noscript&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;./js/noscript.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;noscript&gt;\n        &lt;h1&gt;本页面已禁用js脚本&lt;/h1&gt;\n    &lt;/noscript&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>这个页面会在脚本无效的情况下向用户显示一条信息，而在启用了脚本的浏览器中，用户永远也不会看到他，尽管他是页面的一部分。</p>"},{"layout":"post","title":"Memcached缓存技术原理与安装","_content":"Memcached 是以LiveJournal旗下Danga Interactive公司的Brad Fitzpatric为首开发的一款内存缓存软件。Memcached是一种缓存技术，它可以把数据放入内存，从而可以通过内存访问提高速度，memcached技术的关键是提速。\n\n###为什么要使用Memcached\n\n随着互联网的发展，传统的关系型数据库已经出现了瓶颈，无法满足我们的要求，例如：\n\n1）**对数据库的高并发读写**\n\n如果对关系型数据库进行高并发读写操作，它是不能承受的。\n\n2）**对海量数据的处理**\n\n对于大型的SNS网站，每天都有数百万的数据产生（例如微博），如果使用传统关系数据库进行查询数据，将会慢的难以忍受。\n\n使用Memcached就可以很好的解决上述问题。\n\n<!--more-->\n\n###Memcached使用原理\n\nMemcached是高性能的分布式内存缓存服务器，通过缓存数据库查询结果到内存，以后就可以直接访问内存，减少对数据库的访问次数，进而提高动态网站应用的速度和可扩展性。\n\n当客户端与memcached建立连接后，接下来就是存储对象了，每个存储的对象都有一个唯一的标识符key与value对应相关联，通过key可以对对象进行存取操作，而对象实际上是保存在内存中的，所以速度比较快。\n\n下面是memcached模型图：\n\n![pic](http://ww2.sinaimg.cn/mw690/bd5a4d63tw1eiah17n5awj20dg0dcmy0.jpg)\n\n\n**注意**： 为了提高性能，Memcached把数据存储在内存中。由于数据仅存在内存中，因次重启memcached或者主机都会导致数据丢失。另外，内存容量达到指定值后，就会使用LRU（least recently used）算法自动删除不使用的缓存。memcached本身是为了缓存而设计的服务器，因次并没有过多考虑数据的持久化问题。\n\n###安装Memcached\n\n这里只是介绍下在windows下是如何安装的。\n\n步骤：\n\n1、下载memcached安装软件\n\n2、安装\n\n进入cmd控制台，切换到memcached.exe文件夹下，执行命令：\n\n\tmemcached.exe -d install\n\n3、启动memcached\n\n\tmemcached.exe -d start\n\n4、停止服务\n\n\tmemcached.exe -d stop\n\n5、查看是否安装成功\n\n\tnetstat -an\n\n\tTCP    0.0.0.0:11211          0.0.0.0:0              LISTENING\n\n查看11211端口是否被监听，或者查看是否被memcached应用所监听：\n\n\tnetstat -anb\n\n\tTCP    [::]:11211             [::]:0                 LISTENIN [memcached.exe]\n\n可以看到，11211端口正被memcached应用程序所监听。\n\n\n(完)","source":"_posts/201407/2014-07-12-memcached_install_notes.md","raw":"---\nlayout : post\ntitle : Memcached缓存技术原理与安装\ncategory : Memcached\ntags : Memcached\n---\nMemcached 是以LiveJournal旗下Danga Interactive公司的Brad Fitzpatric为首开发的一款内存缓存软件。Memcached是一种缓存技术，它可以把数据放入内存，从而可以通过内存访问提高速度，memcached技术的关键是提速。\n\n###为什么要使用Memcached\n\n随着互联网的发展，传统的关系型数据库已经出现了瓶颈，无法满足我们的要求，例如：\n\n1）**对数据库的高并发读写**\n\n如果对关系型数据库进行高并发读写操作，它是不能承受的。\n\n2）**对海量数据的处理**\n\n对于大型的SNS网站，每天都有数百万的数据产生（例如微博），如果使用传统关系数据库进行查询数据，将会慢的难以忍受。\n\n使用Memcached就可以很好的解决上述问题。\n\n<!--more-->\n\n###Memcached使用原理\n\nMemcached是高性能的分布式内存缓存服务器，通过缓存数据库查询结果到内存，以后就可以直接访问内存，减少对数据库的访问次数，进而提高动态网站应用的速度和可扩展性。\n\n当客户端与memcached建立连接后，接下来就是存储对象了，每个存储的对象都有一个唯一的标识符key与value对应相关联，通过key可以对对象进行存取操作，而对象实际上是保存在内存中的，所以速度比较快。\n\n下面是memcached模型图：\n\n![pic](http://ww2.sinaimg.cn/mw690/bd5a4d63tw1eiah17n5awj20dg0dcmy0.jpg)\n\n\n**注意**： 为了提高性能，Memcached把数据存储在内存中。由于数据仅存在内存中，因次重启memcached或者主机都会导致数据丢失。另外，内存容量达到指定值后，就会使用LRU（least recently used）算法自动删除不使用的缓存。memcached本身是为了缓存而设计的服务器，因次并没有过多考虑数据的持久化问题。\n\n###安装Memcached\n\n这里只是介绍下在windows下是如何安装的。\n\n步骤：\n\n1、下载memcached安装软件\n\n2、安装\n\n进入cmd控制台，切换到memcached.exe文件夹下，执行命令：\n\n\tmemcached.exe -d install\n\n3、启动memcached\n\n\tmemcached.exe -d start\n\n4、停止服务\n\n\tmemcached.exe -d stop\n\n5、查看是否安装成功\n\n\tnetstat -an\n\n\tTCP    0.0.0.0:11211          0.0.0.0:0              LISTENING\n\n查看11211端口是否被监听，或者查看是否被memcached应用所监听：\n\n\tnetstat -anb\n\n\tTCP    [::]:11211             [::]:0                 LISTENIN [memcached.exe]\n\n可以看到，11211端口正被memcached应用程序所监听。\n\n\n(完)","slug":"201407-2014-07-12-memcached-install-notes","published":1,"date":"2018-04-12T15:20:38.819Z","updated":"2018-04-12T15:20:38.819Z","comments":1,"photos":[],"link":"","_id":"cjfwomb52002mass6kn8orfsm","content":"<p>Memcached 是以LiveJournal旗下Danga Interactive公司的Brad Fitzpatric为首开发的一款内存缓存软件。Memcached是一种缓存技术，它可以把数据放入内存，从而可以通过内存访问提高速度，memcached技术的关键是提速。</p>\n<p>###为什么要使用Memcached</p>\n<p>随着互联网的发展，传统的关系型数据库已经出现了瓶颈，无法满足我们的要求，例如：</p>\n<p>1）<strong>对数据库的高并发读写</strong></p>\n<p>如果对关系型数据库进行高并发读写操作，它是不能承受的。</p>\n<p>2）<strong>对海量数据的处理</strong></p>\n<p>对于大型的SNS网站，每天都有数百万的数据产生（例如微博），如果使用传统关系数据库进行查询数据，将会慢的难以忍受。</p>\n<p>使用Memcached就可以很好的解决上述问题。</p>\n<a id=\"more\"></a>\n<p>###Memcached使用原理</p>\n<p>Memcached是高性能的分布式内存缓存服务器，通过缓存数据库查询结果到内存，以后就可以直接访问内存，减少对数据库的访问次数，进而提高动态网站应用的速度和可扩展性。</p>\n<p>当客户端与memcached建立连接后，接下来就是存储对象了，每个存储的对象都有一个唯一的标识符key与value对应相关联，通过key可以对对象进行存取操作，而对象实际上是保存在内存中的，所以速度比较快。</p>\n<p>下面是memcached模型图：</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63tw1eiah17n5awj20dg0dcmy0.jpg\" alt=\"pic\"></p>\n<p><strong>注意</strong>： 为了提高性能，Memcached把数据存储在内存中。由于数据仅存在内存中，因次重启memcached或者主机都会导致数据丢失。另外，内存容量达到指定值后，就会使用LRU（least recently used）算法自动删除不使用的缓存。memcached本身是为了缓存而设计的服务器，因次并没有过多考虑数据的持久化问题。</p>\n<p>###安装Memcached</p>\n<p>这里只是介绍下在windows下是如何安装的。</p>\n<p>步骤：</p>\n<p>1、下载memcached安装软件</p>\n<p>2、安装</p>\n<p>进入cmd控制台，切换到memcached.exe文件夹下，执行命令：</p>\n<pre><code>memcached.exe -d install\n</code></pre><p>3、启动memcached</p>\n<pre><code>memcached.exe -d start\n</code></pre><p>4、停止服务</p>\n<pre><code>memcached.exe -d stop\n</code></pre><p>5、查看是否安装成功</p>\n<pre><code>netstat -an\n\nTCP    0.0.0.0:11211          0.0.0.0:0              LISTENING\n</code></pre><p>查看11211端口是否被监听，或者查看是否被memcached应用所监听：</p>\n<pre><code>netstat -anb\n\nTCP    [::]:11211             [::]:0                 LISTENIN [memcached.exe]\n</code></pre><p>可以看到，11211端口正被memcached应用程序所监听。</p>\n<p>(完)</p>\n","site":{"data":{}},"excerpt":"<p>Memcached 是以LiveJournal旗下Danga Interactive公司的Brad Fitzpatric为首开发的一款内存缓存软件。Memcached是一种缓存技术，它可以把数据放入内存，从而可以通过内存访问提高速度，memcached技术的关键是提速。</p>\n<p>###为什么要使用Memcached</p>\n<p>随着互联网的发展，传统的关系型数据库已经出现了瓶颈，无法满足我们的要求，例如：</p>\n<p>1）<strong>对数据库的高并发读写</strong></p>\n<p>如果对关系型数据库进行高并发读写操作，它是不能承受的。</p>\n<p>2）<strong>对海量数据的处理</strong></p>\n<p>对于大型的SNS网站，每天都有数百万的数据产生（例如微博），如果使用传统关系数据库进行查询数据，将会慢的难以忍受。</p>\n<p>使用Memcached就可以很好的解决上述问题。</p>","more":"<p>###Memcached使用原理</p>\n<p>Memcached是高性能的分布式内存缓存服务器，通过缓存数据库查询结果到内存，以后就可以直接访问内存，减少对数据库的访问次数，进而提高动态网站应用的速度和可扩展性。</p>\n<p>当客户端与memcached建立连接后，接下来就是存储对象了，每个存储的对象都有一个唯一的标识符key与value对应相关联，通过key可以对对象进行存取操作，而对象实际上是保存在内存中的，所以速度比较快。</p>\n<p>下面是memcached模型图：</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63tw1eiah17n5awj20dg0dcmy0.jpg\" alt=\"pic\"></p>\n<p><strong>注意</strong>： 为了提高性能，Memcached把数据存储在内存中。由于数据仅存在内存中，因次重启memcached或者主机都会导致数据丢失。另外，内存容量达到指定值后，就会使用LRU（least recently used）算法自动删除不使用的缓存。memcached本身是为了缓存而设计的服务器，因次并没有过多考虑数据的持久化问题。</p>\n<p>###安装Memcached</p>\n<p>这里只是介绍下在windows下是如何安装的。</p>\n<p>步骤：</p>\n<p>1、下载memcached安装软件</p>\n<p>2、安装</p>\n<p>进入cmd控制台，切换到memcached.exe文件夹下，执行命令：</p>\n<pre><code>memcached.exe -d install\n</code></pre><p>3、启动memcached</p>\n<pre><code>memcached.exe -d start\n</code></pre><p>4、停止服务</p>\n<pre><code>memcached.exe -d stop\n</code></pre><p>5、查看是否安装成功</p>\n<pre><code>netstat -an\n\nTCP    0.0.0.0:11211          0.0.0.0:0              LISTENING\n</code></pre><p>查看11211端口是否被监听，或者查看是否被memcached应用所监听：</p>\n<pre><code>netstat -anb\n\nTCP    [::]:11211             [::]:0                 LISTENIN [memcached.exe]\n</code></pre><p>可以看到，11211端口正被memcached应用程序所监听。</p>\n<p>(完)</p>"},{"layout":"post","title":"PHP生成扭曲验证码","_content":"为了防止网站被机器人灌水，现在网站的各种验证码广泛存在，为安全性起到了一定的作用。\n\n验证码的样式有很多样，这里笔者只是总结下扭曲验证码的制作过程及其原理介绍，也算是备忘的笔记吧。\n\n###原理介绍\n\n这里不再赘余生成验证码的一般步骤，只是说下当一般验证码已经制作好时，如何\n进行扭曲加工的关键步骤。简单地说就是，对制作好却没有输出到浏览器的画布资源进行竖直单位像素的分割，然后利用正弦函数的波动特性进行扭曲。下面使用画图来进行更好的说明：\n\n<!--more-->\n\n![pic](http://ww4.sinaimg.cn/mw690/bd5a4d63jw1eibfukt1m7j20bg09qgm4.jpg)\n\n利用php的循环语句，依次切割单位像素的画布复制给准备的目标资源，最后输出到浏览器就ok了。\n\n废话不多说，直接上代码（关键步骤代码）：\n\n\t/*\n\t\t生成扭曲验证码[核心代码]\n\t\tsin(float $arg )  返回参数 arg 的正弦值。参数 arg 的单位为弧度。\n\t\tpi()或者M_PI取得圆周率PI值\n\t\tround(float $val , int $precision  = 0 )对浮点数进行四舍五入  \n\n\t\t$offset  设置最大波动像素\n\t\t$round    设置扭曲的周期\n\n    */\n    for ($i = 0; $i<$width; $i++) {\n    \t$offset = 2;\t\t//最大波动几个像素，可更改\n    \t$round = 2;\t\t\t//扭曲2两个周期，即4*PI，可更改\n\n    \t$pos_y = round(sin(($round * 2 * pi() / $width) * $i) * $offset, 1);\t\t//pi()得出圆周率PI\n\n    \timagecopy($dst, $image, $i, $pos_y, $i, 0, 1, $height);\n    }\n\n\n可通过调整$offset或者$round变量来进行设置。\n\n（完）","source":"_posts/201407/2014-07-13-php_distorted_code.md","raw":"---\nlayout : post\ntitle : PHP生成扭曲验证码\ncategory : PHP\ntags : PHP\n---\n为了防止网站被机器人灌水，现在网站的各种验证码广泛存在，为安全性起到了一定的作用。\n\n验证码的样式有很多样，这里笔者只是总结下扭曲验证码的制作过程及其原理介绍，也算是备忘的笔记吧。\n\n###原理介绍\n\n这里不再赘余生成验证码的一般步骤，只是说下当一般验证码已经制作好时，如何\n进行扭曲加工的关键步骤。简单地说就是，对制作好却没有输出到浏览器的画布资源进行竖直单位像素的分割，然后利用正弦函数的波动特性进行扭曲。下面使用画图来进行更好的说明：\n\n<!--more-->\n\n![pic](http://ww4.sinaimg.cn/mw690/bd5a4d63jw1eibfukt1m7j20bg09qgm4.jpg)\n\n利用php的循环语句，依次切割单位像素的画布复制给准备的目标资源，最后输出到浏览器就ok了。\n\n废话不多说，直接上代码（关键步骤代码）：\n\n\t/*\n\t\t生成扭曲验证码[核心代码]\n\t\tsin(float $arg )  返回参数 arg 的正弦值。参数 arg 的单位为弧度。\n\t\tpi()或者M_PI取得圆周率PI值\n\t\tround(float $val , int $precision  = 0 )对浮点数进行四舍五入  \n\n\t\t$offset  设置最大波动像素\n\t\t$round    设置扭曲的周期\n\n    */\n    for ($i = 0; $i<$width; $i++) {\n    \t$offset = 2;\t\t//最大波动几个像素，可更改\n    \t$round = 2;\t\t\t//扭曲2两个周期，即4*PI，可更改\n\n    \t$pos_y = round(sin(($round * 2 * pi() / $width) * $i) * $offset, 1);\t\t//pi()得出圆周率PI\n\n    \timagecopy($dst, $image, $i, $pos_y, $i, 0, 1, $height);\n    }\n\n\n可通过调整$offset或者$round变量来进行设置。\n\n（完）","slug":"201407-2014-07-13-php-distorted-code","published":1,"date":"2018-04-12T15:20:38.820Z","updated":"2018-04-12T15:20:38.820Z","comments":1,"photos":[],"link":"","_id":"cjfwomb54002pass6bz2bkl6t","content":"<p>为了防止网站被机器人灌水，现在网站的各种验证码广泛存在，为安全性起到了一定的作用。</p>\n<p>验证码的样式有很多样，这里笔者只是总结下扭曲验证码的制作过程及其原理介绍，也算是备忘的笔记吧。</p>\n<p>###原理介绍</p>\n<p>这里不再赘余生成验证码的一般步骤，只是说下当一般验证码已经制作好时，如何<br>进行扭曲加工的关键步骤。简单地说就是，对制作好却没有输出到浏览器的画布资源进行竖直单位像素的分割，然后利用正弦函数的波动特性进行扭曲。下面使用画图来进行更好的说明：</p>\n<a id=\"more\"></a>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63jw1eibfukt1m7j20bg09qgm4.jpg\" alt=\"pic\"></p>\n<p>利用php的循环语句，依次切割单位像素的画布复制给准备的目标资源，最后输出到浏览器就ok了。</p>\n<p>废话不多说，直接上代码（关键步骤代码）：</p>\n<pre><code>/*\n    生成扭曲验证码[核心代码]\n    sin(float $arg )  返回参数 arg 的正弦值。参数 arg 的单位为弧度。\n    pi()或者M_PI取得圆周率PI值\n    round(float $val , int $precision  = 0 )对浮点数进行四舍五入  \n\n    $offset  设置最大波动像素\n    $round    设置扭曲的周期\n\n*/\nfor ($i = 0; $i&lt;$width; $i++) {\n    $offset = 2;        //最大波动几个像素，可更改\n    $round = 2;            //扭曲2两个周期，即4*PI，可更改\n\n    $pos_y = round(sin(($round * 2 * pi() / $width) * $i) * $offset, 1);        //pi()得出圆周率PI\n\n    imagecopy($dst, $image, $i, $pos_y, $i, 0, 1, $height);\n}\n</code></pre><p>可通过调整$offset或者$round变量来进行设置。</p>\n<p>（完）</p>\n","site":{"data":{}},"excerpt":"<p>为了防止网站被机器人灌水，现在网站的各种验证码广泛存在，为安全性起到了一定的作用。</p>\n<p>验证码的样式有很多样，这里笔者只是总结下扭曲验证码的制作过程及其原理介绍，也算是备忘的笔记吧。</p>\n<p>###原理介绍</p>\n<p>这里不再赘余生成验证码的一般步骤，只是说下当一般验证码已经制作好时，如何<br>进行扭曲加工的关键步骤。简单地说就是，对制作好却没有输出到浏览器的画布资源进行竖直单位像素的分割，然后利用正弦函数的波动特性进行扭曲。下面使用画图来进行更好的说明：</p>","more":"<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63jw1eibfukt1m7j20bg09qgm4.jpg\" alt=\"pic\"></p>\n<p>利用php的循环语句，依次切割单位像素的画布复制给准备的目标资源，最后输出到浏览器就ok了。</p>\n<p>废话不多说，直接上代码（关键步骤代码）：</p>\n<pre><code>/*\n    生成扭曲验证码[核心代码]\n    sin(float $arg )  返回参数 arg 的正弦值。参数 arg 的单位为弧度。\n    pi()或者M_PI取得圆周率PI值\n    round(float $val , int $precision  = 0 )对浮点数进行四舍五入  \n\n    $offset  设置最大波动像素\n    $round    设置扭曲的周期\n\n*/\nfor ($i = 0; $i&lt;$width; $i++) {\n    $offset = 2;        //最大波动几个像素，可更改\n    $round = 2;            //扭曲2两个周期，即4*PI，可更改\n\n    $pos_y = round(sin(($round * 2 * pi() / $width) * $i) * $offset, 1);        //pi()得出圆周率PI\n\n    imagecopy($dst, $image, $i, $pos_y, $i, 0, 1, $height);\n}\n</code></pre><p>可通过调整$offset或者$round变量来进行设置。</p>\n<p>（完）</p>"},{"layout":"post","title":"0.1+0.2=0.3？","_content":"先看一段程序代码，判断下输出会是什么：\n\t\n\t<?php\n    \t$a = 0.2; $b = 0.1;\n    \tif (($a + $b) == 0.3) {\n        \techo '值为0.3';\n    \t} else {\n       \t\techo '值不为0.3';\n    \t}\n\t?>\n\n结果会输出什么？会输出 `值为0.3` ？\n\n错误！正确输出为 **`值不为0.3`** ！为什么？\n\n<!--more-->\n\n其根本原因是计算机所使用二进制01代码无法准确表示某些带小数位的十进制数据。\n\n下面，我们来分析下：\n\n我们知道将一个十进制数值转换为二进制数值，需要通过下面的计算方法：\n \n*\t整数部分：连续用该整数除以2，取余数，然后商再除以2，直到商等于0为止。然后把得到的各个余数按相反的顺序排列。简称\"除2取余法\"。\n \n*\t小数部分：十进制小数转换为二进制小数，采用\"乘2取整，顺序排列\"法。用2乘以十进制小数，将得到的整数部分取出，再用2乘余下的小数部分，然后再将积 的整数部分取出，如此进行，直到积中的小数部分为0或者达到所要求的精度为止。然后把取出的整数部分按顺序排列起来，即先取出的整数部分作为二进制小数的 高位，后取出的整数部分作为低位有效位。简称\"乘2取整法\"。\n\n\n按照上述方法，我们把0.1和0.2分别转换为其对应的二进制数据表示：\n\n\t0.1 => (00011001100110011001100110011001...)2\n\t0.2 => (00110011001100110011001100110011...)2\n\n后面的省略号表示已经算不完了，后面在无限重复`0011` 这段二进制数值。\n\n目前计算机上存储浮点数值是按照IEEE（电气和电子工程师协会）754浮点存储格式标准来存储的。\n\n>**以下摘自查阅资料**\n\n>浮点数, 以64位的长度(双精度)为例, 会采用1位符号位(E), 11指数位(Q), 52位尾数(M)表示(一共64位).\n\n>符号位：最高位表示数据的正负，0表示正数，1表示负数。\n\n>指数位：表示数据以2为底的幂，指数采用偏移码表示\n\n>尾数：表示数据小数点后的有效数字.\n\n\n假设数据类型为双精度浮点数类型，也只能存储52位，该小数的二进制代码已无法正确表示0.1及0.2，根据这个二进制代码肯定无法正确得到结果0.3。\n\n就像**风雪之隅**一篇博客说的那样：\"你看似有穷的小数, 在计算机的二进制表示里却是无穷的\"。所以尽量不要去比较浮点数值。\n\n---\n\n###小结\n\n关于浮点数值计算会产生误差的问题，这是使用基于IEEE754数值的浮点计算的通病，PHP并非独此一家，其他使用相同数据格式的语言也存在这个问题！\n\n","source":"_posts/201407/2014-07-14-php_float_false_notes.md","raw":"---\nlayout : post\ntitle : 0.1+0.2=0.3？\ncategory : PHP\ntags : PHP\n---\n先看一段程序代码，判断下输出会是什么：\n\t\n\t<?php\n    \t$a = 0.2; $b = 0.1;\n    \tif (($a + $b) == 0.3) {\n        \techo '值为0.3';\n    \t} else {\n       \t\techo '值不为0.3';\n    \t}\n\t?>\n\n结果会输出什么？会输出 `值为0.3` ？\n\n错误！正确输出为 **`值不为0.3`** ！为什么？\n\n<!--more-->\n\n其根本原因是计算机所使用二进制01代码无法准确表示某些带小数位的十进制数据。\n\n下面，我们来分析下：\n\n我们知道将一个十进制数值转换为二进制数值，需要通过下面的计算方法：\n \n*\t整数部分：连续用该整数除以2，取余数，然后商再除以2，直到商等于0为止。然后把得到的各个余数按相反的顺序排列。简称\"除2取余法\"。\n \n*\t小数部分：十进制小数转换为二进制小数，采用\"乘2取整，顺序排列\"法。用2乘以十进制小数，将得到的整数部分取出，再用2乘余下的小数部分，然后再将积 的整数部分取出，如此进行，直到积中的小数部分为0或者达到所要求的精度为止。然后把取出的整数部分按顺序排列起来，即先取出的整数部分作为二进制小数的 高位，后取出的整数部分作为低位有效位。简称\"乘2取整法\"。\n\n\n按照上述方法，我们把0.1和0.2分别转换为其对应的二进制数据表示：\n\n\t0.1 => (00011001100110011001100110011001...)2\n\t0.2 => (00110011001100110011001100110011...)2\n\n后面的省略号表示已经算不完了，后面在无限重复`0011` 这段二进制数值。\n\n目前计算机上存储浮点数值是按照IEEE（电气和电子工程师协会）754浮点存储格式标准来存储的。\n\n>**以下摘自查阅资料**\n\n>浮点数, 以64位的长度(双精度)为例, 会采用1位符号位(E), 11指数位(Q), 52位尾数(M)表示(一共64位).\n\n>符号位：最高位表示数据的正负，0表示正数，1表示负数。\n\n>指数位：表示数据以2为底的幂，指数采用偏移码表示\n\n>尾数：表示数据小数点后的有效数字.\n\n\n假设数据类型为双精度浮点数类型，也只能存储52位，该小数的二进制代码已无法正确表示0.1及0.2，根据这个二进制代码肯定无法正确得到结果0.3。\n\n就像**风雪之隅**一篇博客说的那样：\"你看似有穷的小数, 在计算机的二进制表示里却是无穷的\"。所以尽量不要去比较浮点数值。\n\n---\n\n###小结\n\n关于浮点数值计算会产生误差的问题，这是使用基于IEEE754数值的浮点计算的通病，PHP并非独此一家，其他使用相同数据格式的语言也存在这个问题！\n\n","slug":"201407-2014-07-14-php-float-false-notes","published":1,"date":"2018-04-12T15:20:38.820Z","updated":"2018-04-12T15:20:38.820Z","comments":1,"photos":[],"link":"","_id":"cjfwomb55002uass6x5aesg28","content":"<p>先看一段程序代码，判断下输出会是什么：</p>\n<pre><code>&lt;?php\n    $a = 0.2; $b = 0.1;\n    if (($a + $b) == 0.3) {\n        echo &apos;值为0.3&apos;;\n    } else {\n           echo &apos;值不为0.3&apos;;\n    }\n?&gt;\n</code></pre><p>结果会输出什么？会输出 <code>值为0.3</code> ？</p>\n<p>错误！正确输出为 <strong><code>值不为0.3</code></strong> ！为什么？</p>\n<a id=\"more\"></a>\n<p>其根本原因是计算机所使用二进制01代码无法准确表示某些带小数位的十进制数据。</p>\n<p>下面，我们来分析下：</p>\n<p>我们知道将一个十进制数值转换为二进制数值，需要通过下面的计算方法：</p>\n<ul>\n<li><p>整数部分：连续用该整数除以2，取余数，然后商再除以2，直到商等于0为止。然后把得到的各个余数按相反的顺序排列。简称”除2取余法”。</p>\n</li>\n<li><p>小数部分：十进制小数转换为二进制小数，采用”乘2取整，顺序排列”法。用2乘以十进制小数，将得到的整数部分取出，再用2乘余下的小数部分，然后再将积 的整数部分取出，如此进行，直到积中的小数部分为0或者达到所要求的精度为止。然后把取出的整数部分按顺序排列起来，即先取出的整数部分作为二进制小数的 高位，后取出的整数部分作为低位有效位。简称”乘2取整法”。</p>\n</li>\n</ul>\n<p>按照上述方法，我们把0.1和0.2分别转换为其对应的二进制数据表示：</p>\n<pre><code>0.1 =&gt; (00011001100110011001100110011001...)2\n0.2 =&gt; (00110011001100110011001100110011...)2\n</code></pre><p>后面的省略号表示已经算不完了，后面在无限重复<code>0011</code> 这段二进制数值。</p>\n<p>目前计算机上存储浮点数值是按照IEEE（电气和电子工程师协会）754浮点存储格式标准来存储的。</p>\n<blockquote>\n<p><strong>以下摘自查阅资料</strong></p>\n</blockquote>\n<blockquote>\n<p>浮点数, 以64位的长度(双精度)为例, 会采用1位符号位(E), 11指数位(Q), 52位尾数(M)表示(一共64位).</p>\n</blockquote>\n<blockquote>\n<p>符号位：最高位表示数据的正负，0表示正数，1表示负数。</p>\n</blockquote>\n<blockquote>\n<p>指数位：表示数据以2为底的幂，指数采用偏移码表示</p>\n</blockquote>\n<blockquote>\n<p>尾数：表示数据小数点后的有效数字.</p>\n</blockquote>\n<p>假设数据类型为双精度浮点数类型，也只能存储52位，该小数的二进制代码已无法正确表示0.1及0.2，根据这个二进制代码肯定无法正确得到结果0.3。</p>\n<p>就像<strong>风雪之隅</strong>一篇博客说的那样：”你看似有穷的小数, 在计算机的二进制表示里却是无穷的”。所以尽量不要去比较浮点数值。</p>\n<hr>\n<p>###小结</p>\n<p>关于浮点数值计算会产生误差的问题，这是使用基于IEEE754数值的浮点计算的通病，PHP并非独此一家，其他使用相同数据格式的语言也存在这个问题！</p>\n","site":{"data":{}},"excerpt":"<p>先看一段程序代码，判断下输出会是什么：</p>\n<pre><code>&lt;?php\n    $a = 0.2; $b = 0.1;\n    if (($a + $b) == 0.3) {\n        echo &apos;值为0.3&apos;;\n    } else {\n           echo &apos;值不为0.3&apos;;\n    }\n?&gt;\n</code></pre><p>结果会输出什么？会输出 <code>值为0.3</code> ？</p>\n<p>错误！正确输出为 <strong><code>值不为0.3</code></strong> ！为什么？</p>","more":"<p>其根本原因是计算机所使用二进制01代码无法准确表示某些带小数位的十进制数据。</p>\n<p>下面，我们来分析下：</p>\n<p>我们知道将一个十进制数值转换为二进制数值，需要通过下面的计算方法：</p>\n<ul>\n<li><p>整数部分：连续用该整数除以2，取余数，然后商再除以2，直到商等于0为止。然后把得到的各个余数按相反的顺序排列。简称”除2取余法”。</p>\n</li>\n<li><p>小数部分：十进制小数转换为二进制小数，采用”乘2取整，顺序排列”法。用2乘以十进制小数，将得到的整数部分取出，再用2乘余下的小数部分，然后再将积 的整数部分取出，如此进行，直到积中的小数部分为0或者达到所要求的精度为止。然后把取出的整数部分按顺序排列起来，即先取出的整数部分作为二进制小数的 高位，后取出的整数部分作为低位有效位。简称”乘2取整法”。</p>\n</li>\n</ul>\n<p>按照上述方法，我们把0.1和0.2分别转换为其对应的二进制数据表示：</p>\n<pre><code>0.1 =&gt; (00011001100110011001100110011001...)2\n0.2 =&gt; (00110011001100110011001100110011...)2\n</code></pre><p>后面的省略号表示已经算不完了，后面在无限重复<code>0011</code> 这段二进制数值。</p>\n<p>目前计算机上存储浮点数值是按照IEEE（电气和电子工程师协会）754浮点存储格式标准来存储的。</p>\n<blockquote>\n<p><strong>以下摘自查阅资料</strong></p>\n</blockquote>\n<blockquote>\n<p>浮点数, 以64位的长度(双精度)为例, 会采用1位符号位(E), 11指数位(Q), 52位尾数(M)表示(一共64位).</p>\n</blockquote>\n<blockquote>\n<p>符号位：最高位表示数据的正负，0表示正数，1表示负数。</p>\n</blockquote>\n<blockquote>\n<p>指数位：表示数据以2为底的幂，指数采用偏移码表示</p>\n</blockquote>\n<blockquote>\n<p>尾数：表示数据小数点后的有效数字.</p>\n</blockquote>\n<p>假设数据类型为双精度浮点数类型，也只能存储52位，该小数的二进制代码已无法正确表示0.1及0.2，根据这个二进制代码肯定无法正确得到结果0.3。</p>\n<p>就像<strong>风雪之隅</strong>一篇博客说的那样：”你看似有穷的小数, 在计算机的二进制表示里却是无穷的”。所以尽量不要去比较浮点数值。</p>\n<hr>\n<p>###小结</p>\n<p>关于浮点数值计算会产生误差的问题，这是使用基于IEEE754数值的浮点计算的通病，PHP并非独此一家，其他使用相同数据格式的语言也存在这个问题！</p>"},{"layout":"post","title":"搭建本地Git服务器","_content":"声明：本文转自[廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000)\n\n远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。\n\nGitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。\n\n搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。\n\n假设你已经有sudo权限的用户账号，下面，正式开始安装。\n\n第一步，安装git：\n\n\t$ sudo apt-get install git\n\n<!--more-->\n\n第二步，创建一个git用户，用来运行git服务：\n\n\t$ sudo adduser git\n\n第三步，创建证书登录：\n\n收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到`/home/git/.ssh/authorized_keys`文件里，一行一个。\n\n第四步，初始化Git仓库：\n\n先选定一个目录作为Git仓库，假定是`/srv/sample.git`，在`/srv`目录下输入命令：\n\n\t$ sudo git init --bare sample.git\n\nGit就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：\n\n\t$ sudo chown -R git:git sample.git\n\n第五步，禁用shell登录：\n\n出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：\n\n\tgit:x:1001:1001:,,,:/home/git:/bin/bash\n\n改为：\n\n\tgit:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n\n这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。\n\n第六步，克隆远程仓库：\n\n现在，可以通过`git clone`命令克隆远程仓库了，在各自的电脑上运行：\n\n\t$ git clone git@server:/srv/sample.git\n\tCloning into 'sample'...\n\twarning: You appear to have cloned an empty repository.\n\n剩下的推送就简单了。\n\n###管理公钥\n\n如果团队很小，把每个人的公钥收集起来放到服务器的`/home/git/.ssh/authorized_keys`文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。\n\n这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。\n\n###管理权限\n\n有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。\n\n**这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。**\n\n###小结\n\n搭建Git服务器非常简单，通常10分钟即可完成；\n\n要方便管理公钥，用`Gitosis`；\n\n要像SVN那样变态地控制权限，用`Gitolite`。\n","source":"_posts/201407/2014-07-15-git_create_git_server_notes.md","raw":"---\nlayout : post\ntitle : 搭建本地Git服务器\ncategory : Git\ntags : Git\n---\n声明：本文转自[廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000)\n\n远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。\n\nGitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。\n\n搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。\n\n假设你已经有sudo权限的用户账号，下面，正式开始安装。\n\n第一步，安装git：\n\n\t$ sudo apt-get install git\n\n<!--more-->\n\n第二步，创建一个git用户，用来运行git服务：\n\n\t$ sudo adduser git\n\n第三步，创建证书登录：\n\n收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到`/home/git/.ssh/authorized_keys`文件里，一行一个。\n\n第四步，初始化Git仓库：\n\n先选定一个目录作为Git仓库，假定是`/srv/sample.git`，在`/srv`目录下输入命令：\n\n\t$ sudo git init --bare sample.git\n\nGit就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：\n\n\t$ sudo chown -R git:git sample.git\n\n第五步，禁用shell登录：\n\n出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：\n\n\tgit:x:1001:1001:,,,:/home/git:/bin/bash\n\n改为：\n\n\tgit:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n\n这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。\n\n第六步，克隆远程仓库：\n\n现在，可以通过`git clone`命令克隆远程仓库了，在各自的电脑上运行：\n\n\t$ git clone git@server:/srv/sample.git\n\tCloning into 'sample'...\n\twarning: You appear to have cloned an empty repository.\n\n剩下的推送就简单了。\n\n###管理公钥\n\n如果团队很小，把每个人的公钥收集起来放到服务器的`/home/git/.ssh/authorized_keys`文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。\n\n这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。\n\n###管理权限\n\n有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。\n\n**这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。**\n\n###小结\n\n搭建Git服务器非常简单，通常10分钟即可完成；\n\n要方便管理公钥，用`Gitosis`；\n\n要像SVN那样变态地控制权限，用`Gitolite`。\n","slug":"201407-2014-07-15-git-create-git-server-notes","published":1,"date":"2018-04-12T15:20:38.820Z","updated":"2018-04-12T15:20:38.821Z","comments":1,"photos":[],"link":"","_id":"cjfwomb57002xass6xecg1yog","content":"<p>声明：本文转自<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官方网站</a></p>\n<p>远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。</p>\n<p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</p>\n<p>搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。</p>\n<p>假设你已经有sudo权限的用户账号，下面，正式开始安装。</p>\n<p>第一步，安装git：</p>\n<pre><code>$ sudo apt-get install git\n</code></pre><a id=\"more\"></a>\n<p>第二步，创建一个git用户，用来运行git服务：</p>\n<pre><code>$ sudo adduser git\n</code></pre><p>第三步，创建证书登录：</p>\n<p>收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p>\n<p>第四步，初始化Git仓库：</p>\n<p>先选定一个目录作为Git仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code>目录下输入命令：</p>\n<pre><code>$ sudo git init --bare sample.git\n</code></pre><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：</p>\n<pre><code>$ sudo chown -R git:git sample.git\n</code></pre><p>第五步，禁用shell登录：</p>\n<p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：</p>\n<pre><code>git:x:1001:1001:,,,:/home/git:/bin/bash\n</code></pre><p>改为：</p>\n<pre><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n</code></pre><p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>\n<p>第六步，克隆远程仓库：</p>\n<p>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：</p>\n<pre><code>$ git clone git@server:/srv/sample.git\nCloning into &apos;sample&apos;...\nwarning: You appear to have cloned an empty repository.\n</code></pre><p>剩下的推送就简单了。</p>\n<p>###管理公钥</p>\n<p>如果团队很小，把每个人的公钥收集起来放到服务器的<code>/home/git/.ssh/authorized_keys</code>文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。</p>\n<p>这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。</p>\n<p>###管理权限</p>\n<p>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。</p>\n<p><strong>这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。</strong></p>\n<p>###小结</p>\n<p>搭建Git服务器非常简单，通常10分钟即可完成；</p>\n<p>要方便管理公钥，用<code>Gitosis</code>；</p>\n<p>要像SVN那样变态地控制权限，用<code>Gitolite</code>。</p>\n","site":{"data":{}},"excerpt":"<p>声明：本文转自<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官方网站</a></p>\n<p>远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。</p>\n<p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</p>\n<p>搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。</p>\n<p>假设你已经有sudo权限的用户账号，下面，正式开始安装。</p>\n<p>第一步，安装git：</p>\n<pre><code>$ sudo apt-get install git\n</code></pre>","more":"<p>第二步，创建一个git用户，用来运行git服务：</p>\n<pre><code>$ sudo adduser git\n</code></pre><p>第三步，创建证书登录：</p>\n<p>收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p>\n<p>第四步，初始化Git仓库：</p>\n<p>先选定一个目录作为Git仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code>目录下输入命令：</p>\n<pre><code>$ sudo git init --bare sample.git\n</code></pre><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：</p>\n<pre><code>$ sudo chown -R git:git sample.git\n</code></pre><p>第五步，禁用shell登录：</p>\n<p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：</p>\n<pre><code>git:x:1001:1001:,,,:/home/git:/bin/bash\n</code></pre><p>改为：</p>\n<pre><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n</code></pre><p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>\n<p>第六步，克隆远程仓库：</p>\n<p>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：</p>\n<pre><code>$ git clone git@server:/srv/sample.git\nCloning into &apos;sample&apos;...\nwarning: You appear to have cloned an empty repository.\n</code></pre><p>剩下的推送就简单了。</p>\n<p>###管理公钥</p>\n<p>如果团队很小，把每个人的公钥收集起来放到服务器的<code>/home/git/.ssh/authorized_keys</code>文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。</p>\n<p>这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。</p>\n<p>###管理权限</p>\n<p>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。</p>\n<p><strong>这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。</strong></p>\n<p>###小结</p>\n<p>搭建Git服务器非常简单，通常10分钟即可完成；</p>\n<p>要方便管理公钥，用<code>Gitosis</code>；</p>\n<p>要像SVN那样变态地控制权限，用<code>Gitolite</code>。</p>"},{"layout":"post","title":"Git分布式版本控制系统总结","_content":"经过这段时间对Git分布式版本控制系统的学习，对Git已经初步掌握，简单的配置和使用应该不是问题了，并且Git分支管理版本库以及多人协作的策略的思想还是比较好的，确实很优秀。\n\nGit虽然极其强大，命令繁多，但常用的就那么十来个，掌握好这十几个常用命令，你已经可以得心应手地使用Git了。\n\n就按现在的工作要求来看，Git已经成为公司招聘程序员不可或缺的技能了，希望大家可以好好学习下Git版本控制，这样一来，工作效率肯定会大增，就可以有更多的空闲时间去享受生活、享受人生了，何乐而不为呢，是吧！\n\n<!--more-->\n\n现在告诉你Git的官方网站：[http://git-scm.com](http://git-scm.com)，英文自我感觉不错的童鞋，可以经常去官网看看,学习更多的相关知识。\n\n下面是国外一大牛制作的`Git Cheat Sheet`，建议打印出来备用：\n\n![Git Cheat Sheet](http://ww2.sinaimg.cn/mw690/bd5a4d63jw1eideg72njpj20qe11bqaf.jpg)\n\n(完)","source":"_posts/201407/2014-07-15-git_summary_notes.md","raw":"---\nlayout : post\ntitle : Git分布式版本控制系统总结\ncategory : Git\ntags : Git\n---\n经过这段时间对Git分布式版本控制系统的学习，对Git已经初步掌握，简单的配置和使用应该不是问题了，并且Git分支管理版本库以及多人协作的策略的思想还是比较好的，确实很优秀。\n\nGit虽然极其强大，命令繁多，但常用的就那么十来个，掌握好这十几个常用命令，你已经可以得心应手地使用Git了。\n\n就按现在的工作要求来看，Git已经成为公司招聘程序员不可或缺的技能了，希望大家可以好好学习下Git版本控制，这样一来，工作效率肯定会大增，就可以有更多的空闲时间去享受生活、享受人生了，何乐而不为呢，是吧！\n\n<!--more-->\n\n现在告诉你Git的官方网站：[http://git-scm.com](http://git-scm.com)，英文自我感觉不错的童鞋，可以经常去官网看看,学习更多的相关知识。\n\n下面是国外一大牛制作的`Git Cheat Sheet`，建议打印出来备用：\n\n![Git Cheat Sheet](http://ww2.sinaimg.cn/mw690/bd5a4d63jw1eideg72njpj20qe11bqaf.jpg)\n\n(完)","slug":"201407-2014-07-15-git-summary-notes","published":1,"date":"2018-04-12T15:20:38.821Z","updated":"2018-04-12T15:20:38.821Z","comments":1,"photos":[],"link":"","_id":"cjfwomb590031ass61mnnyrk9","content":"<p>经过这段时间对Git分布式版本控制系统的学习，对Git已经初步掌握，简单的配置和使用应该不是问题了，并且Git分支管理版本库以及多人协作的策略的思想还是比较好的，确实很优秀。</p>\n<p>Git虽然极其强大，命令繁多，但常用的就那么十来个，掌握好这十几个常用命令，你已经可以得心应手地使用Git了。</p>\n<p>就按现在的工作要求来看，Git已经成为公司招聘程序员不可或缺的技能了，希望大家可以好好学习下Git版本控制，这样一来，工作效率肯定会大增，就可以有更多的空闲时间去享受生活、享受人生了，何乐而不为呢，是吧！</p>\n<a id=\"more\"></a>\n<p>现在告诉你Git的官方网站：<a href=\"http://git-scm.com\" target=\"_blank\" rel=\"noopener\">http://git-scm.com</a>，英文自我感觉不错的童鞋，可以经常去官网看看,学习更多的相关知识。</p>\n<p>下面是国外一大牛制作的<code>Git Cheat Sheet</code>，建议打印出来备用：</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63jw1eideg72njpj20qe11bqaf.jpg\" alt=\"Git Cheat Sheet\"></p>\n<p>(完)</p>\n","site":{"data":{}},"excerpt":"<p>经过这段时间对Git分布式版本控制系统的学习，对Git已经初步掌握，简单的配置和使用应该不是问题了，并且Git分支管理版本库以及多人协作的策略的思想还是比较好的，确实很优秀。</p>\n<p>Git虽然极其强大，命令繁多，但常用的就那么十来个，掌握好这十几个常用命令，你已经可以得心应手地使用Git了。</p>\n<p>就按现在的工作要求来看，Git已经成为公司招聘程序员不可或缺的技能了，希望大家可以好好学习下Git版本控制，这样一来，工作效率肯定会大增，就可以有更多的空闲时间去享受生活、享受人生了，何乐而不为呢，是吧！</p>","more":"<p>现在告诉你Git的官方网站：<a href=\"http://git-scm.com\" target=\"_blank\" rel=\"noopener\">http://git-scm.com</a>，英文自我感觉不错的童鞋，可以经常去官网看看,学习更多的相关知识。</p>\n<p>下面是国外一大牛制作的<code>Git Cheat Sheet</code>，建议打印出来备用：</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63jw1eideg72njpj20qe11bqaf.jpg\" alt=\"Git Cheat Sheet\"></p>\n<p>(完)</p>"},{"layout":"post","title":"不要做一个浮躁的程序员","_content":"今天看到一篇关于编程感悟的博客，大概意思说的是做编程、做技术（其实就是程序员呀）这行，切忌心浮气躁、急功近利，要让自己的内心静下来、沉淀下来，踏踏实实去做，每天进步一点点，然后坚持下去，肯定会学有所成的。\n\n想到自己放假回到家后的这几天确实太浮躁了，每天计划完不成，老是拖拉，没有什么上进心，再这样下去就别再谈什么追求和目标了，干脆卷铺盖得了，特此收藏此博客来勉励自己，这里感谢原创作者[[IT江湖](http://www.itjhwd.com/byzyigefuzcey/)].\n\n<!--more-->\n\n1.不要看到别人的回复第一句话就说：给个代码吧！你应该想想为什么。当你自己想出来再参考别人的提示，你就知道自己和别人思路的差异。 \n\n2.初学者请不要看太多太多的书那会误人子弟的，先找本系统的学，很多人用了很久都是只对部分功能熟悉而已，不系统还是不够的。 \n\n3.看帮助,不要因为很难而自己是初学者所以就不看；帮助永远是最好的参考手册，虽然帮助的文字有时候很难看懂，总觉得不够直观。 \n\n4.不要被对象、属性、方法等词汇所迷惑；最根本的是先了解最基础知识。 \n\n5.不要放过任何一个看上去很简单的小问题–他们往往并不那么简单，或者可以引伸出很多知识点；不会举一反三你就永远学不会。 \n\n6.知道一点东西，并不能说明你会写脚本，脚本是需要经验积累的。 \n\n7.学脚本并不难，JSP、ASP、PHP等等也不过如此–难的是长期坚持实践和不遗余力的博览群书； \n\n8.看再多的书是学不全脚本的，要多实践。 \n\n9.把时髦的技术挂在嘴边，还不如把过时的技术记在心里； \n\n10.学习脚本最好的方法之一就是多练习； \n\n11.在任何时刻都不要认为自己手中的书已经足够了； \n\n12.看得懂的书，请仔细看；看不懂的书，请硬着头皮看； \n\n13.别指望看第一遍书就能记住和掌握什么——请看第二遍、第三遍； \n\n14.请把书上的例子亲手到电脑上实践，即使配套光盘中有源文件； \n\n15.把在书中看到的有意义的例子扩充；并将其切实的运用到自己的工作中； \n\n16.不要漏掉书中任何一个练习——请全部做完并记录下思路； \n\n17.当你用脚本到一半却发现自己用的方法很拙劣时，请不要马上停手；请尽快将余下的部分粗略的完成以保证这个代码的完整性，然后分析自己的错误并重新编写和工作。 \n\n18.别心急，写脚本确实不容易；水平是在不断的实践中完善和发展的； \n\n19.每学到一个脚本难点的时候，尝试着对别人讲解这个知识点并让他理解—-你能讲清楚才说明你真的理解了； \n\n20.记录下在和别人交流时发现的自己忽视或不理解的知识点； \n\n21.保存好你做过的所有的源文件—-那是你最好的积累之一； \n\n22.对于网络，还是希望大家能多利用一下，很多问题不是非要到论坛来问的，首先你要学会自己找答案，比如google、百度都是很好的搜索引擎，你只要输入关键字就能找到很多相关资料，别老是等待别人给你希望，看的出你平时一定也很懒！ \n\n23.到一个论坛，你学会去看以前的帖子，不要什么都不看就发帖子问，也许你的问题早就有人问过了，你再问，别人已经不想再重复了，做为初学者，谁也不希望自己的帖子没人回的。 \n\n24.虽然不是打击初学者，但是这句话还是要说：论坛论坛，就是大家讨论的地方，如果你总期望有高手总无偿指点你，除非他是你亲戚！！讨论者，起码是 水平相当的才有讨论的说法，如果水平真差距太远了，连基本操作都需要别人给解答，谁还跟你讨论呢。能找到很多相关资料，别老是等待别人给你希望，看的出你 平时一定也很懒！ \n\n>浮躁的人容易问：我到底该学什么；—-别问，学就对了；   \n>浮躁的人容易问：JS有钱途吗；—-建议你去抢银行；   \n>浮躁的人容易说：我要中文版！我英文不行！—-不行？学呀！   \n>浮躁的人分两种：只观望而不学的人；只学而不坚持的人；   \n>浮躁的人永远不是一个高手。\n\n(完)","source":"_posts/201407/2014-07-21-life_essay_3.md","raw":"---\nlayout : post\ntitle : 不要做一个浮躁的程序员\ncategory : 随笔\ntags : Essay\n---\n今天看到一篇关于编程感悟的博客，大概意思说的是做编程、做技术（其实就是程序员呀）这行，切忌心浮气躁、急功近利，要让自己的内心静下来、沉淀下来，踏踏实实去做，每天进步一点点，然后坚持下去，肯定会学有所成的。\n\n想到自己放假回到家后的这几天确实太浮躁了，每天计划完不成，老是拖拉，没有什么上进心，再这样下去就别再谈什么追求和目标了，干脆卷铺盖得了，特此收藏此博客来勉励自己，这里感谢原创作者[[IT江湖](http://www.itjhwd.com/byzyigefuzcey/)].\n\n<!--more-->\n\n1.不要看到别人的回复第一句话就说：给个代码吧！你应该想想为什么。当你自己想出来再参考别人的提示，你就知道自己和别人思路的差异。 \n\n2.初学者请不要看太多太多的书那会误人子弟的，先找本系统的学，很多人用了很久都是只对部分功能熟悉而已，不系统还是不够的。 \n\n3.看帮助,不要因为很难而自己是初学者所以就不看；帮助永远是最好的参考手册，虽然帮助的文字有时候很难看懂，总觉得不够直观。 \n\n4.不要被对象、属性、方法等词汇所迷惑；最根本的是先了解最基础知识。 \n\n5.不要放过任何一个看上去很简单的小问题–他们往往并不那么简单，或者可以引伸出很多知识点；不会举一反三你就永远学不会。 \n\n6.知道一点东西，并不能说明你会写脚本，脚本是需要经验积累的。 \n\n7.学脚本并不难，JSP、ASP、PHP等等也不过如此–难的是长期坚持实践和不遗余力的博览群书； \n\n8.看再多的书是学不全脚本的，要多实践。 \n\n9.把时髦的技术挂在嘴边，还不如把过时的技术记在心里； \n\n10.学习脚本最好的方法之一就是多练习； \n\n11.在任何时刻都不要认为自己手中的书已经足够了； \n\n12.看得懂的书，请仔细看；看不懂的书，请硬着头皮看； \n\n13.别指望看第一遍书就能记住和掌握什么——请看第二遍、第三遍； \n\n14.请把书上的例子亲手到电脑上实践，即使配套光盘中有源文件； \n\n15.把在书中看到的有意义的例子扩充；并将其切实的运用到自己的工作中； \n\n16.不要漏掉书中任何一个练习——请全部做完并记录下思路； \n\n17.当你用脚本到一半却发现自己用的方法很拙劣时，请不要马上停手；请尽快将余下的部分粗略的完成以保证这个代码的完整性，然后分析自己的错误并重新编写和工作。 \n\n18.别心急，写脚本确实不容易；水平是在不断的实践中完善和发展的； \n\n19.每学到一个脚本难点的时候，尝试着对别人讲解这个知识点并让他理解—-你能讲清楚才说明你真的理解了； \n\n20.记录下在和别人交流时发现的自己忽视或不理解的知识点； \n\n21.保存好你做过的所有的源文件—-那是你最好的积累之一； \n\n22.对于网络，还是希望大家能多利用一下，很多问题不是非要到论坛来问的，首先你要学会自己找答案，比如google、百度都是很好的搜索引擎，你只要输入关键字就能找到很多相关资料，别老是等待别人给你希望，看的出你平时一定也很懒！ \n\n23.到一个论坛，你学会去看以前的帖子，不要什么都不看就发帖子问，也许你的问题早就有人问过了，你再问，别人已经不想再重复了，做为初学者，谁也不希望自己的帖子没人回的。 \n\n24.虽然不是打击初学者，但是这句话还是要说：论坛论坛，就是大家讨论的地方，如果你总期望有高手总无偿指点你，除非他是你亲戚！！讨论者，起码是 水平相当的才有讨论的说法，如果水平真差距太远了，连基本操作都需要别人给解答，谁还跟你讨论呢。能找到很多相关资料，别老是等待别人给你希望，看的出你 平时一定也很懒！ \n\n>浮躁的人容易问：我到底该学什么；—-别问，学就对了；   \n>浮躁的人容易问：JS有钱途吗；—-建议你去抢银行；   \n>浮躁的人容易说：我要中文版！我英文不行！—-不行？学呀！   \n>浮躁的人分两种：只观望而不学的人；只学而不坚持的人；   \n>浮躁的人永远不是一个高手。\n\n(完)","slug":"201407-2014-07-21-life-essay-3","published":1,"date":"2018-04-12T15:20:38.821Z","updated":"2018-04-12T15:20:38.821Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5b0035ass670m3zqs4","content":"<p>今天看到一篇关于编程感悟的博客，大概意思说的是做编程、做技术（其实就是程序员呀）这行，切忌心浮气躁、急功近利，要让自己的内心静下来、沉淀下来，踏踏实实去做，每天进步一点点，然后坚持下去，肯定会学有所成的。</p>\n<p>想到自己放假回到家后的这几天确实太浮躁了，每天计划完不成，老是拖拉，没有什么上进心，再这样下去就别再谈什么追求和目标了，干脆卷铺盖得了，特此收藏此博客来勉励自己，这里感谢原创作者[<a href=\"http://www.itjhwd.com/byzyigefuzcey/\" target=\"_blank\" rel=\"noopener\">IT江湖</a>].</p>\n<a id=\"more\"></a>\n<p>1.不要看到别人的回复第一句话就说：给个代码吧！你应该想想为什么。当你自己想出来再参考别人的提示，你就知道自己和别人思路的差异。 </p>\n<p>2.初学者请不要看太多太多的书那会误人子弟的，先找本系统的学，很多人用了很久都是只对部分功能熟悉而已，不系统还是不够的。 </p>\n<p>3.看帮助,不要因为很难而自己是初学者所以就不看；帮助永远是最好的参考手册，虽然帮助的文字有时候很难看懂，总觉得不够直观。 </p>\n<p>4.不要被对象、属性、方法等词汇所迷惑；最根本的是先了解最基础知识。 </p>\n<p>5.不要放过任何一个看上去很简单的小问题–他们往往并不那么简单，或者可以引伸出很多知识点；不会举一反三你就永远学不会。 </p>\n<p>6.知道一点东西，并不能说明你会写脚本，脚本是需要经验积累的。 </p>\n<p>7.学脚本并不难，JSP、ASP、PHP等等也不过如此–难的是长期坚持实践和不遗余力的博览群书； </p>\n<p>8.看再多的书是学不全脚本的，要多实践。 </p>\n<p>9.把时髦的技术挂在嘴边，还不如把过时的技术记在心里； </p>\n<p>10.学习脚本最好的方法之一就是多练习； </p>\n<p>11.在任何时刻都不要认为自己手中的书已经足够了； </p>\n<p>12.看得懂的书，请仔细看；看不懂的书，请硬着头皮看； </p>\n<p>13.别指望看第一遍书就能记住和掌握什么——请看第二遍、第三遍； </p>\n<p>14.请把书上的例子亲手到电脑上实践，即使配套光盘中有源文件； </p>\n<p>15.把在书中看到的有意义的例子扩充；并将其切实的运用到自己的工作中； </p>\n<p>16.不要漏掉书中任何一个练习——请全部做完并记录下思路； </p>\n<p>17.当你用脚本到一半却发现自己用的方法很拙劣时，请不要马上停手；请尽快将余下的部分粗略的完成以保证这个代码的完整性，然后分析自己的错误并重新编写和工作。 </p>\n<p>18.别心急，写脚本确实不容易；水平是在不断的实践中完善和发展的； </p>\n<p>19.每学到一个脚本难点的时候，尝试着对别人讲解这个知识点并让他理解—-你能讲清楚才说明你真的理解了； </p>\n<p>20.记录下在和别人交流时发现的自己忽视或不理解的知识点； </p>\n<p>21.保存好你做过的所有的源文件—-那是你最好的积累之一； </p>\n<p>22.对于网络，还是希望大家能多利用一下，很多问题不是非要到论坛来问的，首先你要学会自己找答案，比如google、百度都是很好的搜索引擎，你只要输入关键字就能找到很多相关资料，别老是等待别人给你希望，看的出你平时一定也很懒！ </p>\n<p>23.到一个论坛，你学会去看以前的帖子，不要什么都不看就发帖子问，也许你的问题早就有人问过了，你再问，别人已经不想再重复了，做为初学者，谁也不希望自己的帖子没人回的。 </p>\n<p>24.虽然不是打击初学者，但是这句话还是要说：论坛论坛，就是大家讨论的地方，如果你总期望有高手总无偿指点你，除非他是你亲戚！！讨论者，起码是 水平相当的才有讨论的说法，如果水平真差距太远了，连基本操作都需要别人给解答，谁还跟你讨论呢。能找到很多相关资料，别老是等待别人给你希望，看的出你 平时一定也很懒！ </p>\n<blockquote>\n<p>浮躁的人容易问：我到底该学什么；—-别问，学就对了；<br>浮躁的人容易问：JS有钱途吗；—-建议你去抢银行；<br>浮躁的人容易说：我要中文版！我英文不行！—-不行？学呀！<br>浮躁的人分两种：只观望而不学的人；只学而不坚持的人；<br>浮躁的人永远不是一个高手。</p>\n</blockquote>\n<p>(完)</p>\n","site":{"data":{}},"excerpt":"<p>今天看到一篇关于编程感悟的博客，大概意思说的是做编程、做技术（其实就是程序员呀）这行，切忌心浮气躁、急功近利，要让自己的内心静下来、沉淀下来，踏踏实实去做，每天进步一点点，然后坚持下去，肯定会学有所成的。</p>\n<p>想到自己放假回到家后的这几天确实太浮躁了，每天计划完不成，老是拖拉，没有什么上进心，再这样下去就别再谈什么追求和目标了，干脆卷铺盖得了，特此收藏此博客来勉励自己，这里感谢原创作者[<a href=\"http://www.itjhwd.com/byzyigefuzcey/\" target=\"_blank\" rel=\"noopener\">IT江湖</a>].</p>","more":"<p>1.不要看到别人的回复第一句话就说：给个代码吧！你应该想想为什么。当你自己想出来再参考别人的提示，你就知道自己和别人思路的差异。 </p>\n<p>2.初学者请不要看太多太多的书那会误人子弟的，先找本系统的学，很多人用了很久都是只对部分功能熟悉而已，不系统还是不够的。 </p>\n<p>3.看帮助,不要因为很难而自己是初学者所以就不看；帮助永远是最好的参考手册，虽然帮助的文字有时候很难看懂，总觉得不够直观。 </p>\n<p>4.不要被对象、属性、方法等词汇所迷惑；最根本的是先了解最基础知识。 </p>\n<p>5.不要放过任何一个看上去很简单的小问题–他们往往并不那么简单，或者可以引伸出很多知识点；不会举一反三你就永远学不会。 </p>\n<p>6.知道一点东西，并不能说明你会写脚本，脚本是需要经验积累的。 </p>\n<p>7.学脚本并不难，JSP、ASP、PHP等等也不过如此–难的是长期坚持实践和不遗余力的博览群书； </p>\n<p>8.看再多的书是学不全脚本的，要多实践。 </p>\n<p>9.把时髦的技术挂在嘴边，还不如把过时的技术记在心里； </p>\n<p>10.学习脚本最好的方法之一就是多练习； </p>\n<p>11.在任何时刻都不要认为自己手中的书已经足够了； </p>\n<p>12.看得懂的书，请仔细看；看不懂的书，请硬着头皮看； </p>\n<p>13.别指望看第一遍书就能记住和掌握什么——请看第二遍、第三遍； </p>\n<p>14.请把书上的例子亲手到电脑上实践，即使配套光盘中有源文件； </p>\n<p>15.把在书中看到的有意义的例子扩充；并将其切实的运用到自己的工作中； </p>\n<p>16.不要漏掉书中任何一个练习——请全部做完并记录下思路； </p>\n<p>17.当你用脚本到一半却发现自己用的方法很拙劣时，请不要马上停手；请尽快将余下的部分粗略的完成以保证这个代码的完整性，然后分析自己的错误并重新编写和工作。 </p>\n<p>18.别心急，写脚本确实不容易；水平是在不断的实践中完善和发展的； </p>\n<p>19.每学到一个脚本难点的时候，尝试着对别人讲解这个知识点并让他理解—-你能讲清楚才说明你真的理解了； </p>\n<p>20.记录下在和别人交流时发现的自己忽视或不理解的知识点； </p>\n<p>21.保存好你做过的所有的源文件—-那是你最好的积累之一； </p>\n<p>22.对于网络，还是希望大家能多利用一下，很多问题不是非要到论坛来问的，首先你要学会自己找答案，比如google、百度都是很好的搜索引擎，你只要输入关键字就能找到很多相关资料，别老是等待别人给你希望，看的出你平时一定也很懒！ </p>\n<p>23.到一个论坛，你学会去看以前的帖子，不要什么都不看就发帖子问，也许你的问题早就有人问过了，你再问，别人已经不想再重复了，做为初学者，谁也不希望自己的帖子没人回的。 </p>\n<p>24.虽然不是打击初学者，但是这句话还是要说：论坛论坛，就是大家讨论的地方，如果你总期望有高手总无偿指点你，除非他是你亲戚！！讨论者，起码是 水平相当的才有讨论的说法，如果水平真差距太远了，连基本操作都需要别人给解答，谁还跟你讨论呢。能找到很多相关资料，别老是等待别人给你希望，看的出你 平时一定也很懒！ </p>\n<blockquote>\n<p>浮躁的人容易问：我到底该学什么；—-别问，学就对了；<br>浮躁的人容易问：JS有钱途吗；—-建议你去抢银行；<br>浮躁的人容易说：我要中文版！我英文不行！—-不行？学呀！<br>浮躁的人分两种：只观望而不学的人；只学而不坚持的人；<br>浮躁的人永远不是一个高手。</p>\n</blockquote>\n<p>(完)</p>"},{"layout":"post","title":"Telnet操作memcached服务","_content":"我们知道，操作memcached有两种方式，分别是通过telnet和php程序来控制，其中php程序控制是主要方面，主要包括三种类型，如下图：\n\n![pic](http://ww2.sinaimg.cn/mw690/bd5a4d63jw1eiu65cgobnj208c07omxk.jpg)\n\n<!--more-->\n\n首先，我们要先在cmd控制台中开启memcached服务，命令如下：\n\n\tmemcached.exe -d start\n\n或者\n\n\tmemcached.exe -p 端口号\n\t端口号可自行设置，只要不被占用即可\n\n\n开启服务后，需要登录telnet连接到memcached服务，命令如下;\n\t\n\ttelnet 127.0.0.1 11211\n\n**注意：**\n\n如果登录telnet'时报错检测不到应用程序，请在“控制面板--->程序--->打开或关闭windows程序中”勾选telnet客户端并点击确定。\n\n下面总结下常用语法结构：\n\n###增加\n\n基本语法：\n\t\n\tadd key名  0  存放时间  数据大小（字符）\n\n例如：\n\n\tadd key1 0 30 5\n\n###获取元素\n\n基本语法：\n\n\tget key名\n\n例如：\n\n\tget key1\n\n###修改\n\n基本语法：\n\n\tset key名 0  存放时间  数据大小\n\n或者\n\n\treplace key名 0  存放时间 数据大小\n\n###删除\n\n基本语法：\n\n\tdelete key名\n\n例如：\n\n\tdelete key1\n\n---\n\n###小结\n\n这里简单总结了通过telnet来操作memcached的基本方法，其实主要还是通过程序（比如php）来控制memcached服务的，这里了解就好。","source":"_posts/201407/2014-07-29-memcache_telnet_notes.md","raw":"---\nlayout : post\ntitle : Telnet操作memcached服务\ncategory : memcached\ntags : telnet memcached\n---\n我们知道，操作memcached有两种方式，分别是通过telnet和php程序来控制，其中php程序控制是主要方面，主要包括三种类型，如下图：\n\n![pic](http://ww2.sinaimg.cn/mw690/bd5a4d63jw1eiu65cgobnj208c07omxk.jpg)\n\n<!--more-->\n\n首先，我们要先在cmd控制台中开启memcached服务，命令如下：\n\n\tmemcached.exe -d start\n\n或者\n\n\tmemcached.exe -p 端口号\n\t端口号可自行设置，只要不被占用即可\n\n\n开启服务后，需要登录telnet连接到memcached服务，命令如下;\n\t\n\ttelnet 127.0.0.1 11211\n\n**注意：**\n\n如果登录telnet'时报错检测不到应用程序，请在“控制面板--->程序--->打开或关闭windows程序中”勾选telnet客户端并点击确定。\n\n下面总结下常用语法结构：\n\n###增加\n\n基本语法：\n\t\n\tadd key名  0  存放时间  数据大小（字符）\n\n例如：\n\n\tadd key1 0 30 5\n\n###获取元素\n\n基本语法：\n\n\tget key名\n\n例如：\n\n\tget key1\n\n###修改\n\n基本语法：\n\n\tset key名 0  存放时间  数据大小\n\n或者\n\n\treplace key名 0  存放时间 数据大小\n\n###删除\n\n基本语法：\n\n\tdelete key名\n\n例如：\n\n\tdelete key1\n\n---\n\n###小结\n\n这里简单总结了通过telnet来操作memcached的基本方法，其实主要还是通过程序（比如php）来控制memcached服务的，这里了解就好。","slug":"201407-2014-07-29-memcache-telnet-notes","published":1,"date":"2018-04-12T15:20:38.822Z","updated":"2018-04-12T15:20:38.822Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5d0039ass6fw4q69tx","content":"<p>我们知道，操作memcached有两种方式，分别是通过telnet和php程序来控制，其中php程序控制是主要方面，主要包括三种类型，如下图：</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63jw1eiu65cgobnj208c07omxk.jpg\" alt=\"pic\"></p>\n<a id=\"more\"></a>\n<p>首先，我们要先在cmd控制台中开启memcached服务，命令如下：</p>\n<pre><code>memcached.exe -d start\n</code></pre><p>或者</p>\n<pre><code>memcached.exe -p 端口号\n端口号可自行设置，只要不被占用即可\n</code></pre><p>开启服务后，需要登录telnet连接到memcached服务，命令如下;</p>\n<pre><code>telnet 127.0.0.1 11211\n</code></pre><p><strong>注意：</strong></p>\n<p>如果登录telnet’时报错检测不到应用程序，请在“控制面板—&gt;程序—&gt;打开或关闭windows程序中”勾选telnet客户端并点击确定。</p>\n<p>下面总结下常用语法结构：</p>\n<p>###增加</p>\n<p>基本语法：</p>\n<pre><code>add key名  0  存放时间  数据大小（字符）\n</code></pre><p>例如：</p>\n<pre><code>add key1 0 30 5\n</code></pre><p>###获取元素</p>\n<p>基本语法：</p>\n<pre><code>get key名\n</code></pre><p>例如：</p>\n<pre><code>get key1\n</code></pre><p>###修改</p>\n<p>基本语法：</p>\n<pre><code>set key名 0  存放时间  数据大小\n</code></pre><p>或者</p>\n<pre><code>replace key名 0  存放时间 数据大小\n</code></pre><p>###删除</p>\n<p>基本语法：</p>\n<pre><code>delete key名\n</code></pre><p>例如：</p>\n<pre><code>delete key1\n</code></pre><hr>\n<p>###小结</p>\n<p>这里简单总结了通过telnet来操作memcached的基本方法，其实主要还是通过程序（比如php）来控制memcached服务的，这里了解就好。</p>\n","site":{"data":{}},"excerpt":"<p>我们知道，操作memcached有两种方式，分别是通过telnet和php程序来控制，其中php程序控制是主要方面，主要包括三种类型，如下图：</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63jw1eiu65cgobnj208c07omxk.jpg\" alt=\"pic\"></p>","more":"<p>首先，我们要先在cmd控制台中开启memcached服务，命令如下：</p>\n<pre><code>memcached.exe -d start\n</code></pre><p>或者</p>\n<pre><code>memcached.exe -p 端口号\n端口号可自行设置，只要不被占用即可\n</code></pre><p>开启服务后，需要登录telnet连接到memcached服务，命令如下;</p>\n<pre><code>telnet 127.0.0.1 11211\n</code></pre><p><strong>注意：</strong></p>\n<p>如果登录telnet’时报错检测不到应用程序，请在“控制面板—&gt;程序—&gt;打开或关闭windows程序中”勾选telnet客户端并点击确定。</p>\n<p>下面总结下常用语法结构：</p>\n<p>###增加</p>\n<p>基本语法：</p>\n<pre><code>add key名  0  存放时间  数据大小（字符）\n</code></pre><p>例如：</p>\n<pre><code>add key1 0 30 5\n</code></pre><p>###获取元素</p>\n<p>基本语法：</p>\n<pre><code>get key名\n</code></pre><p>例如：</p>\n<pre><code>get key1\n</code></pre><p>###修改</p>\n<p>基本语法：</p>\n<pre><code>set key名 0  存放时间  数据大小\n</code></pre><p>或者</p>\n<pre><code>replace key名 0  存放时间 数据大小\n</code></pre><p>###删除</p>\n<p>基本语法：</p>\n<pre><code>delete key名\n</code></pre><p>例如：</p>\n<pre><code>delete key1\n</code></pre><hr>\n<p>###小结</p>\n<p>这里简单总结了通过telnet来操作memcached的基本方法，其实主要还是通过程序（比如php）来控制memcached服务的，这里了解就好。</p>"},{"layout":"post","title":"网站在线支付总结","_content":"最近，在做一个购物商城的项目时，其中购买商品用到了关于网站在线支付的技术，就好好研究了下关于网站在线支付的流程与实现原理以及一些特别需要注意的地方。特此总结，备忘，以便查阅！\n\n大家都知道，在电子商务告诉发展的今天，网上购物已经成为大多数消费者最直接、最便利的消费方式了，但是消费者要想达到真正的“足不出户”，网站在线支付就派上用场了。\n\n<!--more-->\n\n在线支付是指卖方与买方通过互联网上的电子商务网站进行交易时，银行为其提供网上资金结算服务的一种业务。它为企业和个人提供了一个安全、快捷、方便的电子商务应用环境和网上资金结算工具。在线支付不仅帮助企业实现了销售款项的快速归集，缩短收款周期，同时也为个人网上银行客户提供了网上消费支付结算方式（摘自[百度百科](http://baike.baidu.com/link?url=7KptIGkIWdw2j7T0S41j91BcrCJLxRpTiaSdOeE7LGt-Yp_nllQFb9z2DqLTYucc)）。\n\n\n###在线支付方式\n\n*\t**直接与银行对接**\n\n![pic](http://ww1.sinaimg.cn/mw690/bd5a4d63jw1eisvnftccgj20if06mt95.jpg)\n\n\n**优点**：因为直接与银行进行财务结算，交易资金结算比较安全。适合资金流量比较大的企业，这种方案适合于每月结算金额佰万以上的企业。\n\n**缺点**：开发工作量比较大，而且银行会不定期升级交易系统，随着银行系统的升级，企业也需要作 相应改动，所以维护工作量也是比较大的，而且企业每年还需要向银行交纳一定数量的接口使用费。\n\n*\t**第三方支付**\n\n![pic](http://ww3.sinaimg.cn/mw690/bd5a4d63jw1eisvy668vpj20jf08ot9y.jpg)\n\n\n**优点**：开发工作量较少，因为使用的是中间企业提供的接入规范，所以银行升级系统，不需要企业作相应修改，除非中间企业的接入规范发生了改变，企业才作相应修改。相对 前一种接入方案，这种方案的维护工作量比较少的。因为只与一家企业对接，所以接入费用相对比较低。这种方案适合于每月结算金额在几十万以下的中小企业。\n\n**缺点**：因为是与中间企业进行资金结算，目前所有中间企业都是私企，资金安全是个大问题。\n\n\n###在线支付流程\n\n1、首先，商家需要先去第三方支付平台申请注册，获取商户编号以及设置密钥（用于网站和支付平台对接加密使用）。\n\n2、当客户将商品加入购物车并且点击结算时，后台需要进行商品信息的处理，比如：生成获取商户编号、商品信息、生成hmac签名字符串、指定支付成功后的重定向url地址等等，将处理好的信息按照第三方支付平台的官方文档格式放入表单的隐藏域（切记：必须严格遵守第三方的文档格式编写，否侧会出错！）。\n\n3、将表单隐藏域中的信息提交给第三方支付平台进行处理，如果有任何错误，都会返回失败，全部通过，才会成功！\n\n4、重定向页面的信息处理，当支付成功后，根据第三方重定向后返回的信息进行商品发货以及判断是否为恶意网站请求（可通过签名字符串）。\n\n###什么是签名字符串\n\n签名字符串，顾名思义，就是一堆字符串，只不过该字符串的生成是有严格要求的。必须严格按照官方文档的说明，将一些信息（比如：商品编号、业务编号、币种、密钥等等）以字符串的形式拼接起来，再经过加密算法生成签名字符串。\n\n签名字符串是为了防止恶意伪造表单信息进行http请求而用来加密和验证客户合法身份的一种有效方式，其中最重要的就是密钥了，密钥存在于商家和第三方手中，可随时进行更改。由于加密字符串前加入了密钥，所以当与第三方对接时，即使被恶意用户篡改了表单信息，但由于恶意用户不知道密钥，又因为加密字符串的不可逆，所以一旦表单被篡改，第三方就会立马检测出来即使阻止，有效保证了购物的安全性。\n\n###代码实例\n\n该事例使用的是易宝支付平台，详细请参考官方文档。\n\n\n表单输入订单号和金额（测试使用，可以填写0.01）\n\n        <form method=\"POST\" action=\"payConfirm.php\">\n        <table border=\"0\">\n            <tr><td colspan=\"4\">订单号：<input type=\"text\" name=\"p2_Order\">支付金额：<input type=\"text\" name=\"p3_Amt\"></td></tr>\n            <tr><td colspan=\"4\">请选择银行</td></tr>\n            <tr>\n                <td><input type=\"radio\" name=\"pd_FrpId\" value=\"CMBCHINA_NET\">招商银行</td>\n                <td><input type=\"radio\" name=\"pd_FrpId\" value=\"ICBC-NET\">工商银行</td>\n                <td><input type=\"radio\" name=\"pd_FrpId\" value=\"ABC-NET\">农业银行</td>\n                <td><input type=\"radio\" name=\"pd_FrpId\" value=\"CCB-NET\">建设银行</td>\n            </tr>\n            <tr><td colspan=\"4\"><input type=\"submit\" value=\"确认支付\"></td></tr>\n        </table>\n        </form>\n\n确认信息，以及进行一些信息的处理和生成签名字符串，还有将信息放入表单隐藏域中进行提交。\n\n\t<!DOCTYPE HTML>\n\t<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=gb2312\">\n        <title>支付测试</title>\n    </head>\n    <body>\n        <?php\n            /**\n            获取提交信息\n            */\n            $p0_Cmd = 'Buy';                    //业务编号\n            $p1_MerId = ***;                    //商户编号\n            $p2_Order = $_REQUEST['p2_Order'];  //商户订单号\n            $p3_Amt = $_REQUEST['p3_Amt'];      //支付金额\n            $p4_Cur = 'CNT';                    //交易币种\n            $p5_Pid = '';                       //商品名称，没有可为空\n            $p6_Pcat = '';                      //种类\n            $p7_Pdesc = '';                     //商品介绍\n            $p8_Url = 'http://localhost:80/pay/res.php';   //回调url，支付成功后，给这个url返回信息\n            $p9_SAF = 0;                        //是否需要送货地址\n            $pa_MP = '';                        //商户扩展信息\n            $pd_FrpId = $_REQUEST['pd_FrpId'];  //支付通道编码\n            $pr_NeedResponse = 1;               //是否需要应答机制\n\n            /**\n              hmac 是一个签名串，是易宝和商家互相确认的关键字，需要使用算法来生成（md5-mac）\n             */\n            //顺序不可错，切记\n            $data = \"\";\n            $data .= $p0_Cmd;\n            $data .= $p1_MerId;\n            $data .= $p2_Order;\n            $data .= $p3_Amt;\n            $data .= $p4_Cur;\n            $data .= $p5_Pid;\n            $data .= $p6_Pcat;\n            $data .= $p7_Pdesc;\n            $data .= $p8_Url;\n            $data .= $p9_SAF;\n            $data .= $pa_MP;\n            $data .= $pd_FrpId;\n            $data .= $pr_NeedResponse;\n\n            //密钥\n            $merchantKey = ***;\n\n            //获取hmac签名串\n            $hmac = hash_hmac(\"md5\", $data, $merchantKey);\n            \n            \n        ?>\n\n    您的订单号是:<?php echo $p2_Order;?> 支付的金额是：<?php echo $p3_Amt;?>\n\n    <!--表单的信息放到hidden中-->\n    <form action=\"https://www.yeepay.com/app-merchant-proxy/node\" method=\"POST\">\n        <input type=\"hidden\" name=\"p0_Cmd\" value=\"<?php echo $p0_Cmd;?>\" />\n        <input type=\"hidden\" name=\"p1_MerId\" value=\"<?php echo $p1_MerId;?>\" />\n        <input type=\"hidden\" name=\"p2_Order\" value=\"<?php echo $p2_Order;?>\" />\n        <input type=\"hidden\" name=\"p3_Amt\" value=\"<?php echo $p3_Amt;?>\" />\n        <input type=\"hidden\" name=\"p4_Cur\" value=\"<?php echo $p4_Cur;?>\" />\n        <input type=\"hidden\" name=\"p5_Pid\" value=\"<?php echo $p5_Pid;?>\" />\n        <input type=\"hidden\" name=\"p6_Pcat\" value=\"<?php echo $p6_Pcat;?>\" />\n        <input type=\"hidden\" name=\"p7_Pdesc\" value=\"<?php echo $p7_Pdesc;?>\" />\n        <input type=\"hidden\" name=\"p8_Url\" value=\"<?php echo $p8_Url;?>\" />\n        <input type=\"hidden\" name=\"p9_SAF\" value=\"<?php echo $p9_SAF;?>\" />\n        <input type=\"hidden\" name=\"pa_MP\" value=\"<?php echo $pa_MP;?>\" />\n        <input type=\"hidden\" name=\"pd_FrpId\" value=\"<?php echo $pd_FrpId;?>\" />\n        <input type=\"hidden\" name=\"pr_NeedResponse\" value=\"<?php echo $pr_NeedResponse;?>\" />\n        <input type=\"hidden\" name=\"hmac\" value=\"<?php echo $hmac;?>\" />\n        <input type=\"submit\"  value=\"确认提交\">\n    </form>\n    </body>\n\t</html>\n\n\n重定向url（省略了判断签名字符串）\n\t\n\t<!DOCTYPE HTML>\n\t<html>\n    <head><meta http-equiv=\"content-type\" content=\"text/html; charset=gb2312\"><title>支付测试</title></head>\n    <body>\n        <?php\n            //res\n            echo '支付成功';\n        ?>\n    </body>\n\t</html>\n\n以上模拟了使用易宝第三方支付平台进行在线支付。\n\n---\n\n###小结\n\n*\t发送GET或者POST请求都行\n*\t页面是GBK或者GB2312编码的\n*\t发送的参数请求不是自己随便起的,是接入规范中定义好的\n*\t密钥只能商家和第三方知道\n*\t生成签名字符串时是严格按照官方文档拼接的\n*\t**切记：**必须严格按照官方文档规范进行接入\n\n\t\n\n\n","source":"_posts/201407/2014-07-28-php_web_pay_notes.md","raw":"---\nlayout : post\ntitle : 网站在线支付总结\ncategory : PHP\ntags : 在线支付\n---\n最近，在做一个购物商城的项目时，其中购买商品用到了关于网站在线支付的技术，就好好研究了下关于网站在线支付的流程与实现原理以及一些特别需要注意的地方。特此总结，备忘，以便查阅！\n\n大家都知道，在电子商务告诉发展的今天，网上购物已经成为大多数消费者最直接、最便利的消费方式了，但是消费者要想达到真正的“足不出户”，网站在线支付就派上用场了。\n\n<!--more-->\n\n在线支付是指卖方与买方通过互联网上的电子商务网站进行交易时，银行为其提供网上资金结算服务的一种业务。它为企业和个人提供了一个安全、快捷、方便的电子商务应用环境和网上资金结算工具。在线支付不仅帮助企业实现了销售款项的快速归集，缩短收款周期，同时也为个人网上银行客户提供了网上消费支付结算方式（摘自[百度百科](http://baike.baidu.com/link?url=7KptIGkIWdw2j7T0S41j91BcrCJLxRpTiaSdOeE7LGt-Yp_nllQFb9z2DqLTYucc)）。\n\n\n###在线支付方式\n\n*\t**直接与银行对接**\n\n![pic](http://ww1.sinaimg.cn/mw690/bd5a4d63jw1eisvnftccgj20if06mt95.jpg)\n\n\n**优点**：因为直接与银行进行财务结算，交易资金结算比较安全。适合资金流量比较大的企业，这种方案适合于每月结算金额佰万以上的企业。\n\n**缺点**：开发工作量比较大，而且银行会不定期升级交易系统，随着银行系统的升级，企业也需要作 相应改动，所以维护工作量也是比较大的，而且企业每年还需要向银行交纳一定数量的接口使用费。\n\n*\t**第三方支付**\n\n![pic](http://ww3.sinaimg.cn/mw690/bd5a4d63jw1eisvy668vpj20jf08ot9y.jpg)\n\n\n**优点**：开发工作量较少，因为使用的是中间企业提供的接入规范，所以银行升级系统，不需要企业作相应修改，除非中间企业的接入规范发生了改变，企业才作相应修改。相对 前一种接入方案，这种方案的维护工作量比较少的。因为只与一家企业对接，所以接入费用相对比较低。这种方案适合于每月结算金额在几十万以下的中小企业。\n\n**缺点**：因为是与中间企业进行资金结算，目前所有中间企业都是私企，资金安全是个大问题。\n\n\n###在线支付流程\n\n1、首先，商家需要先去第三方支付平台申请注册，获取商户编号以及设置密钥（用于网站和支付平台对接加密使用）。\n\n2、当客户将商品加入购物车并且点击结算时，后台需要进行商品信息的处理，比如：生成获取商户编号、商品信息、生成hmac签名字符串、指定支付成功后的重定向url地址等等，将处理好的信息按照第三方支付平台的官方文档格式放入表单的隐藏域（切记：必须严格遵守第三方的文档格式编写，否侧会出错！）。\n\n3、将表单隐藏域中的信息提交给第三方支付平台进行处理，如果有任何错误，都会返回失败，全部通过，才会成功！\n\n4、重定向页面的信息处理，当支付成功后，根据第三方重定向后返回的信息进行商品发货以及判断是否为恶意网站请求（可通过签名字符串）。\n\n###什么是签名字符串\n\n签名字符串，顾名思义，就是一堆字符串，只不过该字符串的生成是有严格要求的。必须严格按照官方文档的说明，将一些信息（比如：商品编号、业务编号、币种、密钥等等）以字符串的形式拼接起来，再经过加密算法生成签名字符串。\n\n签名字符串是为了防止恶意伪造表单信息进行http请求而用来加密和验证客户合法身份的一种有效方式，其中最重要的就是密钥了，密钥存在于商家和第三方手中，可随时进行更改。由于加密字符串前加入了密钥，所以当与第三方对接时，即使被恶意用户篡改了表单信息，但由于恶意用户不知道密钥，又因为加密字符串的不可逆，所以一旦表单被篡改，第三方就会立马检测出来即使阻止，有效保证了购物的安全性。\n\n###代码实例\n\n该事例使用的是易宝支付平台，详细请参考官方文档。\n\n\n表单输入订单号和金额（测试使用，可以填写0.01）\n\n        <form method=\"POST\" action=\"payConfirm.php\">\n        <table border=\"0\">\n            <tr><td colspan=\"4\">订单号：<input type=\"text\" name=\"p2_Order\">支付金额：<input type=\"text\" name=\"p3_Amt\"></td></tr>\n            <tr><td colspan=\"4\">请选择银行</td></tr>\n            <tr>\n                <td><input type=\"radio\" name=\"pd_FrpId\" value=\"CMBCHINA_NET\">招商银行</td>\n                <td><input type=\"radio\" name=\"pd_FrpId\" value=\"ICBC-NET\">工商银行</td>\n                <td><input type=\"radio\" name=\"pd_FrpId\" value=\"ABC-NET\">农业银行</td>\n                <td><input type=\"radio\" name=\"pd_FrpId\" value=\"CCB-NET\">建设银行</td>\n            </tr>\n            <tr><td colspan=\"4\"><input type=\"submit\" value=\"确认支付\"></td></tr>\n        </table>\n        </form>\n\n确认信息，以及进行一些信息的处理和生成签名字符串，还有将信息放入表单隐藏域中进行提交。\n\n\t<!DOCTYPE HTML>\n\t<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=gb2312\">\n        <title>支付测试</title>\n    </head>\n    <body>\n        <?php\n            /**\n            获取提交信息\n            */\n            $p0_Cmd = 'Buy';                    //业务编号\n            $p1_MerId = ***;                    //商户编号\n            $p2_Order = $_REQUEST['p2_Order'];  //商户订单号\n            $p3_Amt = $_REQUEST['p3_Amt'];      //支付金额\n            $p4_Cur = 'CNT';                    //交易币种\n            $p5_Pid = '';                       //商品名称，没有可为空\n            $p6_Pcat = '';                      //种类\n            $p7_Pdesc = '';                     //商品介绍\n            $p8_Url = 'http://localhost:80/pay/res.php';   //回调url，支付成功后，给这个url返回信息\n            $p9_SAF = 0;                        //是否需要送货地址\n            $pa_MP = '';                        //商户扩展信息\n            $pd_FrpId = $_REQUEST['pd_FrpId'];  //支付通道编码\n            $pr_NeedResponse = 1;               //是否需要应答机制\n\n            /**\n              hmac 是一个签名串，是易宝和商家互相确认的关键字，需要使用算法来生成（md5-mac）\n             */\n            //顺序不可错，切记\n            $data = \"\";\n            $data .= $p0_Cmd;\n            $data .= $p1_MerId;\n            $data .= $p2_Order;\n            $data .= $p3_Amt;\n            $data .= $p4_Cur;\n            $data .= $p5_Pid;\n            $data .= $p6_Pcat;\n            $data .= $p7_Pdesc;\n            $data .= $p8_Url;\n            $data .= $p9_SAF;\n            $data .= $pa_MP;\n            $data .= $pd_FrpId;\n            $data .= $pr_NeedResponse;\n\n            //密钥\n            $merchantKey = ***;\n\n            //获取hmac签名串\n            $hmac = hash_hmac(\"md5\", $data, $merchantKey);\n            \n            \n        ?>\n\n    您的订单号是:<?php echo $p2_Order;?> 支付的金额是：<?php echo $p3_Amt;?>\n\n    <!--表单的信息放到hidden中-->\n    <form action=\"https://www.yeepay.com/app-merchant-proxy/node\" method=\"POST\">\n        <input type=\"hidden\" name=\"p0_Cmd\" value=\"<?php echo $p0_Cmd;?>\" />\n        <input type=\"hidden\" name=\"p1_MerId\" value=\"<?php echo $p1_MerId;?>\" />\n        <input type=\"hidden\" name=\"p2_Order\" value=\"<?php echo $p2_Order;?>\" />\n        <input type=\"hidden\" name=\"p3_Amt\" value=\"<?php echo $p3_Amt;?>\" />\n        <input type=\"hidden\" name=\"p4_Cur\" value=\"<?php echo $p4_Cur;?>\" />\n        <input type=\"hidden\" name=\"p5_Pid\" value=\"<?php echo $p5_Pid;?>\" />\n        <input type=\"hidden\" name=\"p6_Pcat\" value=\"<?php echo $p6_Pcat;?>\" />\n        <input type=\"hidden\" name=\"p7_Pdesc\" value=\"<?php echo $p7_Pdesc;?>\" />\n        <input type=\"hidden\" name=\"p8_Url\" value=\"<?php echo $p8_Url;?>\" />\n        <input type=\"hidden\" name=\"p9_SAF\" value=\"<?php echo $p9_SAF;?>\" />\n        <input type=\"hidden\" name=\"pa_MP\" value=\"<?php echo $pa_MP;?>\" />\n        <input type=\"hidden\" name=\"pd_FrpId\" value=\"<?php echo $pd_FrpId;?>\" />\n        <input type=\"hidden\" name=\"pr_NeedResponse\" value=\"<?php echo $pr_NeedResponse;?>\" />\n        <input type=\"hidden\" name=\"hmac\" value=\"<?php echo $hmac;?>\" />\n        <input type=\"submit\"  value=\"确认提交\">\n    </form>\n    </body>\n\t</html>\n\n\n重定向url（省略了判断签名字符串）\n\t\n\t<!DOCTYPE HTML>\n\t<html>\n    <head><meta http-equiv=\"content-type\" content=\"text/html; charset=gb2312\"><title>支付测试</title></head>\n    <body>\n        <?php\n            //res\n            echo '支付成功';\n        ?>\n    </body>\n\t</html>\n\n以上模拟了使用易宝第三方支付平台进行在线支付。\n\n---\n\n###小结\n\n*\t发送GET或者POST请求都行\n*\t页面是GBK或者GB2312编码的\n*\t发送的参数请求不是自己随便起的,是接入规范中定义好的\n*\t密钥只能商家和第三方知道\n*\t生成签名字符串时是严格按照官方文档拼接的\n*\t**切记：**必须严格按照官方文档规范进行接入\n\n\t\n\n\n","slug":"201407-2014-07-28-php-web-pay-notes","published":1,"date":"2018-04-12T15:20:38.821Z","updated":"2018-04-12T15:20:38.822Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5f003dass6u6dexs0v","content":"<p>最近，在做一个购物商城的项目时，其中购买商品用到了关于网站在线支付的技术，就好好研究了下关于网站在线支付的流程与实现原理以及一些特别需要注意的地方。特此总结，备忘，以便查阅！</p>\n<p>大家都知道，在电子商务告诉发展的今天，网上购物已经成为大多数消费者最直接、最便利的消费方式了，但是消费者要想达到真正的“足不出户”，网站在线支付就派上用场了。</p>\n<a id=\"more\"></a>\n<p>在线支付是指卖方与买方通过互联网上的电子商务网站进行交易时，银行为其提供网上资金结算服务的一种业务。它为企业和个人提供了一个安全、快捷、方便的电子商务应用环境和网上资金结算工具。在线支付不仅帮助企业实现了销售款项的快速归集，缩短收款周期，同时也为个人网上银行客户提供了网上消费支付结算方式（摘自<a href=\"http://baike.baidu.com/link?url=7KptIGkIWdw2j7T0S41j91BcrCJLxRpTiaSdOeE7LGt-Yp_nllQFb9z2DqLTYucc\" target=\"_blank\" rel=\"noopener\">百度百科</a>）。</p>\n<p>###在线支付方式</p>\n<ul>\n<li><strong>直接与银行对接</strong></li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63jw1eisvnftccgj20if06mt95.jpg\" alt=\"pic\"></p>\n<p><strong>优点</strong>：因为直接与银行进行财务结算，交易资金结算比较安全。适合资金流量比较大的企业，这种方案适合于每月结算金额佰万以上的企业。</p>\n<p><strong>缺点</strong>：开发工作量比较大，而且银行会不定期升级交易系统，随着银行系统的升级，企业也需要作 相应改动，所以维护工作量也是比较大的，而且企业每年还需要向银行交纳一定数量的接口使用费。</p>\n<ul>\n<li><strong>第三方支付</strong></li>\n</ul>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/bd5a4d63jw1eisvy668vpj20jf08ot9y.jpg\" alt=\"pic\"></p>\n<p><strong>优点</strong>：开发工作量较少，因为使用的是中间企业提供的接入规范，所以银行升级系统，不需要企业作相应修改，除非中间企业的接入规范发生了改变，企业才作相应修改。相对 前一种接入方案，这种方案的维护工作量比较少的。因为只与一家企业对接，所以接入费用相对比较低。这种方案适合于每月结算金额在几十万以下的中小企业。</p>\n<p><strong>缺点</strong>：因为是与中间企业进行资金结算，目前所有中间企业都是私企，资金安全是个大问题。</p>\n<p>###在线支付流程</p>\n<p>1、首先，商家需要先去第三方支付平台申请注册，获取商户编号以及设置密钥（用于网站和支付平台对接加密使用）。</p>\n<p>2、当客户将商品加入购物车并且点击结算时，后台需要进行商品信息的处理，比如：生成获取商户编号、商品信息、生成hmac签名字符串、指定支付成功后的重定向url地址等等，将处理好的信息按照第三方支付平台的官方文档格式放入表单的隐藏域（切记：必须严格遵守第三方的文档格式编写，否侧会出错！）。</p>\n<p>3、将表单隐藏域中的信息提交给第三方支付平台进行处理，如果有任何错误，都会返回失败，全部通过，才会成功！</p>\n<p>4、重定向页面的信息处理，当支付成功后，根据第三方重定向后返回的信息进行商品发货以及判断是否为恶意网站请求（可通过签名字符串）。</p>\n<p>###什么是签名字符串</p>\n<p>签名字符串，顾名思义，就是一堆字符串，只不过该字符串的生成是有严格要求的。必须严格按照官方文档的说明，将一些信息（比如：商品编号、业务编号、币种、密钥等等）以字符串的形式拼接起来，再经过加密算法生成签名字符串。</p>\n<p>签名字符串是为了防止恶意伪造表单信息进行http请求而用来加密和验证客户合法身份的一种有效方式，其中最重要的就是密钥了，密钥存在于商家和第三方手中，可随时进行更改。由于加密字符串前加入了密钥，所以当与第三方对接时，即使被恶意用户篡改了表单信息，但由于恶意用户不知道密钥，又因为加密字符串的不可逆，所以一旦表单被篡改，第三方就会立马检测出来即使阻止，有效保证了购物的安全性。</p>\n<p>###代码实例</p>\n<p>该事例使用的是易宝支付平台，详细请参考官方文档。</p>\n<p>表单输入订单号和金额（测试使用，可以填写0.01）</p>\n<pre><code>&lt;form method=&quot;POST&quot; action=&quot;payConfirm.php&quot;&gt;\n&lt;table border=&quot;0&quot;&gt;\n    &lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;订单号：&lt;input type=&quot;text&quot; name=&quot;p2_Order&quot;&gt;支付金额：&lt;input type=&quot;text&quot; name=&quot;p3_Amt&quot;&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;请选择银行&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;CMBCHINA_NET&quot;&gt;招商银行&lt;/td&gt;\n        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;ICBC-NET&quot;&gt;工商银行&lt;/td&gt;\n        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;ABC-NET&quot;&gt;农业银行&lt;/td&gt;\n        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;CCB-NET&quot;&gt;建设银行&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;确认支付&quot;&gt;&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/form&gt;\n</code></pre><p>确认信息，以及进行一些信息的处理和生成签名字符串，还有将信息放入表单隐藏域中进行提交。</p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=gb2312&quot;&gt;\n    &lt;title&gt;支付测试&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n        /**\n        获取提交信息\n        */\n        $p0_Cmd = &apos;Buy&apos;;                    //业务编号\n        $p1_MerId = ***;                    //商户编号\n        $p2_Order = $_REQUEST[&apos;p2_Order&apos;];  //商户订单号\n        $p3_Amt = $_REQUEST[&apos;p3_Amt&apos;];      //支付金额\n        $p4_Cur = &apos;CNT&apos;;                    //交易币种\n        $p5_Pid = &apos;&apos;;                       //商品名称，没有可为空\n        $p6_Pcat = &apos;&apos;;                      //种类\n        $p7_Pdesc = &apos;&apos;;                     //商品介绍\n        $p8_Url = &apos;http://localhost:80/pay/res.php&apos;;   //回调url，支付成功后，给这个url返回信息\n        $p9_SAF = 0;                        //是否需要送货地址\n        $pa_MP = &apos;&apos;;                        //商户扩展信息\n        $pd_FrpId = $_REQUEST[&apos;pd_FrpId&apos;];  //支付通道编码\n        $pr_NeedResponse = 1;               //是否需要应答机制\n\n        /**\n          hmac 是一个签名串，是易宝和商家互相确认的关键字，需要使用算法来生成（md5-mac）\n         */\n        //顺序不可错，切记\n        $data = &quot;&quot;;\n        $data .= $p0_Cmd;\n        $data .= $p1_MerId;\n        $data .= $p2_Order;\n        $data .= $p3_Amt;\n        $data .= $p4_Cur;\n        $data .= $p5_Pid;\n        $data .= $p6_Pcat;\n        $data .= $p7_Pdesc;\n        $data .= $p8_Url;\n        $data .= $p9_SAF;\n        $data .= $pa_MP;\n        $data .= $pd_FrpId;\n        $data .= $pr_NeedResponse;\n\n        //密钥\n        $merchantKey = ***;\n\n        //获取hmac签名串\n        $hmac = hash_hmac(&quot;md5&quot;, $data, $merchantKey);\n\n\n    ?&gt;\n\n您的订单号是:&lt;?php echo $p2_Order;?&gt; 支付的金额是：&lt;?php echo $p3_Amt;?&gt;\n\n&lt;!--表单的信息放到hidden中--&gt;\n&lt;form action=&quot;https://www.yeepay.com/app-merchant-proxy/node&quot; method=&quot;POST&quot;&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p0_Cmd&quot; value=&quot;&lt;?php echo $p0_Cmd;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p1_MerId&quot; value=&quot;&lt;?php echo $p1_MerId;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p2_Order&quot; value=&quot;&lt;?php echo $p2_Order;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p3_Amt&quot; value=&quot;&lt;?php echo $p3_Amt;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p4_Cur&quot; value=&quot;&lt;?php echo $p4_Cur;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p5_Pid&quot; value=&quot;&lt;?php echo $p5_Pid;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p6_Pcat&quot; value=&quot;&lt;?php echo $p6_Pcat;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p7_Pdesc&quot; value=&quot;&lt;?php echo $p7_Pdesc;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p8_Url&quot; value=&quot;&lt;?php echo $p8_Url;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p9_SAF&quot; value=&quot;&lt;?php echo $p9_SAF;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;pa_MP&quot; value=&quot;&lt;?php echo $pa_MP;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;pd_FrpId&quot; value=&quot;&lt;?php echo $pd_FrpId;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;pr_NeedResponse&quot; value=&quot;&lt;?php echo $pr_NeedResponse;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;hmac&quot; value=&quot;&lt;?php echo $hmac;?&gt;&quot; /&gt;\n    &lt;input type=&quot;submit&quot;  value=&quot;确认提交&quot;&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>重定向url（省略了判断签名字符串）</p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=gb2312&quot;&gt;&lt;title&gt;支付测试&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n        //res\n        echo &apos;支付成功&apos;;\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>以上模拟了使用易宝第三方支付平台进行在线支付。</p>\n<hr>\n<p>###小结</p>\n<ul>\n<li>发送GET或者POST请求都行</li>\n<li>页面是GBK或者GB2312编码的</li>\n<li>发送的参数请求不是自己随便起的,是接入规范中定义好的</li>\n<li>密钥只能商家和第三方知道</li>\n<li>生成签名字符串时是严格按照官方文档拼接的</li>\n<li><strong>切记：</strong>必须严格按照官方文档规范进行接入</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近，在做一个购物商城的项目时，其中购买商品用到了关于网站在线支付的技术，就好好研究了下关于网站在线支付的流程与实现原理以及一些特别需要注意的地方。特此总结，备忘，以便查阅！</p>\n<p>大家都知道，在电子商务告诉发展的今天，网上购物已经成为大多数消费者最直接、最便利的消费方式了，但是消费者要想达到真正的“足不出户”，网站在线支付就派上用场了。</p>","more":"<p>在线支付是指卖方与买方通过互联网上的电子商务网站进行交易时，银行为其提供网上资金结算服务的一种业务。它为企业和个人提供了一个安全、快捷、方便的电子商务应用环境和网上资金结算工具。在线支付不仅帮助企业实现了销售款项的快速归集，缩短收款周期，同时也为个人网上银行客户提供了网上消费支付结算方式（摘自<a href=\"http://baike.baidu.com/link?url=7KptIGkIWdw2j7T0S41j91BcrCJLxRpTiaSdOeE7LGt-Yp_nllQFb9z2DqLTYucc\" target=\"_blank\" rel=\"noopener\">百度百科</a>）。</p>\n<p>###在线支付方式</p>\n<ul>\n<li><strong>直接与银行对接</strong></li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63jw1eisvnftccgj20if06mt95.jpg\" alt=\"pic\"></p>\n<p><strong>优点</strong>：因为直接与银行进行财务结算，交易资金结算比较安全。适合资金流量比较大的企业，这种方案适合于每月结算金额佰万以上的企业。</p>\n<p><strong>缺点</strong>：开发工作量比较大，而且银行会不定期升级交易系统，随着银行系统的升级，企业也需要作 相应改动，所以维护工作量也是比较大的，而且企业每年还需要向银行交纳一定数量的接口使用费。</p>\n<ul>\n<li><strong>第三方支付</strong></li>\n</ul>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/bd5a4d63jw1eisvy668vpj20jf08ot9y.jpg\" alt=\"pic\"></p>\n<p><strong>优点</strong>：开发工作量较少，因为使用的是中间企业提供的接入规范，所以银行升级系统，不需要企业作相应修改，除非中间企业的接入规范发生了改变，企业才作相应修改。相对 前一种接入方案，这种方案的维护工作量比较少的。因为只与一家企业对接，所以接入费用相对比较低。这种方案适合于每月结算金额在几十万以下的中小企业。</p>\n<p><strong>缺点</strong>：因为是与中间企业进行资金结算，目前所有中间企业都是私企，资金安全是个大问题。</p>\n<p>###在线支付流程</p>\n<p>1、首先，商家需要先去第三方支付平台申请注册，获取商户编号以及设置密钥（用于网站和支付平台对接加密使用）。</p>\n<p>2、当客户将商品加入购物车并且点击结算时，后台需要进行商品信息的处理，比如：生成获取商户编号、商品信息、生成hmac签名字符串、指定支付成功后的重定向url地址等等，将处理好的信息按照第三方支付平台的官方文档格式放入表单的隐藏域（切记：必须严格遵守第三方的文档格式编写，否侧会出错！）。</p>\n<p>3、将表单隐藏域中的信息提交给第三方支付平台进行处理，如果有任何错误，都会返回失败，全部通过，才会成功！</p>\n<p>4、重定向页面的信息处理，当支付成功后，根据第三方重定向后返回的信息进行商品发货以及判断是否为恶意网站请求（可通过签名字符串）。</p>\n<p>###什么是签名字符串</p>\n<p>签名字符串，顾名思义，就是一堆字符串，只不过该字符串的生成是有严格要求的。必须严格按照官方文档的说明，将一些信息（比如：商品编号、业务编号、币种、密钥等等）以字符串的形式拼接起来，再经过加密算法生成签名字符串。</p>\n<p>签名字符串是为了防止恶意伪造表单信息进行http请求而用来加密和验证客户合法身份的一种有效方式，其中最重要的就是密钥了，密钥存在于商家和第三方手中，可随时进行更改。由于加密字符串前加入了密钥，所以当与第三方对接时，即使被恶意用户篡改了表单信息，但由于恶意用户不知道密钥，又因为加密字符串的不可逆，所以一旦表单被篡改，第三方就会立马检测出来即使阻止，有效保证了购物的安全性。</p>\n<p>###代码实例</p>\n<p>该事例使用的是易宝支付平台，详细请参考官方文档。</p>\n<p>表单输入订单号和金额（测试使用，可以填写0.01）</p>\n<pre><code>&lt;form method=&quot;POST&quot; action=&quot;payConfirm.php&quot;&gt;\n&lt;table border=&quot;0&quot;&gt;\n    &lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;订单号：&lt;input type=&quot;text&quot; name=&quot;p2_Order&quot;&gt;支付金额：&lt;input type=&quot;text&quot; name=&quot;p3_Amt&quot;&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;请选择银行&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;CMBCHINA_NET&quot;&gt;招商银行&lt;/td&gt;\n        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;ICBC-NET&quot;&gt;工商银行&lt;/td&gt;\n        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;ABC-NET&quot;&gt;农业银行&lt;/td&gt;\n        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;CCB-NET&quot;&gt;建设银行&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;确认支付&quot;&gt;&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/form&gt;\n</code></pre><p>确认信息，以及进行一些信息的处理和生成签名字符串，还有将信息放入表单隐藏域中进行提交。</p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=gb2312&quot;&gt;\n    &lt;title&gt;支付测试&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n        /**\n        获取提交信息\n        */\n        $p0_Cmd = &apos;Buy&apos;;                    //业务编号\n        $p1_MerId = ***;                    //商户编号\n        $p2_Order = $_REQUEST[&apos;p2_Order&apos;];  //商户订单号\n        $p3_Amt = $_REQUEST[&apos;p3_Amt&apos;];      //支付金额\n        $p4_Cur = &apos;CNT&apos;;                    //交易币种\n        $p5_Pid = &apos;&apos;;                       //商品名称，没有可为空\n        $p6_Pcat = &apos;&apos;;                      //种类\n        $p7_Pdesc = &apos;&apos;;                     //商品介绍\n        $p8_Url = &apos;http://localhost:80/pay/res.php&apos;;   //回调url，支付成功后，给这个url返回信息\n        $p9_SAF = 0;                        //是否需要送货地址\n        $pa_MP = &apos;&apos;;                        //商户扩展信息\n        $pd_FrpId = $_REQUEST[&apos;pd_FrpId&apos;];  //支付通道编码\n        $pr_NeedResponse = 1;               //是否需要应答机制\n\n        /**\n          hmac 是一个签名串，是易宝和商家互相确认的关键字，需要使用算法来生成（md5-mac）\n         */\n        //顺序不可错，切记\n        $data = &quot;&quot;;\n        $data .= $p0_Cmd;\n        $data .= $p1_MerId;\n        $data .= $p2_Order;\n        $data .= $p3_Amt;\n        $data .= $p4_Cur;\n        $data .= $p5_Pid;\n        $data .= $p6_Pcat;\n        $data .= $p7_Pdesc;\n        $data .= $p8_Url;\n        $data .= $p9_SAF;\n        $data .= $pa_MP;\n        $data .= $pd_FrpId;\n        $data .= $pr_NeedResponse;\n\n        //密钥\n        $merchantKey = ***;\n\n        //获取hmac签名串\n        $hmac = hash_hmac(&quot;md5&quot;, $data, $merchantKey);\n\n\n    ?&gt;\n\n您的订单号是:&lt;?php echo $p2_Order;?&gt; 支付的金额是：&lt;?php echo $p3_Amt;?&gt;\n\n&lt;!--表单的信息放到hidden中--&gt;\n&lt;form action=&quot;https://www.yeepay.com/app-merchant-proxy/node&quot; method=&quot;POST&quot;&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p0_Cmd&quot; value=&quot;&lt;?php echo $p0_Cmd;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p1_MerId&quot; value=&quot;&lt;?php echo $p1_MerId;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p2_Order&quot; value=&quot;&lt;?php echo $p2_Order;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p3_Amt&quot; value=&quot;&lt;?php echo $p3_Amt;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p4_Cur&quot; value=&quot;&lt;?php echo $p4_Cur;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p5_Pid&quot; value=&quot;&lt;?php echo $p5_Pid;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p6_Pcat&quot; value=&quot;&lt;?php echo $p6_Pcat;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p7_Pdesc&quot; value=&quot;&lt;?php echo $p7_Pdesc;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p8_Url&quot; value=&quot;&lt;?php echo $p8_Url;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;p9_SAF&quot; value=&quot;&lt;?php echo $p9_SAF;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;pa_MP&quot; value=&quot;&lt;?php echo $pa_MP;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;pd_FrpId&quot; value=&quot;&lt;?php echo $pd_FrpId;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;pr_NeedResponse&quot; value=&quot;&lt;?php echo $pr_NeedResponse;?&gt;&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;hmac&quot; value=&quot;&lt;?php echo $hmac;?&gt;&quot; /&gt;\n    &lt;input type=&quot;submit&quot;  value=&quot;确认提交&quot;&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>重定向url（省略了判断签名字符串）</p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=gb2312&quot;&gt;&lt;title&gt;支付测试&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n        //res\n        echo &apos;支付成功&apos;;\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>以上模拟了使用易宝第三方支付平台进行在线支付。</p>\n<hr>\n<p>###小结</p>\n<ul>\n<li>发送GET或者POST请求都行</li>\n<li>页面是GBK或者GB2312编码的</li>\n<li>发送的参数请求不是自己随便起的,是接入规范中定义好的</li>\n<li>密钥只能商家和第三方知道</li>\n<li>生成签名字符串时是严格按照官方文档拼接的</li>\n<li><strong>切记：</strong>必须严格按照官方文档规范进行接入</li>\n</ul>"},{"layout":"post","title":"PHP程序操作Memcache笔记","_content":"上一篇说明[telnet操作memcache](http://liyafeng.cn/memcache_telnet_notes/)时就提到有两中方式来操作memcache，一种是通过telnet工具，另一种是通过程序控制，下面简单总结下关于使用PHP程序来操作memcache步骤以及细节注意事项。\n\n首先，准备工作是要先把`php_memcache.dll`扩展文件加载到php中，以下是简要步骤：\n\n*\t将`php_memcache.dll`文件拷贝到php的ext目录下。\n*\t修改`php.ini`文件，加载`php_memcache.dll`文件，添加`extension=php_memcache.dll`，注意前面不要有`；`号。\n*\t重新启动apache服务器\n\n**注意：**\n\n不同版本的php所使用的`php_memcache.dll`文件是不一样的，加载时要注意检查php版本，找到合适的`php_memcache.dll`文件，否则会出错。\n\n<!--more-->\n\n\n然后，需要启动memcache服务，在cmd控制台，输入以下命令启动memcache服务：\n\n\tmemcache.exe -d start \n\t或者\n\tmemcache.exe -p port\n\n下面是一个PHP程序写的操作memcache服务的事例代码：\n\n\t<?php\n    /*\n     *  PHP程序操作memcache服务的事例代码\n     * */\n\n    //实例化memcache对象\n    $mem = new Memcache;\n\n    //建立链接\n    if (!$mem->connect('127.0.0.1', 11211)) {\n        exit('与memcache服务建立链接失败');\n    }\n\n    //查看memcache版本\n    echo '服务器版本信息：' .  $mem->getVersion() . '<br />';\n\n    //准备测试数据\n    $str = 'PHP is my love';    \n    $num = 123456;\n    $bool = true;\n    $arr = array('PHP is my love', 123, array('Hanson', 'Liyaf'));\n    Class Dog {\n        Public $name = '';\n        Public function __construct ($name) {\n            $this->name = $name;\n        }\n    }\n    $dog = new Dog('lucky_dog');\n\n    //添加数据到memcache\n    $res = $mem->add('s', $str, MEMCACHE_COMPRESSED, 120) && $mem->add('n', $num, MEMCACHE_COMPRESSED, 120) && $mem->add('b', $bool, MEMCACHE_COMPRESSED, 120) && $mem->add('a', $arr, MEMCACHE_COMPRESSED, 120) && $mem->add('o', $dog, MEMCACHE_COMPRESSED, 120);\n\n    if (!$res) {\n        echo '添加失败';\n        die;\n    } else {\n        echo '添加成功';\n    }\n    \n    //关闭链接\n    $mem->close();\n    \n\t?>\n\n从内存中查询数据：\n\n\t<?php\n    /*\n     *  获取数据\n     * */\n    $m = new Memcache;\n\n    $m->connect('localhost', 11211);\n\n    //取出数据\n    //string\n    $str = $m->get('s');\n\n    //number\n    $num = $m->get('n');\n\n    //bool\n    $bool = $m->get('b');\n\n    //array\n    $arr = $m->get('a');\n\n    //object\n    $obj = $m->get('o');\n\n\n    //print\n    echo '字符串' . $str . '<br />'; \n    echo '数值' . $num . '<br />'; \n    echo 'bool值' . $bool . '<br />'; \n    echo '数组' . print_r($arr) . '<br />'; \n    echo '对象' . var_dump($obj) . '<br />'; \n\n    //关闭链接\n    $m->close();\n\n\t?>\n\n###细节：\n\n当我们在添加数据时，使用函数：\n\n\tbool Memcache::add ( string $key , mixed $var [, int $flag [, int $expire ]] )\n\n*\t如果`$expire`设置为0，表示永不过期，只要mem不重新启动，就一直在内存中\n\n*\t如果`$expire`设置为秒数，则最大是30\\*24\\*3600\n\n*\t如果`$expire`希望保持时间超过30天，则可以使用**时间戳**：time()+天数\\*24\\*3600\n\n\n(end)\n\n---\n_以下为补充内容_\n###memcache生命周期\n\n从数据放入memcache开始计时，直到时间到时就销毁，如果时间设置为0，则表示永不过期。\n\nmemcache数据被销毁的情况如下：\n\n*\t设置时间到。\n*\t重启memcache服务\n*\t重启memcache服务所在机器\n*\tdelete删除或者flush销毁数据\n\n###将session数据放入memcache服务中\n\n*\t修改php.ini配置文件\n\n\t\t设置session.save_handler=memcache\t\t（可设置为files/user/memcache）\n\t\tsession.save_path=\"tcp://127.0.0.0.1:端口\"\n\n*\t重启apache服务器\n*\t正常使用$_SESSION超全局数组\n\n**思考**\n\n假如，不允许我们修改php.ini文件，我们可以通过ini_set()函数来处理session写入memcache这个功能。\n\n代码：\n\n\t<?php\n\t\tini_set(\"session.save_handler\", \"memcache\");\n\t\tini_set(\"session.save_path\", \"tcp://127.0.0.0.1:端口\");\n\n\t\t//操作session代码\n\t?>\n\n我们也可以通过ini_set()函数去动态的修改php.ini的其他设置，但不影响其他php页面，也不会去修改php.ini文件本身。\n\n\n\t\n\n\n","source":"_posts/201407/2014-07-30-memcache_php_notes.md","raw":"---\nlayout : post\ntitle : PHP程序操作Memcache笔记\ncategory : PHP\ntags : memcached\n---\n上一篇说明[telnet操作memcache](http://liyafeng.cn/memcache_telnet_notes/)时就提到有两中方式来操作memcache，一种是通过telnet工具，另一种是通过程序控制，下面简单总结下关于使用PHP程序来操作memcache步骤以及细节注意事项。\n\n首先，准备工作是要先把`php_memcache.dll`扩展文件加载到php中，以下是简要步骤：\n\n*\t将`php_memcache.dll`文件拷贝到php的ext目录下。\n*\t修改`php.ini`文件，加载`php_memcache.dll`文件，添加`extension=php_memcache.dll`，注意前面不要有`；`号。\n*\t重新启动apache服务器\n\n**注意：**\n\n不同版本的php所使用的`php_memcache.dll`文件是不一样的，加载时要注意检查php版本，找到合适的`php_memcache.dll`文件，否则会出错。\n\n<!--more-->\n\n\n然后，需要启动memcache服务，在cmd控制台，输入以下命令启动memcache服务：\n\n\tmemcache.exe -d start \n\t或者\n\tmemcache.exe -p port\n\n下面是一个PHP程序写的操作memcache服务的事例代码：\n\n\t<?php\n    /*\n     *  PHP程序操作memcache服务的事例代码\n     * */\n\n    //实例化memcache对象\n    $mem = new Memcache;\n\n    //建立链接\n    if (!$mem->connect('127.0.0.1', 11211)) {\n        exit('与memcache服务建立链接失败');\n    }\n\n    //查看memcache版本\n    echo '服务器版本信息：' .  $mem->getVersion() . '<br />';\n\n    //准备测试数据\n    $str = 'PHP is my love';    \n    $num = 123456;\n    $bool = true;\n    $arr = array('PHP is my love', 123, array('Hanson', 'Liyaf'));\n    Class Dog {\n        Public $name = '';\n        Public function __construct ($name) {\n            $this->name = $name;\n        }\n    }\n    $dog = new Dog('lucky_dog');\n\n    //添加数据到memcache\n    $res = $mem->add('s', $str, MEMCACHE_COMPRESSED, 120) && $mem->add('n', $num, MEMCACHE_COMPRESSED, 120) && $mem->add('b', $bool, MEMCACHE_COMPRESSED, 120) && $mem->add('a', $arr, MEMCACHE_COMPRESSED, 120) && $mem->add('o', $dog, MEMCACHE_COMPRESSED, 120);\n\n    if (!$res) {\n        echo '添加失败';\n        die;\n    } else {\n        echo '添加成功';\n    }\n    \n    //关闭链接\n    $mem->close();\n    \n\t?>\n\n从内存中查询数据：\n\n\t<?php\n    /*\n     *  获取数据\n     * */\n    $m = new Memcache;\n\n    $m->connect('localhost', 11211);\n\n    //取出数据\n    //string\n    $str = $m->get('s');\n\n    //number\n    $num = $m->get('n');\n\n    //bool\n    $bool = $m->get('b');\n\n    //array\n    $arr = $m->get('a');\n\n    //object\n    $obj = $m->get('o');\n\n\n    //print\n    echo '字符串' . $str . '<br />'; \n    echo '数值' . $num . '<br />'; \n    echo 'bool值' . $bool . '<br />'; \n    echo '数组' . print_r($arr) . '<br />'; \n    echo '对象' . var_dump($obj) . '<br />'; \n\n    //关闭链接\n    $m->close();\n\n\t?>\n\n###细节：\n\n当我们在添加数据时，使用函数：\n\n\tbool Memcache::add ( string $key , mixed $var [, int $flag [, int $expire ]] )\n\n*\t如果`$expire`设置为0，表示永不过期，只要mem不重新启动，就一直在内存中\n\n*\t如果`$expire`设置为秒数，则最大是30\\*24\\*3600\n\n*\t如果`$expire`希望保持时间超过30天，则可以使用**时间戳**：time()+天数\\*24\\*3600\n\n\n(end)\n\n---\n_以下为补充内容_\n###memcache生命周期\n\n从数据放入memcache开始计时，直到时间到时就销毁，如果时间设置为0，则表示永不过期。\n\nmemcache数据被销毁的情况如下：\n\n*\t设置时间到。\n*\t重启memcache服务\n*\t重启memcache服务所在机器\n*\tdelete删除或者flush销毁数据\n\n###将session数据放入memcache服务中\n\n*\t修改php.ini配置文件\n\n\t\t设置session.save_handler=memcache\t\t（可设置为files/user/memcache）\n\t\tsession.save_path=\"tcp://127.0.0.0.1:端口\"\n\n*\t重启apache服务器\n*\t正常使用$_SESSION超全局数组\n\n**思考**\n\n假如，不允许我们修改php.ini文件，我们可以通过ini_set()函数来处理session写入memcache这个功能。\n\n代码：\n\n\t<?php\n\t\tini_set(\"session.save_handler\", \"memcache\");\n\t\tini_set(\"session.save_path\", \"tcp://127.0.0.0.1:端口\");\n\n\t\t//操作session代码\n\t?>\n\n我们也可以通过ini_set()函数去动态的修改php.ini的其他设置，但不影响其他php页面，也不会去修改php.ini文件本身。\n\n\n\t\n\n\n","slug":"201407-2014-07-30-memcache-php-notes","published":1,"date":"2018-04-12T15:20:38.822Z","updated":"2018-04-12T15:20:38.822Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5h003hass6pz9xtg1a","content":"<p>上一篇说明<a href=\"http://liyafeng.cn/memcache_telnet_notes/\" target=\"_blank\" rel=\"noopener\">telnet操作memcache</a>时就提到有两中方式来操作memcache，一种是通过telnet工具，另一种是通过程序控制，下面简单总结下关于使用PHP程序来操作memcache步骤以及细节注意事项。</p>\n<p>首先，准备工作是要先把<code>php_memcache.dll</code>扩展文件加载到php中，以下是简要步骤：</p>\n<ul>\n<li>将<code>php_memcache.dll</code>文件拷贝到php的ext目录下。</li>\n<li>修改<code>php.ini</code>文件，加载<code>php_memcache.dll</code>文件，添加<code>extension=php_memcache.dll</code>，注意前面不要有<code>；</code>号。</li>\n<li>重新启动apache服务器</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>不同版本的php所使用的<code>php_memcache.dll</code>文件是不一样的，加载时要注意检查php版本，找到合适的<code>php_memcache.dll</code>文件，否则会出错。</p>\n<a id=\"more\"></a>\n<p>然后，需要启动memcache服务，在cmd控制台，输入以下命令启动memcache服务：</p>\n<pre><code>memcache.exe -d start \n或者\nmemcache.exe -p port\n</code></pre><p>下面是一个PHP程序写的操作memcache服务的事例代码：</p>\n<pre><code>&lt;?php\n/*\n *  PHP程序操作memcache服务的事例代码\n * */\n\n//实例化memcache对象\n$mem = new Memcache;\n\n//建立链接\nif (!$mem-&gt;connect(&apos;127.0.0.1&apos;, 11211)) {\n    exit(&apos;与memcache服务建立链接失败&apos;);\n}\n\n//查看memcache版本\necho &apos;服务器版本信息：&apos; .  $mem-&gt;getVersion() . &apos;&lt;br /&gt;&apos;;\n\n//准备测试数据\n$str = &apos;PHP is my love&apos;;    \n$num = 123456;\n$bool = true;\n$arr = array(&apos;PHP is my love&apos;, 123, array(&apos;Hanson&apos;, &apos;Liyaf&apos;));\nClass Dog {\n    Public $name = &apos;&apos;;\n    Public function __construct ($name) {\n        $this-&gt;name = $name;\n    }\n}\n$dog = new Dog(&apos;lucky_dog&apos;);\n\n//添加数据到memcache\n$res = $mem-&gt;add(&apos;s&apos;, $str, MEMCACHE_COMPRESSED, 120) &amp;&amp; $mem-&gt;add(&apos;n&apos;, $num, MEMCACHE_COMPRESSED, 120) &amp;&amp; $mem-&gt;add(&apos;b&apos;, $bool, MEMCACHE_COMPRESSED, 120) &amp;&amp; $mem-&gt;add(&apos;a&apos;, $arr, MEMCACHE_COMPRESSED, 120) &amp;&amp; $mem-&gt;add(&apos;o&apos;, $dog, MEMCACHE_COMPRESSED, 120);\n\nif (!$res) {\n    echo &apos;添加失败&apos;;\n    die;\n} else {\n    echo &apos;添加成功&apos;;\n}\n\n//关闭链接\n$mem-&gt;close();\n\n?&gt;\n</code></pre><p>从内存中查询数据：</p>\n<pre><code>&lt;?php\n/*\n *  获取数据\n * */\n$m = new Memcache;\n\n$m-&gt;connect(&apos;localhost&apos;, 11211);\n\n//取出数据\n//string\n$str = $m-&gt;get(&apos;s&apos;);\n\n//number\n$num = $m-&gt;get(&apos;n&apos;);\n\n//bool\n$bool = $m-&gt;get(&apos;b&apos;);\n\n//array\n$arr = $m-&gt;get(&apos;a&apos;);\n\n//object\n$obj = $m-&gt;get(&apos;o&apos;);\n\n\n//print\necho &apos;字符串&apos; . $str . &apos;&lt;br /&gt;&apos;; \necho &apos;数值&apos; . $num . &apos;&lt;br /&gt;&apos;; \necho &apos;bool值&apos; . $bool . &apos;&lt;br /&gt;&apos;; \necho &apos;数组&apos; . print_r($arr) . &apos;&lt;br /&gt;&apos;; \necho &apos;对象&apos; . var_dump($obj) . &apos;&lt;br /&gt;&apos;; \n\n//关闭链接\n$m-&gt;close();\n\n?&gt;\n</code></pre><p>###细节：</p>\n<p>当我们在添加数据时，使用函数：</p>\n<pre><code>bool Memcache::add ( string $key , mixed $var [, int $flag [, int $expire ]] )\n</code></pre><ul>\n<li><p>如果<code>$expire</code>设置为0，表示永不过期，只要mem不重新启动，就一直在内存中</p>\n</li>\n<li><p>如果<code>$expire</code>设置为秒数，则最大是30*24*3600</p>\n</li>\n<li><p>如果<code>$expire</code>希望保持时间超过30天，则可以使用<strong>时间戳</strong>：time()+天数*24*3600</p>\n</li>\n</ul>\n<p>(end)</p>\n<hr>\n<p><em>以下为补充内容</em></p>\n<p>###memcache生命周期</p>\n<p>从数据放入memcache开始计时，直到时间到时就销毁，如果时间设置为0，则表示永不过期。</p>\n<p>memcache数据被销毁的情况如下：</p>\n<ul>\n<li>设置时间到。</li>\n<li>重启memcache服务</li>\n<li>重启memcache服务所在机器</li>\n<li>delete删除或者flush销毁数据</li>\n</ul>\n<p>###将session数据放入memcache服务中</p>\n<ul>\n<li><p>修改php.ini配置文件</p>\n<p>   设置session.save_handler=memcache        （可设置为files/user/memcache）<br>   session.save_path=”tcp://127.0.0.0.1:端口”</p>\n</li>\n<li><p>重启apache服务器</p>\n</li>\n<li>正常使用$_SESSION超全局数组</li>\n</ul>\n<p><strong>思考</strong></p>\n<p>假如，不允许我们修改php.ini文件，我们可以通过ini_set()函数来处理session写入memcache这个功能。</p>\n<p>代码：</p>\n<pre><code>&lt;?php\n    ini_set(&quot;session.save_handler&quot;, &quot;memcache&quot;);\n    ini_set(&quot;session.save_path&quot;, &quot;tcp://127.0.0.0.1:端口&quot;);\n\n    //操作session代码\n?&gt;\n</code></pre><p>我们也可以通过ini_set()函数去动态的修改php.ini的其他设置，但不影响其他php页面，也不会去修改php.ini文件本身。</p>\n","site":{"data":{}},"excerpt":"<p>上一篇说明<a href=\"http://liyafeng.cn/memcache_telnet_notes/\" target=\"_blank\" rel=\"noopener\">telnet操作memcache</a>时就提到有两中方式来操作memcache，一种是通过telnet工具，另一种是通过程序控制，下面简单总结下关于使用PHP程序来操作memcache步骤以及细节注意事项。</p>\n<p>首先，准备工作是要先把<code>php_memcache.dll</code>扩展文件加载到php中，以下是简要步骤：</p>\n<ul>\n<li>将<code>php_memcache.dll</code>文件拷贝到php的ext目录下。</li>\n<li>修改<code>php.ini</code>文件，加载<code>php_memcache.dll</code>文件，添加<code>extension=php_memcache.dll</code>，注意前面不要有<code>；</code>号。</li>\n<li>重新启动apache服务器</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>不同版本的php所使用的<code>php_memcache.dll</code>文件是不一样的，加载时要注意检查php版本，找到合适的<code>php_memcache.dll</code>文件，否则会出错。</p>","more":"<p>然后，需要启动memcache服务，在cmd控制台，输入以下命令启动memcache服务：</p>\n<pre><code>memcache.exe -d start \n或者\nmemcache.exe -p port\n</code></pre><p>下面是一个PHP程序写的操作memcache服务的事例代码：</p>\n<pre><code>&lt;?php\n/*\n *  PHP程序操作memcache服务的事例代码\n * */\n\n//实例化memcache对象\n$mem = new Memcache;\n\n//建立链接\nif (!$mem-&gt;connect(&apos;127.0.0.1&apos;, 11211)) {\n    exit(&apos;与memcache服务建立链接失败&apos;);\n}\n\n//查看memcache版本\necho &apos;服务器版本信息：&apos; .  $mem-&gt;getVersion() . &apos;&lt;br /&gt;&apos;;\n\n//准备测试数据\n$str = &apos;PHP is my love&apos;;    \n$num = 123456;\n$bool = true;\n$arr = array(&apos;PHP is my love&apos;, 123, array(&apos;Hanson&apos;, &apos;Liyaf&apos;));\nClass Dog {\n    Public $name = &apos;&apos;;\n    Public function __construct ($name) {\n        $this-&gt;name = $name;\n    }\n}\n$dog = new Dog(&apos;lucky_dog&apos;);\n\n//添加数据到memcache\n$res = $mem-&gt;add(&apos;s&apos;, $str, MEMCACHE_COMPRESSED, 120) &amp;&amp; $mem-&gt;add(&apos;n&apos;, $num, MEMCACHE_COMPRESSED, 120) &amp;&amp; $mem-&gt;add(&apos;b&apos;, $bool, MEMCACHE_COMPRESSED, 120) &amp;&amp; $mem-&gt;add(&apos;a&apos;, $arr, MEMCACHE_COMPRESSED, 120) &amp;&amp; $mem-&gt;add(&apos;o&apos;, $dog, MEMCACHE_COMPRESSED, 120);\n\nif (!$res) {\n    echo &apos;添加失败&apos;;\n    die;\n} else {\n    echo &apos;添加成功&apos;;\n}\n\n//关闭链接\n$mem-&gt;close();\n\n?&gt;\n</code></pre><p>从内存中查询数据：</p>\n<pre><code>&lt;?php\n/*\n *  获取数据\n * */\n$m = new Memcache;\n\n$m-&gt;connect(&apos;localhost&apos;, 11211);\n\n//取出数据\n//string\n$str = $m-&gt;get(&apos;s&apos;);\n\n//number\n$num = $m-&gt;get(&apos;n&apos;);\n\n//bool\n$bool = $m-&gt;get(&apos;b&apos;);\n\n//array\n$arr = $m-&gt;get(&apos;a&apos;);\n\n//object\n$obj = $m-&gt;get(&apos;o&apos;);\n\n\n//print\necho &apos;字符串&apos; . $str . &apos;&lt;br /&gt;&apos;; \necho &apos;数值&apos; . $num . &apos;&lt;br /&gt;&apos;; \necho &apos;bool值&apos; . $bool . &apos;&lt;br /&gt;&apos;; \necho &apos;数组&apos; . print_r($arr) . &apos;&lt;br /&gt;&apos;; \necho &apos;对象&apos; . var_dump($obj) . &apos;&lt;br /&gt;&apos;; \n\n//关闭链接\n$m-&gt;close();\n\n?&gt;\n</code></pre><p>###细节：</p>\n<p>当我们在添加数据时，使用函数：</p>\n<pre><code>bool Memcache::add ( string $key , mixed $var [, int $flag [, int $expire ]] )\n</code></pre><ul>\n<li><p>如果<code>$expire</code>设置为0，表示永不过期，只要mem不重新启动，就一直在内存中</p>\n</li>\n<li><p>如果<code>$expire</code>设置为秒数，则最大是30*24*3600</p>\n</li>\n<li><p>如果<code>$expire</code>希望保持时间超过30天，则可以使用<strong>时间戳</strong>：time()+天数*24*3600</p>\n</li>\n</ul>\n<p>(end)</p>\n<hr>\n<p><em>以下为补充内容</em></p>\n<p>###memcache生命周期</p>\n<p>从数据放入memcache开始计时，直到时间到时就销毁，如果时间设置为0，则表示永不过期。</p>\n<p>memcache数据被销毁的情况如下：</p>\n<ul>\n<li>设置时间到。</li>\n<li>重启memcache服务</li>\n<li>重启memcache服务所在机器</li>\n<li>delete删除或者flush销毁数据</li>\n</ul>\n<p>###将session数据放入memcache服务中</p>\n<ul>\n<li><p>修改php.ini配置文件</p>\n<p>   设置session.save_handler=memcache        （可设置为files/user/memcache）<br>   session.save_path=”tcp://127.0.0.0.1:端口”</p>\n</li>\n<li><p>重启apache服务器</p>\n</li>\n<li>正常使用$_SESSION超全局数组</li>\n</ul>\n<p><strong>思考</strong></p>\n<p>假如，不允许我们修改php.ini文件，我们可以通过ini_set()函数来处理session写入memcache这个功能。</p>\n<p>代码：</p>\n<pre><code>&lt;?php\n    ini_set(&quot;session.save_handler&quot;, &quot;memcache&quot;);\n    ini_set(&quot;session.save_path&quot;, &quot;tcp://127.0.0.0.1:端口&quot;);\n\n    //操作session代码\n?&gt;\n</code></pre><p>我们也可以通过ini_set()函数去动态的修改php.ini的其他设置，但不影响其他php页面，也不会去修改php.ini文件本身。</p>"},{"layout":"post","title":"SESSION安全性问题","_content":"一直以来很多开发者都认为php内置的session管理机制是具有一定的安全性，可以对一般的session攻击起到防御。事实上，这是一种误解，php团队只实现了一种方便有效的机制。具体的安全措施，应该有应用程序的开发团队来实施。\n\n\n现在，我们来看下一个比较常规的针对session的攻击：\n\n\n*\t用户访问`http://www.example.org`，并且登录。\n\n*\t`example.org`的服务器设置指示客户端设置相关`cookie - PHPSESSID=12345`\n\n*\t攻击者这时访问`http://www.example.org/`,并且在请求中携带了对应的`cookie - PHPSESSID=12345`\n\n\n<!--more-->\n\n这样情况下，因为`example.orge`的服务器通过PHPSESSID来辨认对应的用户的，所以服务器错把攻击者当成了合法的用户。\n\n整个过程的描述，请看下面的示例图：\n\n![pic](http://ww2.sinaimg.cn/mw690/bd5a4d63jw1ej2tiwbwbjj20b405kgls.jpg)\n\n当然这种攻击的方式，前提条件是攻击者必须通过某种手段固定，劫持或者猜测出某个合法用户的PHPSESSID。虽然这看起来难度很高，但是也不是不可能的事情。\n\n###安全性的加强\n\n有很多技术可以用来加强Session的安全性，主要思想就是要使验证的过程对于合法用户来说，越简单越好，然后对于攻击者来说，步骤要越复杂越好。当然，这似乎是比较难于平衡的，要根据你应用程序的具体设计来做决策。\n\n\n最简单的居于HTTP/1.1请求包括请求行以及一些Host的头部：\n\n\n\n\tGET / HTTP/1.1\n\n\tHost: example.org\n\n\n\n\n\n如果客户端通过PHPSESSID传递相关的session标识符，可以将PHPSESSID放在cookie头部中进行传递:\n\n\tGET / HTTP/1.1\n\n\tHost: example.org\n\n\tCookie: PHPSESSID=12345\n\n\n\n\n\n同样地，客户端也可以将session标识符放在请求的url中进行传递。\n\n\tGET /?PHPSESSID=12345\n\n\tHTTP/1.1Host: example.org\n\n\n\n\n\n当然，session标识符也可以包含在POST数据中，但是这对用户体验有影响，所以这种方式很少采用。\n\n\n\n因为来自TCP/IP信息也不一定可以完全信任的，所以，对于web开发者来说，利用TCP/IP中的信息来加强安全性也是不太合适的。 不过，攻击者也必须提供一个合法用户的唯一的标识符，才能假扮成合法用户进入系统。因此，看起来唯一能够有效的保护系统的措施，就是尽量地隐藏session标识符或者使之难于猜测出来。最好就是两者都能实施。\n\n\n\nPHP会自动生成一个随机的session ID，基本来说是不可能被猜测出来的，所以这方面的安全还是有一定保障的。但是，要防止攻击者获取一个合法的session ID是相当困难的，这基本上不是开发者所能控制的。\n\n\n\n事实上，许多情况下都有可能导致session ID的泄露。 比如说，如果通过GET数据来传递session ID的话，就有可能暴露这个敏感的身份信息。因为，有的用户可能会将带有session ID的链接缓存，收藏或者发送在邮件内容中。Cookies是一种像相对来说安全一点的机制，但是用户是可以在客户端中禁止掉cookies的！在一些IE的版本中也有比较严重的安全漏洞，比较有名的就是会泄露cookies给一些有安全隐患的邪恶站点。\n\n\n\n因此，作为一个开发者，可以肯定session ID是不能被猜测出来的，但是还是有可能被攻击者使用某些方法获取到。所以，必须采取一些额外的安全措施来防止此类情况在你的应用程序中发生。\n\n\n\n实际上，一个标准的HTTP请求中除了Host等必须包含的头部，还包含了一些可选的头部.举一个例子，看下面的一个请求：\n\n\tGET / HTTP/1.1\n\tHost: example.org\n\tCookie: PHPSESSID=12345\n\tUser-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1\n\tAccept: text/html;q=0.9, */*;q=0.1\n\tAccept-Charset: ISO-8859-1, utf-8;q=0.66, *;q=0.66\n\tAccept-Language: en\n\n我们可以看到，在以上的一个请求例子中包含了四个额外的头部，分别是User-Agent, Accept, Accept-Charset以及Accept-Language。因为这些头部不是必须的，所以完全依赖他们在你的应用程序中发挥作用是不太明智的。但是，**如果一个用户的浏览器确实发送了这些头部到服务器，那么可以肯定的是在接下来的同一个用户通过同一个浏览器发送的请求中，必然也会携带这些头部。**当然，这其中也会有极少数的特殊情况发生。假如以上例子是由一个当前的跟服务器建立了会话的用户发出的请求，考虑下面的一个请求：\n\n\tGET / HTTP/1.1\n\tHost: example.org\n\tCookie: PHPSESSID=12345\n\tUser-Agent: Mozilla/5.0 (compatible; IE 6.0 Microsoft Windows XP)\n\n\n因为有相同的session id包含在请求的Cookie头部中，所以相同的php session将会被访问到。但是，请求里的User-Agent头部跟先前的请求中的信息是不同的，系统是否可以假定这两个请求是同一个用户发出的？\n\n\n\n像这种情况下，发现浏览器的头部改变了，但是不能肯定这是否是一次来自攻击者的请求的话，比较好的措施就是弹出一个要求输入密码的输入框让用户输入，这样的话，对用户体验的影响不会很大，又能很有效地防止攻击。\n\n\n\n当然，你可以在系统中加入核查User-Agent头部的代码，类似Listing 3中的代码：\n\n**Listing 3:**\n\n\t<?php\n\tsession_start(); \n    \n\tif (md5($_SERVER['HTTP_USER_AGENT']) != $_SESSION['HTTP_USER_AGENT']) \n\t{   /* 弹出密码输入框 */   exit;\n\t} \n    \n\t?>\n\n\n\n\n当然，你先必须在第一次请求时，初始化session的时候，用MD5算法加密user agent信息并且保存在session中，类似下面listing4中的代码：\n\n**Listing 4:**\n\n\t<?php \n    \n\tsession_start(); \n    \n\t$_SESSION['HTTP_USER_AGENT'] = md5($_SERVER['HTTP_USER_AGENT']); \n    \n\t?>\n\n\n虽然不一定需要用MD5来加密这个User-Agent信息，但使用这种方式以后就不需要再过滤这个`$_SERVER['HTTP_USER_AGENT']`数据了。不然的话，在使用这个数据以前必须要进行数据过滤，**因为任何来自客户端的数据都是不可信任的，必须要注意这一点。**\n\n\n\n在你检查这个User-Agent客户端头部信息以后，做为一个攻击者必须要完成两步才能劫持一个session:\n\n*\t获取一个合法的session id\n\n*\t包含一个相同的User-Agent头部在伪造的请求中\n\n你可能会说，居然攻击者能获得有效的session id,那么以他的水平，伪造一个相同的User-Agent不是件难事。不错，但是我们可以说这至少给他添加了一些麻烦，在一定程度上也增加了session机制的安全性。\n\n\n\n你应该也能想到了，既然我们可以检查User-Agent这个头部来加强安全性，那么不妨再利用其它的一些头部信息，把他们组合起来生成一个加密的token，并且让客户端在后续的请求中携带这个token！这样的话，攻击者基本上不可能猜测出这样一个token是怎么生成出来的。这好比你用信用卡在超市付款，一个你必须有信用卡(好比session id)，另外你也必须输入一个支付密码(好比token),这有这两者都符合的情况下，你才能成功进入账号付款。 看下面一段代码：\n\n\t<?php \n\tsession_start(); \n\t$token = 'SHIFLETT' . $_SERVER['HTTP_USER_AGENT'];\n\t$_SESSION['token'] = md5($token . session_id()); \n\t?>\n\n\n**注意**：Accept这个头部不应该被用来生成token,因为有些浏览器会自动改变这个头部，当用户刷新浏览器的时候。\n\n在你的验证机制中加入了这个非常难于猜测出来的token以后，安全性会得到很大的提升。假如这个token通过像session id一样的方式来进行传递，这种情况下，一个攻击者必须完成必要的3步来劫持用户的session:\n\n*\t获取一个合法的session ID\n\n*\t在请求中加入相同的User-Agent头部,用与生成token\n\n*\t在请求中携带被攻击者的token\n\n这里面有个问题。如果session id以及token都是通过GET数据来传递的话，那么对于能获取session ID的攻击者，同样就能够获取到这个token。所以，比较安全靠谱的方式应该是利用两种不同的数据传递方式来分别传递session id以及token。例如，通过cookie来传递session id,然后通过GET数据来传递token。因此，假如攻击者通过某种手段获得了这个唯一的用户身份标识，也是不太可能同时轻松地获取到这个token，它相对来说依然是安全的。\n\n\n\n还有很多的技术手段可以用来加强你的session机制的安全性。希望你在大致了解session的内部本质以后，可以设计出适合你的应用系统的验证机制，从而大大的提高系统的安全性。毕竟，你是最熟悉当下你开发的系统的开发者之一，可以根据实际情况来实施一些特有的，额外的安全措施。\n\n---\n\n###总结\n\n以上只是大概地描述了session的工作机制，以及简单地阐述了一些安全措施。但要记住，以上的方法都是能够加强安全性，不是说能够完全保护你的系统，希望读者自己再去调研相关内容。在这个调研过程中，相信你会学到很有实际使用价值的方案。\n\n**参考**：[原文链接](http://blogread.cn/it/article/6004?f=wb)\n\n（完）\n","source":"_posts/201408/2014-08-06-session_safe_notes.md","raw":"---\nlayout : post\ntitle : SESSION安全性问题\ncategory : PHP\ntags : SESSION\n---\n一直以来很多开发者都认为php内置的session管理机制是具有一定的安全性，可以对一般的session攻击起到防御。事实上，这是一种误解，php团队只实现了一种方便有效的机制。具体的安全措施，应该有应用程序的开发团队来实施。\n\n\n现在，我们来看下一个比较常规的针对session的攻击：\n\n\n*\t用户访问`http://www.example.org`，并且登录。\n\n*\t`example.org`的服务器设置指示客户端设置相关`cookie - PHPSESSID=12345`\n\n*\t攻击者这时访问`http://www.example.org/`,并且在请求中携带了对应的`cookie - PHPSESSID=12345`\n\n\n<!--more-->\n\n这样情况下，因为`example.orge`的服务器通过PHPSESSID来辨认对应的用户的，所以服务器错把攻击者当成了合法的用户。\n\n整个过程的描述，请看下面的示例图：\n\n![pic](http://ww2.sinaimg.cn/mw690/bd5a4d63jw1ej2tiwbwbjj20b405kgls.jpg)\n\n当然这种攻击的方式，前提条件是攻击者必须通过某种手段固定，劫持或者猜测出某个合法用户的PHPSESSID。虽然这看起来难度很高，但是也不是不可能的事情。\n\n###安全性的加强\n\n有很多技术可以用来加强Session的安全性，主要思想就是要使验证的过程对于合法用户来说，越简单越好，然后对于攻击者来说，步骤要越复杂越好。当然，这似乎是比较难于平衡的，要根据你应用程序的具体设计来做决策。\n\n\n最简单的居于HTTP/1.1请求包括请求行以及一些Host的头部：\n\n\n\n\tGET / HTTP/1.1\n\n\tHost: example.org\n\n\n\n\n\n如果客户端通过PHPSESSID传递相关的session标识符，可以将PHPSESSID放在cookie头部中进行传递:\n\n\tGET / HTTP/1.1\n\n\tHost: example.org\n\n\tCookie: PHPSESSID=12345\n\n\n\n\n\n同样地，客户端也可以将session标识符放在请求的url中进行传递。\n\n\tGET /?PHPSESSID=12345\n\n\tHTTP/1.1Host: example.org\n\n\n\n\n\n当然，session标识符也可以包含在POST数据中，但是这对用户体验有影响，所以这种方式很少采用。\n\n\n\n因为来自TCP/IP信息也不一定可以完全信任的，所以，对于web开发者来说，利用TCP/IP中的信息来加强安全性也是不太合适的。 不过，攻击者也必须提供一个合法用户的唯一的标识符，才能假扮成合法用户进入系统。因此，看起来唯一能够有效的保护系统的措施，就是尽量地隐藏session标识符或者使之难于猜测出来。最好就是两者都能实施。\n\n\n\nPHP会自动生成一个随机的session ID，基本来说是不可能被猜测出来的，所以这方面的安全还是有一定保障的。但是，要防止攻击者获取一个合法的session ID是相当困难的，这基本上不是开发者所能控制的。\n\n\n\n事实上，许多情况下都有可能导致session ID的泄露。 比如说，如果通过GET数据来传递session ID的话，就有可能暴露这个敏感的身份信息。因为，有的用户可能会将带有session ID的链接缓存，收藏或者发送在邮件内容中。Cookies是一种像相对来说安全一点的机制，但是用户是可以在客户端中禁止掉cookies的！在一些IE的版本中也有比较严重的安全漏洞，比较有名的就是会泄露cookies给一些有安全隐患的邪恶站点。\n\n\n\n因此，作为一个开发者，可以肯定session ID是不能被猜测出来的，但是还是有可能被攻击者使用某些方法获取到。所以，必须采取一些额外的安全措施来防止此类情况在你的应用程序中发生。\n\n\n\n实际上，一个标准的HTTP请求中除了Host等必须包含的头部，还包含了一些可选的头部.举一个例子，看下面的一个请求：\n\n\tGET / HTTP/1.1\n\tHost: example.org\n\tCookie: PHPSESSID=12345\n\tUser-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1\n\tAccept: text/html;q=0.9, */*;q=0.1\n\tAccept-Charset: ISO-8859-1, utf-8;q=0.66, *;q=0.66\n\tAccept-Language: en\n\n我们可以看到，在以上的一个请求例子中包含了四个额外的头部，分别是User-Agent, Accept, Accept-Charset以及Accept-Language。因为这些头部不是必须的，所以完全依赖他们在你的应用程序中发挥作用是不太明智的。但是，**如果一个用户的浏览器确实发送了这些头部到服务器，那么可以肯定的是在接下来的同一个用户通过同一个浏览器发送的请求中，必然也会携带这些头部。**当然，这其中也会有极少数的特殊情况发生。假如以上例子是由一个当前的跟服务器建立了会话的用户发出的请求，考虑下面的一个请求：\n\n\tGET / HTTP/1.1\n\tHost: example.org\n\tCookie: PHPSESSID=12345\n\tUser-Agent: Mozilla/5.0 (compatible; IE 6.0 Microsoft Windows XP)\n\n\n因为有相同的session id包含在请求的Cookie头部中，所以相同的php session将会被访问到。但是，请求里的User-Agent头部跟先前的请求中的信息是不同的，系统是否可以假定这两个请求是同一个用户发出的？\n\n\n\n像这种情况下，发现浏览器的头部改变了，但是不能肯定这是否是一次来自攻击者的请求的话，比较好的措施就是弹出一个要求输入密码的输入框让用户输入，这样的话，对用户体验的影响不会很大，又能很有效地防止攻击。\n\n\n\n当然，你可以在系统中加入核查User-Agent头部的代码，类似Listing 3中的代码：\n\n**Listing 3:**\n\n\t<?php\n\tsession_start(); \n    \n\tif (md5($_SERVER['HTTP_USER_AGENT']) != $_SESSION['HTTP_USER_AGENT']) \n\t{   /* 弹出密码输入框 */   exit;\n\t} \n    \n\t?>\n\n\n\n\n当然，你先必须在第一次请求时，初始化session的时候，用MD5算法加密user agent信息并且保存在session中，类似下面listing4中的代码：\n\n**Listing 4:**\n\n\t<?php \n    \n\tsession_start(); \n    \n\t$_SESSION['HTTP_USER_AGENT'] = md5($_SERVER['HTTP_USER_AGENT']); \n    \n\t?>\n\n\n虽然不一定需要用MD5来加密这个User-Agent信息，但使用这种方式以后就不需要再过滤这个`$_SERVER['HTTP_USER_AGENT']`数据了。不然的话，在使用这个数据以前必须要进行数据过滤，**因为任何来自客户端的数据都是不可信任的，必须要注意这一点。**\n\n\n\n在你检查这个User-Agent客户端头部信息以后，做为一个攻击者必须要完成两步才能劫持一个session:\n\n*\t获取一个合法的session id\n\n*\t包含一个相同的User-Agent头部在伪造的请求中\n\n你可能会说，居然攻击者能获得有效的session id,那么以他的水平，伪造一个相同的User-Agent不是件难事。不错，但是我们可以说这至少给他添加了一些麻烦，在一定程度上也增加了session机制的安全性。\n\n\n\n你应该也能想到了，既然我们可以检查User-Agent这个头部来加强安全性，那么不妨再利用其它的一些头部信息，把他们组合起来生成一个加密的token，并且让客户端在后续的请求中携带这个token！这样的话，攻击者基本上不可能猜测出这样一个token是怎么生成出来的。这好比你用信用卡在超市付款，一个你必须有信用卡(好比session id)，另外你也必须输入一个支付密码(好比token),这有这两者都符合的情况下，你才能成功进入账号付款。 看下面一段代码：\n\n\t<?php \n\tsession_start(); \n\t$token = 'SHIFLETT' . $_SERVER['HTTP_USER_AGENT'];\n\t$_SESSION['token'] = md5($token . session_id()); \n\t?>\n\n\n**注意**：Accept这个头部不应该被用来生成token,因为有些浏览器会自动改变这个头部，当用户刷新浏览器的时候。\n\n在你的验证机制中加入了这个非常难于猜测出来的token以后，安全性会得到很大的提升。假如这个token通过像session id一样的方式来进行传递，这种情况下，一个攻击者必须完成必要的3步来劫持用户的session:\n\n*\t获取一个合法的session ID\n\n*\t在请求中加入相同的User-Agent头部,用与生成token\n\n*\t在请求中携带被攻击者的token\n\n这里面有个问题。如果session id以及token都是通过GET数据来传递的话，那么对于能获取session ID的攻击者，同样就能够获取到这个token。所以，比较安全靠谱的方式应该是利用两种不同的数据传递方式来分别传递session id以及token。例如，通过cookie来传递session id,然后通过GET数据来传递token。因此，假如攻击者通过某种手段获得了这个唯一的用户身份标识，也是不太可能同时轻松地获取到这个token，它相对来说依然是安全的。\n\n\n\n还有很多的技术手段可以用来加强你的session机制的安全性。希望你在大致了解session的内部本质以后，可以设计出适合你的应用系统的验证机制，从而大大的提高系统的安全性。毕竟，你是最熟悉当下你开发的系统的开发者之一，可以根据实际情况来实施一些特有的，额外的安全措施。\n\n---\n\n###总结\n\n以上只是大概地描述了session的工作机制，以及简单地阐述了一些安全措施。但要记住，以上的方法都是能够加强安全性，不是说能够完全保护你的系统，希望读者自己再去调研相关内容。在这个调研过程中，相信你会学到很有实际使用价值的方案。\n\n**参考**：[原文链接](http://blogread.cn/it/article/6004?f=wb)\n\n（完）\n","slug":"201408-2014-08-06-session-safe-notes","published":1,"date":"2018-04-12T15:20:38.823Z","updated":"2018-04-12T15:20:38.823Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5j003lass6ivirp3l5","content":"<p>一直以来很多开发者都认为php内置的session管理机制是具有一定的安全性，可以对一般的session攻击起到防御。事实上，这是一种误解，php团队只实现了一种方便有效的机制。具体的安全措施，应该有应用程序的开发团队来实施。</p>\n<p>现在，我们来看下一个比较常规的针对session的攻击：</p>\n<ul>\n<li><p>用户访问<code>http://www.example.org</code>，并且登录。</p>\n</li>\n<li><p><code>example.org</code>的服务器设置指示客户端设置相关<code>cookie - PHPSESSID=12345</code></p>\n</li>\n<li><p>攻击者这时访问<code>http://www.example.org/</code>,并且在请求中携带了对应的<code>cookie - PHPSESSID=12345</code></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>这样情况下，因为<code>example.orge</code>的服务器通过PHPSESSID来辨认对应的用户的，所以服务器错把攻击者当成了合法的用户。</p>\n<p>整个过程的描述，请看下面的示例图：</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63jw1ej2tiwbwbjj20b405kgls.jpg\" alt=\"pic\"></p>\n<p>当然这种攻击的方式，前提条件是攻击者必须通过某种手段固定，劫持或者猜测出某个合法用户的PHPSESSID。虽然这看起来难度很高，但是也不是不可能的事情。</p>\n<p>###安全性的加强</p>\n<p>有很多技术可以用来加强Session的安全性，主要思想就是要使验证的过程对于合法用户来说，越简单越好，然后对于攻击者来说，步骤要越复杂越好。当然，这似乎是比较难于平衡的，要根据你应用程序的具体设计来做决策。</p>\n<p>最简单的居于HTTP/1.1请求包括请求行以及一些Host的头部：</p>\n<pre><code>GET / HTTP/1.1\n\nHost: example.org\n</code></pre><p>如果客户端通过PHPSESSID传递相关的session标识符，可以将PHPSESSID放在cookie头部中进行传递:</p>\n<pre><code>GET / HTTP/1.1\n\nHost: example.org\n\nCookie: PHPSESSID=12345\n</code></pre><p>同样地，客户端也可以将session标识符放在请求的url中进行传递。</p>\n<pre><code>GET /?PHPSESSID=12345\n\nHTTP/1.1Host: example.org\n</code></pre><p>当然，session标识符也可以包含在POST数据中，但是这对用户体验有影响，所以这种方式很少采用。</p>\n<p>因为来自TCP/IP信息也不一定可以完全信任的，所以，对于web开发者来说，利用TCP/IP中的信息来加强安全性也是不太合适的。 不过，攻击者也必须提供一个合法用户的唯一的标识符，才能假扮成合法用户进入系统。因此，看起来唯一能够有效的保护系统的措施，就是尽量地隐藏session标识符或者使之难于猜测出来。最好就是两者都能实施。</p>\n<p>PHP会自动生成一个随机的session ID，基本来说是不可能被猜测出来的，所以这方面的安全还是有一定保障的。但是，要防止攻击者获取一个合法的session ID是相当困难的，这基本上不是开发者所能控制的。</p>\n<p>事实上，许多情况下都有可能导致session ID的泄露。 比如说，如果通过GET数据来传递session ID的话，就有可能暴露这个敏感的身份信息。因为，有的用户可能会将带有session ID的链接缓存，收藏或者发送在邮件内容中。Cookies是一种像相对来说安全一点的机制，但是用户是可以在客户端中禁止掉cookies的！在一些IE的版本中也有比较严重的安全漏洞，比较有名的就是会泄露cookies给一些有安全隐患的邪恶站点。</p>\n<p>因此，作为一个开发者，可以肯定session ID是不能被猜测出来的，但是还是有可能被攻击者使用某些方法获取到。所以，必须采取一些额外的安全措施来防止此类情况在你的应用程序中发生。</p>\n<p>实际上，一个标准的HTTP请求中除了Host等必须包含的头部，还包含了一些可选的头部.举一个例子，看下面的一个请求：</p>\n<pre><code>GET / HTTP/1.1\nHost: example.org\nCookie: PHPSESSID=12345\nUser-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1\nAccept: text/html;q=0.9, */*;q=0.1\nAccept-Charset: ISO-8859-1, utf-8;q=0.66, *;q=0.66\nAccept-Language: en\n</code></pre><p>我们可以看到，在以上的一个请求例子中包含了四个额外的头部，分别是User-Agent, Accept, Accept-Charset以及Accept-Language。因为这些头部不是必须的，所以完全依赖他们在你的应用程序中发挥作用是不太明智的。但是，<strong>如果一个用户的浏览器确实发送了这些头部到服务器，那么可以肯定的是在接下来的同一个用户通过同一个浏览器发送的请求中，必然也会携带这些头部。</strong>当然，这其中也会有极少数的特殊情况发生。假如以上例子是由一个当前的跟服务器建立了会话的用户发出的请求，考虑下面的一个请求：</p>\n<pre><code>GET / HTTP/1.1\nHost: example.org\nCookie: PHPSESSID=12345\nUser-Agent: Mozilla/5.0 (compatible; IE 6.0 Microsoft Windows XP)\n</code></pre><p>因为有相同的session id包含在请求的Cookie头部中，所以相同的php session将会被访问到。但是，请求里的User-Agent头部跟先前的请求中的信息是不同的，系统是否可以假定这两个请求是同一个用户发出的？</p>\n<p>像这种情况下，发现浏览器的头部改变了，但是不能肯定这是否是一次来自攻击者的请求的话，比较好的措施就是弹出一个要求输入密码的输入框让用户输入，这样的话，对用户体验的影响不会很大，又能很有效地防止攻击。</p>\n<p>当然，你可以在系统中加入核查User-Agent头部的代码，类似Listing 3中的代码：</p>\n<p><strong>Listing 3:</strong></p>\n<pre><code>&lt;?php\nsession_start(); \n\nif (md5($_SERVER[&apos;HTTP_USER_AGENT&apos;]) != $_SESSION[&apos;HTTP_USER_AGENT&apos;]) \n{   /* 弹出密码输入框 */   exit;\n} \n\n?&gt;\n</code></pre><p>当然，你先必须在第一次请求时，初始化session的时候，用MD5算法加密user agent信息并且保存在session中，类似下面listing4中的代码：</p>\n<p><strong>Listing 4:</strong></p>\n<pre><code>&lt;?php \n\nsession_start(); \n\n$_SESSION[&apos;HTTP_USER_AGENT&apos;] = md5($_SERVER[&apos;HTTP_USER_AGENT&apos;]); \n\n?&gt;\n</code></pre><p>虽然不一定需要用MD5来加密这个User-Agent信息，但使用这种方式以后就不需要再过滤这个<code>$_SERVER[&#39;HTTP_USER_AGENT&#39;]</code>数据了。不然的话，在使用这个数据以前必须要进行数据过滤，<strong>因为任何来自客户端的数据都是不可信任的，必须要注意这一点。</strong></p>\n<p>在你检查这个User-Agent客户端头部信息以后，做为一个攻击者必须要完成两步才能劫持一个session:</p>\n<ul>\n<li><p>获取一个合法的session id</p>\n</li>\n<li><p>包含一个相同的User-Agent头部在伪造的请求中</p>\n</li>\n</ul>\n<p>你可能会说，居然攻击者能获得有效的session id,那么以他的水平，伪造一个相同的User-Agent不是件难事。不错，但是我们可以说这至少给他添加了一些麻烦，在一定程度上也增加了session机制的安全性。</p>\n<p>你应该也能想到了，既然我们可以检查User-Agent这个头部来加强安全性，那么不妨再利用其它的一些头部信息，把他们组合起来生成一个加密的token，并且让客户端在后续的请求中携带这个token！这样的话，攻击者基本上不可能猜测出这样一个token是怎么生成出来的。这好比你用信用卡在超市付款，一个你必须有信用卡(好比session id)，另外你也必须输入一个支付密码(好比token),这有这两者都符合的情况下，你才能成功进入账号付款。 看下面一段代码：</p>\n<pre><code>&lt;?php \nsession_start(); \n$token = &apos;SHIFLETT&apos; . $_SERVER[&apos;HTTP_USER_AGENT&apos;];\n$_SESSION[&apos;token&apos;] = md5($token . session_id()); \n?&gt;\n</code></pre><p><strong>注意</strong>：Accept这个头部不应该被用来生成token,因为有些浏览器会自动改变这个头部，当用户刷新浏览器的时候。</p>\n<p>在你的验证机制中加入了这个非常难于猜测出来的token以后，安全性会得到很大的提升。假如这个token通过像session id一样的方式来进行传递，这种情况下，一个攻击者必须完成必要的3步来劫持用户的session:</p>\n<ul>\n<li><p>获取一个合法的session ID</p>\n</li>\n<li><p>在请求中加入相同的User-Agent头部,用与生成token</p>\n</li>\n<li><p>在请求中携带被攻击者的token</p>\n</li>\n</ul>\n<p>这里面有个问题。如果session id以及token都是通过GET数据来传递的话，那么对于能获取session ID的攻击者，同样就能够获取到这个token。所以，比较安全靠谱的方式应该是利用两种不同的数据传递方式来分别传递session id以及token。例如，通过cookie来传递session id,然后通过GET数据来传递token。因此，假如攻击者通过某种手段获得了这个唯一的用户身份标识，也是不太可能同时轻松地获取到这个token，它相对来说依然是安全的。</p>\n<p>还有很多的技术手段可以用来加强你的session机制的安全性。希望你在大致了解session的内部本质以后，可以设计出适合你的应用系统的验证机制，从而大大的提高系统的安全性。毕竟，你是最熟悉当下你开发的系统的开发者之一，可以根据实际情况来实施一些特有的，额外的安全措施。</p>\n<hr>\n<p>###总结</p>\n<p>以上只是大概地描述了session的工作机制，以及简单地阐述了一些安全措施。但要记住，以上的方法都是能够加强安全性，不是说能够完全保护你的系统，希望读者自己再去调研相关内容。在这个调研过程中，相信你会学到很有实际使用价值的方案。</p>\n<p><strong>参考</strong>：<a href=\"http://blogread.cn/it/article/6004?f=wb\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<p>（完）</p>\n","site":{"data":{}},"excerpt":"<p>一直以来很多开发者都认为php内置的session管理机制是具有一定的安全性，可以对一般的session攻击起到防御。事实上，这是一种误解，php团队只实现了一种方便有效的机制。具体的安全措施，应该有应用程序的开发团队来实施。</p>\n<p>现在，我们来看下一个比较常规的针对session的攻击：</p>\n<ul>\n<li><p>用户访问<code>http://www.example.org</code>，并且登录。</p>\n</li>\n<li><p><code>example.org</code>的服务器设置指示客户端设置相关<code>cookie - PHPSESSID=12345</code></p>\n</li>\n<li><p>攻击者这时访问<code>http://www.example.org/</code>,并且在请求中携带了对应的<code>cookie - PHPSESSID=12345</code></p>\n</li>\n</ul>","more":"<p>这样情况下，因为<code>example.orge</code>的服务器通过PHPSESSID来辨认对应的用户的，所以服务器错把攻击者当成了合法的用户。</p>\n<p>整个过程的描述，请看下面的示例图：</p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/bd5a4d63jw1ej2tiwbwbjj20b405kgls.jpg\" alt=\"pic\"></p>\n<p>当然这种攻击的方式，前提条件是攻击者必须通过某种手段固定，劫持或者猜测出某个合法用户的PHPSESSID。虽然这看起来难度很高，但是也不是不可能的事情。</p>\n<p>###安全性的加强</p>\n<p>有很多技术可以用来加强Session的安全性，主要思想就是要使验证的过程对于合法用户来说，越简单越好，然后对于攻击者来说，步骤要越复杂越好。当然，这似乎是比较难于平衡的，要根据你应用程序的具体设计来做决策。</p>\n<p>最简单的居于HTTP/1.1请求包括请求行以及一些Host的头部：</p>\n<pre><code>GET / HTTP/1.1\n\nHost: example.org\n</code></pre><p>如果客户端通过PHPSESSID传递相关的session标识符，可以将PHPSESSID放在cookie头部中进行传递:</p>\n<pre><code>GET / HTTP/1.1\n\nHost: example.org\n\nCookie: PHPSESSID=12345\n</code></pre><p>同样地，客户端也可以将session标识符放在请求的url中进行传递。</p>\n<pre><code>GET /?PHPSESSID=12345\n\nHTTP/1.1Host: example.org\n</code></pre><p>当然，session标识符也可以包含在POST数据中，但是这对用户体验有影响，所以这种方式很少采用。</p>\n<p>因为来自TCP/IP信息也不一定可以完全信任的，所以，对于web开发者来说，利用TCP/IP中的信息来加强安全性也是不太合适的。 不过，攻击者也必须提供一个合法用户的唯一的标识符，才能假扮成合法用户进入系统。因此，看起来唯一能够有效的保护系统的措施，就是尽量地隐藏session标识符或者使之难于猜测出来。最好就是两者都能实施。</p>\n<p>PHP会自动生成一个随机的session ID，基本来说是不可能被猜测出来的，所以这方面的安全还是有一定保障的。但是，要防止攻击者获取一个合法的session ID是相当困难的，这基本上不是开发者所能控制的。</p>\n<p>事实上，许多情况下都有可能导致session ID的泄露。 比如说，如果通过GET数据来传递session ID的话，就有可能暴露这个敏感的身份信息。因为，有的用户可能会将带有session ID的链接缓存，收藏或者发送在邮件内容中。Cookies是一种像相对来说安全一点的机制，但是用户是可以在客户端中禁止掉cookies的！在一些IE的版本中也有比较严重的安全漏洞，比较有名的就是会泄露cookies给一些有安全隐患的邪恶站点。</p>\n<p>因此，作为一个开发者，可以肯定session ID是不能被猜测出来的，但是还是有可能被攻击者使用某些方法获取到。所以，必须采取一些额外的安全措施来防止此类情况在你的应用程序中发生。</p>\n<p>实际上，一个标准的HTTP请求中除了Host等必须包含的头部，还包含了一些可选的头部.举一个例子，看下面的一个请求：</p>\n<pre><code>GET / HTTP/1.1\nHost: example.org\nCookie: PHPSESSID=12345\nUser-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1\nAccept: text/html;q=0.9, */*;q=0.1\nAccept-Charset: ISO-8859-1, utf-8;q=0.66, *;q=0.66\nAccept-Language: en\n</code></pre><p>我们可以看到，在以上的一个请求例子中包含了四个额外的头部，分别是User-Agent, Accept, Accept-Charset以及Accept-Language。因为这些头部不是必须的，所以完全依赖他们在你的应用程序中发挥作用是不太明智的。但是，<strong>如果一个用户的浏览器确实发送了这些头部到服务器，那么可以肯定的是在接下来的同一个用户通过同一个浏览器发送的请求中，必然也会携带这些头部。</strong>当然，这其中也会有极少数的特殊情况发生。假如以上例子是由一个当前的跟服务器建立了会话的用户发出的请求，考虑下面的一个请求：</p>\n<pre><code>GET / HTTP/1.1\nHost: example.org\nCookie: PHPSESSID=12345\nUser-Agent: Mozilla/5.0 (compatible; IE 6.0 Microsoft Windows XP)\n</code></pre><p>因为有相同的session id包含在请求的Cookie头部中，所以相同的php session将会被访问到。但是，请求里的User-Agent头部跟先前的请求中的信息是不同的，系统是否可以假定这两个请求是同一个用户发出的？</p>\n<p>像这种情况下，发现浏览器的头部改变了，但是不能肯定这是否是一次来自攻击者的请求的话，比较好的措施就是弹出一个要求输入密码的输入框让用户输入，这样的话，对用户体验的影响不会很大，又能很有效地防止攻击。</p>\n<p>当然，你可以在系统中加入核查User-Agent头部的代码，类似Listing 3中的代码：</p>\n<p><strong>Listing 3:</strong></p>\n<pre><code>&lt;?php\nsession_start(); \n\nif (md5($_SERVER[&apos;HTTP_USER_AGENT&apos;]) != $_SESSION[&apos;HTTP_USER_AGENT&apos;]) \n{   /* 弹出密码输入框 */   exit;\n} \n\n?&gt;\n</code></pre><p>当然，你先必须在第一次请求时，初始化session的时候，用MD5算法加密user agent信息并且保存在session中，类似下面listing4中的代码：</p>\n<p><strong>Listing 4:</strong></p>\n<pre><code>&lt;?php \n\nsession_start(); \n\n$_SESSION[&apos;HTTP_USER_AGENT&apos;] = md5($_SERVER[&apos;HTTP_USER_AGENT&apos;]); \n\n?&gt;\n</code></pre><p>虽然不一定需要用MD5来加密这个User-Agent信息，但使用这种方式以后就不需要再过滤这个<code>$_SERVER[&#39;HTTP_USER_AGENT&#39;]</code>数据了。不然的话，在使用这个数据以前必须要进行数据过滤，<strong>因为任何来自客户端的数据都是不可信任的，必须要注意这一点。</strong></p>\n<p>在你检查这个User-Agent客户端头部信息以后，做为一个攻击者必须要完成两步才能劫持一个session:</p>\n<ul>\n<li><p>获取一个合法的session id</p>\n</li>\n<li><p>包含一个相同的User-Agent头部在伪造的请求中</p>\n</li>\n</ul>\n<p>你可能会说，居然攻击者能获得有效的session id,那么以他的水平，伪造一个相同的User-Agent不是件难事。不错，但是我们可以说这至少给他添加了一些麻烦，在一定程度上也增加了session机制的安全性。</p>\n<p>你应该也能想到了，既然我们可以检查User-Agent这个头部来加强安全性，那么不妨再利用其它的一些头部信息，把他们组合起来生成一个加密的token，并且让客户端在后续的请求中携带这个token！这样的话，攻击者基本上不可能猜测出这样一个token是怎么生成出来的。这好比你用信用卡在超市付款，一个你必须有信用卡(好比session id)，另外你也必须输入一个支付密码(好比token),这有这两者都符合的情况下，你才能成功进入账号付款。 看下面一段代码：</p>\n<pre><code>&lt;?php \nsession_start(); \n$token = &apos;SHIFLETT&apos; . $_SERVER[&apos;HTTP_USER_AGENT&apos;];\n$_SESSION[&apos;token&apos;] = md5($token . session_id()); \n?&gt;\n</code></pre><p><strong>注意</strong>：Accept这个头部不应该被用来生成token,因为有些浏览器会自动改变这个头部，当用户刷新浏览器的时候。</p>\n<p>在你的验证机制中加入了这个非常难于猜测出来的token以后，安全性会得到很大的提升。假如这个token通过像session id一样的方式来进行传递，这种情况下，一个攻击者必须完成必要的3步来劫持用户的session:</p>\n<ul>\n<li><p>获取一个合法的session ID</p>\n</li>\n<li><p>在请求中加入相同的User-Agent头部,用与生成token</p>\n</li>\n<li><p>在请求中携带被攻击者的token</p>\n</li>\n</ul>\n<p>这里面有个问题。如果session id以及token都是通过GET数据来传递的话，那么对于能获取session ID的攻击者，同样就能够获取到这个token。所以，比较安全靠谱的方式应该是利用两种不同的数据传递方式来分别传递session id以及token。例如，通过cookie来传递session id,然后通过GET数据来传递token。因此，假如攻击者通过某种手段获得了这个唯一的用户身份标识，也是不太可能同时轻松地获取到这个token，它相对来说依然是安全的。</p>\n<p>还有很多的技术手段可以用来加强你的session机制的安全性。希望你在大致了解session的内部本质以后，可以设计出适合你的应用系统的验证机制，从而大大的提高系统的安全性。毕竟，你是最熟悉当下你开发的系统的开发者之一，可以根据实际情况来实施一些特有的，额外的安全措施。</p>\n<hr>\n<p>###总结</p>\n<p>以上只是大概地描述了session的工作机制，以及简单地阐述了一些安全措施。但要记住，以上的方法都是能够加强安全性，不是说能够完全保护你的系统，希望读者自己再去调研相关内容。在这个调研过程中，相信你会学到很有实际使用价值的方案。</p>\n<p><strong>参考</strong>：<a href=\"http://blogread.cn/it/article/6004?f=wb\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<p>（完）</p>"},{"layout":"post","title":"简明VIM练级备忘笔记","_content":"特此声明：本文以及链接参考自[左耳朵耗子]的[酷壳站点](coolshell.cn/articles/5426.html)\n\nvim的学习曲线相当的大，所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。所以如果你想以最快的速度学习人类史上最好的文本编辑器vim,你先得懂得如何在VIM幸存下来，然后一点一点地学习各种戏法。\n\n学习 vim 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。\n\n<!--more-->\n\n建议下面这四个步骤：\n\n*\t存活\n*\t感觉良好\n*\t觉得更好，更强，更快\n*\t使用VIM的超能力\n*\t当你走完这篇文章，你会成为一个vim的 superstar。\n\n\n好了，这里说明一下，这篇博客不是本人总结关于技术方面的问题的，因为vim编辑器是不可否认的强大，再加上本人想成为一个vimer，所以这里总结了下一些牛人关于讲解vim使用技巧的博客以及教程，纯粹是本人为了方便查询vim相关技术而总结或者说备忘的笔记。\n\n废话不多说，下面是一些牛人[主要是：左耳朵耗子]关于讲解vim练习的相关博客链接：\n\n##简明 Vim 练级攻略\n\n这里是链接：[http://coolshell.cn/articles/5426.html](http://coolshell.cn/articles/5426.html)\n\n##Vim的分屏功能\n\n这里是链接：[http://coolshell.cn/articles/1679.html](http://coolshell.cn/articles/1679.html)\n\n##无插件Vim编程技巧\n\n这里是链接：[http://coolshell.cn/articles/11312.html](http://coolshell.cn/articles/11312.html)\n\n##游戏：VIM大冒险\n\n这里是链接：[http://coolshell.cn/articles/7166.html](http://coolshell.cn/articles/7166.html)\n\n##将vim变得简单:如何在vim中得到你最喜爱的IDE特性\n\n这里是链接：[http://coolshell.cn/articles/894.html](http://coolshell.cn/articles/894.html)\n\n##Coming Home to Vim\n\n这里是链接：[http://stevelosh.com/blog/2010/09/coming-home-to-vim/](http://stevelosh.com/blog/2010/09/coming-home-to-vim/)\n\n---\n\n好了，就先到这吧，以后有好的关于vim方面的技术博客会陆续加进来的！\n\n\n","source":"_posts/201408/2014-08-11-vim_super_study.md","raw":"---\nlayout : post\ntitle : 简明VIM练级备忘笔记\ncategory : VIM\ntags : Linux Vim\n---\n特此声明：本文以及链接参考自[左耳朵耗子]的[酷壳站点](coolshell.cn/articles/5426.html)\n\nvim的学习曲线相当的大，所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。所以如果你想以最快的速度学习人类史上最好的文本编辑器vim,你先得懂得如何在VIM幸存下来，然后一点一点地学习各种戏法。\n\n学习 vim 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。\n\n<!--more-->\n\n建议下面这四个步骤：\n\n*\t存活\n*\t感觉良好\n*\t觉得更好，更强，更快\n*\t使用VIM的超能力\n*\t当你走完这篇文章，你会成为一个vim的 superstar。\n\n\n好了，这里说明一下，这篇博客不是本人总结关于技术方面的问题的，因为vim编辑器是不可否认的强大，再加上本人想成为一个vimer，所以这里总结了下一些牛人关于讲解vim使用技巧的博客以及教程，纯粹是本人为了方便查询vim相关技术而总结或者说备忘的笔记。\n\n废话不多说，下面是一些牛人[主要是：左耳朵耗子]关于讲解vim练习的相关博客链接：\n\n##简明 Vim 练级攻略\n\n这里是链接：[http://coolshell.cn/articles/5426.html](http://coolshell.cn/articles/5426.html)\n\n##Vim的分屏功能\n\n这里是链接：[http://coolshell.cn/articles/1679.html](http://coolshell.cn/articles/1679.html)\n\n##无插件Vim编程技巧\n\n这里是链接：[http://coolshell.cn/articles/11312.html](http://coolshell.cn/articles/11312.html)\n\n##游戏：VIM大冒险\n\n这里是链接：[http://coolshell.cn/articles/7166.html](http://coolshell.cn/articles/7166.html)\n\n##将vim变得简单:如何在vim中得到你最喜爱的IDE特性\n\n这里是链接：[http://coolshell.cn/articles/894.html](http://coolshell.cn/articles/894.html)\n\n##Coming Home to Vim\n\n这里是链接：[http://stevelosh.com/blog/2010/09/coming-home-to-vim/](http://stevelosh.com/blog/2010/09/coming-home-to-vim/)\n\n---\n\n好了，就先到这吧，以后有好的关于vim方面的技术博客会陆续加进来的！\n\n\n","slug":"201408-2014-08-11-vim-super-study","published":1,"date":"2018-04-12T15:20:38.824Z","updated":"2018-04-12T15:20:38.824Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5l003oass6bbunbsfk","content":"<p>特此声明：本文以及链接参考自[左耳朵耗子]的<a href=\"coolshell.cn/articles/5426.html\">酷壳站点</a></p>\n<p>vim的学习曲线相当的大，所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。所以如果你想以最快的速度学习人类史上最好的文本编辑器vim,你先得懂得如何在VIM幸存下来，然后一点一点地学习各种戏法。</p>\n<p>学习 vim 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。</p>\n<a id=\"more\"></a>\n<p>建议下面这四个步骤：</p>\n<ul>\n<li>存活</li>\n<li>感觉良好</li>\n<li>觉得更好，更强，更快</li>\n<li>使用VIM的超能力</li>\n<li>当你走完这篇文章，你会成为一个vim的 superstar。</li>\n</ul>\n<p>好了，这里说明一下，这篇博客不是本人总结关于技术方面的问题的，因为vim编辑器是不可否认的强大，再加上本人想成为一个vimer，所以这里总结了下一些牛人关于讲解vim使用技巧的博客以及教程，纯粹是本人为了方便查询vim相关技术而总结或者说备忘的笔记。</p>\n<p>废话不多说，下面是一些牛人[主要是：左耳朵耗子]关于讲解vim练习的相关博客链接：</p>\n<p>##简明 Vim 练级攻略</p>\n<p>这里是链接：<a href=\"http://coolshell.cn/articles/5426.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/5426.html</a></p>\n<p>##Vim的分屏功能</p>\n<p>这里是链接：<a href=\"http://coolshell.cn/articles/1679.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/1679.html</a></p>\n<p>##无插件Vim编程技巧</p>\n<p>这里是链接：<a href=\"http://coolshell.cn/articles/11312.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/11312.html</a></p>\n<p>##游戏：VIM大冒险</p>\n<p>这里是链接：<a href=\"http://coolshell.cn/articles/7166.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/7166.html</a></p>\n<p>##将vim变得简单:如何在vim中得到你最喜爱的IDE特性</p>\n<p>这里是链接：<a href=\"http://coolshell.cn/articles/894.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/894.html</a></p>\n<p>##Coming Home to Vim</p>\n<p>这里是链接：<a href=\"http://stevelosh.com/blog/2010/09/coming-home-to-vim/\" target=\"_blank\" rel=\"noopener\">http://stevelosh.com/blog/2010/09/coming-home-to-vim/</a></p>\n<hr>\n<p>好了，就先到这吧，以后有好的关于vim方面的技术博客会陆续加进来的！</p>\n","site":{"data":{}},"excerpt":"<p>特此声明：本文以及链接参考自[左耳朵耗子]的<a href=\"coolshell.cn/articles/5426.html\">酷壳站点</a></p>\n<p>vim的学习曲线相当的大，所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。所以如果你想以最快的速度学习人类史上最好的文本编辑器vim,你先得懂得如何在VIM幸存下来，然后一点一点地学习各种戏法。</p>\n<p>学习 vim 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。</p>","more":"<p>建议下面这四个步骤：</p>\n<ul>\n<li>存活</li>\n<li>感觉良好</li>\n<li>觉得更好，更强，更快</li>\n<li>使用VIM的超能力</li>\n<li>当你走完这篇文章，你会成为一个vim的 superstar。</li>\n</ul>\n<p>好了，这里说明一下，这篇博客不是本人总结关于技术方面的问题的，因为vim编辑器是不可否认的强大，再加上本人想成为一个vimer，所以这里总结了下一些牛人关于讲解vim使用技巧的博客以及教程，纯粹是本人为了方便查询vim相关技术而总结或者说备忘的笔记。</p>\n<p>废话不多说，下面是一些牛人[主要是：左耳朵耗子]关于讲解vim练习的相关博客链接：</p>\n<p>##简明 Vim 练级攻略</p>\n<p>这里是链接：<a href=\"http://coolshell.cn/articles/5426.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/5426.html</a></p>\n<p>##Vim的分屏功能</p>\n<p>这里是链接：<a href=\"http://coolshell.cn/articles/1679.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/1679.html</a></p>\n<p>##无插件Vim编程技巧</p>\n<p>这里是链接：<a href=\"http://coolshell.cn/articles/11312.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/11312.html</a></p>\n<p>##游戏：VIM大冒险</p>\n<p>这里是链接：<a href=\"http://coolshell.cn/articles/7166.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/7166.html</a></p>\n<p>##将vim变得简单:如何在vim中得到你最喜爱的IDE特性</p>\n<p>这里是链接：<a href=\"http://coolshell.cn/articles/894.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/894.html</a></p>\n<p>##Coming Home to Vim</p>\n<p>这里是链接：<a href=\"http://stevelosh.com/blog/2010/09/coming-home-to-vim/\" target=\"_blank\" rel=\"noopener\">http://stevelosh.com/blog/2010/09/coming-home-to-vim/</a></p>\n<hr>\n<p>好了，就先到这吧，以后有好的关于vim方面的技术博客会陆续加进来的！</p>"},{"layout":"post","title":"Linux下语系编码问题总结","_content":"我们都知道，我们操作系统的文件都会有一个编码格式[比如：utf8、gb2312...],但是很多情况下，我们会需要将现有文件的语系编码进行转换，比如将utf8的文件转换为gb2312格式，那该怎么办？难道我们需要将全部文件都打开，然后转存诚所需要的编码格式嘛？那样我们肯定会吐血...\n\n`iconv`命令就会帮助我们做到，下面介绍下如何使用他来方便我们。\n\n首先，我们要准备一个utf8格式的文件呢，来`file 文件`查看下：\n\n\n\thanson@linux-host:~/Linux_Demo$ file iconv.f\n\ticonv.f: HTML document, UTF-8 Unicode text, with very long lines\n\n\n可以看出`iconv.f`是一个utf8格式的文件。\n<!--more-->\n\n\n这里介绍下如何使用`iconv`这个很有用的格式转换的命令:\n\n\t参数：\n\t--list ：列出所有可被iconv转换的语系数据格式\n\n\t-f ： 后接旧的语系格式\n\t-t ： 后接新的语系格式\n\t-o file ： 如果想要保留原本的文件，可以使用-o new file来创建新的编码文件\n\n废话不多说，来实地操作下：\n\n\thanson@linux-host:~/Linux_Demo$ iconv -f utf8 -t gb2312 iconv.f -o iconv.f.gb2312\n\n\t下面查看下格式：\n\thanson@linux-host:~/Linux_Demo$ file iconv*\n\ticonv.f:        HTML document, UTF-8 Unicode text, with very long lines\n\ticonv.f.gb2312: HTML document, ISO-8859 text, with very long lines\n\n\n可以看出，将utf8格式的文件已经成功转换成gb2312格式的文件，是不是很方便啦。\n\n\n\n","source":"_posts/201408/2014-08-11-linux_code_type_note.md","raw":"---\nlayout : post\ntitle : Linux下语系编码问题总结\ncategory : Linux\ntags : Linux\n---\n我们都知道，我们操作系统的文件都会有一个编码格式[比如：utf8、gb2312...],但是很多情况下，我们会需要将现有文件的语系编码进行转换，比如将utf8的文件转换为gb2312格式，那该怎么办？难道我们需要将全部文件都打开，然后转存诚所需要的编码格式嘛？那样我们肯定会吐血...\n\n`iconv`命令就会帮助我们做到，下面介绍下如何使用他来方便我们。\n\n首先，我们要准备一个utf8格式的文件呢，来`file 文件`查看下：\n\n\n\thanson@linux-host:~/Linux_Demo$ file iconv.f\n\ticonv.f: HTML document, UTF-8 Unicode text, with very long lines\n\n\n可以看出`iconv.f`是一个utf8格式的文件。\n<!--more-->\n\n\n这里介绍下如何使用`iconv`这个很有用的格式转换的命令:\n\n\t参数：\n\t--list ：列出所有可被iconv转换的语系数据格式\n\n\t-f ： 后接旧的语系格式\n\t-t ： 后接新的语系格式\n\t-o file ： 如果想要保留原本的文件，可以使用-o new file来创建新的编码文件\n\n废话不多说，来实地操作下：\n\n\thanson@linux-host:~/Linux_Demo$ iconv -f utf8 -t gb2312 iconv.f -o iconv.f.gb2312\n\n\t下面查看下格式：\n\thanson@linux-host:~/Linux_Demo$ file iconv*\n\ticonv.f:        HTML document, UTF-8 Unicode text, with very long lines\n\ticonv.f.gb2312: HTML document, ISO-8859 text, with very long lines\n\n\n可以看出，将utf8格式的文件已经成功转换成gb2312格式的文件，是不是很方便啦。\n\n\n\n","slug":"201408-2014-08-11-linux-code-type-note","published":1,"date":"2018-04-12T15:20:38.823Z","updated":"2018-04-12T15:20:38.823Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5n003sass6tadjgved","content":"<p>我们都知道，我们操作系统的文件都会有一个编码格式[比如：utf8、gb2312…],但是很多情况下，我们会需要将现有文件的语系编码进行转换，比如将utf8的文件转换为gb2312格式，那该怎么办？难道我们需要将全部文件都打开，然后转存诚所需要的编码格式嘛？那样我们肯定会吐血…</p>\n<p><code>iconv</code>命令就会帮助我们做到，下面介绍下如何使用他来方便我们。</p>\n<p>首先，我们要准备一个utf8格式的文件呢，来<code>file 文件</code>查看下：</p>\n<pre><code>hanson@linux-host:~/Linux_Demo$ file iconv.f\niconv.f: HTML document, UTF-8 Unicode text, with very long lines\n</code></pre><p>可以看出<code>iconv.f</code>是一个utf8格式的文件。<br><a id=\"more\"></a></p>\n<p>这里介绍下如何使用<code>iconv</code>这个很有用的格式转换的命令:</p>\n<pre><code>参数：\n--list ：列出所有可被iconv转换的语系数据格式\n\n-f ： 后接旧的语系格式\n-t ： 后接新的语系格式\n-o file ： 如果想要保留原本的文件，可以使用-o new file来创建新的编码文件\n</code></pre><p>废话不多说，来实地操作下：</p>\n<pre><code>hanson@linux-host:~/Linux_Demo$ iconv -f utf8 -t gb2312 iconv.f -o iconv.f.gb2312\n\n下面查看下格式：\nhanson@linux-host:~/Linux_Demo$ file iconv*\niconv.f:        HTML document, UTF-8 Unicode text, with very long lines\niconv.f.gb2312: HTML document, ISO-8859 text, with very long lines\n</code></pre><p>可以看出，将utf8格式的文件已经成功转换成gb2312格式的文件，是不是很方便啦。</p>\n","site":{"data":{}},"excerpt":"<p>我们都知道，我们操作系统的文件都会有一个编码格式[比如：utf8、gb2312…],但是很多情况下，我们会需要将现有文件的语系编码进行转换，比如将utf8的文件转换为gb2312格式，那该怎么办？难道我们需要将全部文件都打开，然后转存诚所需要的编码格式嘛？那样我们肯定会吐血…</p>\n<p><code>iconv</code>命令就会帮助我们做到，下面介绍下如何使用他来方便我们。</p>\n<p>首先，我们要准备一个utf8格式的文件呢，来<code>file 文件</code>查看下：</p>\n<pre><code>hanson@linux-host:~/Linux_Demo$ file iconv.f\niconv.f: HTML document, UTF-8 Unicode text, with very long lines\n</code></pre><p>可以看出<code>iconv.f</code>是一个utf8格式的文件。<br>","more":"</p>\n<p>这里介绍下如何使用<code>iconv</code>这个很有用的格式转换的命令:</p>\n<pre><code>参数：\n--list ：列出所有可被iconv转换的语系数据格式\n\n-f ： 后接旧的语系格式\n-t ： 后接新的语系格式\n-o file ： 如果想要保留原本的文件，可以使用-o new file来创建新的编码文件\n</code></pre><p>废话不多说，来实地操作下：</p>\n<pre><code>hanson@linux-host:~/Linux_Demo$ iconv -f utf8 -t gb2312 iconv.f -o iconv.f.gb2312\n\n下面查看下格式：\nhanson@linux-host:~/Linux_Demo$ file iconv*\niconv.f:        HTML document, UTF-8 Unicode text, with very long lines\niconv.f.gb2312: HTML document, ISO-8859 text, with very long lines\n</code></pre><p>可以看出，将utf8格式的文件已经成功转换成gb2312格式的文件，是不是很方便啦。</p>"},{"layout":"post","title":"Sed数据处理","_content":"在Linux下有两个非常强大的数据处理工具，一个是sed，另一个是awk。这里暂且介绍sed如何使用好了，作为备忘笔记，以便以后查看。\n\nsed本身是一个管道命令，可以分析stdin的，而且sed可以将数据进行替换、删除、新增、选取特定行的功能。这里要明白的是，与awk将一行数据分为“多个字段”来处理相比，sed常常作用于一整行的处理。\n\n首先，先了解下sed工具的用法：\n\n\thanson@linux-host:~$ sed [-nefir] [动作] 文件\n\t参数：\n\t    -n：安静模式，加上-n后只有经过sed特殊处理过的数据才会显示在屏幕上，不加-n很可能会造成重复输出数据\n\t    -e：直接在命令行模式上进行动作编辑\n\t    -f：将sed动作写入一个文件，-f filename 则可以执行文件内的动作\n\t    -r：sed的动作支持的是扩展型正则表达式语法\n\t    -i：直接修改读取的文件内容，而不是输出到屏幕\n\n<!--more-->\n\n\t动作：\n\t    n1,n2 [function]：选取n1,n2之间的行进行动作操作\n\t\n\tfunction参数：\n\t    a：新增，会出现在下一行\n\t    i：插入，会出现在上一行\n\t    c：替换，c后面接字符串，可以替换n1,n2之间的行\n\t    s：替换，搭配正则表达式\n\t    d：删除，通常d后面不解参数\n\t    p：打印，一般与sed -n一起使用\n\n\n##新增与删除\n\n将passwd文件的2,5行删除：\n\n\thanson@linux-host:~$ nl passwd  | sed '2,5d' \n\n**注意：**sed后跟的动作，必须在单引号之间。\n\n在第一行的上一行新增加一行数据：\n\n\thanson@linux-host:~$ nl passwd  | sed '1i This is a new line.'\n\n当添加多行时，可以使用\"\\\"来进行新行的增加：\n\n\thanson@linux-host:~$ nl passwd  | sed '1a first line...\\\n\t> second line...'\n\n注意：当使用\"\\\"进行新行添加时，\"\\\"后面务必紧跟enter健。\n\n##替换与显示\n\n将2,5行替换为“2,5lines”：\n\t\n\thanson@linux-host:~$ nl passwd  | sed '2,5c 2,5lines'\n\n想要打印出5,10之间的数据呢？\n\n\thanson@linux-host:~$ nl passwd  | sed '5,10p'\n\t笨的方法是：\n\thanson@linux-host:~$ nl passwd  | head -n 10 | tail -n 5\n\n\n##数据的替换\n\nsed以行为单位进行数据的替换时，与vim相当类似，格式如下：\n\n\tsed 's/要被替换的字符串/新的字符串/g'\n\n下面一个实例，查询出本机的ip地址：\n\n\t查看eth0:\n\thanson@linux-host:~$ ifconfig eth0\n\teth0      Link encap:以太网  硬件地址 08:9e:01:31:a4:8f  \n\t\t  inet 地址:192.168.1.102  广播:192.168.1.255  掩码:255.255.255.0\n\t\t  inet6 地址: fe80::a9e:1ff:fe31:a48f/64 Scope:Link\n\t\t  UP BROADCAST RUNNING MULTICAST  MTU:1500  跃点数:1\n\t\t  ...\n\t\n\t开始查询：\n\thanson@linux-host:~$ ifconfig eth0 | grep 'inet 地址' | sed 's/^.*地址://g' | sed 's/广播.*$//g'\n\t192.168.1.102\n\n\n##直接修改文件内容\n\nsed可以直接进行文件的修改，而不用使用管道命令或者重定向，但这是一个危险操作，一定要注意：\n\n\t\n\thanson@linux-host:~$ sed -i '$a #this is a new line.' passwd \n\thanson@linux-host:~$ cat passwd | tail -n 1\n\t#this is a new line.\n\nsed 的\"-i\"参数可以直接修改文件的内容，这个功能非常有帮助，甚至不需要vim去修改。\n\n---\n\n更多关于sed使用讲解，请参考[左耳朵耗子]的[sed简明教程](http://coolshell.cn/articles/9104.html)\n\n\n(end)\n","source":"_posts/201408/2014-08-17-sed_tool_notes.md","raw":"---\nlayout : post\ntitle : Sed数据处理\ncategory : Linux\ntags : sed linux\n---\n在Linux下有两个非常强大的数据处理工具，一个是sed，另一个是awk。这里暂且介绍sed如何使用好了，作为备忘笔记，以便以后查看。\n\nsed本身是一个管道命令，可以分析stdin的，而且sed可以将数据进行替换、删除、新增、选取特定行的功能。这里要明白的是，与awk将一行数据分为“多个字段”来处理相比，sed常常作用于一整行的处理。\n\n首先，先了解下sed工具的用法：\n\n\thanson@linux-host:~$ sed [-nefir] [动作] 文件\n\t参数：\n\t    -n：安静模式，加上-n后只有经过sed特殊处理过的数据才会显示在屏幕上，不加-n很可能会造成重复输出数据\n\t    -e：直接在命令行模式上进行动作编辑\n\t    -f：将sed动作写入一个文件，-f filename 则可以执行文件内的动作\n\t    -r：sed的动作支持的是扩展型正则表达式语法\n\t    -i：直接修改读取的文件内容，而不是输出到屏幕\n\n<!--more-->\n\n\t动作：\n\t    n1,n2 [function]：选取n1,n2之间的行进行动作操作\n\t\n\tfunction参数：\n\t    a：新增，会出现在下一行\n\t    i：插入，会出现在上一行\n\t    c：替换，c后面接字符串，可以替换n1,n2之间的行\n\t    s：替换，搭配正则表达式\n\t    d：删除，通常d后面不解参数\n\t    p：打印，一般与sed -n一起使用\n\n\n##新增与删除\n\n将passwd文件的2,5行删除：\n\n\thanson@linux-host:~$ nl passwd  | sed '2,5d' \n\n**注意：**sed后跟的动作，必须在单引号之间。\n\n在第一行的上一行新增加一行数据：\n\n\thanson@linux-host:~$ nl passwd  | sed '1i This is a new line.'\n\n当添加多行时，可以使用\"\\\"来进行新行的增加：\n\n\thanson@linux-host:~$ nl passwd  | sed '1a first line...\\\n\t> second line...'\n\n注意：当使用\"\\\"进行新行添加时，\"\\\"后面务必紧跟enter健。\n\n##替换与显示\n\n将2,5行替换为“2,5lines”：\n\t\n\thanson@linux-host:~$ nl passwd  | sed '2,5c 2,5lines'\n\n想要打印出5,10之间的数据呢？\n\n\thanson@linux-host:~$ nl passwd  | sed '5,10p'\n\t笨的方法是：\n\thanson@linux-host:~$ nl passwd  | head -n 10 | tail -n 5\n\n\n##数据的替换\n\nsed以行为单位进行数据的替换时，与vim相当类似，格式如下：\n\n\tsed 's/要被替换的字符串/新的字符串/g'\n\n下面一个实例，查询出本机的ip地址：\n\n\t查看eth0:\n\thanson@linux-host:~$ ifconfig eth0\n\teth0      Link encap:以太网  硬件地址 08:9e:01:31:a4:8f  \n\t\t  inet 地址:192.168.1.102  广播:192.168.1.255  掩码:255.255.255.0\n\t\t  inet6 地址: fe80::a9e:1ff:fe31:a48f/64 Scope:Link\n\t\t  UP BROADCAST RUNNING MULTICAST  MTU:1500  跃点数:1\n\t\t  ...\n\t\n\t开始查询：\n\thanson@linux-host:~$ ifconfig eth0 | grep 'inet 地址' | sed 's/^.*地址://g' | sed 's/广播.*$//g'\n\t192.168.1.102\n\n\n##直接修改文件内容\n\nsed可以直接进行文件的修改，而不用使用管道命令或者重定向，但这是一个危险操作，一定要注意：\n\n\t\n\thanson@linux-host:~$ sed -i '$a #this is a new line.' passwd \n\thanson@linux-host:~$ cat passwd | tail -n 1\n\t#this is a new line.\n\nsed 的\"-i\"参数可以直接修改文件的内容，这个功能非常有帮助，甚至不需要vim去修改。\n\n---\n\n更多关于sed使用讲解，请参考[左耳朵耗子]的[sed简明教程](http://coolshell.cn/articles/9104.html)\n\n\n(end)\n","slug":"201408-2014-08-17-sed-tool-notes","published":1,"date":"2018-04-12T15:20:38.824Z","updated":"2018-04-12T15:20:38.824Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5p003wass68cff4y3x","content":"<p>在Linux下有两个非常强大的数据处理工具，一个是sed，另一个是awk。这里暂且介绍sed如何使用好了，作为备忘笔记，以便以后查看。</p>\n<p>sed本身是一个管道命令，可以分析stdin的，而且sed可以将数据进行替换、删除、新增、选取特定行的功能。这里要明白的是，与awk将一行数据分为“多个字段”来处理相比，sed常常作用于一整行的处理。</p>\n<p>首先，先了解下sed工具的用法：</p>\n<pre><code>hanson@linux-host:~$ sed [-nefir] [动作] 文件\n参数：\n    -n：安静模式，加上-n后只有经过sed特殊处理过的数据才会显示在屏幕上，不加-n很可能会造成重复输出数据\n    -e：直接在命令行模式上进行动作编辑\n    -f：将sed动作写入一个文件，-f filename 则可以执行文件内的动作\n    -r：sed的动作支持的是扩展型正则表达式语法\n    -i：直接修改读取的文件内容，而不是输出到屏幕\n</code></pre><a id=\"more\"></a>\n<pre><code>动作：\n    n1,n2 [function]：选取n1,n2之间的行进行动作操作\n\nfunction参数：\n    a：新增，会出现在下一行\n    i：插入，会出现在上一行\n    c：替换，c后面接字符串，可以替换n1,n2之间的行\n    s：替换，搭配正则表达式\n    d：删除，通常d后面不解参数\n    p：打印，一般与sed -n一起使用\n</code></pre><p>##新增与删除</p>\n<p>将passwd文件的2,5行删除：</p>\n<pre><code>hanson@linux-host:~$ nl passwd  | sed &apos;2,5d&apos; \n</code></pre><p><strong>注意：</strong>sed后跟的动作，必须在单引号之间。</p>\n<p>在第一行的上一行新增加一行数据：</p>\n<pre><code>hanson@linux-host:~$ nl passwd  | sed &apos;1i This is a new line.&apos;\n</code></pre><p>当添加多行时，可以使用”\\”来进行新行的增加：</p>\n<pre><code>hanson@linux-host:~$ nl passwd  | sed &apos;1a first line...\\\n&gt; second line...&apos;\n</code></pre><p>注意：当使用”\\”进行新行添加时，”\\”后面务必紧跟enter健。</p>\n<p>##替换与显示</p>\n<p>将2,5行替换为“2,5lines”：</p>\n<pre><code>hanson@linux-host:~$ nl passwd  | sed &apos;2,5c 2,5lines&apos;\n</code></pre><p>想要打印出5,10之间的数据呢？</p>\n<pre><code>hanson@linux-host:~$ nl passwd  | sed &apos;5,10p&apos;\n笨的方法是：\nhanson@linux-host:~$ nl passwd  | head -n 10 | tail -n 5\n</code></pre><p>##数据的替换</p>\n<p>sed以行为单位进行数据的替换时，与vim相当类似，格式如下：</p>\n<pre><code>sed &apos;s/要被替换的字符串/新的字符串/g&apos;\n</code></pre><p>下面一个实例，查询出本机的ip地址：</p>\n<pre><code>查看eth0:\nhanson@linux-host:~$ ifconfig eth0\neth0      Link encap:以太网  硬件地址 08:9e:01:31:a4:8f  \n      inet 地址:192.168.1.102  广播:192.168.1.255  掩码:255.255.255.0\n      inet6 地址: fe80::a9e:1ff:fe31:a48f/64 Scope:Link\n      UP BROADCAST RUNNING MULTICAST  MTU:1500  跃点数:1\n      ...\n\n开始查询：\nhanson@linux-host:~$ ifconfig eth0 | grep &apos;inet 地址&apos; | sed &apos;s/^.*地址://g&apos; | sed &apos;s/广播.*$//g&apos;\n192.168.1.102\n</code></pre><p>##直接修改文件内容</p>\n<p>sed可以直接进行文件的修改，而不用使用管道命令或者重定向，但这是一个危险操作，一定要注意：</p>\n<pre><code>hanson@linux-host:~$ sed -i &apos;$a #this is a new line.&apos; passwd \nhanson@linux-host:~$ cat passwd | tail -n 1\n#this is a new line.\n</code></pre><p>sed 的”-i”参数可以直接修改文件的内容，这个功能非常有帮助，甚至不需要vim去修改。</p>\n<hr>\n<p>更多关于sed使用讲解，请参考[左耳朵耗子]的<a href=\"http://coolshell.cn/articles/9104.html\" target=\"_blank\" rel=\"noopener\">sed简明教程</a></p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>在Linux下有两个非常强大的数据处理工具，一个是sed，另一个是awk。这里暂且介绍sed如何使用好了，作为备忘笔记，以便以后查看。</p>\n<p>sed本身是一个管道命令，可以分析stdin的，而且sed可以将数据进行替换、删除、新增、选取特定行的功能。这里要明白的是，与awk将一行数据分为“多个字段”来处理相比，sed常常作用于一整行的处理。</p>\n<p>首先，先了解下sed工具的用法：</p>\n<pre><code>hanson@linux-host:~$ sed [-nefir] [动作] 文件\n参数：\n    -n：安静模式，加上-n后只有经过sed特殊处理过的数据才会显示在屏幕上，不加-n很可能会造成重复输出数据\n    -e：直接在命令行模式上进行动作编辑\n    -f：将sed动作写入一个文件，-f filename 则可以执行文件内的动作\n    -r：sed的动作支持的是扩展型正则表达式语法\n    -i：直接修改读取的文件内容，而不是输出到屏幕\n</code></pre>","more":"<pre><code>动作：\n    n1,n2 [function]：选取n1,n2之间的行进行动作操作\n\nfunction参数：\n    a：新增，会出现在下一行\n    i：插入，会出现在上一行\n    c：替换，c后面接字符串，可以替换n1,n2之间的行\n    s：替换，搭配正则表达式\n    d：删除，通常d后面不解参数\n    p：打印，一般与sed -n一起使用\n</code></pre><p>##新增与删除</p>\n<p>将passwd文件的2,5行删除：</p>\n<pre><code>hanson@linux-host:~$ nl passwd  | sed &apos;2,5d&apos; \n</code></pre><p><strong>注意：</strong>sed后跟的动作，必须在单引号之间。</p>\n<p>在第一行的上一行新增加一行数据：</p>\n<pre><code>hanson@linux-host:~$ nl passwd  | sed &apos;1i This is a new line.&apos;\n</code></pre><p>当添加多行时，可以使用”\\”来进行新行的增加：</p>\n<pre><code>hanson@linux-host:~$ nl passwd  | sed &apos;1a first line...\\\n&gt; second line...&apos;\n</code></pre><p>注意：当使用”\\”进行新行添加时，”\\”后面务必紧跟enter健。</p>\n<p>##替换与显示</p>\n<p>将2,5行替换为“2,5lines”：</p>\n<pre><code>hanson@linux-host:~$ nl passwd  | sed &apos;2,5c 2,5lines&apos;\n</code></pre><p>想要打印出5,10之间的数据呢？</p>\n<pre><code>hanson@linux-host:~$ nl passwd  | sed &apos;5,10p&apos;\n笨的方法是：\nhanson@linux-host:~$ nl passwd  | head -n 10 | tail -n 5\n</code></pre><p>##数据的替换</p>\n<p>sed以行为单位进行数据的替换时，与vim相当类似，格式如下：</p>\n<pre><code>sed &apos;s/要被替换的字符串/新的字符串/g&apos;\n</code></pre><p>下面一个实例，查询出本机的ip地址：</p>\n<pre><code>查看eth0:\nhanson@linux-host:~$ ifconfig eth0\neth0      Link encap:以太网  硬件地址 08:9e:01:31:a4:8f  \n      inet 地址:192.168.1.102  广播:192.168.1.255  掩码:255.255.255.0\n      inet6 地址: fe80::a9e:1ff:fe31:a48f/64 Scope:Link\n      UP BROADCAST RUNNING MULTICAST  MTU:1500  跃点数:1\n      ...\n\n开始查询：\nhanson@linux-host:~$ ifconfig eth0 | grep &apos;inet 地址&apos; | sed &apos;s/^.*地址://g&apos; | sed &apos;s/广播.*$//g&apos;\n192.168.1.102\n</code></pre><p>##直接修改文件内容</p>\n<p>sed可以直接进行文件的修改，而不用使用管道命令或者重定向，但这是一个危险操作，一定要注意：</p>\n<pre><code>hanson@linux-host:~$ sed -i &apos;$a #this is a new line.&apos; passwd \nhanson@linux-host:~$ cat passwd | tail -n 1\n#this is a new line.\n</code></pre><p>sed 的”-i”参数可以直接修改文件的内容，这个功能非常有帮助，甚至不需要vim去修改。</p>\n<hr>\n<p>更多关于sed使用讲解，请参考[左耳朵耗子]的<a href=\"http://coolshell.cn/articles/9104.html\" target=\"_blank\" rel=\"noopener\">sed简明教程</a></p>\n<p>(end)</p>"},{"layout":"post","title":"Shell脚本的执行方式区别","_content":"不同的Shell脚本执行方式会造成不一样的后果，尤其对bash的环境影响很大。shell脚本的执行方式除了（绝对路径、相对路径、bash、sh）执行外，还可以利用source来执行，那么他们之间有什么不同呢？\n\n###利用直接执行的方式来执行脚本\n\n当我们利用直接方式（绝对路径、相对路径）或者使用bash命令（或者sh）来执行script时，该script都会使用一个新的bash环境来执行脚本内命令，也就是说，使用该方式执行时，其实script实在其子进程的bash内执行的。那么，我们首先应该知道：**当子进程完成时，子进程内的各个变量或者操作将会结束而不会传回到其父进程中**，这一点很重要，我们得要先明白。\n\n<!--more-->\n\n下面举例说明：\n\n这个脚本是让用户自己输入名字，并在bash中打印出来：\n\n\t#!/bin/bash\n\n\tPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n\texport PATH\n\tread -p 'enther yout name ' name\n\techo -e \"your name is $name\"\n\n\n我们来执行下：\n\n\thanson@linux-host:~/Linux_Demo/shell$ bash sh01.sh \n\n然后打印下name变量：\n\t\n\thanson@linux-host:~/Linux_Demo/shell$ echo $name\n\t\t<== name变量怎么不存在了呢？\n\t\t\n\t\n从结果中，我们可以看出name变量并不存在，明明已经输入了值了呢，怎么回事？\n\n下面将程序绘制成相关性图来说明，当我们直接来执行时，系统会给予一个新的bash让我们来执行shell中的命令，因此，name变量其实是在子进程中内执行的。当shell执行完毕后，子进程内的所有数据都会被删除。所以，在父进程中输出name变量时，就看不出任何数据了。\n\n![pic](http://ww1.sinaimg.cn/mw690/bd5a4d63jw1ejlb5ikov0j20kn07mdfz.jpg)\n\n\n###利用source来执行脚本：在父进程中执行\n\n如果使用source来执行脚本，那就不一样了。来看实例：\n\n\thanson@linux-host:~/Linux_Demo/shell$ source  sh01.sh\n\n\t//print name\n\n\thanson@linux-host:~/Linux_Demo/shell$ echo $name \n\thanson <== name变量有数值哦\n\n\n竟然name生效了。因为source执行shell脚本是在父进程中执行的，可以用下图来说明，因此各项操作都会在原本的bash中生效。\n\n![pic](http://ww4.sinaimg.cn/mw690/bd5a4d63jw1ejlb56iuxcj20k805a747.jpg)\n\n这也是为啥不用注销系统而要让某些写入`~/.bashrc`内的变量生效时，需要使用`source ~/.bashrc`而不能使用`bash ~/.bashrc`的原因了。\n\n(end)\n","source":"_posts/201408/2014-08-22-shell_script_source_and_bash.md","raw":"---\nlayout : post\ntitle : Shell脚本的执行方式区别\ncategory : Shell\ntags : Linux Shell\n---\n不同的Shell脚本执行方式会造成不一样的后果，尤其对bash的环境影响很大。shell脚本的执行方式除了（绝对路径、相对路径、bash、sh）执行外，还可以利用source来执行，那么他们之间有什么不同呢？\n\n###利用直接执行的方式来执行脚本\n\n当我们利用直接方式（绝对路径、相对路径）或者使用bash命令（或者sh）来执行script时，该script都会使用一个新的bash环境来执行脚本内命令，也就是说，使用该方式执行时，其实script实在其子进程的bash内执行的。那么，我们首先应该知道：**当子进程完成时，子进程内的各个变量或者操作将会结束而不会传回到其父进程中**，这一点很重要，我们得要先明白。\n\n<!--more-->\n\n下面举例说明：\n\n这个脚本是让用户自己输入名字，并在bash中打印出来：\n\n\t#!/bin/bash\n\n\tPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n\texport PATH\n\tread -p 'enther yout name ' name\n\techo -e \"your name is $name\"\n\n\n我们来执行下：\n\n\thanson@linux-host:~/Linux_Demo/shell$ bash sh01.sh \n\n然后打印下name变量：\n\t\n\thanson@linux-host:~/Linux_Demo/shell$ echo $name\n\t\t<== name变量怎么不存在了呢？\n\t\t\n\t\n从结果中，我们可以看出name变量并不存在，明明已经输入了值了呢，怎么回事？\n\n下面将程序绘制成相关性图来说明，当我们直接来执行时，系统会给予一个新的bash让我们来执行shell中的命令，因此，name变量其实是在子进程中内执行的。当shell执行完毕后，子进程内的所有数据都会被删除。所以，在父进程中输出name变量时，就看不出任何数据了。\n\n![pic](http://ww1.sinaimg.cn/mw690/bd5a4d63jw1ejlb5ikov0j20kn07mdfz.jpg)\n\n\n###利用source来执行脚本：在父进程中执行\n\n如果使用source来执行脚本，那就不一样了。来看实例：\n\n\thanson@linux-host:~/Linux_Demo/shell$ source  sh01.sh\n\n\t//print name\n\n\thanson@linux-host:~/Linux_Demo/shell$ echo $name \n\thanson <== name变量有数值哦\n\n\n竟然name生效了。因为source执行shell脚本是在父进程中执行的，可以用下图来说明，因此各项操作都会在原本的bash中生效。\n\n![pic](http://ww4.sinaimg.cn/mw690/bd5a4d63jw1ejlb56iuxcj20k805a747.jpg)\n\n这也是为啥不用注销系统而要让某些写入`~/.bashrc`内的变量生效时，需要使用`source ~/.bashrc`而不能使用`bash ~/.bashrc`的原因了。\n\n(end)\n","slug":"201408-2014-08-22-shell-script-source-and-bash","published":1,"date":"2018-04-12T15:20:38.824Z","updated":"2018-04-12T15:20:38.824Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5q0040ass6q11ezanf","content":"<p>不同的Shell脚本执行方式会造成不一样的后果，尤其对bash的环境影响很大。shell脚本的执行方式除了（绝对路径、相对路径、bash、sh）执行外，还可以利用source来执行，那么他们之间有什么不同呢？</p>\n<p>###利用直接执行的方式来执行脚本</p>\n<p>当我们利用直接方式（绝对路径、相对路径）或者使用bash命令（或者sh）来执行script时，该script都会使用一个新的bash环境来执行脚本内命令，也就是说，使用该方式执行时，其实script实在其子进程的bash内执行的。那么，我们首先应该知道：<strong>当子进程完成时，子进程内的各个变量或者操作将会结束而不会传回到其父进程中</strong>，这一点很重要，我们得要先明白。</p>\n<a id=\"more\"></a>\n<p>下面举例说明：</p>\n<p>这个脚本是让用户自己输入名字，并在bash中打印出来：</p>\n<pre><code>#!/bin/bash\n\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\nexport PATH\nread -p &apos;enther yout name &apos; name\necho -e &quot;your name is $name&quot;\n</code></pre><p>我们来执行下：</p>\n<pre><code>hanson@linux-host:~/Linux_Demo/shell$ bash sh01.sh \n</code></pre><p>然后打印下name变量：</p>\n<pre><code>hanson@linux-host:~/Linux_Demo/shell$ echo $name\n    &lt;== name变量怎么不存在了呢？\n</code></pre><p>从结果中，我们可以看出name变量并不存在，明明已经输入了值了呢，怎么回事？</p>\n<p>下面将程序绘制成相关性图来说明，当我们直接来执行时，系统会给予一个新的bash让我们来执行shell中的命令，因此，name变量其实是在子进程中内执行的。当shell执行完毕后，子进程内的所有数据都会被删除。所以，在父进程中输出name变量时，就看不出任何数据了。</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63jw1ejlb5ikov0j20kn07mdfz.jpg\" alt=\"pic\"></p>\n<p>###利用source来执行脚本：在父进程中执行</p>\n<p>如果使用source来执行脚本，那就不一样了。来看实例：</p>\n<pre><code>hanson@linux-host:~/Linux_Demo/shell$ source  sh01.sh\n\n//print name\n\nhanson@linux-host:~/Linux_Demo/shell$ echo $name \nhanson &lt;== name变量有数值哦\n</code></pre><p>竟然name生效了。因为source执行shell脚本是在父进程中执行的，可以用下图来说明，因此各项操作都会在原本的bash中生效。</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63jw1ejlb56iuxcj20k805a747.jpg\" alt=\"pic\"></p>\n<p>这也是为啥不用注销系统而要让某些写入<code>~/.bashrc</code>内的变量生效时，需要使用<code>source ~/.bashrc</code>而不能使用<code>bash ~/.bashrc</code>的原因了。</p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>不同的Shell脚本执行方式会造成不一样的后果，尤其对bash的环境影响很大。shell脚本的执行方式除了（绝对路径、相对路径、bash、sh）执行外，还可以利用source来执行，那么他们之间有什么不同呢？</p>\n<p>###利用直接执行的方式来执行脚本</p>\n<p>当我们利用直接方式（绝对路径、相对路径）或者使用bash命令（或者sh）来执行script时，该script都会使用一个新的bash环境来执行脚本内命令，也就是说，使用该方式执行时，其实script实在其子进程的bash内执行的。那么，我们首先应该知道：<strong>当子进程完成时，子进程内的各个变量或者操作将会结束而不会传回到其父进程中</strong>，这一点很重要，我们得要先明白。</p>","more":"<p>下面举例说明：</p>\n<p>这个脚本是让用户自己输入名字，并在bash中打印出来：</p>\n<pre><code>#!/bin/bash\n\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\nexport PATH\nread -p &apos;enther yout name &apos; name\necho -e &quot;your name is $name&quot;\n</code></pre><p>我们来执行下：</p>\n<pre><code>hanson@linux-host:~/Linux_Demo/shell$ bash sh01.sh \n</code></pre><p>然后打印下name变量：</p>\n<pre><code>hanson@linux-host:~/Linux_Demo/shell$ echo $name\n    &lt;== name变量怎么不存在了呢？\n</code></pre><p>从结果中，我们可以看出name变量并不存在，明明已经输入了值了呢，怎么回事？</p>\n<p>下面将程序绘制成相关性图来说明，当我们直接来执行时，系统会给予一个新的bash让我们来执行shell中的命令，因此，name变量其实是在子进程中内执行的。当shell执行完毕后，子进程内的所有数据都会被删除。所以，在父进程中输出name变量时，就看不出任何数据了。</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/bd5a4d63jw1ejlb5ikov0j20kn07mdfz.jpg\" alt=\"pic\"></p>\n<p>###利用source来执行脚本：在父进程中执行</p>\n<p>如果使用source来执行脚本，那就不一样了。来看实例：</p>\n<pre><code>hanson@linux-host:~/Linux_Demo/shell$ source  sh01.sh\n\n//print name\n\nhanson@linux-host:~/Linux_Demo/shell$ echo $name \nhanson &lt;== name变量有数值哦\n</code></pre><p>竟然name生效了。因为source执行shell脚本是在父进程中执行的，可以用下图来说明，因此各项操作都会在原本的bash中生效。</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63jw1ejlb56iuxcj20k805a747.jpg\" alt=\"pic\"></p>\n<p>这也是为啥不用注销系统而要让某些写入<code>~/.bashrc</code>内的变量生效时，需要使用<code>source ~/.bashrc</code>而不能使用<code>bash ~/.bashrc</code>的原因了。</p>\n<p>(end)</p>"},{"layout":"post","title":"Ajax实现带进度条文件上传","_content":"很多情况下，当我们在网站上传文件至远程的服务器时，都会看到一个上传进度条来告诉我们上传的情况、以及是否上传成功，这样可以极好滴提升用户体验程度！\n\n那么，这个花哨的进度条是如何做到的呢？html5给出了很好的特性来实现带进度条的Ajax上传文件机制。\n\n废话不多说，直接上代码，留作笔记，以作备忘：\n\n<!--more-->\n\n**js代码：**\n\n\t<script type=\"text/javascript\" charset=\"utf-8\">\n            function pic () {\n                //创建FormData对象\n                var fd = new FormData();\n                //获取文件对象\n                var pic = document.getElementById('pic').files[0];\n                //把文件内容追加到form中\n                fd.append('pic', pic);\n                //创建Ajax引擎\n                var xhr = new XMLHttpRequest();\n                xhr.open('post', './upload.php', true);\n                xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n                xhr.onreadystatechange = function () {\t//指定回调函数\n                    if (this.readyState == 4) {\n                        //window.alert('上传成功！');\n                        document.getElementById('p').innertText = this.responseText;\n                    }\n                };\n\n                //利用xhr2的新标准，为上传过程添加一个监听函数,实现进度条上传效果\n                xhr.upload.onprogress = function (event) {\n                    if (ev.lengthComputable) {\t\t\t//true时\n                        var percent = 100 * ev.loaded / ev.total;\n\n                        document.getElementById('bar').style.width = percent + '%';\n                        document.getElementById('bar').innerText = parseInt(percent) + '%';\n                    }\n\n                   // console.log(event);\n                };\n\n                xhr.send(fd);\n            }\n        </script>\n\n**html代码：**\n\n\t<!DOCTYPE HTML>\n\t<!--\n    \tAjax 带进度条文件上传\n\t-->\n\t<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n        <title>Fileapi</title>\n        <style type=\"text/css\">\n            #one {\n                width : 500px;\n                height :20px;\n                border = 1px solid green;\n            }\n            #bar {\n                width : 0%;\n                height : 100%;\n                background-color:green;\n            }\n        </style>\n\n    </head>\n    <body>\n        <input type=\"file\" name=\"pic\" value=\"\" id=\"pic\" onchange=\"pic();\"><br />\n        <div id=\"one\"><div id=\"bar\"></div></div>\n        <p id=\"p\"></p>\n    </body>\n\t</html>\n\n**php代码：**\n\n\t<?php\n\t\t/*\n\t\t\t服务器端测试打印\n\t    */\n    \techo 'upload success';\n\t?>\n\n\n---\n\n(end)\n","source":"_posts/201409/2014-09-05-ajax_upload_progress.md","raw":"---\nlayout : post\ntitle : Ajax实现带进度条文件上传\ncategory : Ajax\ntags : Ajax\n---\n很多情况下，当我们在网站上传文件至远程的服务器时，都会看到一个上传进度条来告诉我们上传的情况、以及是否上传成功，这样可以极好滴提升用户体验程度！\n\n那么，这个花哨的进度条是如何做到的呢？html5给出了很好的特性来实现带进度条的Ajax上传文件机制。\n\n废话不多说，直接上代码，留作笔记，以作备忘：\n\n<!--more-->\n\n**js代码：**\n\n\t<script type=\"text/javascript\" charset=\"utf-8\">\n            function pic () {\n                //创建FormData对象\n                var fd = new FormData();\n                //获取文件对象\n                var pic = document.getElementById('pic').files[0];\n                //把文件内容追加到form中\n                fd.append('pic', pic);\n                //创建Ajax引擎\n                var xhr = new XMLHttpRequest();\n                xhr.open('post', './upload.php', true);\n                xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n                xhr.onreadystatechange = function () {\t//指定回调函数\n                    if (this.readyState == 4) {\n                        //window.alert('上传成功！');\n                        document.getElementById('p').innertText = this.responseText;\n                    }\n                };\n\n                //利用xhr2的新标准，为上传过程添加一个监听函数,实现进度条上传效果\n                xhr.upload.onprogress = function (event) {\n                    if (ev.lengthComputable) {\t\t\t//true时\n                        var percent = 100 * ev.loaded / ev.total;\n\n                        document.getElementById('bar').style.width = percent + '%';\n                        document.getElementById('bar').innerText = parseInt(percent) + '%';\n                    }\n\n                   // console.log(event);\n                };\n\n                xhr.send(fd);\n            }\n        </script>\n\n**html代码：**\n\n\t<!DOCTYPE HTML>\n\t<!--\n    \tAjax 带进度条文件上传\n\t-->\n\t<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n        <title>Fileapi</title>\n        <style type=\"text/css\">\n            #one {\n                width : 500px;\n                height :20px;\n                border = 1px solid green;\n            }\n            #bar {\n                width : 0%;\n                height : 100%;\n                background-color:green;\n            }\n        </style>\n\n    </head>\n    <body>\n        <input type=\"file\" name=\"pic\" value=\"\" id=\"pic\" onchange=\"pic();\"><br />\n        <div id=\"one\"><div id=\"bar\"></div></div>\n        <p id=\"p\"></p>\n    </body>\n\t</html>\n\n**php代码：**\n\n\t<?php\n\t\t/*\n\t\t\t服务器端测试打印\n\t    */\n    \techo 'upload success';\n\t?>\n\n\n---\n\n(end)\n","slug":"201409-2014-09-05-ajax-upload-progress","published":1,"date":"2018-04-12T15:20:38.825Z","updated":"2018-04-12T15:20:38.825Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5s0043ass6ntjysckl","content":"<p>很多情况下，当我们在网站上传文件至远程的服务器时，都会看到一个上传进度条来告诉我们上传的情况、以及是否上传成功，这样可以极好滴提升用户体验程度！</p>\n<p>那么，这个花哨的进度条是如何做到的呢？html5给出了很好的特性来实现带进度条的Ajax上传文件机制。</p>\n<p>废话不多说，直接上代码，留作笔记，以作备忘：</p>\n<a id=\"more\"></a>\n<p><strong>js代码：</strong></p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;\n        function pic () {\n            //创建FormData对象\n            var fd = new FormData();\n            //获取文件对象\n            var pic = document.getElementById(&apos;pic&apos;).files[0];\n            //把文件内容追加到form中\n            fd.append(&apos;pic&apos;, pic);\n            //创建Ajax引擎\n            var xhr = new XMLHttpRequest();\n            xhr.open(&apos;post&apos;, &apos;./upload.php&apos;, true);\n            xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;);\n            xhr.onreadystatechange = function () {    //指定回调函数\n                if (this.readyState == 4) {\n                    //window.alert(&apos;上传成功！&apos;);\n                    document.getElementById(&apos;p&apos;).innertText = this.responseText;\n                }\n            };\n\n            //利用xhr2的新标准，为上传过程添加一个监听函数,实现进度条上传效果\n            xhr.upload.onprogress = function (event) {\n                if (ev.lengthComputable) {            //true时\n                    var percent = 100 * ev.loaded / ev.total;\n\n                    document.getElementById(&apos;bar&apos;).style.width = percent + &apos;%&apos;;\n                    document.getElementById(&apos;bar&apos;).innerText = parseInt(percent) + &apos;%&apos;;\n                }\n\n               // console.log(event);\n            };\n\n            xhr.send(fd);\n        }\n    &lt;/script&gt;\n</code></pre><p><strong>html代码：</strong></p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;!--\n    Ajax 带进度条文件上传\n--&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;\n    &lt;title&gt;Fileapi&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        #one {\n            width : 500px;\n            height :20px;\n            border = 1px solid green;\n        }\n        #bar {\n            width : 0%;\n            height : 100%;\n            background-color:green;\n        }\n    &lt;/style&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;input type=&quot;file&quot; name=&quot;pic&quot; value=&quot;&quot; id=&quot;pic&quot; onchange=&quot;pic();&quot;&gt;&lt;br /&gt;\n    &lt;div id=&quot;one&quot;&gt;&lt;div id=&quot;bar&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n    &lt;p id=&quot;p&quot;&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p><strong>php代码：</strong></p>\n<pre><code>&lt;?php\n    /*\n        服务器端测试打印\n    */\n    echo &apos;upload success&apos;;\n?&gt;\n</code></pre><hr>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>很多情况下，当我们在网站上传文件至远程的服务器时，都会看到一个上传进度条来告诉我们上传的情况、以及是否上传成功，这样可以极好滴提升用户体验程度！</p>\n<p>那么，这个花哨的进度条是如何做到的呢？html5给出了很好的特性来实现带进度条的Ajax上传文件机制。</p>\n<p>废话不多说，直接上代码，留作笔记，以作备忘：</p>","more":"<p><strong>js代码：</strong></p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;\n        function pic () {\n            //创建FormData对象\n            var fd = new FormData();\n            //获取文件对象\n            var pic = document.getElementById(&apos;pic&apos;).files[0];\n            //把文件内容追加到form中\n            fd.append(&apos;pic&apos;, pic);\n            //创建Ajax引擎\n            var xhr = new XMLHttpRequest();\n            xhr.open(&apos;post&apos;, &apos;./upload.php&apos;, true);\n            xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;);\n            xhr.onreadystatechange = function () {    //指定回调函数\n                if (this.readyState == 4) {\n                    //window.alert(&apos;上传成功！&apos;);\n                    document.getElementById(&apos;p&apos;).innertText = this.responseText;\n                }\n            };\n\n            //利用xhr2的新标准，为上传过程添加一个监听函数,实现进度条上传效果\n            xhr.upload.onprogress = function (event) {\n                if (ev.lengthComputable) {            //true时\n                    var percent = 100 * ev.loaded / ev.total;\n\n                    document.getElementById(&apos;bar&apos;).style.width = percent + &apos;%&apos;;\n                    document.getElementById(&apos;bar&apos;).innerText = parseInt(percent) + &apos;%&apos;;\n                }\n\n               // console.log(event);\n            };\n\n            xhr.send(fd);\n        }\n    &lt;/script&gt;\n</code></pre><p><strong>html代码：</strong></p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;!--\n    Ajax 带进度条文件上传\n--&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;\n    &lt;title&gt;Fileapi&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        #one {\n            width : 500px;\n            height :20px;\n            border = 1px solid green;\n        }\n        #bar {\n            width : 0%;\n            height : 100%;\n            background-color:green;\n        }\n    &lt;/style&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;input type=&quot;file&quot; name=&quot;pic&quot; value=&quot;&quot; id=&quot;pic&quot; onchange=&quot;pic();&quot;&gt;&lt;br /&gt;\n    &lt;div id=&quot;one&quot;&gt;&lt;div id=&quot;bar&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n    &lt;p id=&quot;p&quot;&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p><strong>php代码：</strong></p>\n<pre><code>&lt;?php\n    /*\n        服务器端测试打印\n    */\n    echo &apos;upload success&apos;;\n?&gt;\n</code></pre><hr>\n<p>(end)</p>"},{"layout":"post","title":"Ajax使用jsonp实现跨域请求","_content":"Ajax使用XMLHttpRequest对象在无刷新页面的情况下对服务器端进行数据请求，她允许客户端javascript通过HTTP连接到Web服务器。不过，由于收到浏览器的限制，Ajax不允许实现跨域通信，如果尝试从不同的域请求数据，就会出现错误！\n\n###同源策略\n\n同源策略，它是由Netscape提出的一个著名的安全策略。现在所有支持JavaScript 的浏览器都会使用这个策略。所谓同源是指域名、协议、端口相同。当一个浏览器的两个tab页中分别打开来百度和谷歌的页面，当一个百度浏览器执行一个脚本的时候会检查这个脚本是属于哪个页面的，即检查是否同源，只有和百度同源的脚本才会被执行。\n\n同源策略阻止从一个域上加载的脚本获取或操作另一个域上的文档。也就是说，受到请求的URL的域必须与当前 Web 页面的域相同。这意味着浏览器隔离来自不同源的内容，以防止它们之间的操作。\n\n<!--more-->\n\n###什么是jsonp\n\n资料来自百度：\n\n> JSONP是JSON with Padding的略称。它是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问（这仅仅是JSONP简单的实现形式）。\n\n\n###jsonp有什么用\n\n\n由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script的**src**标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。\n\n因为，script标签的src属性并不被同源策略所约束，所以可以获取任何服务器上脚本并执行。\n\n\n###jsonp的实现模式\n\n\t<!doctype html>\n\t<html>\n    \t<head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n        <title>jsonp测试</title>\n        <script type=\"text/javascript\" charset=\"utf-8\">\n            function callback (data) {\n                alert(data.message);\n            }\n         </script>\n         <script type=\"text/javascript\" charset=\"utf-8\" src=\"jsonp.js\"></script>\n    \t</head>\n    \t<body>\n    \t</body>\n\t</html>\n\n程序jsonp.js中的代码：\n\n\t//调用callback函数，并以json数据作为参数传入，完成回调\n\tcallback({message : 'success'});\n\n这其实就是JSONP的简单实现模式：创建一个回调函数，然后在远程服务上调用这个函数并且将JSON 数据形式作为参数传递，完成回调。\n\n###动态创建script标签\n\n我们可以通过javascript动态的创建script标签，这样我们就可以灵活调用远程服务了。\n\n客户端代码：\n\n    <script type=\"text/javascript\" charset=\"utf-8\">\n            function callback (data) {\n                for (var i in data) {\n                    window.alert(i + \":\" + data[i]);    //循环输出\n                }\n            }\n\n            function create_script () {\n                var script = document.createElement(\"script\");\n                script.type = 'text/javascript';\n                script.src = 'http://www.###.com/calljsonp.php?callback=callback';\n                document.getElementsByTagName('head')[0].appendChild(script);\n            }\n     </script>\n\n服务器端php代码：(calljsonp.php)\n\n\t<?php\n    //服务器端返回json数据\n    $arr = array('a' => '1', 'b' => '2', 'c' => '3');\n    $json = json_encode($srr);\n    //执行回调函数\n    $callback = $_GET['callback'];\n    echo $callback . \"($json)\";\n\t?>\n\n这是一个google实现ajax搜索的接口url:[http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=?&callback=? ](http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=?&callback=? )\n\nq=?这个问号是表示你要搜索的内容，最重要的是第二个callback=?这个是正如其名表示回调函数的名称，也就是将你自己在客户端定义的回调函数的函数名传送给服务端，服务端则会返回以你定义的回调函数名的方法，将获取的json数据传入这个方法完成回调。\n\n\n\n###jsonp原理\n\n1、首先在客户端注册一个callback, 然后把callback的名字传给服务器。\n\n2、此时，服务器先生成 json 数据。\n然后以 javascript 语法的方式，生成一个function , function 名字就是传递上来的参数 callback.\n\n3、最后将 json 数据直接以入参的方式，放置到 function 中，这样就生成了一段 js 语法的文档，返回给客户端。\n\n4、客户端浏览器，解析script标签，并执行返回的 javascript 文档，此时数据作为参数，传入到了客户端预先定义好的 callback 函数里.（动态执行回调函数）\n\n---\n\n###小结\n\nAjax使用jsonp进行跨域请求数据，其实说白了就是利用了javascript的一个特性，即src属性并不被同源策略所约束，所以可以获取任何服务器上脚本并执行。然后在服务器端以javascript的语法生成一个function，并把这个function返回到客户端。\n\n\n\n\n","source":"_posts/201409/2014-09-03-ajax_jsonp_return.md","raw":"---\nlayout : post\ntitle : Ajax使用jsonp实现跨域请求\ncategory : Ajax\ntags : Ajax Jsonp\n---\nAjax使用XMLHttpRequest对象在无刷新页面的情况下对服务器端进行数据请求，她允许客户端javascript通过HTTP连接到Web服务器。不过，由于收到浏览器的限制，Ajax不允许实现跨域通信，如果尝试从不同的域请求数据，就会出现错误！\n\n###同源策略\n\n同源策略，它是由Netscape提出的一个著名的安全策略。现在所有支持JavaScript 的浏览器都会使用这个策略。所谓同源是指域名、协议、端口相同。当一个浏览器的两个tab页中分别打开来百度和谷歌的页面，当一个百度浏览器执行一个脚本的时候会检查这个脚本是属于哪个页面的，即检查是否同源，只有和百度同源的脚本才会被执行。\n\n同源策略阻止从一个域上加载的脚本获取或操作另一个域上的文档。也就是说，受到请求的URL的域必须与当前 Web 页面的域相同。这意味着浏览器隔离来自不同源的内容，以防止它们之间的操作。\n\n<!--more-->\n\n###什么是jsonp\n\n资料来自百度：\n\n> JSONP是JSON with Padding的略称。它是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问（这仅仅是JSONP简单的实现形式）。\n\n\n###jsonp有什么用\n\n\n由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script的**src**标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。\n\n因为，script标签的src属性并不被同源策略所约束，所以可以获取任何服务器上脚本并执行。\n\n\n###jsonp的实现模式\n\n\t<!doctype html>\n\t<html>\n    \t<head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n        <title>jsonp测试</title>\n        <script type=\"text/javascript\" charset=\"utf-8\">\n            function callback (data) {\n                alert(data.message);\n            }\n         </script>\n         <script type=\"text/javascript\" charset=\"utf-8\" src=\"jsonp.js\"></script>\n    \t</head>\n    \t<body>\n    \t</body>\n\t</html>\n\n程序jsonp.js中的代码：\n\n\t//调用callback函数，并以json数据作为参数传入，完成回调\n\tcallback({message : 'success'});\n\n这其实就是JSONP的简单实现模式：创建一个回调函数，然后在远程服务上调用这个函数并且将JSON 数据形式作为参数传递，完成回调。\n\n###动态创建script标签\n\n我们可以通过javascript动态的创建script标签，这样我们就可以灵活调用远程服务了。\n\n客户端代码：\n\n    <script type=\"text/javascript\" charset=\"utf-8\">\n            function callback (data) {\n                for (var i in data) {\n                    window.alert(i + \":\" + data[i]);    //循环输出\n                }\n            }\n\n            function create_script () {\n                var script = document.createElement(\"script\");\n                script.type = 'text/javascript';\n                script.src = 'http://www.###.com/calljsonp.php?callback=callback';\n                document.getElementsByTagName('head')[0].appendChild(script);\n            }\n     </script>\n\n服务器端php代码：(calljsonp.php)\n\n\t<?php\n    //服务器端返回json数据\n    $arr = array('a' => '1', 'b' => '2', 'c' => '3');\n    $json = json_encode($srr);\n    //执行回调函数\n    $callback = $_GET['callback'];\n    echo $callback . \"($json)\";\n\t?>\n\n这是一个google实现ajax搜索的接口url:[http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=?&callback=? ](http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=?&callback=? )\n\nq=?这个问号是表示你要搜索的内容，最重要的是第二个callback=?这个是正如其名表示回调函数的名称，也就是将你自己在客户端定义的回调函数的函数名传送给服务端，服务端则会返回以你定义的回调函数名的方法，将获取的json数据传入这个方法完成回调。\n\n\n\n###jsonp原理\n\n1、首先在客户端注册一个callback, 然后把callback的名字传给服务器。\n\n2、此时，服务器先生成 json 数据。\n然后以 javascript 语法的方式，生成一个function , function 名字就是传递上来的参数 callback.\n\n3、最后将 json 数据直接以入参的方式，放置到 function 中，这样就生成了一段 js 语法的文档，返回给客户端。\n\n4、客户端浏览器，解析script标签，并执行返回的 javascript 文档，此时数据作为参数，传入到了客户端预先定义好的 callback 函数里.（动态执行回调函数）\n\n---\n\n###小结\n\nAjax使用jsonp进行跨域请求数据，其实说白了就是利用了javascript的一个特性，即src属性并不被同源策略所约束，所以可以获取任何服务器上脚本并执行。然后在服务器端以javascript的语法生成一个function，并把这个function返回到客户端。\n\n\n\n\n","slug":"201409-2014-09-03-ajax-jsonp-return","published":1,"date":"2018-04-12T15:20:38.825Z","updated":"2018-04-12T15:20:38.825Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5u0048ass6u1huuss3","content":"<p>Ajax使用XMLHttpRequest对象在无刷新页面的情况下对服务器端进行数据请求，她允许客户端javascript通过HTTP连接到Web服务器。不过，由于收到浏览器的限制，Ajax不允许实现跨域通信，如果尝试从不同的域请求数据，就会出现错误！</p>\n<p>###同源策略</p>\n<p>同源策略，它是由Netscape提出的一个著名的安全策略。现在所有支持JavaScript 的浏览器都会使用这个策略。所谓同源是指域名、协议、端口相同。当一个浏览器的两个tab页中分别打开来百度和谷歌的页面，当一个百度浏览器执行一个脚本的时候会检查这个脚本是属于哪个页面的，即检查是否同源，只有和百度同源的脚本才会被执行。</p>\n<p>同源策略阻止从一个域上加载的脚本获取或操作另一个域上的文档。也就是说，受到请求的URL的域必须与当前 Web 页面的域相同。这意味着浏览器隔离来自不同源的内容，以防止它们之间的操作。</p>\n<a id=\"more\"></a>\n<p>###什么是jsonp</p>\n<p>资料来自百度：</p>\n<blockquote>\n<p>JSONP是JSON with Padding的略称。它是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问（这仅仅是JSONP简单的实现形式）。</p>\n</blockquote>\n<p>###jsonp有什么用</p>\n<p>由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script的<strong>src</strong>标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。</p>\n<p>因为，script标签的src属性并不被同源策略所约束，所以可以获取任何服务器上脚本并执行。</p>\n<p>###jsonp的实现模式</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;\n    &lt;title&gt;jsonp测试&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;\n        function callback (data) {\n            alert(data.message);\n        }\n     &lt;/script&gt;\n     &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;jsonp.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>程序jsonp.js中的代码：</p>\n<pre><code>//调用callback函数，并以json数据作为参数传入，完成回调\ncallback({message : &apos;success&apos;});\n</code></pre><p>这其实就是JSONP的简单实现模式：创建一个回调函数，然后在远程服务上调用这个函数并且将JSON 数据形式作为参数传递，完成回调。</p>\n<p>###动态创建script标签</p>\n<p>我们可以通过javascript动态的创建script标签，这样我们就可以灵活调用远程服务了。</p>\n<p>客户端代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;\n        function callback (data) {\n            for (var i in data) {\n                window.alert(i + &quot;:&quot; + data[i]);    //循环输出\n            }\n        }\n\n        function create_script () {\n            var script = document.createElement(&quot;script&quot;);\n            script.type = &apos;text/javascript&apos;;\n            script.src = &apos;http://www.###.com/calljsonp.php?callback=callback&apos;;\n            document.getElementsByTagName(&apos;head&apos;)[0].appendChild(script);\n        }\n &lt;/script&gt;\n</code></pre><p>服务器端php代码：(calljsonp.php)</p>\n<pre><code>&lt;?php\n//服务器端返回json数据\n$arr = array(&apos;a&apos; =&gt; &apos;1&apos;, &apos;b&apos; =&gt; &apos;2&apos;, &apos;c&apos; =&gt; &apos;3&apos;);\n$json = json_encode($srr);\n//执行回调函数\n$callback = $_GET[&apos;callback&apos;];\necho $callback . &quot;($json)&quot;;\n?&gt;\n</code></pre><p>这是一个google实现ajax搜索的接口url:<a href=\"http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;q=?&amp;callback=?\" target=\"_blank\" rel=\"noopener\">http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;q=?&amp;callback=? </a></p>\n<p>q=?这个问号是表示你要搜索的内容，最重要的是第二个callback=?这个是正如其名表示回调函数的名称，也就是将你自己在客户端定义的回调函数的函数名传送给服务端，服务端则会返回以你定义的回调函数名的方法，将获取的json数据传入这个方法完成回调。</p>\n<p>###jsonp原理</p>\n<p>1、首先在客户端注册一个callback, 然后把callback的名字传给服务器。</p>\n<p>2、此时，服务器先生成 json 数据。<br>然后以 javascript 语法的方式，生成一个function , function 名字就是传递上来的参数 callback.</p>\n<p>3、最后将 json 数据直接以入参的方式，放置到 function 中，这样就生成了一段 js 语法的文档，返回给客户端。</p>\n<p>4、客户端浏览器，解析script标签，并执行返回的 javascript 文档，此时数据作为参数，传入到了客户端预先定义好的 callback 函数里.（动态执行回调函数）</p>\n<hr>\n<p>###小结</p>\n<p>Ajax使用jsonp进行跨域请求数据，其实说白了就是利用了javascript的一个特性，即src属性并不被同源策略所约束，所以可以获取任何服务器上脚本并执行。然后在服务器端以javascript的语法生成一个function，并把这个function返回到客户端。</p>\n","site":{"data":{}},"excerpt":"<p>Ajax使用XMLHttpRequest对象在无刷新页面的情况下对服务器端进行数据请求，她允许客户端javascript通过HTTP连接到Web服务器。不过，由于收到浏览器的限制，Ajax不允许实现跨域通信，如果尝试从不同的域请求数据，就会出现错误！</p>\n<p>###同源策略</p>\n<p>同源策略，它是由Netscape提出的一个著名的安全策略。现在所有支持JavaScript 的浏览器都会使用这个策略。所谓同源是指域名、协议、端口相同。当一个浏览器的两个tab页中分别打开来百度和谷歌的页面，当一个百度浏览器执行一个脚本的时候会检查这个脚本是属于哪个页面的，即检查是否同源，只有和百度同源的脚本才会被执行。</p>\n<p>同源策略阻止从一个域上加载的脚本获取或操作另一个域上的文档。也就是说，受到请求的URL的域必须与当前 Web 页面的域相同。这意味着浏览器隔离来自不同源的内容，以防止它们之间的操作。</p>","more":"<p>###什么是jsonp</p>\n<p>资料来自百度：</p>\n<blockquote>\n<p>JSONP是JSON with Padding的略称。它是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问（这仅仅是JSONP简单的实现形式）。</p>\n</blockquote>\n<p>###jsonp有什么用</p>\n<p>由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script的<strong>src</strong>标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。</p>\n<p>因为，script标签的src属性并不被同源策略所约束，所以可以获取任何服务器上脚本并执行。</p>\n<p>###jsonp的实现模式</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;\n    &lt;title&gt;jsonp测试&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;\n        function callback (data) {\n            alert(data.message);\n        }\n     &lt;/script&gt;\n     &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;jsonp.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>程序jsonp.js中的代码：</p>\n<pre><code>//调用callback函数，并以json数据作为参数传入，完成回调\ncallback({message : &apos;success&apos;});\n</code></pre><p>这其实就是JSONP的简单实现模式：创建一个回调函数，然后在远程服务上调用这个函数并且将JSON 数据形式作为参数传递，完成回调。</p>\n<p>###动态创建script标签</p>\n<p>我们可以通过javascript动态的创建script标签，这样我们就可以灵活调用远程服务了。</p>\n<p>客户端代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;\n        function callback (data) {\n            for (var i in data) {\n                window.alert(i + &quot;:&quot; + data[i]);    //循环输出\n            }\n        }\n\n        function create_script () {\n            var script = document.createElement(&quot;script&quot;);\n            script.type = &apos;text/javascript&apos;;\n            script.src = &apos;http://www.###.com/calljsonp.php?callback=callback&apos;;\n            document.getElementsByTagName(&apos;head&apos;)[0].appendChild(script);\n        }\n &lt;/script&gt;\n</code></pre><p>服务器端php代码：(calljsonp.php)</p>\n<pre><code>&lt;?php\n//服务器端返回json数据\n$arr = array(&apos;a&apos; =&gt; &apos;1&apos;, &apos;b&apos; =&gt; &apos;2&apos;, &apos;c&apos; =&gt; &apos;3&apos;);\n$json = json_encode($srr);\n//执行回调函数\n$callback = $_GET[&apos;callback&apos;];\necho $callback . &quot;($json)&quot;;\n?&gt;\n</code></pre><p>这是一个google实现ajax搜索的接口url:<a href=\"http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;q=?&amp;callback=?\" target=\"_blank\" rel=\"noopener\">http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;q=?&amp;callback=? </a></p>\n<p>q=?这个问号是表示你要搜索的内容，最重要的是第二个callback=?这个是正如其名表示回调函数的名称，也就是将你自己在客户端定义的回调函数的函数名传送给服务端，服务端则会返回以你定义的回调函数名的方法，将获取的json数据传入这个方法完成回调。</p>\n<p>###jsonp原理</p>\n<p>1、首先在客户端注册一个callback, 然后把callback的名字传给服务器。</p>\n<p>2、此时，服务器先生成 json 数据。<br>然后以 javascript 语法的方式，生成一个function , function 名字就是传递上来的参数 callback.</p>\n<p>3、最后将 json 数据直接以入参的方式，放置到 function 中，这样就生成了一段 js 语法的文档，返回给客户端。</p>\n<p>4、客户端浏览器，解析script标签，并执行返回的 javascript 文档，此时数据作为参数，传入到了客户端预先定义好的 callback 函数里.（动态执行回调函数）</p>\n<hr>\n<p>###小结</p>\n<p>Ajax使用jsonp进行跨域请求数据，其实说白了就是利用了javascript的一个特性，即src属性并不被同源策略所约束，所以可以获取任何服务器上脚本并执行。然后在服务器端以javascript的语法生成一个function，并把这个function返回到客户端。</p>"},{"layout":"post","title":"Ajax大文件切割上传","_content":"对于我们这波电脑控的90后来说，在网上上传照片、压缩文件、视频等等已经是常见的事了。但是，不知道大家有没有疑问，就是说我们可以上传只有几兆的图片、稍大一点的十几兆的打包文件，甚至于几十兆或者几百兆的文件，更有甚者是上G的大视频文件，是不是可以无限制的上传更大的数据文件呢？！\n\n![pic](http://ww3.sinaimg.cn/mw690/bd5a4d63jw1ek3t011i4mj20b003waac.jpg)\n\n答案正如你所想的，肯定是否定的嘛。服务器端怎么可以任由你上传无限大的文件呢，一般服务器端都会设置最大上传文件的大小来进行限制，那么当我们需要上传大文件时该如何实现呢？\n\n<!--more-->\n\n这里我们使用的是打文件切割技术来进行分块上传，然后在服务器端接受切割后的小文件进行一系列的合并，最后将打文件成功上传到服务器端，这就是其基本原理。\n\n###思路：\n\n* 设置文件切割大小，这里假设为10M\n* 使用定时器进行函数调用\n* 判断文件是否截取完毕\n\n\n废话不多说，直接上代码：\n**js代码**\n\n\t <script type=\"text/javascript\" charset=\"utf-8\">\n        //全局对象\n        var xhr = new XMLHttpRequest();\n        var clock = null;\n        var mov = null;\n        //事件监控函数\n        function fire () {\n            mov = document.getElementsByTagName('input')[0].files[0];\n            clock = window.setInterval(sendfile, 1000);\n        }\n        //闭包计数器\n        var sendfile = function () {\n            const LENGTH = 10 * 1024 * 1024;    //10M\n            var sta = 0;                        //切割开始位置\n            var end = sta + LENGTH;             //切割结束位置\n            var sending = false;                //标志正在上传\n            var blob = null;                    //用来存储切割数据\n            var fd = null;                      //表单对象声明\n\n            //返回一个匿名函数\n            return (function () {\n                        if (sending == true) {\n                            return;\n                        }\n                        //如果sta > mov.size ,就结束\n                        if (sta > mov.size) {\n                            window.clearInterval(clock);\n                            return;\n                        }\n                        blob = mov.slice(sta, end);         //切割\n                        fd = new FormData();                //定义表单对象\n\n                        fd.append('part', blob);\n                        up(fd);                             //开始上传\n\n                        sta = end;\n                        end = end + LENGTH;\n                        sending = false;    //上传完毕\n\n                        percent = 100 * end / mov.size;\n                        if (percent > 100) {\n                            percent = 100;\n                        }\n                        document.getElementById('bar').style.width = percent + '%';\n                        document.getElementById('bar').innerHTML = parseInt(percent) + '%';\n                    });\n        }();\n\n\t\t//上传函数\n        function up (fd) {\n           xhr.open('POST', './upload.php', false);     //同步传输\n           xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n           xhr.send(fd);\n        }      \n        </script>\n\n**html代码**\n\n\t<head>\n\t <style type=\"text/css\">\n            #one {\n                width : 500px;\n                height :20px;\n                border = 1px solid green;\n            }\n            #bar {\n                width : 0%;\n                height : 100%;\n                background-color:green;\n            }\n            \n        </style>\n    </head>\n    <body>\n        <input type=\"file\" name=\"pic\" value=\"\" id=\"pic\" onchange=\"fire();\"><br />\n        <div id=\"one\"><div id=\"bar\"></div></div>\n    </body>\n\n**服务器端代码**\n\n\t<?php\n    /**\n\t *  测试代码\n     *  服务器接收文件并合并\n     * */   \n    if (isset($_FILES['part']['tmp_name'])) {\n        if (!file_exists('./upload/up.wmv')) {\n            move_upload_file($_FILES['part']['tmp_name'], './upload/up.wmv');\n        } else {\n            file_put_contents('./upload/up.wmv', file_get_contents($_FILES['part']['tmp_name']), FILE_APPEND);\n        }\n    }\n\t?>\n\n---\n\n###知识点：\n\n1、闭包处理\n\n2、匿名函数\n\n3、Blob对象的slice方法\n\n4、表单FormData对象使用\n\n5、XMLHttpRequest对象（Ajax引擎对象）\n\n6、js的window.setInterval方法\n\n**注意：**\n\n*有时间的话，比较下setTimeout方法和setInterval方法的区别与适用范围？*\n\n(END)\n\n\n\n\n\n\n\n","source":"_posts/201409/2014-09-07-ajax_file_slice_upload.md","raw":"---\nlayout : post\ntitle : Ajax大文件切割上传\ncategory : Ajax\ntags : Ajax\n---\n对于我们这波电脑控的90后来说，在网上上传照片、压缩文件、视频等等已经是常见的事了。但是，不知道大家有没有疑问，就是说我们可以上传只有几兆的图片、稍大一点的十几兆的打包文件，甚至于几十兆或者几百兆的文件，更有甚者是上G的大视频文件，是不是可以无限制的上传更大的数据文件呢？！\n\n![pic](http://ww3.sinaimg.cn/mw690/bd5a4d63jw1ek3t011i4mj20b003waac.jpg)\n\n答案正如你所想的，肯定是否定的嘛。服务器端怎么可以任由你上传无限大的文件呢，一般服务器端都会设置最大上传文件的大小来进行限制，那么当我们需要上传大文件时该如何实现呢？\n\n<!--more-->\n\n这里我们使用的是打文件切割技术来进行分块上传，然后在服务器端接受切割后的小文件进行一系列的合并，最后将打文件成功上传到服务器端，这就是其基本原理。\n\n###思路：\n\n* 设置文件切割大小，这里假设为10M\n* 使用定时器进行函数调用\n* 判断文件是否截取完毕\n\n\n废话不多说，直接上代码：\n**js代码**\n\n\t <script type=\"text/javascript\" charset=\"utf-8\">\n        //全局对象\n        var xhr = new XMLHttpRequest();\n        var clock = null;\n        var mov = null;\n        //事件监控函数\n        function fire () {\n            mov = document.getElementsByTagName('input')[0].files[0];\n            clock = window.setInterval(sendfile, 1000);\n        }\n        //闭包计数器\n        var sendfile = function () {\n            const LENGTH = 10 * 1024 * 1024;    //10M\n            var sta = 0;                        //切割开始位置\n            var end = sta + LENGTH;             //切割结束位置\n            var sending = false;                //标志正在上传\n            var blob = null;                    //用来存储切割数据\n            var fd = null;                      //表单对象声明\n\n            //返回一个匿名函数\n            return (function () {\n                        if (sending == true) {\n                            return;\n                        }\n                        //如果sta > mov.size ,就结束\n                        if (sta > mov.size) {\n                            window.clearInterval(clock);\n                            return;\n                        }\n                        blob = mov.slice(sta, end);         //切割\n                        fd = new FormData();                //定义表单对象\n\n                        fd.append('part', blob);\n                        up(fd);                             //开始上传\n\n                        sta = end;\n                        end = end + LENGTH;\n                        sending = false;    //上传完毕\n\n                        percent = 100 * end / mov.size;\n                        if (percent > 100) {\n                            percent = 100;\n                        }\n                        document.getElementById('bar').style.width = percent + '%';\n                        document.getElementById('bar').innerHTML = parseInt(percent) + '%';\n                    });\n        }();\n\n\t\t//上传函数\n        function up (fd) {\n           xhr.open('POST', './upload.php', false);     //同步传输\n           xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n           xhr.send(fd);\n        }      \n        </script>\n\n**html代码**\n\n\t<head>\n\t <style type=\"text/css\">\n            #one {\n                width : 500px;\n                height :20px;\n                border = 1px solid green;\n            }\n            #bar {\n                width : 0%;\n                height : 100%;\n                background-color:green;\n            }\n            \n        </style>\n    </head>\n    <body>\n        <input type=\"file\" name=\"pic\" value=\"\" id=\"pic\" onchange=\"fire();\"><br />\n        <div id=\"one\"><div id=\"bar\"></div></div>\n    </body>\n\n**服务器端代码**\n\n\t<?php\n    /**\n\t *  测试代码\n     *  服务器接收文件并合并\n     * */   \n    if (isset($_FILES['part']['tmp_name'])) {\n        if (!file_exists('./upload/up.wmv')) {\n            move_upload_file($_FILES['part']['tmp_name'], './upload/up.wmv');\n        } else {\n            file_put_contents('./upload/up.wmv', file_get_contents($_FILES['part']['tmp_name']), FILE_APPEND);\n        }\n    }\n\t?>\n\n---\n\n###知识点：\n\n1、闭包处理\n\n2、匿名函数\n\n3、Blob对象的slice方法\n\n4、表单FormData对象使用\n\n5、XMLHttpRequest对象（Ajax引擎对象）\n\n6、js的window.setInterval方法\n\n**注意：**\n\n*有时间的话，比较下setTimeout方法和setInterval方法的区别与适用范围？*\n\n(END)\n\n\n\n\n\n\n\n","slug":"201409-2014-09-07-ajax-file-slice-upload","published":1,"date":"2018-04-12T15:20:38.825Z","updated":"2018-04-12T15:20:38.826Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5w004bass66b844cyv","content":"<p>对于我们这波电脑控的90后来说，在网上上传照片、压缩文件、视频等等已经是常见的事了。但是，不知道大家有没有疑问，就是说我们可以上传只有几兆的图片、稍大一点的十几兆的打包文件，甚至于几十兆或者几百兆的文件，更有甚者是上G的大视频文件，是不是可以无限制的上传更大的数据文件呢？！</p>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/bd5a4d63jw1ek3t011i4mj20b003waac.jpg\" alt=\"pic\"></p>\n<p>答案正如你所想的，肯定是否定的嘛。服务器端怎么可以任由你上传无限大的文件呢，一般服务器端都会设置最大上传文件的大小来进行限制，那么当我们需要上传大文件时该如何实现呢？</p>\n<a id=\"more\"></a>\n<p>这里我们使用的是打文件切割技术来进行分块上传，然后在服务器端接受切割后的小文件进行一系列的合并，最后将打文件成功上传到服务器端，这就是其基本原理。</p>\n<p>###思路：</p>\n<ul>\n<li>设置文件切割大小，这里假设为10M</li>\n<li>使用定时器进行函数调用</li>\n<li>判断文件是否截取完毕</li>\n</ul>\n<p>废话不多说，直接上代码：<br><strong>js代码</strong></p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;\n   //全局对象\n   var xhr = new XMLHttpRequest();\n   var clock = null;\n   var mov = null;\n   //事件监控函数\n   function fire () {\n       mov = document.getElementsByTagName(&apos;input&apos;)[0].files[0];\n       clock = window.setInterval(sendfile, 1000);\n   }\n   //闭包计数器\n   var sendfile = function () {\n       const LENGTH = 10 * 1024 * 1024;    //10M\n       var sta = 0;                        //切割开始位置\n       var end = sta + LENGTH;             //切割结束位置\n       var sending = false;                //标志正在上传\n       var blob = null;                    //用来存储切割数据\n       var fd = null;                      //表单对象声明\n\n       //返回一个匿名函数\n       return (function () {\n                   if (sending == true) {\n                       return;\n                   }\n                   //如果sta &gt; mov.size ,就结束\n                   if (sta &gt; mov.size) {\n                       window.clearInterval(clock);\n                       return;\n                   }\n                   blob = mov.slice(sta, end);         //切割\n                   fd = new FormData();                //定义表单对象\n\n                   fd.append(&apos;part&apos;, blob);\n                   up(fd);                             //开始上传\n\n                   sta = end;\n                   end = end + LENGTH;\n                   sending = false;    //上传完毕\n\n                   percent = 100 * end / mov.size;\n                   if (percent &gt; 100) {\n                       percent = 100;\n                   }\n                   document.getElementById(&apos;bar&apos;).style.width = percent + &apos;%&apos;;\n                   document.getElementById(&apos;bar&apos;).innerHTML = parseInt(percent) + &apos;%&apos;;\n               });\n   }();\n\n   //上传函数\n   function up (fd) {\n      xhr.open(&apos;POST&apos;, &apos;./upload.php&apos;, false);     //同步传输\n      xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;);\n      xhr.send(fd);\n   }      \n   &lt;/script&gt;\n</code></pre><p><strong>html代码</strong></p>\n<pre><code>&lt;head&gt;\n &lt;style type=&quot;text/css&quot;&gt;\n        #one {\n            width : 500px;\n            height :20px;\n            border = 1px solid green;\n        }\n        #bar {\n            width : 0%;\n            height : 100%;\n            background-color:green;\n        }\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;input type=&quot;file&quot; name=&quot;pic&quot; value=&quot;&quot; id=&quot;pic&quot; onchange=&quot;fire();&quot;&gt;&lt;br /&gt;\n    &lt;div id=&quot;one&quot;&gt;&lt;div id=&quot;bar&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p><strong>服务器端代码</strong></p>\n<pre><code>&lt;?php\n/**\n *  测试代码\n *  服务器接收文件并合并\n * */   \nif (isset($_FILES[&apos;part&apos;][&apos;tmp_name&apos;])) {\n    if (!file_exists(&apos;./upload/up.wmv&apos;)) {\n        move_upload_file($_FILES[&apos;part&apos;][&apos;tmp_name&apos;], &apos;./upload/up.wmv&apos;);\n    } else {\n        file_put_contents(&apos;./upload/up.wmv&apos;, file_get_contents($_FILES[&apos;part&apos;][&apos;tmp_name&apos;]), FILE_APPEND);\n    }\n}\n?&gt;\n</code></pre><hr>\n<p>###知识点：</p>\n<p>1、闭包处理</p>\n<p>2、匿名函数</p>\n<p>3、Blob对象的slice方法</p>\n<p>4、表单FormData对象使用</p>\n<p>5、XMLHttpRequest对象（Ajax引擎对象）</p>\n<p>6、js的window.setInterval方法</p>\n<p><strong>注意：</strong></p>\n<p><em>有时间的话，比较下setTimeout方法和setInterval方法的区别与适用范围？</em></p>\n<p>(END)</p>\n","site":{"data":{}},"excerpt":"<p>对于我们这波电脑控的90后来说，在网上上传照片、压缩文件、视频等等已经是常见的事了。但是，不知道大家有没有疑问，就是说我们可以上传只有几兆的图片、稍大一点的十几兆的打包文件，甚至于几十兆或者几百兆的文件，更有甚者是上G的大视频文件，是不是可以无限制的上传更大的数据文件呢？！</p>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/bd5a4d63jw1ek3t011i4mj20b003waac.jpg\" alt=\"pic\"></p>\n<p>答案正如你所想的，肯定是否定的嘛。服务器端怎么可以任由你上传无限大的文件呢，一般服务器端都会设置最大上传文件的大小来进行限制，那么当我们需要上传大文件时该如何实现呢？</p>","more":"<p>这里我们使用的是打文件切割技术来进行分块上传，然后在服务器端接受切割后的小文件进行一系列的合并，最后将打文件成功上传到服务器端，这就是其基本原理。</p>\n<p>###思路：</p>\n<ul>\n<li>设置文件切割大小，这里假设为10M</li>\n<li>使用定时器进行函数调用</li>\n<li>判断文件是否截取完毕</li>\n</ul>\n<p>废话不多说，直接上代码：<br><strong>js代码</strong></p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;\n   //全局对象\n   var xhr = new XMLHttpRequest();\n   var clock = null;\n   var mov = null;\n   //事件监控函数\n   function fire () {\n       mov = document.getElementsByTagName(&apos;input&apos;)[0].files[0];\n       clock = window.setInterval(sendfile, 1000);\n   }\n   //闭包计数器\n   var sendfile = function () {\n       const LENGTH = 10 * 1024 * 1024;    //10M\n       var sta = 0;                        //切割开始位置\n       var end = sta + LENGTH;             //切割结束位置\n       var sending = false;                //标志正在上传\n       var blob = null;                    //用来存储切割数据\n       var fd = null;                      //表单对象声明\n\n       //返回一个匿名函数\n       return (function () {\n                   if (sending == true) {\n                       return;\n                   }\n                   //如果sta &gt; mov.size ,就结束\n                   if (sta &gt; mov.size) {\n                       window.clearInterval(clock);\n                       return;\n                   }\n                   blob = mov.slice(sta, end);         //切割\n                   fd = new FormData();                //定义表单对象\n\n                   fd.append(&apos;part&apos;, blob);\n                   up(fd);                             //开始上传\n\n                   sta = end;\n                   end = end + LENGTH;\n                   sending = false;    //上传完毕\n\n                   percent = 100 * end / mov.size;\n                   if (percent &gt; 100) {\n                       percent = 100;\n                   }\n                   document.getElementById(&apos;bar&apos;).style.width = percent + &apos;%&apos;;\n                   document.getElementById(&apos;bar&apos;).innerHTML = parseInt(percent) + &apos;%&apos;;\n               });\n   }();\n\n   //上传函数\n   function up (fd) {\n      xhr.open(&apos;POST&apos;, &apos;./upload.php&apos;, false);     //同步传输\n      xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;);\n      xhr.send(fd);\n   }      \n   &lt;/script&gt;\n</code></pre><p><strong>html代码</strong></p>\n<pre><code>&lt;head&gt;\n &lt;style type=&quot;text/css&quot;&gt;\n        #one {\n            width : 500px;\n            height :20px;\n            border = 1px solid green;\n        }\n        #bar {\n            width : 0%;\n            height : 100%;\n            background-color:green;\n        }\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;input type=&quot;file&quot; name=&quot;pic&quot; value=&quot;&quot; id=&quot;pic&quot; onchange=&quot;fire();&quot;&gt;&lt;br /&gt;\n    &lt;div id=&quot;one&quot;&gt;&lt;div id=&quot;bar&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p><strong>服务器端代码</strong></p>\n<pre><code>&lt;?php\n/**\n *  测试代码\n *  服务器接收文件并合并\n * */   \nif (isset($_FILES[&apos;part&apos;][&apos;tmp_name&apos;])) {\n    if (!file_exists(&apos;./upload/up.wmv&apos;)) {\n        move_upload_file($_FILES[&apos;part&apos;][&apos;tmp_name&apos;], &apos;./upload/up.wmv&apos;);\n    } else {\n        file_put_contents(&apos;./upload/up.wmv&apos;, file_get_contents($_FILES[&apos;part&apos;][&apos;tmp_name&apos;]), FILE_APPEND);\n    }\n}\n?&gt;\n</code></pre><hr>\n<p>###知识点：</p>\n<p>1、闭包处理</p>\n<p>2、匿名函数</p>\n<p>3、Blob对象的slice方法</p>\n<p>4、表单FormData对象使用</p>\n<p>5、XMLHttpRequest对象（Ajax引擎对象）</p>\n<p>6、js的window.setInterval方法</p>\n<p><strong>注意：</strong></p>\n<p><em>有时间的话，比较下setTimeout方法和setInterval方法的区别与适用范围？</em></p>\n<p>(END)</p>"},{"layout":"post","title":"jQuery对象与DOM对象相互转换","_content":"对于刚学习jQuery的童鞋来说，可能会一时分不清哪些是jQuery对象，哪些是DOM对象。而且初学者很容易以jQuery和DOM对象混搭的形式来进行js操作，这要求我们能够很好的进行jQuery和DOM对象之间转换，这可是很有必要的奥，下面简单来说明下。\n\n首先，我们先定义好变量的风格，如果是jQuery对象，变量前就加上`$`符号：\n\n\tvar $variable = jQuery对象\n\n如果是DOM对象，则不加`$`符号：\n\n\tvar variable = DOM对象\n\n<!--more-->\n\n###什么是jQuery对象？\n\n简单解释就是通过jQuery包装DOM对象后产生的对象。JQuery对象的索引保存的是dom对象，所以可以通过索引将经jQuery对象转化为dom对象（**实际上是获取保存在jQuery对象中的DOM对象**）。\n\n\n\n简单事例：\n\t\n\t$(\"#aabb\").html();\n\n意思是获取id为aabb的元素内的html代码，其中html()是jQuery中的方法。\n\n\tdocument.getElementById(\"aabb\").innerHTML();\n\n这个是通过DOM实现的与上面相同的示例代码。\n\n###jQuery对象转换为DOM对象\n\n只有jQuery对象才能调用jQuery类库的各种函数，同样有些dom对象的属性和方法在jQuery上也是无法调用的，不过基本上jQuery类库提供的函数包含了所有的dom操作。\n\njQuery提供了两种方法讲一个jQUery对象转换为DOM对象，即[index]和get(index)。由上面我们已经知道jQuery对象是一个数组对象，JQuery对象的索引保存的是dom对象，所以可以通过索引将经jQuery对象转化为dom对象。\n\n* 方法一：通过[index]的方法得到相应的DOM对象\n\n\t\tvar $a = $(\"test\");\t\t//jQuery对象\n\t\tvar  b = $a[0];\t\t\t//DOM对象\n\n* 方法二：通过get(index)函数来得到相应的DOM对象\n\n\t\tvar $a = $(\"test\");\t\t//jQuery对象\n\t\tvar  b = $a.get(0);\t\t//DOM对象\n\n\n###DOM对象转换为jQuery对象\n\n对于一个DOM对象，只要我们使用$()把DOM对象包装起来就可以得到一个jQuery对象，从而就可以任意使用jQUery类库中声明好的函数了，就这么简单。\n\n代码：\n\t\n\tvar bb = document.getElementById(\"test\");\t//DOM对象\n\tvar $a = $(bb);\t\t\t\t\t\t\t\t//jQuery对象\n\n***注意：**\n\n$(elements)中的elements参数还可以是jQuery对象，虽然将一个jQuery对象在次转化没有意义，这是为了当不确定一个对象的类型是jQuery对象还是dom对象时，可以再次调用此函数进行转化，这样可以保证此对象一定是jQuery对象。\n\n---\n\n（end）\n\n\n\n\n\n\n\n","source":"_posts/201409/2014-09-11-jquery_and_dom.md","raw":"---\nlayout : post\ntitle : jQuery对象与DOM对象相互转换\ncategory : jQuery\ntags : jQuery DOM\n---\n对于刚学习jQuery的童鞋来说，可能会一时分不清哪些是jQuery对象，哪些是DOM对象。而且初学者很容易以jQuery和DOM对象混搭的形式来进行js操作，这要求我们能够很好的进行jQuery和DOM对象之间转换，这可是很有必要的奥，下面简单来说明下。\n\n首先，我们先定义好变量的风格，如果是jQuery对象，变量前就加上`$`符号：\n\n\tvar $variable = jQuery对象\n\n如果是DOM对象，则不加`$`符号：\n\n\tvar variable = DOM对象\n\n<!--more-->\n\n###什么是jQuery对象？\n\n简单解释就是通过jQuery包装DOM对象后产生的对象。JQuery对象的索引保存的是dom对象，所以可以通过索引将经jQuery对象转化为dom对象（**实际上是获取保存在jQuery对象中的DOM对象**）。\n\n\n\n简单事例：\n\t\n\t$(\"#aabb\").html();\n\n意思是获取id为aabb的元素内的html代码，其中html()是jQuery中的方法。\n\n\tdocument.getElementById(\"aabb\").innerHTML();\n\n这个是通过DOM实现的与上面相同的示例代码。\n\n###jQuery对象转换为DOM对象\n\n只有jQuery对象才能调用jQuery类库的各种函数，同样有些dom对象的属性和方法在jQuery上也是无法调用的，不过基本上jQuery类库提供的函数包含了所有的dom操作。\n\njQuery提供了两种方法讲一个jQUery对象转换为DOM对象，即[index]和get(index)。由上面我们已经知道jQuery对象是一个数组对象，JQuery对象的索引保存的是dom对象，所以可以通过索引将经jQuery对象转化为dom对象。\n\n* 方法一：通过[index]的方法得到相应的DOM对象\n\n\t\tvar $a = $(\"test\");\t\t//jQuery对象\n\t\tvar  b = $a[0];\t\t\t//DOM对象\n\n* 方法二：通过get(index)函数来得到相应的DOM对象\n\n\t\tvar $a = $(\"test\");\t\t//jQuery对象\n\t\tvar  b = $a.get(0);\t\t//DOM对象\n\n\n###DOM对象转换为jQuery对象\n\n对于一个DOM对象，只要我们使用$()把DOM对象包装起来就可以得到一个jQuery对象，从而就可以任意使用jQUery类库中声明好的函数了，就这么简单。\n\n代码：\n\t\n\tvar bb = document.getElementById(\"test\");\t//DOM对象\n\tvar $a = $(bb);\t\t\t\t\t\t\t\t//jQuery对象\n\n***注意：**\n\n$(elements)中的elements参数还可以是jQuery对象，虽然将一个jQuery对象在次转化没有意义，这是为了当不确定一个对象的类型是jQuery对象还是dom对象时，可以再次调用此函数进行转化，这样可以保证此对象一定是jQuery对象。\n\n---\n\n（end）\n\n\n\n\n\n\n\n","slug":"201409-2014-09-11-jquery-and-dom","published":1,"date":"2018-04-12T15:20:38.826Z","updated":"2018-04-12T15:20:38.826Z","comments":1,"photos":[],"link":"","_id":"cjfwomb5x004dass61jtwq5eq","content":"<p>对于刚学习jQuery的童鞋来说，可能会一时分不清哪些是jQuery对象，哪些是DOM对象。而且初学者很容易以jQuery和DOM对象混搭的形式来进行js操作，这要求我们能够很好的进行jQuery和DOM对象之间转换，这可是很有必要的奥，下面简单来说明下。</p>\n<p>首先，我们先定义好变量的风格，如果是jQuery对象，变量前就加上<code>$</code>符号：</p>\n<pre><code>var $variable = jQuery对象\n</code></pre><p>如果是DOM对象，则不加<code>$</code>符号：</p>\n<pre><code>var variable = DOM对象\n</code></pre><a id=\"more\"></a>\n<p>###什么是jQuery对象？</p>\n<p>简单解释就是通过jQuery包装DOM对象后产生的对象。JQuery对象的索引保存的是dom对象，所以可以通过索引将经jQuery对象转化为dom对象（<strong>实际上是获取保存在jQuery对象中的DOM对象</strong>）。</p>\n<p>简单事例：</p>\n<pre><code>$(&quot;#aabb&quot;).html();\n</code></pre><p>意思是获取id为aabb的元素内的html代码，其中html()是jQuery中的方法。</p>\n<pre><code>document.getElementById(&quot;aabb&quot;).innerHTML();\n</code></pre><p>这个是通过DOM实现的与上面相同的示例代码。</p>\n<p>###jQuery对象转换为DOM对象</p>\n<p>只有jQuery对象才能调用jQuery类库的各种函数，同样有些dom对象的属性和方法在jQuery上也是无法调用的，不过基本上jQuery类库提供的函数包含了所有的dom操作。</p>\n<p>jQuery提供了两种方法讲一个jQUery对象转换为DOM对象，即[index]和get(index)。由上面我们已经知道jQuery对象是一个数组对象，JQuery对象的索引保存的是dom对象，所以可以通过索引将经jQuery对象转化为dom对象。</p>\n<ul>\n<li><p>方法一：通过[index]的方法得到相应的DOM对象</p>\n<pre><code>var $a = $(&quot;test&quot;);        //jQuery对象\nvar  b = $a[0];            //DOM对象\n</code></pre></li>\n<li><p>方法二：通过get(index)函数来得到相应的DOM对象</p>\n<pre><code>var $a = $(&quot;test&quot;);        //jQuery对象\nvar  b = $a.get(0);        //DOM对象\n</code></pre></li>\n</ul>\n<p>###DOM对象转换为jQuery对象</p>\n<p>对于一个DOM对象，只要我们使用$()把DOM对象包装起来就可以得到一个jQuery对象，从而就可以任意使用jQUery类库中声明好的函数了，就这么简单。</p>\n<p>代码：</p>\n<pre><code>var bb = document.getElementById(&quot;test&quot;);    //DOM对象\nvar $a = $(bb);                                //jQuery对象\n</code></pre><p><strong>*注意：</strong></p>\n<p>$(elements)中的elements参数还可以是jQuery对象，虽然将一个jQuery对象在次转化没有意义，这是为了当不确定一个对象的类型是jQuery对象还是dom对象时，可以再次调用此函数进行转化，这样可以保证此对象一定是jQuery对象。</p>\n<hr>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>对于刚学习jQuery的童鞋来说，可能会一时分不清哪些是jQuery对象，哪些是DOM对象。而且初学者很容易以jQuery和DOM对象混搭的形式来进行js操作，这要求我们能够很好的进行jQuery和DOM对象之间转换，这可是很有必要的奥，下面简单来说明下。</p>\n<p>首先，我们先定义好变量的风格，如果是jQuery对象，变量前就加上<code>$</code>符号：</p>\n<pre><code>var $variable = jQuery对象\n</code></pre><p>如果是DOM对象，则不加<code>$</code>符号：</p>\n<pre><code>var variable = DOM对象\n</code></pre>","more":"<p>###什么是jQuery对象？</p>\n<p>简单解释就是通过jQuery包装DOM对象后产生的对象。JQuery对象的索引保存的是dom对象，所以可以通过索引将经jQuery对象转化为dom对象（<strong>实际上是获取保存在jQuery对象中的DOM对象</strong>）。</p>\n<p>简单事例：</p>\n<pre><code>$(&quot;#aabb&quot;).html();\n</code></pre><p>意思是获取id为aabb的元素内的html代码，其中html()是jQuery中的方法。</p>\n<pre><code>document.getElementById(&quot;aabb&quot;).innerHTML();\n</code></pre><p>这个是通过DOM实现的与上面相同的示例代码。</p>\n<p>###jQuery对象转换为DOM对象</p>\n<p>只有jQuery对象才能调用jQuery类库的各种函数，同样有些dom对象的属性和方法在jQuery上也是无法调用的，不过基本上jQuery类库提供的函数包含了所有的dom操作。</p>\n<p>jQuery提供了两种方法讲一个jQUery对象转换为DOM对象，即[index]和get(index)。由上面我们已经知道jQuery对象是一个数组对象，JQuery对象的索引保存的是dom对象，所以可以通过索引将经jQuery对象转化为dom对象。</p>\n<ul>\n<li><p>方法一：通过[index]的方法得到相应的DOM对象</p>\n<pre><code>var $a = $(&quot;test&quot;);        //jQuery对象\nvar  b = $a[0];            //DOM对象\n</code></pre></li>\n<li><p>方法二：通过get(index)函数来得到相应的DOM对象</p>\n<pre><code>var $a = $(&quot;test&quot;);        //jQuery对象\nvar  b = $a.get(0);        //DOM对象\n</code></pre></li>\n</ul>\n<p>###DOM对象转换为jQuery对象</p>\n<p>对于一个DOM对象，只要我们使用$()把DOM对象包装起来就可以得到一个jQuery对象，从而就可以任意使用jQUery类库中声明好的函数了，就这么简单。</p>\n<p>代码：</p>\n<pre><code>var bb = document.getElementById(&quot;test&quot;);    //DOM对象\nvar $a = $(bb);                                //jQuery对象\n</code></pre><p><strong>*注意：</strong></p>\n<p>$(elements)中的elements参数还可以是jQuery对象，虽然将一个jQuery对象在次转化没有意义，这是为了当不确定一个对象的类型是jQuery对象还是dom对象时，可以再次调用此函数进行转化，这样可以保证此对象一定是jQuery对象。</p>\n<hr>\n<p>（end）</p>"},{"layout":"post","title":"JavaScript之词法分析","_content":"js是一门简单的严格面向对象语言，对于刚开始学习js的菜鸟来说，要想学好js有两条链是必须要掌握的，它们分别是：\n\n* 作用域链\n* 面向对象原型链\n\n这里简单总结下有关作用域链的问题，首先要求我们得懂的js的词法分析，关于词法分析分为两部分来思考，分别是分析阶段和执行阶段。\n\n<!--more-->\n\n###分析阶段\n\n在分析阶段，我们要懂得依次分析三样东西，他们分别是：\n\n* 先分析所传递参数\n* 再分析变量声明\n* 最后分析函数声明\n\n一个函数能使用的**局部变量**，就是从上面三步分析得来的，而对于**全局变量**，我们就得沿着作用域链自下而上寻找了。\n\n**具体步骤：**（*注意：步骤是依次执行的*）\n\n* 函数运行前的一瞬间，会生成Active Object(活动对象)，简称AO。\n\n* 分析传递参数\n\t* 函数声明的参数，形成AO的属性，值全是undefined\n\t* 接收实参，形成AO相应属性的值\n\n* 分析var变量声明，如：`var age`\n\t* 如果AO上还没有age属性，则值是undefined\n\t* 如果AO上已经存在age属性，则不做任何影响\n\n* 分析函数声明，如 `function foo () {}`\n\t* 则把函数赋给AO.foo属性\n\t* 如果此前foo属性已经存在，则被无情的覆盖\n\n###执行阶段\n\n最后分析执行过程，比如：变量的赋值操作、打印输出等\n\n**注意：** 函数表达式也是一个赋值过程，在此阶段执行，特此注意！\n\n---\n\n下面简单分析几个案例：\n\n案例一：\n\n\tfunction test1 (age) {\n\t\tvar age = 20;\n\t\talert(age);\n\t}\n\ttest1();\n\n\n1、分析过程：\n\t\n* 形成 `AO={}`\n* 分析形参，`AO={age:undefined}`\n* 分析`var age`,发现AO已有age属性，不做任何影响\n\n2、执行过程\n\n* `AO.age=20`\n* `alert(age)`\n\n\n案例二：\n\n\t function test2 (a) {\n         var a = 'hello';\n         alert(a);\n         function a () {}\n         alert(a);\n\t}\n\ttest2();\n\n1、分析过程：\n\n* `AO={}`\n* 分析参数，`AO={a:undefined}`\n* 分析变量声明,AO已有a属性，因次不做任何影响。\n* 分析函数声明，`AO.a=function(){}`,即a属性被覆盖成函数\n\n2、执行过程\n\n* `a=hello`\n* `alert(a);`\n* `alert(a);`\n\n案例三：\n\n\tfunction a (b) {\n        alert(b);\n        function b () {\n            alert(b);\n        }\n        b();\n     }\n     a(1)；\n\n1、分析过程\n\n* 形成`AO={}`\n* 分析参数，`AO={b:undefined}`,接受实参，形成`AO={b:1}`\n* 分析变量声明，无var变量声明\n* 分析函数声明，`AO.b=function (){}`\n\n2、执行过程\n\n* `alert(b)`\n* `b()`,然后`alert(b)`\n\n---\n\n###小结\n\n懂得js的词法分析还是很有必要的，这样会很清除函数的执行过程以及原理。以后遇到类似的问题或者面试题，只要严格按照上述的步骤进行推导，就会得出正确的答案！~~\n\n(end)\n\n\n\n\n\n\t\n            \n\n\t\n\n","source":"_posts/201409/2014-09-12-js_function_analysis.md","raw":"---\nlayout : post\ntitle : JavaScript之词法分析\ncategory : javascript\ntags : js\n---\njs是一门简单的严格面向对象语言，对于刚开始学习js的菜鸟来说，要想学好js有两条链是必须要掌握的，它们分别是：\n\n* 作用域链\n* 面向对象原型链\n\n这里简单总结下有关作用域链的问题，首先要求我们得懂的js的词法分析，关于词法分析分为两部分来思考，分别是分析阶段和执行阶段。\n\n<!--more-->\n\n###分析阶段\n\n在分析阶段，我们要懂得依次分析三样东西，他们分别是：\n\n* 先分析所传递参数\n* 再分析变量声明\n* 最后分析函数声明\n\n一个函数能使用的**局部变量**，就是从上面三步分析得来的，而对于**全局变量**，我们就得沿着作用域链自下而上寻找了。\n\n**具体步骤：**（*注意：步骤是依次执行的*）\n\n* 函数运行前的一瞬间，会生成Active Object(活动对象)，简称AO。\n\n* 分析传递参数\n\t* 函数声明的参数，形成AO的属性，值全是undefined\n\t* 接收实参，形成AO相应属性的值\n\n* 分析var变量声明，如：`var age`\n\t* 如果AO上还没有age属性，则值是undefined\n\t* 如果AO上已经存在age属性，则不做任何影响\n\n* 分析函数声明，如 `function foo () {}`\n\t* 则把函数赋给AO.foo属性\n\t* 如果此前foo属性已经存在，则被无情的覆盖\n\n###执行阶段\n\n最后分析执行过程，比如：变量的赋值操作、打印输出等\n\n**注意：** 函数表达式也是一个赋值过程，在此阶段执行，特此注意！\n\n---\n\n下面简单分析几个案例：\n\n案例一：\n\n\tfunction test1 (age) {\n\t\tvar age = 20;\n\t\talert(age);\n\t}\n\ttest1();\n\n\n1、分析过程：\n\t\n* 形成 `AO={}`\n* 分析形参，`AO={age:undefined}`\n* 分析`var age`,发现AO已有age属性，不做任何影响\n\n2、执行过程\n\n* `AO.age=20`\n* `alert(age)`\n\n\n案例二：\n\n\t function test2 (a) {\n         var a = 'hello';\n         alert(a);\n         function a () {}\n         alert(a);\n\t}\n\ttest2();\n\n1、分析过程：\n\n* `AO={}`\n* 分析参数，`AO={a:undefined}`\n* 分析变量声明,AO已有a属性，因次不做任何影响。\n* 分析函数声明，`AO.a=function(){}`,即a属性被覆盖成函数\n\n2、执行过程\n\n* `a=hello`\n* `alert(a);`\n* `alert(a);`\n\n案例三：\n\n\tfunction a (b) {\n        alert(b);\n        function b () {\n            alert(b);\n        }\n        b();\n     }\n     a(1)；\n\n1、分析过程\n\n* 形成`AO={}`\n* 分析参数，`AO={b:undefined}`,接受实参，形成`AO={b:1}`\n* 分析变量声明，无var变量声明\n* 分析函数声明，`AO.b=function (){}`\n\n2、执行过程\n\n* `alert(b)`\n* `b()`,然后`alert(b)`\n\n---\n\n###小结\n\n懂得js的词法分析还是很有必要的，这样会很清除函数的执行过程以及原理。以后遇到类似的问题或者面试题，只要严格按照上述的步骤进行推导，就会得出正确的答案！~~\n\n(end)\n\n\n\n\n\n\t\n            \n\n\t\n\n","slug":"201409-2014-09-12-js-function-analysis","published":1,"date":"2018-04-12T15:20:38.826Z","updated":"2018-04-12T15:20:38.826Z","comments":1,"photos":[],"link":"","_id":"cjfwomb61004iass6ba65pryu","content":"<p>js是一门简单的严格面向对象语言，对于刚开始学习js的菜鸟来说，要想学好js有两条链是必须要掌握的，它们分别是：</p>\n<ul>\n<li>作用域链</li>\n<li>面向对象原型链</li>\n</ul>\n<p>这里简单总结下有关作用域链的问题，首先要求我们得懂的js的词法分析，关于词法分析分为两部分来思考，分别是分析阶段和执行阶段。</p>\n<a id=\"more\"></a>\n<p>###分析阶段</p>\n<p>在分析阶段，我们要懂得依次分析三样东西，他们分别是：</p>\n<ul>\n<li>先分析所传递参数</li>\n<li>再分析变量声明</li>\n<li>最后分析函数声明</li>\n</ul>\n<p>一个函数能使用的<strong>局部变量</strong>，就是从上面三步分析得来的，而对于<strong>全局变量</strong>，我们就得沿着作用域链自下而上寻找了。</p>\n<p><strong>具体步骤：</strong>（<em>注意：步骤是依次执行的</em>）</p>\n<ul>\n<li><p>函数运行前的一瞬间，会生成Active Object(活动对象)，简称AO。</p>\n</li>\n<li><p>分析传递参数</p>\n<ul>\n<li>函数声明的参数，形成AO的属性，值全是undefined</li>\n<li>接收实参，形成AO相应属性的值</li>\n</ul>\n</li>\n<li><p>分析var变量声明，如：<code>var age</code></p>\n<ul>\n<li>如果AO上还没有age属性，则值是undefined</li>\n<li>如果AO上已经存在age属性，则不做任何影响</li>\n</ul>\n</li>\n<li><p>分析函数声明，如 <code>function foo () {}</code></p>\n<ul>\n<li>则把函数赋给AO.foo属性</li>\n<li>如果此前foo属性已经存在，则被无情的覆盖</li>\n</ul>\n</li>\n</ul>\n<p>###执行阶段</p>\n<p>最后分析执行过程，比如：变量的赋值操作、打印输出等</p>\n<p><strong>注意：</strong> 函数表达式也是一个赋值过程，在此阶段执行，特此注意！</p>\n<hr>\n<p>下面简单分析几个案例：</p>\n<p>案例一：</p>\n<pre><code>function test1 (age) {\n    var age = 20;\n    alert(age);\n}\ntest1();\n</code></pre><p>1、分析过程：</p>\n<ul>\n<li>形成 <code>AO={}</code></li>\n<li>分析形参，<code>AO={age:undefined}</code></li>\n<li>分析<code>var age</code>,发现AO已有age属性，不做任何影响</li>\n</ul>\n<p>2、执行过程</p>\n<ul>\n<li><code>AO.age=20</code></li>\n<li><code>alert(age)</code></li>\n</ul>\n<p>案例二：</p>\n<pre><code> function test2 (a) {\n     var a = &apos;hello&apos;;\n     alert(a);\n     function a () {}\n     alert(a);\n}\ntest2();\n</code></pre><p>1、分析过程：</p>\n<ul>\n<li><code>AO={}</code></li>\n<li>分析参数，<code>AO={a:undefined}</code></li>\n<li>分析变量声明,AO已有a属性，因次不做任何影响。</li>\n<li>分析函数声明，<code>AO.a=function(){}</code>,即a属性被覆盖成函数</li>\n</ul>\n<p>2、执行过程</p>\n<ul>\n<li><code>a=hello</code></li>\n<li><code>alert(a);</code></li>\n<li><code>alert(a);</code></li>\n</ul>\n<p>案例三：</p>\n<pre><code>function a (b) {\n    alert(b);\n    function b () {\n        alert(b);\n    }\n    b();\n }\n a(1)；\n</code></pre><p>1、分析过程</p>\n<ul>\n<li>形成<code>AO={}</code></li>\n<li>分析参数，<code>AO={b:undefined}</code>,接受实参，形成<code>AO={b:1}</code></li>\n<li>分析变量声明，无var变量声明</li>\n<li>分析函数声明，<code>AO.b=function (){}</code></li>\n</ul>\n<p>2、执行过程</p>\n<ul>\n<li><code>alert(b)</code></li>\n<li><code>b()</code>,然后<code>alert(b)</code></li>\n</ul>\n<hr>\n<p>###小结</p>\n<p>懂得js的词法分析还是很有必要的，这样会很清除函数的执行过程以及原理。以后遇到类似的问题或者面试题，只要严格按照上述的步骤进行推导，就会得出正确的答案！~~</p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>js是一门简单的严格面向对象语言，对于刚开始学习js的菜鸟来说，要想学好js有两条链是必须要掌握的，它们分别是：</p>\n<ul>\n<li>作用域链</li>\n<li>面向对象原型链</li>\n</ul>\n<p>这里简单总结下有关作用域链的问题，首先要求我们得懂的js的词法分析，关于词法分析分为两部分来思考，分别是分析阶段和执行阶段。</p>","more":"<p>###分析阶段</p>\n<p>在分析阶段，我们要懂得依次分析三样东西，他们分别是：</p>\n<ul>\n<li>先分析所传递参数</li>\n<li>再分析变量声明</li>\n<li>最后分析函数声明</li>\n</ul>\n<p>一个函数能使用的<strong>局部变量</strong>，就是从上面三步分析得来的，而对于<strong>全局变量</strong>，我们就得沿着作用域链自下而上寻找了。</p>\n<p><strong>具体步骤：</strong>（<em>注意：步骤是依次执行的</em>）</p>\n<ul>\n<li><p>函数运行前的一瞬间，会生成Active Object(活动对象)，简称AO。</p>\n</li>\n<li><p>分析传递参数</p>\n<ul>\n<li>函数声明的参数，形成AO的属性，值全是undefined</li>\n<li>接收实参，形成AO相应属性的值</li>\n</ul>\n</li>\n<li><p>分析var变量声明，如：<code>var age</code></p>\n<ul>\n<li>如果AO上还没有age属性，则值是undefined</li>\n<li>如果AO上已经存在age属性，则不做任何影响</li>\n</ul>\n</li>\n<li><p>分析函数声明，如 <code>function foo () {}</code></p>\n<ul>\n<li>则把函数赋给AO.foo属性</li>\n<li>如果此前foo属性已经存在，则被无情的覆盖</li>\n</ul>\n</li>\n</ul>\n<p>###执行阶段</p>\n<p>最后分析执行过程，比如：变量的赋值操作、打印输出等</p>\n<p><strong>注意：</strong> 函数表达式也是一个赋值过程，在此阶段执行，特此注意！</p>\n<hr>\n<p>下面简单分析几个案例：</p>\n<p>案例一：</p>\n<pre><code>function test1 (age) {\n    var age = 20;\n    alert(age);\n}\ntest1();\n</code></pre><p>1、分析过程：</p>\n<ul>\n<li>形成 <code>AO={}</code></li>\n<li>分析形参，<code>AO={age:undefined}</code></li>\n<li>分析<code>var age</code>,发现AO已有age属性，不做任何影响</li>\n</ul>\n<p>2、执行过程</p>\n<ul>\n<li><code>AO.age=20</code></li>\n<li><code>alert(age)</code></li>\n</ul>\n<p>案例二：</p>\n<pre><code> function test2 (a) {\n     var a = &apos;hello&apos;;\n     alert(a);\n     function a () {}\n     alert(a);\n}\ntest2();\n</code></pre><p>1、分析过程：</p>\n<ul>\n<li><code>AO={}</code></li>\n<li>分析参数，<code>AO={a:undefined}</code></li>\n<li>分析变量声明,AO已有a属性，因次不做任何影响。</li>\n<li>分析函数声明，<code>AO.a=function(){}</code>,即a属性被覆盖成函数</li>\n</ul>\n<p>2、执行过程</p>\n<ul>\n<li><code>a=hello</code></li>\n<li><code>alert(a);</code></li>\n<li><code>alert(a);</code></li>\n</ul>\n<p>案例三：</p>\n<pre><code>function a (b) {\n    alert(b);\n    function b () {\n        alert(b);\n    }\n    b();\n }\n a(1)；\n</code></pre><p>1、分析过程</p>\n<ul>\n<li>形成<code>AO={}</code></li>\n<li>分析参数，<code>AO={b:undefined}</code>,接受实参，形成<code>AO={b:1}</code></li>\n<li>分析变量声明，无var变量声明</li>\n<li>分析函数声明，<code>AO.b=function (){}</code></li>\n</ul>\n<p>2、执行过程</p>\n<ul>\n<li><code>alert(b)</code></li>\n<li><code>b()</code>,然后<code>alert(b)</code></li>\n</ul>\n<hr>\n<p>###小结</p>\n<p>懂得js的词法分析还是很有必要的，这样会很清除函数的执行过程以及原理。以后遇到类似的问题或者面试题，只要严格按照上述的步骤进行推导，就会得出正确的答案！~~</p>\n<p>(end)</p>"},{"layout":"post","title":"不要浪费人生的每一天","_content":"　　今天分享一个演讲，演讲人是Dropbox创始人，他向我们毕业或者在校大学生提出了3点人生建议，但是可能也同样适用于你**MIT演讲：只和出色的人在一起，不浪费生命的每一天**\n\n　　Dropbox创始人，CEO德鲁·休斯顿(Drew Houston)近期在美国麻省理工学院的毕业典礼上发表演讲。他向大学生提出了3点人生建议：追逐自己感兴趣的事，找到最合适的圈子，以及不要浪费人生的每一天。以下为休斯顿演讲全文：\n\n　　谢谢董事会主席里德，也祝贺所有2013届毕业的同学。我很高兴回到麻省理工学院，并很荣幸地与你们在一起。我仍然佩戴着“黄铜鼠”戒指。在毕业当天向所有人展示这枚戒指仍是我一生中最自豪的时刻之一。这是特殊的一天，而原因则有很多，我认为最令人激动的原因在于，这是人生中第一天你不必再为上课签到担心。\n\n  <!--more-->\t\n\n   ![pic](http://ww4.sinaimg.cn/mw690/bd5a4d63jw1ekmk8mpeipj20b408caah.jpg)\n\n　　在你们人生最初的几个十年中，成功意味着从一个围城跳入另一个围城：考试获得高分，进入这所大学，修完所有课程，获得这一学位，进入一家有名的研究所，随后进入另一家有名的研究所。今天，这一切都结束了。\n\n人生规划的难点在于，你不知道将走向何处，但会希望尽快实现自己的目标。或许你会建立一家公司，或治愈癌症，或撰写一部美国知名的小说。但谁知道呢？或许，情况会变得很糟糕。我无法判断。\n\n　　今天，穿着学位服站在这里并对大家演讲并不在我7年前的计划之中。实际上，我从没有过伟大的计划。我现在发现，在刚刚毕业时，几乎不可能提出这种伟大的计划。\n\n　　我曾思考过，你们从今天开始将会有怎样不同的人生。我也曾思考过，如果重来一次，我会怎样去做。你们能走到今天是因为聪明的大脑和刻苦学习。但没有人会告诉你，过了今天之后，推动成功的元素将会改变。因此我想做的是，给你们一张“考试作弊的小抄”，这是我在毕业当天希望拥有的。\n\n　　如果看看这张小抄，可以发现上面的内容不多：一个网球、一个圆圈，以及数字3万。我知道，目前这些内容没有任何意义，但请听我说完。\n\n  21岁时，我建立了自己的第一家公司，这是我和合伙人安德鲁·可利克(AndrewCrick)此前从未做过的。我们不知道走进市政大厅是否需要穿着正装，也不知道是否需要刻一枚印章为重要文件盖章。最终我们发现，只需上网填表就可以在两分钟内完成建立公司的步骤。这听起来有些扫兴，但我们开始了自己的生意。吃着洋葱圈，我们决定这家公司将针对SAT考试提供一种全新的网络课程。当时，大部分孩子仍在使用厚达800页的教材，而网上的其他预备课程也不是很好。我们将公司称作Accolade，在SAT词汇表中意为“杰出的成就”。实际上，我们的公司名为“TheAccolade Group LLC”，我们认为这听起来容易引起关注。\n\n　　在回家路上，我前往一家Staples门店去买名片盒。很明显，建立公司的最重要一步是使用Photoshop设计公司标志，并打印一些名片，名片上印有“创始人”的字样。下一步则是在各种会议上分发名片，并告诉女孩们：“理由是，我确实有一家公司。”这挺不错。\n\n　　不过，创业最有趣的部分在于学习各种新东西。每年夏天，我都会住在兄弟会的房子里，5楼有一个梯子通往房顶。我会拿上一把绿色的尼龙折叠椅，带着从亚马逊购买的商业类图书去阅读。每个周末，我都会花时间阅读有关营销、销售、管理，以及其他我不了解领域的图书。我并未打算在PhiDeltaTheta兄弟会的房顶上拿到MBA学位，但事实就是这样。\n\n　　几年后，情况开始走下坡路。我感觉，我需要更加努力才能取得进步。一些时候，我觉得思路突然中断，无法解答更多关于平行线或火车开行的数学题。我发现自己出了问题，对这样的低效我感到自责。建立一家公司是我的梦想，但我可能还没有做好万全的准备。\n\n　　因此我休息了一段时间。当然，如果你来自6系(麻省理工学院电气工程专业)，那么“休息一会”意味着编写一个扑克机器人程序。如果你们不懂什么是扑克机器人，可以这样理解：当你在网上打扑克时，你一坐几个小时，点击一些按钮，输掉所有钱，而扑克机器人意味着你可以用计算机帮你输掉这些钱。\n\n　　这是一项有趣的挑战。我全身心投入。我在洗澡时思考，在午夜也会思考。这就像打开了一个开关，突然之间我就成了一台机器。\n\n　　期间，我的父母希望全家人前往新汉普歇尔，共同度过一个周末。但我仍希望开发我的扑克机器人。因此我打开本田雅阁的后备箱，将所有计算机设备和线缆搬进度假小屋。饭厅的桌子不是很大，因此我将所有锅碗瓢盆搬开，给显示器腾出地方。这一次，我妈妈认为我出了什么问题，肯定要进监狱。\n\n　　原本我可以说，去做你喜欢的事，但实际情况并非如此。你可以很容易说服自己，你喜欢自己正在做的事。有谁会承认他们不喜欢呢？在思考这一问题时，我发现，我所认识的最愉快、最成功的人们不仅喜欢自己做的事，也善于解决一个重要问题，这对他们来说很重要。他们让我联想到小狗追逐网球的例子：它们的眼神有些疯狂，绳索一松就会立刻扑上去，抓住可以抓的一切东西。我的另一些朋友同样努力工作，获得了很高的薪水，但他们总是抱怨被束缚在办公桌上。\n\n　　问题在于，许多人没有找到他们的网球。我不希望走错路。我喜欢良好的标准化考试，但成为SAT备考的领先者并不是我的目标。令我惊讶的是，扑克机器人和Dropbox开始分散我的注意力。我内心的一个声音告诉我要去哪里，而我则一直告诉它闭嘴，让我好好工作。然而有些时候，这个声音才最了解你。\n\n　　我花了很长时间才知道这一点：最努力的人并不是由于纪律性才努力工作，而是因为他们正在解决有趣的问题。因此在今天之后，你们不用自己鞭策自己，而是要找到属于自己的网球，让事情去鞭策自己。这可能需要花一段时间，但在你找到网球之前，请倾听内心的声音。\n\n　　让我们回到我毕业后的那个夏天，你们也将迎来这样的夏天。我兄弟会的伙伴亚当·史密斯(AdamSmith)和他的朋友马特·布雷齐纳(Matt Brezina)创建了一家公司。我们都发现，当所有人都在一间公寓中工作时，将非常有趣。\n\n　　这是一个完美的夏天，或者说，接近完美。公寓的空调出了问题，我们所有人都只能在小格子间里编程。史密斯和布雷齐纳日以继夜地工作。一段时间后，许多潜在投资人找到他们，与他们分享秘密，并带他们乘坐直升机。我感到羡慕。我的公司已有几年时间，而史密斯的公司才只有几个月。我的直升机在哪里？\n\n　　情况越来越糟。8月份过去，史密斯带来了坏消息：他们将要搬走。这不仅意味着我失去了小食品来源，他们也将离开前往硅谷，在那里将会有重要的事发生，但我不参与其中。我经常打电话给史密斯，听听他的进展。他们似乎总是很顺利。他会告诉我：“我们今天下午见了维诺德·科斯拉(VinodKhosla)。”科斯拉是一名亿万富翁投资人，同时也是Sun的联合创始人。他丢给我一个“重磅炸弹”：“他会给我们500万美元。”\n\n　　我为他取得的成就感到激动，但对我来说则是一次打击。这是我的酒友，也是我兄弟会中的兄弟，比我年轻两岁。我没有任何借口。他已经在“超级碗”比赛中出场，而我在选秀时就已落选。史密斯当时并不知道，但实际上他给了我很大的触动：是时候做出改变了。\n\n　　许多人都说，人们通常只与5个人在一起的时间最长。想一想，谁是你圈子中的这5个人？我得出了一些好消息：对建立圈子来说，麻省理工学院是全球最好的场所。如果我没有来到这里，我就不会认识史密斯，不会遇见出色的合作者，也不会有Dropbox。\n\n　　我学到的一点是，周围人的出色与自己的才能和努力同样重要。如果迈克尔·乔丹(MichaelJordan)没有加入NBA，他周围的5个人都来自意大利，那么将会怎样？你的圈子使你变得更好，正如史密斯对我一样。\n\n　　你的圈子中将会加入你的同事和周围所有人。你生活的地方很重要：全世界只有一个麻省理工学院，一个好莱坞，一个硅谷。这不是巧合：无论从事什么工作，通常只有一个地方能吸引顶尖人才。你需要去那里，而不是其他地方。见到我的偶像并向他们学习，这给了我巨大的优势。你的偶像需要成为你圈子的一部分，请跟随他们。如果下一件大事将在其他某处发生，请立即前去。\n\n　　大学中你跌入的另一个陷阱可能是“做好准备”。请不要错误理解：学习是首要任务，但最快的学习方式是实践。如果有一个梦想，你可以花一生的时间去学习、计划和准备。你应当去做的是立即开始。\n\n　　坦白地说，我不认为我做好了准备。我还记得，第一名投资人答应我的要求并问我将钱打到哪里的那一天。对一名24岁的年轻人而言，这就是圣诞节。打开礼物后，你在美国银行的帐户不断刷新，你的支票帐户从60美元增加至120万美元。最初我非常兴奋：数字中出现了两个逗号！我保存了屏幕截图，但后来却受到打击。未来某一天，他们会把钱要回去，那我自己要怎么办？\n\n　　你们已经知道这种感受：在麻省理工学院，这叫做“从消防栓里狂饮(drinkingfrom the firehose)”。这听起来很有趣，而我们都有着切身体会。这对你们很有帮助。今天，一个阀门被关上，你们需要找到下一个。\n\n   Dropbox属于我。正如你们想象中一样，建立这家公司让我的人生充满了激情、趣味和满足的体验，但我却没有真正分享过创业过程中最令人耻辱、失望和痛苦的经历。我甚至无法计算出曾经犯过多少错误。\n\n　　幸运的是，这无关紧要，没有人的生活是满分。事实上，当你从学校毕业，学分的概念将不复存在。在你上学时，所有小错误都只是挡风玻璃上的擦伤。但在社会上，如果你没有学会调整，避免撞向护栏，你的发展将会很慢。你最大的风险不是失败，而是过于自满。\n\n　　比尔·盖茨(Bill Gates)的第一家公司是做交通灯软件，史蒂夫·乔布斯(Steve Jobs)的第一家公司制造塑料口哨，帮助你免费打电话。两家公司都遭遇了失败，但很难想象他们对此非常失望。这是从今天开始我最希望的改变：你不会再带着这些数字，表明你曾有过多少失败。从现在开始，失败无关紧要，你只要做对一次就可以。\n\n　 我以前常常会为各种事担忧，但我还能记得让我冷静的那个时刻。当时我刚刚搬到旧金山。某天晚上我无法入睡，因此打开了笔记本。我在网上读到一条新闻“人的一生只有3万天”。一开始我并没有太多的考虑，但随后拿起了计算器。我输入了24乘以365，发现自己已经用掉了9000天！我都在做些什么？(顺便说一句，你们已经用掉了8000天。)\n\n　　这就是这张小抄上3万这个数字的含义。那天晚上，我意识到生活中没有热身，没有练习，也没有重启按钮。每天，我们都会在人生的故事中写上几笔。当你去世时，墓碑上不会刻着“这里躺着休斯顿，排名第174”。从那时起，我不再尝试让生命完美，而是使其更有趣。我希望自己的故事充满了冒险，这才会带来不同。\n\n　　我的奶奶今天也在这里，下周我们将庆祝她的95岁生日。在我搬到加州后，我们需要更多地通过电话交流。但令我印象深刻的一点是，每次挂电话时，她总是会说：“精益求精”。这个单词的意思是，永远都要向前看。\n\n　　今天，在你们的毕业典礼上，你们进入社会的第一天，这是我给你的祝愿。不必尝试让人生完美，给自己自由，使生命成为一场冒险，永远向前。谢谢。\n\n---\n\n###个人感悟：\n\n个人感觉现在的我们大学生或者说整个社会都太浮躁了，到处充斥着\"不和谐\"的学分氛围，可能本人过于言辞过激，但只是实事求是，发表下个人的看法,表达心中的失望。\n\n身边的同学似乎都已经忘记了刚进大学时的信心满满与心中的梦想，或者是进大学时的初衷。苦逼的高中我们都熬过来了，目的就是上一所中意的大学，结果现在的情况是你们的最初的目的达到了，却在大学比较自由和宽松的情况下迷失了自己甚至于到了堕落的地步，你们看错，说堕落一词完全没有言辞过激，而且是用的恰到好处，事实就是这样！就像阿里巴巴马云说的那样，**梦想是要有的，万一实现了呢**。\n\n_**希望我们身边的你我他，找回曾经信誓旦旦的我们自己，拾起当初的梦想，重新起航，不要浪费生命的每一天。**_\n\n(end)\n","source":"_posts/201409/2014-09-23-dropbox_mit_speech.md","raw":"---\nlayout : post\ntitle : 不要浪费人生的每一天\ncategory : 随笔\ntags : Essay\n---\n　　今天分享一个演讲，演讲人是Dropbox创始人，他向我们毕业或者在校大学生提出了3点人生建议，但是可能也同样适用于你**MIT演讲：只和出色的人在一起，不浪费生命的每一天**\n\n　　Dropbox创始人，CEO德鲁·休斯顿(Drew Houston)近期在美国麻省理工学院的毕业典礼上发表演讲。他向大学生提出了3点人生建议：追逐自己感兴趣的事，找到最合适的圈子，以及不要浪费人生的每一天。以下为休斯顿演讲全文：\n\n　　谢谢董事会主席里德，也祝贺所有2013届毕业的同学。我很高兴回到麻省理工学院，并很荣幸地与你们在一起。我仍然佩戴着“黄铜鼠”戒指。在毕业当天向所有人展示这枚戒指仍是我一生中最自豪的时刻之一。这是特殊的一天，而原因则有很多，我认为最令人激动的原因在于，这是人生中第一天你不必再为上课签到担心。\n\n  <!--more-->\t\n\n   ![pic](http://ww4.sinaimg.cn/mw690/bd5a4d63jw1ekmk8mpeipj20b408caah.jpg)\n\n　　在你们人生最初的几个十年中，成功意味着从一个围城跳入另一个围城：考试获得高分，进入这所大学，修完所有课程，获得这一学位，进入一家有名的研究所，随后进入另一家有名的研究所。今天，这一切都结束了。\n\n人生规划的难点在于，你不知道将走向何处，但会希望尽快实现自己的目标。或许你会建立一家公司，或治愈癌症，或撰写一部美国知名的小说。但谁知道呢？或许，情况会变得很糟糕。我无法判断。\n\n　　今天，穿着学位服站在这里并对大家演讲并不在我7年前的计划之中。实际上，我从没有过伟大的计划。我现在发现，在刚刚毕业时，几乎不可能提出这种伟大的计划。\n\n　　我曾思考过，你们从今天开始将会有怎样不同的人生。我也曾思考过，如果重来一次，我会怎样去做。你们能走到今天是因为聪明的大脑和刻苦学习。但没有人会告诉你，过了今天之后，推动成功的元素将会改变。因此我想做的是，给你们一张“考试作弊的小抄”，这是我在毕业当天希望拥有的。\n\n　　如果看看这张小抄，可以发现上面的内容不多：一个网球、一个圆圈，以及数字3万。我知道，目前这些内容没有任何意义，但请听我说完。\n\n  21岁时，我建立了自己的第一家公司，这是我和合伙人安德鲁·可利克(AndrewCrick)此前从未做过的。我们不知道走进市政大厅是否需要穿着正装，也不知道是否需要刻一枚印章为重要文件盖章。最终我们发现，只需上网填表就可以在两分钟内完成建立公司的步骤。这听起来有些扫兴，但我们开始了自己的生意。吃着洋葱圈，我们决定这家公司将针对SAT考试提供一种全新的网络课程。当时，大部分孩子仍在使用厚达800页的教材，而网上的其他预备课程也不是很好。我们将公司称作Accolade，在SAT词汇表中意为“杰出的成就”。实际上，我们的公司名为“TheAccolade Group LLC”，我们认为这听起来容易引起关注。\n\n　　在回家路上，我前往一家Staples门店去买名片盒。很明显，建立公司的最重要一步是使用Photoshop设计公司标志，并打印一些名片，名片上印有“创始人”的字样。下一步则是在各种会议上分发名片，并告诉女孩们：“理由是，我确实有一家公司。”这挺不错。\n\n　　不过，创业最有趣的部分在于学习各种新东西。每年夏天，我都会住在兄弟会的房子里，5楼有一个梯子通往房顶。我会拿上一把绿色的尼龙折叠椅，带着从亚马逊购买的商业类图书去阅读。每个周末，我都会花时间阅读有关营销、销售、管理，以及其他我不了解领域的图书。我并未打算在PhiDeltaTheta兄弟会的房顶上拿到MBA学位，但事实就是这样。\n\n　　几年后，情况开始走下坡路。我感觉，我需要更加努力才能取得进步。一些时候，我觉得思路突然中断，无法解答更多关于平行线或火车开行的数学题。我发现自己出了问题，对这样的低效我感到自责。建立一家公司是我的梦想，但我可能还没有做好万全的准备。\n\n　　因此我休息了一段时间。当然，如果你来自6系(麻省理工学院电气工程专业)，那么“休息一会”意味着编写一个扑克机器人程序。如果你们不懂什么是扑克机器人，可以这样理解：当你在网上打扑克时，你一坐几个小时，点击一些按钮，输掉所有钱，而扑克机器人意味着你可以用计算机帮你输掉这些钱。\n\n　　这是一项有趣的挑战。我全身心投入。我在洗澡时思考，在午夜也会思考。这就像打开了一个开关，突然之间我就成了一台机器。\n\n　　期间，我的父母希望全家人前往新汉普歇尔，共同度过一个周末。但我仍希望开发我的扑克机器人。因此我打开本田雅阁的后备箱，将所有计算机设备和线缆搬进度假小屋。饭厅的桌子不是很大，因此我将所有锅碗瓢盆搬开，给显示器腾出地方。这一次，我妈妈认为我出了什么问题，肯定要进监狱。\n\n　　原本我可以说，去做你喜欢的事，但实际情况并非如此。你可以很容易说服自己，你喜欢自己正在做的事。有谁会承认他们不喜欢呢？在思考这一问题时，我发现，我所认识的最愉快、最成功的人们不仅喜欢自己做的事，也善于解决一个重要问题，这对他们来说很重要。他们让我联想到小狗追逐网球的例子：它们的眼神有些疯狂，绳索一松就会立刻扑上去，抓住可以抓的一切东西。我的另一些朋友同样努力工作，获得了很高的薪水，但他们总是抱怨被束缚在办公桌上。\n\n　　问题在于，许多人没有找到他们的网球。我不希望走错路。我喜欢良好的标准化考试，但成为SAT备考的领先者并不是我的目标。令我惊讶的是，扑克机器人和Dropbox开始分散我的注意力。我内心的一个声音告诉我要去哪里，而我则一直告诉它闭嘴，让我好好工作。然而有些时候，这个声音才最了解你。\n\n　　我花了很长时间才知道这一点：最努力的人并不是由于纪律性才努力工作，而是因为他们正在解决有趣的问题。因此在今天之后，你们不用自己鞭策自己，而是要找到属于自己的网球，让事情去鞭策自己。这可能需要花一段时间，但在你找到网球之前，请倾听内心的声音。\n\n　　让我们回到我毕业后的那个夏天，你们也将迎来这样的夏天。我兄弟会的伙伴亚当·史密斯(AdamSmith)和他的朋友马特·布雷齐纳(Matt Brezina)创建了一家公司。我们都发现，当所有人都在一间公寓中工作时，将非常有趣。\n\n　　这是一个完美的夏天，或者说，接近完美。公寓的空调出了问题，我们所有人都只能在小格子间里编程。史密斯和布雷齐纳日以继夜地工作。一段时间后，许多潜在投资人找到他们，与他们分享秘密，并带他们乘坐直升机。我感到羡慕。我的公司已有几年时间，而史密斯的公司才只有几个月。我的直升机在哪里？\n\n　　情况越来越糟。8月份过去，史密斯带来了坏消息：他们将要搬走。这不仅意味着我失去了小食品来源，他们也将离开前往硅谷，在那里将会有重要的事发生，但我不参与其中。我经常打电话给史密斯，听听他的进展。他们似乎总是很顺利。他会告诉我：“我们今天下午见了维诺德·科斯拉(VinodKhosla)。”科斯拉是一名亿万富翁投资人，同时也是Sun的联合创始人。他丢给我一个“重磅炸弹”：“他会给我们500万美元。”\n\n　　我为他取得的成就感到激动，但对我来说则是一次打击。这是我的酒友，也是我兄弟会中的兄弟，比我年轻两岁。我没有任何借口。他已经在“超级碗”比赛中出场，而我在选秀时就已落选。史密斯当时并不知道，但实际上他给了我很大的触动：是时候做出改变了。\n\n　　许多人都说，人们通常只与5个人在一起的时间最长。想一想，谁是你圈子中的这5个人？我得出了一些好消息：对建立圈子来说，麻省理工学院是全球最好的场所。如果我没有来到这里，我就不会认识史密斯，不会遇见出色的合作者，也不会有Dropbox。\n\n　　我学到的一点是，周围人的出色与自己的才能和努力同样重要。如果迈克尔·乔丹(MichaelJordan)没有加入NBA，他周围的5个人都来自意大利，那么将会怎样？你的圈子使你变得更好，正如史密斯对我一样。\n\n　　你的圈子中将会加入你的同事和周围所有人。你生活的地方很重要：全世界只有一个麻省理工学院，一个好莱坞，一个硅谷。这不是巧合：无论从事什么工作，通常只有一个地方能吸引顶尖人才。你需要去那里，而不是其他地方。见到我的偶像并向他们学习，这给了我巨大的优势。你的偶像需要成为你圈子的一部分，请跟随他们。如果下一件大事将在其他某处发生，请立即前去。\n\n　　大学中你跌入的另一个陷阱可能是“做好准备”。请不要错误理解：学习是首要任务，但最快的学习方式是实践。如果有一个梦想，你可以花一生的时间去学习、计划和准备。你应当去做的是立即开始。\n\n　　坦白地说，我不认为我做好了准备。我还记得，第一名投资人答应我的要求并问我将钱打到哪里的那一天。对一名24岁的年轻人而言，这就是圣诞节。打开礼物后，你在美国银行的帐户不断刷新，你的支票帐户从60美元增加至120万美元。最初我非常兴奋：数字中出现了两个逗号！我保存了屏幕截图，但后来却受到打击。未来某一天，他们会把钱要回去，那我自己要怎么办？\n\n　　你们已经知道这种感受：在麻省理工学院，这叫做“从消防栓里狂饮(drinkingfrom the firehose)”。这听起来很有趣，而我们都有着切身体会。这对你们很有帮助。今天，一个阀门被关上，你们需要找到下一个。\n\n   Dropbox属于我。正如你们想象中一样，建立这家公司让我的人生充满了激情、趣味和满足的体验，但我却没有真正分享过创业过程中最令人耻辱、失望和痛苦的经历。我甚至无法计算出曾经犯过多少错误。\n\n　　幸运的是，这无关紧要，没有人的生活是满分。事实上，当你从学校毕业，学分的概念将不复存在。在你上学时，所有小错误都只是挡风玻璃上的擦伤。但在社会上，如果你没有学会调整，避免撞向护栏，你的发展将会很慢。你最大的风险不是失败，而是过于自满。\n\n　　比尔·盖茨(Bill Gates)的第一家公司是做交通灯软件，史蒂夫·乔布斯(Steve Jobs)的第一家公司制造塑料口哨，帮助你免费打电话。两家公司都遭遇了失败，但很难想象他们对此非常失望。这是从今天开始我最希望的改变：你不会再带着这些数字，表明你曾有过多少失败。从现在开始，失败无关紧要，你只要做对一次就可以。\n\n　 我以前常常会为各种事担忧，但我还能记得让我冷静的那个时刻。当时我刚刚搬到旧金山。某天晚上我无法入睡，因此打开了笔记本。我在网上读到一条新闻“人的一生只有3万天”。一开始我并没有太多的考虑，但随后拿起了计算器。我输入了24乘以365，发现自己已经用掉了9000天！我都在做些什么？(顺便说一句，你们已经用掉了8000天。)\n\n　　这就是这张小抄上3万这个数字的含义。那天晚上，我意识到生活中没有热身，没有练习，也没有重启按钮。每天，我们都会在人生的故事中写上几笔。当你去世时，墓碑上不会刻着“这里躺着休斯顿，排名第174”。从那时起，我不再尝试让生命完美，而是使其更有趣。我希望自己的故事充满了冒险，这才会带来不同。\n\n　　我的奶奶今天也在这里，下周我们将庆祝她的95岁生日。在我搬到加州后，我们需要更多地通过电话交流。但令我印象深刻的一点是，每次挂电话时，她总是会说：“精益求精”。这个单词的意思是，永远都要向前看。\n\n　　今天，在你们的毕业典礼上，你们进入社会的第一天，这是我给你的祝愿。不必尝试让人生完美，给自己自由，使生命成为一场冒险，永远向前。谢谢。\n\n---\n\n###个人感悟：\n\n个人感觉现在的我们大学生或者说整个社会都太浮躁了，到处充斥着\"不和谐\"的学分氛围，可能本人过于言辞过激，但只是实事求是，发表下个人的看法,表达心中的失望。\n\n身边的同学似乎都已经忘记了刚进大学时的信心满满与心中的梦想，或者是进大学时的初衷。苦逼的高中我们都熬过来了，目的就是上一所中意的大学，结果现在的情况是你们的最初的目的达到了，却在大学比较自由和宽松的情况下迷失了自己甚至于到了堕落的地步，你们看错，说堕落一词完全没有言辞过激，而且是用的恰到好处，事实就是这样！就像阿里巴巴马云说的那样，**梦想是要有的，万一实现了呢**。\n\n_**希望我们身边的你我他，找回曾经信誓旦旦的我们自己，拾起当初的梦想，重新起航，不要浪费生命的每一天。**_\n\n(end)\n","slug":"201409-2014-09-23-dropbox-mit-speech","published":1,"date":"2018-04-12T15:20:38.826Z","updated":"2018-04-12T15:20:38.827Z","comments":1,"photos":[],"link":"","_id":"cjfwomb62004kass6p2pfpwp2","content":"<p>　　今天分享一个演讲，演讲人是Dropbox创始人，他向我们毕业或者在校大学生提出了3点人生建议，但是可能也同样适用于你<strong>MIT演讲：只和出色的人在一起，不浪费生命的每一天</strong></p>\n<p>　　Dropbox创始人，CEO德鲁·休斯顿(Drew Houston)近期在美国麻省理工学院的毕业典礼上发表演讲。他向大学生提出了3点人生建议：追逐自己感兴趣的事，找到最合适的圈子，以及不要浪费人生的每一天。以下为休斯顿演讲全文：</p>\n<p>　　谢谢董事会主席里德，也祝贺所有2013届毕业的同学。我很高兴回到麻省理工学院，并很荣幸地与你们在一起。我仍然佩戴着“黄铜鼠”戒指。在毕业当天向所有人展示这枚戒指仍是我一生中最自豪的时刻之一。这是特殊的一天，而原因则有很多，我认为最令人激动的原因在于，这是人生中第一天你不必再为上课签到担心。</p>\n  <a id=\"more\"></a>    \n<p>   <img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63jw1ekmk8mpeipj20b408caah.jpg\" alt=\"pic\"></p>\n<p>　　在你们人生最初的几个十年中，成功意味着从一个围城跳入另一个围城：考试获得高分，进入这所大学，修完所有课程，获得这一学位，进入一家有名的研究所，随后进入另一家有名的研究所。今天，这一切都结束了。</p>\n<p>人生规划的难点在于，你不知道将走向何处，但会希望尽快实现自己的目标。或许你会建立一家公司，或治愈癌症，或撰写一部美国知名的小说。但谁知道呢？或许，情况会变得很糟糕。我无法判断。</p>\n<p>　　今天，穿着学位服站在这里并对大家演讲并不在我7年前的计划之中。实际上，我从没有过伟大的计划。我现在发现，在刚刚毕业时，几乎不可能提出这种伟大的计划。</p>\n<p>　　我曾思考过，你们从今天开始将会有怎样不同的人生。我也曾思考过，如果重来一次，我会怎样去做。你们能走到今天是因为聪明的大脑和刻苦学习。但没有人会告诉你，过了今天之后，推动成功的元素将会改变。因此我想做的是，给你们一张“考试作弊的小抄”，这是我在毕业当天希望拥有的。</p>\n<p>　　如果看看这张小抄，可以发现上面的内容不多：一个网球、一个圆圈，以及数字3万。我知道，目前这些内容没有任何意义，但请听我说完。</p>\n<p>  21岁时，我建立了自己的第一家公司，这是我和合伙人安德鲁·可利克(AndrewCrick)此前从未做过的。我们不知道走进市政大厅是否需要穿着正装，也不知道是否需要刻一枚印章为重要文件盖章。最终我们发现，只需上网填表就可以在两分钟内完成建立公司的步骤。这听起来有些扫兴，但我们开始了自己的生意。吃着洋葱圈，我们决定这家公司将针对SAT考试提供一种全新的网络课程。当时，大部分孩子仍在使用厚达800页的教材，而网上的其他预备课程也不是很好。我们将公司称作Accolade，在SAT词汇表中意为“杰出的成就”。实际上，我们的公司名为“TheAccolade Group LLC”，我们认为这听起来容易引起关注。</p>\n<p>　　在回家路上，我前往一家Staples门店去买名片盒。很明显，建立公司的最重要一步是使用Photoshop设计公司标志，并打印一些名片，名片上印有“创始人”的字样。下一步则是在各种会议上分发名片，并告诉女孩们：“理由是，我确实有一家公司。”这挺不错。</p>\n<p>　　不过，创业最有趣的部分在于学习各种新东西。每年夏天，我都会住在兄弟会的房子里，5楼有一个梯子通往房顶。我会拿上一把绿色的尼龙折叠椅，带着从亚马逊购买的商业类图书去阅读。每个周末，我都会花时间阅读有关营销、销售、管理，以及其他我不了解领域的图书。我并未打算在PhiDeltaTheta兄弟会的房顶上拿到MBA学位，但事实就是这样。</p>\n<p>　　几年后，情况开始走下坡路。我感觉，我需要更加努力才能取得进步。一些时候，我觉得思路突然中断，无法解答更多关于平行线或火车开行的数学题。我发现自己出了问题，对这样的低效我感到自责。建立一家公司是我的梦想，但我可能还没有做好万全的准备。</p>\n<p>　　因此我休息了一段时间。当然，如果你来自6系(麻省理工学院电气工程专业)，那么“休息一会”意味着编写一个扑克机器人程序。如果你们不懂什么是扑克机器人，可以这样理解：当你在网上打扑克时，你一坐几个小时，点击一些按钮，输掉所有钱，而扑克机器人意味着你可以用计算机帮你输掉这些钱。</p>\n<p>　　这是一项有趣的挑战。我全身心投入。我在洗澡时思考，在午夜也会思考。这就像打开了一个开关，突然之间我就成了一台机器。</p>\n<p>　　期间，我的父母希望全家人前往新汉普歇尔，共同度过一个周末。但我仍希望开发我的扑克机器人。因此我打开本田雅阁的后备箱，将所有计算机设备和线缆搬进度假小屋。饭厅的桌子不是很大，因此我将所有锅碗瓢盆搬开，给显示器腾出地方。这一次，我妈妈认为我出了什么问题，肯定要进监狱。</p>\n<p>　　原本我可以说，去做你喜欢的事，但实际情况并非如此。你可以很容易说服自己，你喜欢自己正在做的事。有谁会承认他们不喜欢呢？在思考这一问题时，我发现，我所认识的最愉快、最成功的人们不仅喜欢自己做的事，也善于解决一个重要问题，这对他们来说很重要。他们让我联想到小狗追逐网球的例子：它们的眼神有些疯狂，绳索一松就会立刻扑上去，抓住可以抓的一切东西。我的另一些朋友同样努力工作，获得了很高的薪水，但他们总是抱怨被束缚在办公桌上。</p>\n<p>　　问题在于，许多人没有找到他们的网球。我不希望走错路。我喜欢良好的标准化考试，但成为SAT备考的领先者并不是我的目标。令我惊讶的是，扑克机器人和Dropbox开始分散我的注意力。我内心的一个声音告诉我要去哪里，而我则一直告诉它闭嘴，让我好好工作。然而有些时候，这个声音才最了解你。</p>\n<p>　　我花了很长时间才知道这一点：最努力的人并不是由于纪律性才努力工作，而是因为他们正在解决有趣的问题。因此在今天之后，你们不用自己鞭策自己，而是要找到属于自己的网球，让事情去鞭策自己。这可能需要花一段时间，但在你找到网球之前，请倾听内心的声音。</p>\n<p>　　让我们回到我毕业后的那个夏天，你们也将迎来这样的夏天。我兄弟会的伙伴亚当·史密斯(AdamSmith)和他的朋友马特·布雷齐纳(Matt Brezina)创建了一家公司。我们都发现，当所有人都在一间公寓中工作时，将非常有趣。</p>\n<p>　　这是一个完美的夏天，或者说，接近完美。公寓的空调出了问题，我们所有人都只能在小格子间里编程。史密斯和布雷齐纳日以继夜地工作。一段时间后，许多潜在投资人找到他们，与他们分享秘密，并带他们乘坐直升机。我感到羡慕。我的公司已有几年时间，而史密斯的公司才只有几个月。我的直升机在哪里？</p>\n<p>　　情况越来越糟。8月份过去，史密斯带来了坏消息：他们将要搬走。这不仅意味着我失去了小食品来源，他们也将离开前往硅谷，在那里将会有重要的事发生，但我不参与其中。我经常打电话给史密斯，听听他的进展。他们似乎总是很顺利。他会告诉我：“我们今天下午见了维诺德·科斯拉(VinodKhosla)。”科斯拉是一名亿万富翁投资人，同时也是Sun的联合创始人。他丢给我一个“重磅炸弹”：“他会给我们500万美元。”</p>\n<p>　　我为他取得的成就感到激动，但对我来说则是一次打击。这是我的酒友，也是我兄弟会中的兄弟，比我年轻两岁。我没有任何借口。他已经在“超级碗”比赛中出场，而我在选秀时就已落选。史密斯当时并不知道，但实际上他给了我很大的触动：是时候做出改变了。</p>\n<p>　　许多人都说，人们通常只与5个人在一起的时间最长。想一想，谁是你圈子中的这5个人？我得出了一些好消息：对建立圈子来说，麻省理工学院是全球最好的场所。如果我没有来到这里，我就不会认识史密斯，不会遇见出色的合作者，也不会有Dropbox。</p>\n<p>　　我学到的一点是，周围人的出色与自己的才能和努力同样重要。如果迈克尔·乔丹(MichaelJordan)没有加入NBA，他周围的5个人都来自意大利，那么将会怎样？你的圈子使你变得更好，正如史密斯对我一样。</p>\n<p>　　你的圈子中将会加入你的同事和周围所有人。你生活的地方很重要：全世界只有一个麻省理工学院，一个好莱坞，一个硅谷。这不是巧合：无论从事什么工作，通常只有一个地方能吸引顶尖人才。你需要去那里，而不是其他地方。见到我的偶像并向他们学习，这给了我巨大的优势。你的偶像需要成为你圈子的一部分，请跟随他们。如果下一件大事将在其他某处发生，请立即前去。</p>\n<p>　　大学中你跌入的另一个陷阱可能是“做好准备”。请不要错误理解：学习是首要任务，但最快的学习方式是实践。如果有一个梦想，你可以花一生的时间去学习、计划和准备。你应当去做的是立即开始。</p>\n<p>　　坦白地说，我不认为我做好了准备。我还记得，第一名投资人答应我的要求并问我将钱打到哪里的那一天。对一名24岁的年轻人而言，这就是圣诞节。打开礼物后，你在美国银行的帐户不断刷新，你的支票帐户从60美元增加至120万美元。最初我非常兴奋：数字中出现了两个逗号！我保存了屏幕截图，但后来却受到打击。未来某一天，他们会把钱要回去，那我自己要怎么办？</p>\n<p>　　你们已经知道这种感受：在麻省理工学院，这叫做“从消防栓里狂饮(drinkingfrom the firehose)”。这听起来很有趣，而我们都有着切身体会。这对你们很有帮助。今天，一个阀门被关上，你们需要找到下一个。</p>\n<p>   Dropbox属于我。正如你们想象中一样，建立这家公司让我的人生充满了激情、趣味和满足的体验，但我却没有真正分享过创业过程中最令人耻辱、失望和痛苦的经历。我甚至无法计算出曾经犯过多少错误。</p>\n<p>　　幸运的是，这无关紧要，没有人的生活是满分。事实上，当你从学校毕业，学分的概念将不复存在。在你上学时，所有小错误都只是挡风玻璃上的擦伤。但在社会上，如果你没有学会调整，避免撞向护栏，你的发展将会很慢。你最大的风险不是失败，而是过于自满。</p>\n<p>　　比尔·盖茨(Bill Gates)的第一家公司是做交通灯软件，史蒂夫·乔布斯(Steve Jobs)的第一家公司制造塑料口哨，帮助你免费打电话。两家公司都遭遇了失败，但很难想象他们对此非常失望。这是从今天开始我最希望的改变：你不会再带着这些数字，表明你曾有过多少失败。从现在开始，失败无关紧要，你只要做对一次就可以。</p>\n<p>　 我以前常常会为各种事担忧，但我还能记得让我冷静的那个时刻。当时我刚刚搬到旧金山。某天晚上我无法入睡，因此打开了笔记本。我在网上读到一条新闻“人的一生只有3万天”。一开始我并没有太多的考虑，但随后拿起了计算器。我输入了24乘以365，发现自己已经用掉了9000天！我都在做些什么？(顺便说一句，你们已经用掉了8000天。)</p>\n<p>　　这就是这张小抄上3万这个数字的含义。那天晚上，我意识到生活中没有热身，没有练习，也没有重启按钮。每天，我们都会在人生的故事中写上几笔。当你去世时，墓碑上不会刻着“这里躺着休斯顿，排名第174”。从那时起，我不再尝试让生命完美，而是使其更有趣。我希望自己的故事充满了冒险，这才会带来不同。</p>\n<p>　　我的奶奶今天也在这里，下周我们将庆祝她的95岁生日。在我搬到加州后，我们需要更多地通过电话交流。但令我印象深刻的一点是，每次挂电话时，她总是会说：“精益求精”。这个单词的意思是，永远都要向前看。</p>\n<p>　　今天，在你们的毕业典礼上，你们进入社会的第一天，这是我给你的祝愿。不必尝试让人生完美，给自己自由，使生命成为一场冒险，永远向前。谢谢。</p>\n<hr>\n<p>###个人感悟：</p>\n<p>个人感觉现在的我们大学生或者说整个社会都太浮躁了，到处充斥着”不和谐”的学分氛围，可能本人过于言辞过激，但只是实事求是，发表下个人的看法,表达心中的失望。</p>\n<p>身边的同学似乎都已经忘记了刚进大学时的信心满满与心中的梦想，或者是进大学时的初衷。苦逼的高中我们都熬过来了，目的就是上一所中意的大学，结果现在的情况是你们的最初的目的达到了，却在大学比较自由和宽松的情况下迷失了自己甚至于到了堕落的地步，你们看错，说堕落一词完全没有言辞过激，而且是用的恰到好处，事实就是这样！就像阿里巴巴马云说的那样，<strong>梦想是要有的，万一实现了呢</strong>。</p>\n<p><em><strong>希望我们身边的你我他，找回曾经信誓旦旦的我们自己，拾起当初的梦想，重新起航，不要浪费生命的每一天。</strong></em></p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>　　今天分享一个演讲，演讲人是Dropbox创始人，他向我们毕业或者在校大学生提出了3点人生建议，但是可能也同样适用于你<strong>MIT演讲：只和出色的人在一起，不浪费生命的每一天</strong></p>\n<p>　　Dropbox创始人，CEO德鲁·休斯顿(Drew Houston)近期在美国麻省理工学院的毕业典礼上发表演讲。他向大学生提出了3点人生建议：追逐自己感兴趣的事，找到最合适的圈子，以及不要浪费人生的每一天。以下为休斯顿演讲全文：</p>\n<p>　　谢谢董事会主席里德，也祝贺所有2013届毕业的同学。我很高兴回到麻省理工学院，并很荣幸地与你们在一起。我仍然佩戴着“黄铜鼠”戒指。在毕业当天向所有人展示这枚戒指仍是我一生中最自豪的时刻之一。这是特殊的一天，而原因则有很多，我认为最令人激动的原因在于，这是人生中第一天你不必再为上课签到担心。</p>","more":"<p>   <img src=\"http://ww4.sinaimg.cn/mw690/bd5a4d63jw1ekmk8mpeipj20b408caah.jpg\" alt=\"pic\"></p>\n<p>　　在你们人生最初的几个十年中，成功意味着从一个围城跳入另一个围城：考试获得高分，进入这所大学，修完所有课程，获得这一学位，进入一家有名的研究所，随后进入另一家有名的研究所。今天，这一切都结束了。</p>\n<p>人生规划的难点在于，你不知道将走向何处，但会希望尽快实现自己的目标。或许你会建立一家公司，或治愈癌症，或撰写一部美国知名的小说。但谁知道呢？或许，情况会变得很糟糕。我无法判断。</p>\n<p>　　今天，穿着学位服站在这里并对大家演讲并不在我7年前的计划之中。实际上，我从没有过伟大的计划。我现在发现，在刚刚毕业时，几乎不可能提出这种伟大的计划。</p>\n<p>　　我曾思考过，你们从今天开始将会有怎样不同的人生。我也曾思考过，如果重来一次，我会怎样去做。你们能走到今天是因为聪明的大脑和刻苦学习。但没有人会告诉你，过了今天之后，推动成功的元素将会改变。因此我想做的是，给你们一张“考试作弊的小抄”，这是我在毕业当天希望拥有的。</p>\n<p>　　如果看看这张小抄，可以发现上面的内容不多：一个网球、一个圆圈，以及数字3万。我知道，目前这些内容没有任何意义，但请听我说完。</p>\n<p>  21岁时，我建立了自己的第一家公司，这是我和合伙人安德鲁·可利克(AndrewCrick)此前从未做过的。我们不知道走进市政大厅是否需要穿着正装，也不知道是否需要刻一枚印章为重要文件盖章。最终我们发现，只需上网填表就可以在两分钟内完成建立公司的步骤。这听起来有些扫兴，但我们开始了自己的生意。吃着洋葱圈，我们决定这家公司将针对SAT考试提供一种全新的网络课程。当时，大部分孩子仍在使用厚达800页的教材，而网上的其他预备课程也不是很好。我们将公司称作Accolade，在SAT词汇表中意为“杰出的成就”。实际上，我们的公司名为“TheAccolade Group LLC”，我们认为这听起来容易引起关注。</p>\n<p>　　在回家路上，我前往一家Staples门店去买名片盒。很明显，建立公司的最重要一步是使用Photoshop设计公司标志，并打印一些名片，名片上印有“创始人”的字样。下一步则是在各种会议上分发名片，并告诉女孩们：“理由是，我确实有一家公司。”这挺不错。</p>\n<p>　　不过，创业最有趣的部分在于学习各种新东西。每年夏天，我都会住在兄弟会的房子里，5楼有一个梯子通往房顶。我会拿上一把绿色的尼龙折叠椅，带着从亚马逊购买的商业类图书去阅读。每个周末，我都会花时间阅读有关营销、销售、管理，以及其他我不了解领域的图书。我并未打算在PhiDeltaTheta兄弟会的房顶上拿到MBA学位，但事实就是这样。</p>\n<p>　　几年后，情况开始走下坡路。我感觉，我需要更加努力才能取得进步。一些时候，我觉得思路突然中断，无法解答更多关于平行线或火车开行的数学题。我发现自己出了问题，对这样的低效我感到自责。建立一家公司是我的梦想，但我可能还没有做好万全的准备。</p>\n<p>　　因此我休息了一段时间。当然，如果你来自6系(麻省理工学院电气工程专业)，那么“休息一会”意味着编写一个扑克机器人程序。如果你们不懂什么是扑克机器人，可以这样理解：当你在网上打扑克时，你一坐几个小时，点击一些按钮，输掉所有钱，而扑克机器人意味着你可以用计算机帮你输掉这些钱。</p>\n<p>　　这是一项有趣的挑战。我全身心投入。我在洗澡时思考，在午夜也会思考。这就像打开了一个开关，突然之间我就成了一台机器。</p>\n<p>　　期间，我的父母希望全家人前往新汉普歇尔，共同度过一个周末。但我仍希望开发我的扑克机器人。因此我打开本田雅阁的后备箱，将所有计算机设备和线缆搬进度假小屋。饭厅的桌子不是很大，因此我将所有锅碗瓢盆搬开，给显示器腾出地方。这一次，我妈妈认为我出了什么问题，肯定要进监狱。</p>\n<p>　　原本我可以说，去做你喜欢的事，但实际情况并非如此。你可以很容易说服自己，你喜欢自己正在做的事。有谁会承认他们不喜欢呢？在思考这一问题时，我发现，我所认识的最愉快、最成功的人们不仅喜欢自己做的事，也善于解决一个重要问题，这对他们来说很重要。他们让我联想到小狗追逐网球的例子：它们的眼神有些疯狂，绳索一松就会立刻扑上去，抓住可以抓的一切东西。我的另一些朋友同样努力工作，获得了很高的薪水，但他们总是抱怨被束缚在办公桌上。</p>\n<p>　　问题在于，许多人没有找到他们的网球。我不希望走错路。我喜欢良好的标准化考试，但成为SAT备考的领先者并不是我的目标。令我惊讶的是，扑克机器人和Dropbox开始分散我的注意力。我内心的一个声音告诉我要去哪里，而我则一直告诉它闭嘴，让我好好工作。然而有些时候，这个声音才最了解你。</p>\n<p>　　我花了很长时间才知道这一点：最努力的人并不是由于纪律性才努力工作，而是因为他们正在解决有趣的问题。因此在今天之后，你们不用自己鞭策自己，而是要找到属于自己的网球，让事情去鞭策自己。这可能需要花一段时间，但在你找到网球之前，请倾听内心的声音。</p>\n<p>　　让我们回到我毕业后的那个夏天，你们也将迎来这样的夏天。我兄弟会的伙伴亚当·史密斯(AdamSmith)和他的朋友马特·布雷齐纳(Matt Brezina)创建了一家公司。我们都发现，当所有人都在一间公寓中工作时，将非常有趣。</p>\n<p>　　这是一个完美的夏天，或者说，接近完美。公寓的空调出了问题，我们所有人都只能在小格子间里编程。史密斯和布雷齐纳日以继夜地工作。一段时间后，许多潜在投资人找到他们，与他们分享秘密，并带他们乘坐直升机。我感到羡慕。我的公司已有几年时间，而史密斯的公司才只有几个月。我的直升机在哪里？</p>\n<p>　　情况越来越糟。8月份过去，史密斯带来了坏消息：他们将要搬走。这不仅意味着我失去了小食品来源，他们也将离开前往硅谷，在那里将会有重要的事发生，但我不参与其中。我经常打电话给史密斯，听听他的进展。他们似乎总是很顺利。他会告诉我：“我们今天下午见了维诺德·科斯拉(VinodKhosla)。”科斯拉是一名亿万富翁投资人，同时也是Sun的联合创始人。他丢给我一个“重磅炸弹”：“他会给我们500万美元。”</p>\n<p>　　我为他取得的成就感到激动，但对我来说则是一次打击。这是我的酒友，也是我兄弟会中的兄弟，比我年轻两岁。我没有任何借口。他已经在“超级碗”比赛中出场，而我在选秀时就已落选。史密斯当时并不知道，但实际上他给了我很大的触动：是时候做出改变了。</p>\n<p>　　许多人都说，人们通常只与5个人在一起的时间最长。想一想，谁是你圈子中的这5个人？我得出了一些好消息：对建立圈子来说，麻省理工学院是全球最好的场所。如果我没有来到这里，我就不会认识史密斯，不会遇见出色的合作者，也不会有Dropbox。</p>\n<p>　　我学到的一点是，周围人的出色与自己的才能和努力同样重要。如果迈克尔·乔丹(MichaelJordan)没有加入NBA，他周围的5个人都来自意大利，那么将会怎样？你的圈子使你变得更好，正如史密斯对我一样。</p>\n<p>　　你的圈子中将会加入你的同事和周围所有人。你生活的地方很重要：全世界只有一个麻省理工学院，一个好莱坞，一个硅谷。这不是巧合：无论从事什么工作，通常只有一个地方能吸引顶尖人才。你需要去那里，而不是其他地方。见到我的偶像并向他们学习，这给了我巨大的优势。你的偶像需要成为你圈子的一部分，请跟随他们。如果下一件大事将在其他某处发生，请立即前去。</p>\n<p>　　大学中你跌入的另一个陷阱可能是“做好准备”。请不要错误理解：学习是首要任务，但最快的学习方式是实践。如果有一个梦想，你可以花一生的时间去学习、计划和准备。你应当去做的是立即开始。</p>\n<p>　　坦白地说，我不认为我做好了准备。我还记得，第一名投资人答应我的要求并问我将钱打到哪里的那一天。对一名24岁的年轻人而言，这就是圣诞节。打开礼物后，你在美国银行的帐户不断刷新，你的支票帐户从60美元增加至120万美元。最初我非常兴奋：数字中出现了两个逗号！我保存了屏幕截图，但后来却受到打击。未来某一天，他们会把钱要回去，那我自己要怎么办？</p>\n<p>　　你们已经知道这种感受：在麻省理工学院，这叫做“从消防栓里狂饮(drinkingfrom the firehose)”。这听起来很有趣，而我们都有着切身体会。这对你们很有帮助。今天，一个阀门被关上，你们需要找到下一个。</p>\n<p>   Dropbox属于我。正如你们想象中一样，建立这家公司让我的人生充满了激情、趣味和满足的体验，但我却没有真正分享过创业过程中最令人耻辱、失望和痛苦的经历。我甚至无法计算出曾经犯过多少错误。</p>\n<p>　　幸运的是，这无关紧要，没有人的生活是满分。事实上，当你从学校毕业，学分的概念将不复存在。在你上学时，所有小错误都只是挡风玻璃上的擦伤。但在社会上，如果你没有学会调整，避免撞向护栏，你的发展将会很慢。你最大的风险不是失败，而是过于自满。</p>\n<p>　　比尔·盖茨(Bill Gates)的第一家公司是做交通灯软件，史蒂夫·乔布斯(Steve Jobs)的第一家公司制造塑料口哨，帮助你免费打电话。两家公司都遭遇了失败，但很难想象他们对此非常失望。这是从今天开始我最希望的改变：你不会再带着这些数字，表明你曾有过多少失败。从现在开始，失败无关紧要，你只要做对一次就可以。</p>\n<p>　 我以前常常会为各种事担忧，但我还能记得让我冷静的那个时刻。当时我刚刚搬到旧金山。某天晚上我无法入睡，因此打开了笔记本。我在网上读到一条新闻“人的一生只有3万天”。一开始我并没有太多的考虑，但随后拿起了计算器。我输入了24乘以365，发现自己已经用掉了9000天！我都在做些什么？(顺便说一句，你们已经用掉了8000天。)</p>\n<p>　　这就是这张小抄上3万这个数字的含义。那天晚上，我意识到生活中没有热身，没有练习，也没有重启按钮。每天，我们都会在人生的故事中写上几笔。当你去世时，墓碑上不会刻着“这里躺着休斯顿，排名第174”。从那时起，我不再尝试让生命完美，而是使其更有趣。我希望自己的故事充满了冒险，这才会带来不同。</p>\n<p>　　我的奶奶今天也在这里，下周我们将庆祝她的95岁生日。在我搬到加州后，我们需要更多地通过电话交流。但令我印象深刻的一点是，每次挂电话时，她总是会说：“精益求精”。这个单词的意思是，永远都要向前看。</p>\n<p>　　今天，在你们的毕业典礼上，你们进入社会的第一天，这是我给你的祝愿。不必尝试让人生完美，给自己自由，使生命成为一场冒险，永远向前。谢谢。</p>\n<hr>\n<p>###个人感悟：</p>\n<p>个人感觉现在的我们大学生或者说整个社会都太浮躁了，到处充斥着”不和谐”的学分氛围，可能本人过于言辞过激，但只是实事求是，发表下个人的看法,表达心中的失望。</p>\n<p>身边的同学似乎都已经忘记了刚进大学时的信心满满与心中的梦想，或者是进大学时的初衷。苦逼的高中我们都熬过来了，目的就是上一所中意的大学，结果现在的情况是你们的最初的目的达到了，却在大学比较自由和宽松的情况下迷失了自己甚至于到了堕落的地步，你们看错，说堕落一词完全没有言辞过激，而且是用的恰到好处，事实就是这样！就像阿里巴巴马云说的那样，<strong>梦想是要有的，万一实现了呢</strong>。</p>\n<p><em><strong>希望我们身边的你我他，找回曾经信誓旦旦的我们自己，拾起当初的梦想，重新起航，不要浪费生命的每一天。</strong></em></p>\n<p>(end)</p>"},{"layout":"post","title":"细节，深刻的教训","_content":"今天，做了一件让我自己都觉得羞愧的事，感觉自己就像一个小丑，都是自己太粗心大意了，或者说自己也太不注意细节问题了。\n\n现在，大部分人当然也包括此刻以前的我(_此刻已改变_)，都觉得凡事都不用太在乎细节，逢人便说：“哎呀，不要在乎这些细节！”。从此刻起，打住吧，不要说什么不在乎细节了，那都是傻逼的表现，尚未走出大学校园的我们都太涉世尚浅，有时候一个你不在乎的细节问题就会让你错失一个机会或者其他，所以醒醒吧，以后必须得注意细节了。不要再自欺欺人滴说“不要在乎这些细节”的话了，否则，放学别走，哈哈，也许有天你真的会后悔的！\n\n<!--more-->\n\n好了，也许你在纳闷本人今天到底经历了什么，会发出如此忧桑的感叹，且听娓娓道来。\n\n![pic](../images/201409/201409262015.jpg)\n\n就在今天本人在逛微博时，看到了我心仪已久的美团技术部门发了最新的微博消息，想到我一直都想去美团做开发，就评论了下该微博.对于一个没毕业的大学小子来说，评论完就期待着美团那边的回复，正如所料，美团很快就回复了评论，我满怀期待滴打开了消息通知，结果却让我蒙圈了。回复是：\n\n_“同学，这个你得问问**美图**技术部门啊。不过，不考虑下美团技术团队？”_\n\n当时，我就晕了，以为技术部门和技术团队有差别呢，根本没注意我我打错字把美团写成美图了，然后还愚昧的问人家技术部门和技术团队有差别吗？很快的，美团那边有回复了，直接回复我：\n\n_\"……图和团的差别啊，同学\"_。\n\n难以想象当时回复我的那个哥们该有多么的郁闷。看了老半天，我才注意到原来是我打错字了，当时我立马就脸红了，羞愧对一个自己很心仪的技术团队犯下这么低级的错误，真是可笑，感觉自己就像一个小丑。再后来，我回复了评论，并且很真诚的道歉了，但是美团那边却没有回复了，此时我的心情也有小小的失落了。原本目的很好的一件事却让我由于不细心的无知表现给改变了。\n\n事情就是这样。\n\n追根到底，都是自己的错，吃一堑长一智吧。以后坚决杜绝自己粗心大意的恶习，凡事都要细心，细节决定成败不是没有道理的。古语云：”_一屋不扫，何以扫天下_！“说的大概也是这个道理吧，无论什么时候我们都不要忽略一些小事，细节决定成败啊。\n\n所以，别再说什么”不要在乎这些细节“这些话了，那都是放屁，如果真的有一天真的因为细节你错过了什么机会或者其他，你真的可能就会后悔一辈子的。\n\n---\n\n经过这件事，我反思了很多，也让我认识到了自己是多么的欠缺，有好多的地方都是要去改进的。现在的大学生当然也包括我，都是藏在屋内躲避风雨，以为自己都很牛逼，貌似自己会的很多，其实胸无点墨，真诚告诫大家：踏踏实实去学、多注意细节、不要急躁更不要浮躁、要有自己的追求和奋斗的目标，然后努力的奔跑！\n\n_2014-09-26 21:10 Skylab_\n\n(end)       \n\n---\n\n_补充:_\n\n有人会发邮件说，你把你丢人的事儿秀在这里，是在炫耀吗，是想要别人对你冷嘲热讽吗？首先，我没有秀，更没有炫耀什么，也没什么值得炫耀的。我把这件事记录在这里只是给自己一个教训，要让自己牢记这次教训，凡事都要细心，等到多年以后再翻看时，看看自己年轻时做了多少愚蠢和弱智的事，也算一点点回忆！其他再无多余想法！\t\t\t\t","source":"_posts/201409/2014-09-26-details_with_attitude.md","raw":"---\nlayout : post\ntitle : 细节，深刻的教训\ncategory : 随笔\ntags : Essay\n---\n今天，做了一件让我自己都觉得羞愧的事，感觉自己就像一个小丑，都是自己太粗心大意了，或者说自己也太不注意细节问题了。\n\n现在，大部分人当然也包括此刻以前的我(_此刻已改变_)，都觉得凡事都不用太在乎细节，逢人便说：“哎呀，不要在乎这些细节！”。从此刻起，打住吧，不要说什么不在乎细节了，那都是傻逼的表现，尚未走出大学校园的我们都太涉世尚浅，有时候一个你不在乎的细节问题就会让你错失一个机会或者其他，所以醒醒吧，以后必须得注意细节了。不要再自欺欺人滴说“不要在乎这些细节”的话了，否则，放学别走，哈哈，也许有天你真的会后悔的！\n\n<!--more-->\n\n好了，也许你在纳闷本人今天到底经历了什么，会发出如此忧桑的感叹，且听娓娓道来。\n\n![pic](../images/201409/201409262015.jpg)\n\n就在今天本人在逛微博时，看到了我心仪已久的美团技术部门发了最新的微博消息，想到我一直都想去美团做开发，就评论了下该微博.对于一个没毕业的大学小子来说，评论完就期待着美团那边的回复，正如所料，美团很快就回复了评论，我满怀期待滴打开了消息通知，结果却让我蒙圈了。回复是：\n\n_“同学，这个你得问问**美图**技术部门啊。不过，不考虑下美团技术团队？”_\n\n当时，我就晕了，以为技术部门和技术团队有差别呢，根本没注意我我打错字把美团写成美图了，然后还愚昧的问人家技术部门和技术团队有差别吗？很快的，美团那边有回复了，直接回复我：\n\n_\"……图和团的差别啊，同学\"_。\n\n难以想象当时回复我的那个哥们该有多么的郁闷。看了老半天，我才注意到原来是我打错字了，当时我立马就脸红了，羞愧对一个自己很心仪的技术团队犯下这么低级的错误，真是可笑，感觉自己就像一个小丑。再后来，我回复了评论，并且很真诚的道歉了，但是美团那边却没有回复了，此时我的心情也有小小的失落了。原本目的很好的一件事却让我由于不细心的无知表现给改变了。\n\n事情就是这样。\n\n追根到底，都是自己的错，吃一堑长一智吧。以后坚决杜绝自己粗心大意的恶习，凡事都要细心，细节决定成败不是没有道理的。古语云：”_一屋不扫，何以扫天下_！“说的大概也是这个道理吧，无论什么时候我们都不要忽略一些小事，细节决定成败啊。\n\n所以，别再说什么”不要在乎这些细节“这些话了，那都是放屁，如果真的有一天真的因为细节你错过了什么机会或者其他，你真的可能就会后悔一辈子的。\n\n---\n\n经过这件事，我反思了很多，也让我认识到了自己是多么的欠缺，有好多的地方都是要去改进的。现在的大学生当然也包括我，都是藏在屋内躲避风雨，以为自己都很牛逼，貌似自己会的很多，其实胸无点墨，真诚告诫大家：踏踏实实去学、多注意细节、不要急躁更不要浮躁、要有自己的追求和奋斗的目标，然后努力的奔跑！\n\n_2014-09-26 21:10 Skylab_\n\n(end)       \n\n---\n\n_补充:_\n\n有人会发邮件说，你把你丢人的事儿秀在这里，是在炫耀吗，是想要别人对你冷嘲热讽吗？首先，我没有秀，更没有炫耀什么，也没什么值得炫耀的。我把这件事记录在这里只是给自己一个教训，要让自己牢记这次教训，凡事都要细心，等到多年以后再翻看时，看看自己年轻时做了多少愚蠢和弱智的事，也算一点点回忆！其他再无多余想法！\t\t\t\t","slug":"201409-2014-09-26-details-with-attitude","published":1,"date":"2018-04-12T15:20:38.827Z","updated":"2018-04-12T15:20:38.827Z","comments":1,"photos":[],"link":"","_id":"cjfwomb64004pass6pkburrxe","content":"<p>今天，做了一件让我自己都觉得羞愧的事，感觉自己就像一个小丑，都是自己太粗心大意了，或者说自己也太不注意细节问题了。</p>\n<p>现在，大部分人当然也包括此刻以前的我(<em>此刻已改变</em>)，都觉得凡事都不用太在乎细节，逢人便说：“哎呀，不要在乎这些细节！”。从此刻起，打住吧，不要说什么不在乎细节了，那都是傻逼的表现，尚未走出大学校园的我们都太涉世尚浅，有时候一个你不在乎的细节问题就会让你错失一个机会或者其他，所以醒醒吧，以后必须得注意细节了。不要再自欺欺人滴说“不要在乎这些细节”的话了，否则，放学别走，哈哈，也许有天你真的会后悔的！</p>\n<a id=\"more\"></a>\n<p>好了，也许你在纳闷本人今天到底经历了什么，会发出如此忧桑的感叹，且听娓娓道来。</p>\n<p><img src=\"../images/201409/201409262015.jpg\" alt=\"pic\"></p>\n<p>就在今天本人在逛微博时，看到了我心仪已久的美团技术部门发了最新的微博消息，想到我一直都想去美团做开发，就评论了下该微博.对于一个没毕业的大学小子来说，评论完就期待着美团那边的回复，正如所料，美团很快就回复了评论，我满怀期待滴打开了消息通知，结果却让我蒙圈了。回复是：</p>\n<p><em>“同学，这个你得问问<strong>美图</strong>技术部门啊。不过，不考虑下美团技术团队？”</em></p>\n<p>当时，我就晕了，以为技术部门和技术团队有差别呢，根本没注意我我打错字把美团写成美图了，然后还愚昧的问人家技术部门和技术团队有差别吗？很快的，美团那边有回复了，直接回复我：</p>\n<p><em>“……图和团的差别啊，同学”</em>。</p>\n<p>难以想象当时回复我的那个哥们该有多么的郁闷。看了老半天，我才注意到原来是我打错字了，当时我立马就脸红了，羞愧对一个自己很心仪的技术团队犯下这么低级的错误，真是可笑，感觉自己就像一个小丑。再后来，我回复了评论，并且很真诚的道歉了，但是美团那边却没有回复了，此时我的心情也有小小的失落了。原本目的很好的一件事却让我由于不细心的无知表现给改变了。</p>\n<p>事情就是这样。</p>\n<p>追根到底，都是自己的错，吃一堑长一智吧。以后坚决杜绝自己粗心大意的恶习，凡事都要细心，细节决定成败不是没有道理的。古语云：”<em>一屋不扫，何以扫天下</em>！“说的大概也是这个道理吧，无论什么时候我们都不要忽略一些小事，细节决定成败啊。</p>\n<p>所以，别再说什么”不要在乎这些细节“这些话了，那都是放屁，如果真的有一天真的因为细节你错过了什么机会或者其他，你真的可能就会后悔一辈子的。</p>\n<hr>\n<p>经过这件事，我反思了很多，也让我认识到了自己是多么的欠缺，有好多的地方都是要去改进的。现在的大学生当然也包括我，都是藏在屋内躲避风雨，以为自己都很牛逼，貌似自己会的很多，其实胸无点墨，真诚告诫大家：踏踏实实去学、多注意细节、不要急躁更不要浮躁、要有自己的追求和奋斗的目标，然后努力的奔跑！</p>\n<p><em>2014-09-26 21:10 Skylab</em></p>\n<p>(end)       </p>\n<hr>\n<p><em>补充:</em></p>\n<p>有人会发邮件说，你把你丢人的事儿秀在这里，是在炫耀吗，是想要别人对你冷嘲热讽吗？首先，我没有秀，更没有炫耀什么，也没什么值得炫耀的。我把这件事记录在这里只是给自己一个教训，要让自己牢记这次教训，凡事都要细心，等到多年以后再翻看时，看看自己年轻时做了多少愚蠢和弱智的事，也算一点点回忆！其他再无多余想法！                </p>\n","site":{"data":{}},"excerpt":"<p>今天，做了一件让我自己都觉得羞愧的事，感觉自己就像一个小丑，都是自己太粗心大意了，或者说自己也太不注意细节问题了。</p>\n<p>现在，大部分人当然也包括此刻以前的我(<em>此刻已改变</em>)，都觉得凡事都不用太在乎细节，逢人便说：“哎呀，不要在乎这些细节！”。从此刻起，打住吧，不要说什么不在乎细节了，那都是傻逼的表现，尚未走出大学校园的我们都太涉世尚浅，有时候一个你不在乎的细节问题就会让你错失一个机会或者其他，所以醒醒吧，以后必须得注意细节了。不要再自欺欺人滴说“不要在乎这些细节”的话了，否则，放学别走，哈哈，也许有天你真的会后悔的！</p>","more":"<p>好了，也许你在纳闷本人今天到底经历了什么，会发出如此忧桑的感叹，且听娓娓道来。</p>\n<p><img src=\"../images/201409/201409262015.jpg\" alt=\"pic\"></p>\n<p>就在今天本人在逛微博时，看到了我心仪已久的美团技术部门发了最新的微博消息，想到我一直都想去美团做开发，就评论了下该微博.对于一个没毕业的大学小子来说，评论完就期待着美团那边的回复，正如所料，美团很快就回复了评论，我满怀期待滴打开了消息通知，结果却让我蒙圈了。回复是：</p>\n<p><em>“同学，这个你得问问<strong>美图</strong>技术部门啊。不过，不考虑下美团技术团队？”</em></p>\n<p>当时，我就晕了，以为技术部门和技术团队有差别呢，根本没注意我我打错字把美团写成美图了，然后还愚昧的问人家技术部门和技术团队有差别吗？很快的，美团那边有回复了，直接回复我：</p>\n<p><em>“……图和团的差别啊，同学”</em>。</p>\n<p>难以想象当时回复我的那个哥们该有多么的郁闷。看了老半天，我才注意到原来是我打错字了，当时我立马就脸红了，羞愧对一个自己很心仪的技术团队犯下这么低级的错误，真是可笑，感觉自己就像一个小丑。再后来，我回复了评论，并且很真诚的道歉了，但是美团那边却没有回复了，此时我的心情也有小小的失落了。原本目的很好的一件事却让我由于不细心的无知表现给改变了。</p>\n<p>事情就是这样。</p>\n<p>追根到底，都是自己的错，吃一堑长一智吧。以后坚决杜绝自己粗心大意的恶习，凡事都要细心，细节决定成败不是没有道理的。古语云：”<em>一屋不扫，何以扫天下</em>！“说的大概也是这个道理吧，无论什么时候我们都不要忽略一些小事，细节决定成败啊。</p>\n<p>所以，别再说什么”不要在乎这些细节“这些话了，那都是放屁，如果真的有一天真的因为细节你错过了什么机会或者其他，你真的可能就会后悔一辈子的。</p>\n<hr>\n<p>经过这件事，我反思了很多，也让我认识到了自己是多么的欠缺，有好多的地方都是要去改进的。现在的大学生当然也包括我，都是藏在屋内躲避风雨，以为自己都很牛逼，貌似自己会的很多，其实胸无点墨，真诚告诫大家：踏踏实实去学、多注意细节、不要急躁更不要浮躁、要有自己的追求和奋斗的目标，然后努力的奔跑！</p>\n<p><em>2014-09-26 21:10 Skylab</em></p>\n<p>(end)       </p>\n<hr>\n<p><em>补充:</em></p>\n<p>有人会发邮件说，你把你丢人的事儿秀在这里，是在炫耀吗，是想要别人对你冷嘲热讽吗？首先，我没有秀，更没有炫耀什么，也没什么值得炫耀的。我把这件事记录在这里只是给自己一个教训，要让自己牢记这次教训，凡事都要细心，等到多年以后再翻看时，看看自己年轻时做了多少愚蠢和弱智的事，也算一点点回忆！其他再无多余想法！                </p>"},{"layout":"post","title":"正则表达式---环视","_content":"在正则表达式中，**断言用来声明一个应该为真的事实**，只有断言为真时才会继续进行匹配。不过要记得哦，断言只是匹配一个事实，而不是内容。这里介绍的断言，他们用于查找在某些内容之前或者之后，也就是一个位置应该满足的一定条件。\n\n这里介绍四种断言：\n\n*\t顺序肯定环视 \t`(?=exp)`\n*\t逆序肯定环视\t`(?<=exp)`\n*\t顺序否定环视\t`(?!exp)`\n*\t逆序否定环视\t`(?<!exp)`\n\n<!--more-->\n\n##顺序肯定环视\n\n断言自身出现的位置的后面只能匹配表达式exp.\n\n比如，匹配\"ing\"结尾的单词前面部分（即除了ing以外的部分）\n\n\t\\b\\w+(?=ing\\b)\n\n上面表达式查找以下句子时，会匹配\"sing\"和\"danc\":\n\t\n\tI'm singsing while you're dancing.\n\n##逆序否定环视\n\n断言自身出现位置的前面智能匹配表达式exp。\n\n比如，以re开头的单词的后半部分（即除了re以外的部分）\n\n\t(?<\\bre)\\w+\\b\n\n上面的表达式在查找以下句子时，会匹配\"ading\":\n\n\tI'm reading book.\n\n\n下面这个例子同时使用以上两种环视操作，匹配以空格间隔的数字（**再次强调，不包括这些空格，断言是匹配的只是事实，而不是内容**）。\n\n\t(?<=\\s)\\d+(?=\\s)\n\n##顺序否定环视\n\n断言此位置的后面不能匹配表达式exp。\n\n1、匹配3位数字，而且这三位数字的后面不能是数字：\n\n\t\\d{3}(?!\\d)\n\n2、匹配不包含连续字符串abc的单词：\n\n\t\\b((?!abc)\\w)+\\b\n\n#逆序否定环视\n\n断言此位置的前面不能匹配表达式exp。\n\n例如，前面不能是小写字母的7为数字：\n\n\t(?<![a-z])\\d{7}\n\n匹配不包括属性的简单HTML标签的内容：\n\n\t(?<=<(\\w+)>).*(?=<\\/\\1>)\n\n以上表达式最能表现断言的真正用途。`(?<=<(\\w+)>)`指定前缀是被尖括号括起来的单词（比如`<b>`）,然后是`.*`实际内容（即任意的字符串），最后是一个后缀`(?=<\\/\\1>)`。注意后缀`\\/`用到了字符转义，`\\1`则是反向引用，引用的是捕获的第一组子表达式，即前面`(\\w+)`的内容，如果前面匹配的是`<b>`，那么这里就是`</b>`。整个表达式匹配的就是`<b>`和`</b>`之间的内容（再次提醒，不包括前缀和后缀本身，他们只是一个事实）。\n\n---\n\n###总结\n\n总体来说，环视相当于对所在位置附加了一个条件，**难点就在于找到这个位置**，这点解决了，那么环视就没什么神秘可言了！\n\n（end）\n\n\n","source":"_posts/201410/2014-10-07-the_regular_expression_look_around.md","raw":"---\nlayout : post\ntitle : 正则表达式---环视\ncategory : 正则表达式\ntags : 正则表达式\n---\n在正则表达式中，**断言用来声明一个应该为真的事实**，只有断言为真时才会继续进行匹配。不过要记得哦，断言只是匹配一个事实，而不是内容。这里介绍的断言，他们用于查找在某些内容之前或者之后，也就是一个位置应该满足的一定条件。\n\n这里介绍四种断言：\n\n*\t顺序肯定环视 \t`(?=exp)`\n*\t逆序肯定环视\t`(?<=exp)`\n*\t顺序否定环视\t`(?!exp)`\n*\t逆序否定环视\t`(?<!exp)`\n\n<!--more-->\n\n##顺序肯定环视\n\n断言自身出现的位置的后面只能匹配表达式exp.\n\n比如，匹配\"ing\"结尾的单词前面部分（即除了ing以外的部分）\n\n\t\\b\\w+(?=ing\\b)\n\n上面表达式查找以下句子时，会匹配\"sing\"和\"danc\":\n\t\n\tI'm singsing while you're dancing.\n\n##逆序否定环视\n\n断言自身出现位置的前面智能匹配表达式exp。\n\n比如，以re开头的单词的后半部分（即除了re以外的部分）\n\n\t(?<\\bre)\\w+\\b\n\n上面的表达式在查找以下句子时，会匹配\"ading\":\n\n\tI'm reading book.\n\n\n下面这个例子同时使用以上两种环视操作，匹配以空格间隔的数字（**再次强调，不包括这些空格，断言是匹配的只是事实，而不是内容**）。\n\n\t(?<=\\s)\\d+(?=\\s)\n\n##顺序否定环视\n\n断言此位置的后面不能匹配表达式exp。\n\n1、匹配3位数字，而且这三位数字的后面不能是数字：\n\n\t\\d{3}(?!\\d)\n\n2、匹配不包含连续字符串abc的单词：\n\n\t\\b((?!abc)\\w)+\\b\n\n#逆序否定环视\n\n断言此位置的前面不能匹配表达式exp。\n\n例如，前面不能是小写字母的7为数字：\n\n\t(?<![a-z])\\d{7}\n\n匹配不包括属性的简单HTML标签的内容：\n\n\t(?<=<(\\w+)>).*(?=<\\/\\1>)\n\n以上表达式最能表现断言的真正用途。`(?<=<(\\w+)>)`指定前缀是被尖括号括起来的单词（比如`<b>`）,然后是`.*`实际内容（即任意的字符串），最后是一个后缀`(?=<\\/\\1>)`。注意后缀`\\/`用到了字符转义，`\\1`则是反向引用，引用的是捕获的第一组子表达式，即前面`(\\w+)`的内容，如果前面匹配的是`<b>`，那么这里就是`</b>`。整个表达式匹配的就是`<b>`和`</b>`之间的内容（再次提醒，不包括前缀和后缀本身，他们只是一个事实）。\n\n---\n\n###总结\n\n总体来说，环视相当于对所在位置附加了一个条件，**难点就在于找到这个位置**，这点解决了，那么环视就没什么神秘可言了！\n\n（end）\n\n\n","slug":"201410-2014-10-07-the-regular-expression-look-around","published":1,"date":"2018-04-12T15:20:38.827Z","updated":"2018-04-12T15:20:38.827Z","comments":1,"photos":[],"link":"","_id":"cjfwomb66004sass6d2xpqnkn","content":"<p>在正则表达式中，<strong>断言用来声明一个应该为真的事实</strong>，只有断言为真时才会继续进行匹配。不过要记得哦，断言只是匹配一个事实，而不是内容。这里介绍的断言，他们用于查找在某些内容之前或者之后，也就是一个位置应该满足的一定条件。</p>\n<p>这里介绍四种断言：</p>\n<ul>\n<li>顺序肯定环视     <code>(?=exp)</code></li>\n<li>逆序肯定环视    <code>(?&lt;=exp)</code></li>\n<li>顺序否定环视    <code>(?!exp)</code></li>\n<li>逆序否定环视    <code>(?&lt;!exp)</code></li>\n</ul>\n<a id=\"more\"></a>\n<p>##顺序肯定环视</p>\n<p>断言自身出现的位置的后面只能匹配表达式exp.</p>\n<p>比如，匹配”ing”结尾的单词前面部分（即除了ing以外的部分）</p>\n<pre><code>\\b\\w+(?=ing\\b)\n</code></pre><p>上面表达式查找以下句子时，会匹配”sing”和”danc”:</p>\n<pre><code>I&apos;m singsing while you&apos;re dancing.\n</code></pre><p>##逆序否定环视</p>\n<p>断言自身出现位置的前面智能匹配表达式exp。</p>\n<p>比如，以re开头的单词的后半部分（即除了re以外的部分）</p>\n<pre><code>(?&lt;\\bre)\\w+\\b\n</code></pre><p>上面的表达式在查找以下句子时，会匹配”ading”:</p>\n<pre><code>I&apos;m reading book.\n</code></pre><p>下面这个例子同时使用以上两种环视操作，匹配以空格间隔的数字（<strong>再次强调，不包括这些空格，断言是匹配的只是事实，而不是内容</strong>）。</p>\n<pre><code>(?&lt;=\\s)\\d+(?=\\s)\n</code></pre><p>##顺序否定环视</p>\n<p>断言此位置的后面不能匹配表达式exp。</p>\n<p>1、匹配3位数字，而且这三位数字的后面不能是数字：</p>\n<pre><code>\\d{3}(?!\\d)\n</code></pre><p>2、匹配不包含连续字符串abc的单词：</p>\n<pre><code>\\b((?!abc)\\w)+\\b\n</code></pre><p>#逆序否定环视</p>\n<p>断言此位置的前面不能匹配表达式exp。</p>\n<p>例如，前面不能是小写字母的7为数字：</p>\n<pre><code>(?&lt;![a-z])\\d{7}\n</code></pre><p>匹配不包括属性的简单HTML标签的内容：</p>\n<pre><code>(?&lt;=&lt;(\\w+)&gt;).*(?=&lt;\\/\\1&gt;)\n</code></pre><p>以上表达式最能表现断言的真正用途。<code>(?&lt;=&lt;(\\w+)&gt;)</code>指定前缀是被尖括号括起来的单词（比如<code>&lt;b&gt;</code>）,然后是<code>.*</code>实际内容（即任意的字符串），最后是一个后缀<code>(?=&lt;\\/\\1&gt;)</code>。注意后缀<code>\\/</code>用到了字符转义，<code>\\1</code>则是反向引用，引用的是捕获的第一组子表达式，即前面<code>(\\w+)</code>的内容，如果前面匹配的是<code>&lt;b&gt;</code>，那么这里就是<code>&lt;/b&gt;</code>。整个表达式匹配的就是<code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code>之间的内容（再次提醒，不包括前缀和后缀本身，他们只是一个事实）。</p>\n<hr>\n<p>###总结</p>\n<p>总体来说，环视相当于对所在位置附加了一个条件，<strong>难点就在于找到这个位置</strong>，这点解决了，那么环视就没什么神秘可言了！</p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>在正则表达式中，<strong>断言用来声明一个应该为真的事实</strong>，只有断言为真时才会继续进行匹配。不过要记得哦，断言只是匹配一个事实，而不是内容。这里介绍的断言，他们用于查找在某些内容之前或者之后，也就是一个位置应该满足的一定条件。</p>\n<p>这里介绍四种断言：</p>\n<ul>\n<li>顺序肯定环视     <code>(?=exp)</code></li>\n<li>逆序肯定环视    <code>(?&lt;=exp)</code></li>\n<li>顺序否定环视    <code>(?!exp)</code></li>\n<li>逆序否定环视    <code>(?&lt;!exp)</code></li>\n</ul>","more":"<p>##顺序肯定环视</p>\n<p>断言自身出现的位置的后面只能匹配表达式exp.</p>\n<p>比如，匹配”ing”结尾的单词前面部分（即除了ing以外的部分）</p>\n<pre><code>\\b\\w+(?=ing\\b)\n</code></pre><p>上面表达式查找以下句子时，会匹配”sing”和”danc”:</p>\n<pre><code>I&apos;m singsing while you&apos;re dancing.\n</code></pre><p>##逆序否定环视</p>\n<p>断言自身出现位置的前面智能匹配表达式exp。</p>\n<p>比如，以re开头的单词的后半部分（即除了re以外的部分）</p>\n<pre><code>(?&lt;\\bre)\\w+\\b\n</code></pre><p>上面的表达式在查找以下句子时，会匹配”ading”:</p>\n<pre><code>I&apos;m reading book.\n</code></pre><p>下面这个例子同时使用以上两种环视操作，匹配以空格间隔的数字（<strong>再次强调，不包括这些空格，断言是匹配的只是事实，而不是内容</strong>）。</p>\n<pre><code>(?&lt;=\\s)\\d+(?=\\s)\n</code></pre><p>##顺序否定环视</p>\n<p>断言此位置的后面不能匹配表达式exp。</p>\n<p>1、匹配3位数字，而且这三位数字的后面不能是数字：</p>\n<pre><code>\\d{3}(?!\\d)\n</code></pre><p>2、匹配不包含连续字符串abc的单词：</p>\n<pre><code>\\b((?!abc)\\w)+\\b\n</code></pre><p>#逆序否定环视</p>\n<p>断言此位置的前面不能匹配表达式exp。</p>\n<p>例如，前面不能是小写字母的7为数字：</p>\n<pre><code>(?&lt;![a-z])\\d{7}\n</code></pre><p>匹配不包括属性的简单HTML标签的内容：</p>\n<pre><code>(?&lt;=&lt;(\\w+)&gt;).*(?=&lt;\\/\\1&gt;)\n</code></pre><p>以上表达式最能表现断言的真正用途。<code>(?&lt;=&lt;(\\w+)&gt;)</code>指定前缀是被尖括号括起来的单词（比如<code>&lt;b&gt;</code>）,然后是<code>.*</code>实际内容（即任意的字符串），最后是一个后缀<code>(?=&lt;\\/\\1&gt;)</code>。注意后缀<code>\\/</code>用到了字符转义，<code>\\1</code>则是反向引用，引用的是捕获的第一组子表达式，即前面<code>(\\w+)</code>的内容，如果前面匹配的是<code>&lt;b&gt;</code>，那么这里就是<code>&lt;/b&gt;</code>。整个表达式匹配的就是<code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code>之间的内容（再次提醒，不包括前缀和后缀本身，他们只是一个事实）。</p>\n<hr>\n<p>###总结</p>\n<p>总体来说，环视相当于对所在位置附加了一个条件，<strong>难点就在于找到这个位置</strong>，这点解决了，那么环视就没什么神秘可言了！</p>\n<p>（end）</p>"},{"layout":"post","title":"PHP实现异步执行","_content":"对于php而言本身没有提供多线程这个东西，但是可以通过其他方式做出同样的效果，即一中方式就是使用`fsockopen()`函数和`fwrite()`函数来请求一个url，然后不用等待该返回结果，所以当我们在被请求的那个url中做其他事时就相当于异步了。\n\n特此总结下，php如何模拟异步执行以及笔者在其中遇到的问题，如有错误，欢迎拍砖！ :)\n\n关键代码如下：\n\n\t<?php\n\t\t$fh = fsockopen('localhost', 80, $errno, $errstr, 5);\n\t\t//注意：这里还可以使用POST提交方式\n\t\tfwrite($fh, \"GET /url_path/***.php\\r\\nhost: localhost\\r\\n\\r\\n\");\n\t\tfclose($fh);\n\t?>\n\n\n<!--more-->\n\n上面的代码向页面 `***.php`发送完请求就不管了，用不着等待请求页面的响应数据，利用这一点就可以在被请求的页面`***.php` 中异步的做些事情了,这就是核心思想。\n\n\n现在有一个需求，就是当用户访问`one.php`这个页面时，向数据库插入1000条数据（这里假设存在这种需求，当然，实际开发中可能不存在这种情况，也可能是发送1000封电子邮件等等）。\n\n代码实现类似于这样：\n\n\t<?php\n\t\t//以上有其他操作\n\t\t//向数据库模拟插入1000条数据\n\t\tfor ($i=1; $ <= 1000; $i++) {\n\t\t\t//mysql操作\n\t\t}\n\t\techo 'insert ok';\n\t\t//到此，可以输出给用户看到添加成功的页面了\n\t?>\n\n上面实现代码的问题是，用户得等待请求页面的响应数据，而且用户可能要等待很长时间或者由于页面请求超时，而断开连接，这都是造成不好的用户体验的原因。所以，让用户等待是很不友好的，这个插入数据库大量新纪录的过程可以使用异步来完成。\n\n现在，来模拟php异步执行方式，首先创建`one.php`来让用户访问，然后创建`two.php`来实现数据库大量数据操作，同时该页面使用`sleep()`函数来延迟执行。\n\none.php页面代码：\n\n\t<?php\n    header('content-type: text/html;charset=utf-8');\n    //测试fsockopen异步调用代码\n    $start = time();\n    $fh = fsockopen('127.0.0.1', 80, $errno, $errstr, 5);\n    if (!$fh) { exit($errstr); }\n    fwrite($fh, \"GET /demo/fsockopen/two.php HTTP/1.1\\r\\nhost: localhost\\r\\n\\r\\n\");\n    fclose($fh);\n    $end = time();\n    echo '开始时间：' . $start . '<br />';\n    echo '结束时间：' . $end;\n\t?>\n\ntwo.php页面代码：\n\n\t<?php\n\tsleep(5);\t//休眠5秒\n    $conn = @mysql_connect('localhost', 'test', '123456');\n    if (!$conn) { exit('connect error'); }\n    mysql_select_db('demo', $conn);\n    for ($i=1; $i<=1000; $i++) {\n        $sql = \"insert into fsock_test values (null, 'person$i', \" .mt_rand(1, 100) . \")\";\n        $res = mysql_query($sql, $conn);\n        if (!$res) {\n            exit('error');\n        }\n    }\n    mysql_close($conn);\n\t?>\n\n显示的消耗时间几乎为零\n\n![pic](../images/201410/2014-10-11_124435.jpg)\n\n同时，数据库也插入了1000条数据：\n\t\n![pic](../images/201410/2014-10-11_124539.jpg)\n\n从上面的结果可以看出，`two.php`页面至少消耗了5秒以上，但不会阻塞`one.php`的页面执行，表明了该过程是异步的。\n\n---\n\n###注意几点\n\n1、使用`fsockopen()`函数时，第一个参数不能带`http://`字符串，除非使用SSL等。\n\n\t $fh = fsockopen('127.0.0.1', 80, $errno, $errstr, 5);\n\n\n2、`fwrite（）`函数中可以使用GET请求，也可以使用POST请求\n\n\t fwrite($fh, \"GET /demo/fsockopen/two.php HTTP/1.1\\r\\nhost: localhost\\r\\n\\r\\n\");\t\t//还可以使用POST请求\n\n3、`\\r\\n`换行符必须使用双引号来引用，如果使用单引号来引用会当作普通字符串来对待。\n\n\n\n\n\n\n","source":"_posts/201410/2014-10-11-php_simulation_asynchroous.md","raw":"---\nlayout : post\ntitle : PHP实现异步执行\ncategory : php\ntags : php 异步\n---\n对于php而言本身没有提供多线程这个东西，但是可以通过其他方式做出同样的效果，即一中方式就是使用`fsockopen()`函数和`fwrite()`函数来请求一个url，然后不用等待该返回结果，所以当我们在被请求的那个url中做其他事时就相当于异步了。\n\n特此总结下，php如何模拟异步执行以及笔者在其中遇到的问题，如有错误，欢迎拍砖！ :)\n\n关键代码如下：\n\n\t<?php\n\t\t$fh = fsockopen('localhost', 80, $errno, $errstr, 5);\n\t\t//注意：这里还可以使用POST提交方式\n\t\tfwrite($fh, \"GET /url_path/***.php\\r\\nhost: localhost\\r\\n\\r\\n\");\n\t\tfclose($fh);\n\t?>\n\n\n<!--more-->\n\n上面的代码向页面 `***.php`发送完请求就不管了，用不着等待请求页面的响应数据，利用这一点就可以在被请求的页面`***.php` 中异步的做些事情了,这就是核心思想。\n\n\n现在有一个需求，就是当用户访问`one.php`这个页面时，向数据库插入1000条数据（这里假设存在这种需求，当然，实际开发中可能不存在这种情况，也可能是发送1000封电子邮件等等）。\n\n代码实现类似于这样：\n\n\t<?php\n\t\t//以上有其他操作\n\t\t//向数据库模拟插入1000条数据\n\t\tfor ($i=1; $ <= 1000; $i++) {\n\t\t\t//mysql操作\n\t\t}\n\t\techo 'insert ok';\n\t\t//到此，可以输出给用户看到添加成功的页面了\n\t?>\n\n上面实现代码的问题是，用户得等待请求页面的响应数据，而且用户可能要等待很长时间或者由于页面请求超时，而断开连接，这都是造成不好的用户体验的原因。所以，让用户等待是很不友好的，这个插入数据库大量新纪录的过程可以使用异步来完成。\n\n现在，来模拟php异步执行方式，首先创建`one.php`来让用户访问，然后创建`two.php`来实现数据库大量数据操作，同时该页面使用`sleep()`函数来延迟执行。\n\none.php页面代码：\n\n\t<?php\n    header('content-type: text/html;charset=utf-8');\n    //测试fsockopen异步调用代码\n    $start = time();\n    $fh = fsockopen('127.0.0.1', 80, $errno, $errstr, 5);\n    if (!$fh) { exit($errstr); }\n    fwrite($fh, \"GET /demo/fsockopen/two.php HTTP/1.1\\r\\nhost: localhost\\r\\n\\r\\n\");\n    fclose($fh);\n    $end = time();\n    echo '开始时间：' . $start . '<br />';\n    echo '结束时间：' . $end;\n\t?>\n\ntwo.php页面代码：\n\n\t<?php\n\tsleep(5);\t//休眠5秒\n    $conn = @mysql_connect('localhost', 'test', '123456');\n    if (!$conn) { exit('connect error'); }\n    mysql_select_db('demo', $conn);\n    for ($i=1; $i<=1000; $i++) {\n        $sql = \"insert into fsock_test values (null, 'person$i', \" .mt_rand(1, 100) . \")\";\n        $res = mysql_query($sql, $conn);\n        if (!$res) {\n            exit('error');\n        }\n    }\n    mysql_close($conn);\n\t?>\n\n显示的消耗时间几乎为零\n\n![pic](../images/201410/2014-10-11_124435.jpg)\n\n同时，数据库也插入了1000条数据：\n\t\n![pic](../images/201410/2014-10-11_124539.jpg)\n\n从上面的结果可以看出，`two.php`页面至少消耗了5秒以上，但不会阻塞`one.php`的页面执行，表明了该过程是异步的。\n\n---\n\n###注意几点\n\n1、使用`fsockopen()`函数时，第一个参数不能带`http://`字符串，除非使用SSL等。\n\n\t $fh = fsockopen('127.0.0.1', 80, $errno, $errstr, 5);\n\n\n2、`fwrite（）`函数中可以使用GET请求，也可以使用POST请求\n\n\t fwrite($fh, \"GET /demo/fsockopen/two.php HTTP/1.1\\r\\nhost: localhost\\r\\n\\r\\n\");\t\t//还可以使用POST请求\n\n3、`\\r\\n`换行符必须使用双引号来引用，如果使用单引号来引用会当作普通字符串来对待。\n\n\n\n\n\n\n","slug":"201410-2014-10-11-php-simulation-asynchroous","published":1,"date":"2018-04-12T15:20:38.828Z","updated":"2018-04-12T15:20:38.828Z","comments":1,"photos":[],"link":"","_id":"cjfwomb68004xass6qp2qzaxz","content":"<p>对于php而言本身没有提供多线程这个东西，但是可以通过其他方式做出同样的效果，即一中方式就是使用<code>fsockopen()</code>函数和<code>fwrite()</code>函数来请求一个url，然后不用等待该返回结果，所以当我们在被请求的那个url中做其他事时就相当于异步了。</p>\n<p>特此总结下，php如何模拟异步执行以及笔者在其中遇到的问题，如有错误，欢迎拍砖！ :)</p>\n<p>关键代码如下：</p>\n<pre><code>&lt;?php\n    $fh = fsockopen(&apos;localhost&apos;, 80, $errno, $errstr, 5);\n    //注意：这里还可以使用POST提交方式\n    fwrite($fh, &quot;GET /url_path/***.php\\r\\nhost: localhost\\r\\n\\r\\n&quot;);\n    fclose($fh);\n?&gt;\n</code></pre><a id=\"more\"></a>\n<p>上面的代码向页面 <code>***.php</code>发送完请求就不管了，用不着等待请求页面的响应数据，利用这一点就可以在被请求的页面<code>***.php</code> 中异步的做些事情了,这就是核心思想。</p>\n<p>现在有一个需求，就是当用户访问<code>one.php</code>这个页面时，向数据库插入1000条数据（这里假设存在这种需求，当然，实际开发中可能不存在这种情况，也可能是发送1000封电子邮件等等）。</p>\n<p>代码实现类似于这样：</p>\n<pre><code>&lt;?php\n    //以上有其他操作\n    //向数据库模拟插入1000条数据\n    for ($i=1; $ &lt;= 1000; $i++) {\n        //mysql操作\n    }\n    echo &apos;insert ok&apos;;\n    //到此，可以输出给用户看到添加成功的页面了\n?&gt;\n</code></pre><p>上面实现代码的问题是，用户得等待请求页面的响应数据，而且用户可能要等待很长时间或者由于页面请求超时，而断开连接，这都是造成不好的用户体验的原因。所以，让用户等待是很不友好的，这个插入数据库大量新纪录的过程可以使用异步来完成。</p>\n<p>现在，来模拟php异步执行方式，首先创建<code>one.php</code>来让用户访问，然后创建<code>two.php</code>来实现数据库大量数据操作，同时该页面使用<code>sleep()</code>函数来延迟执行。</p>\n<p>one.php页面代码：</p>\n<pre><code>&lt;?php\nheader(&apos;content-type: text/html;charset=utf-8&apos;);\n//测试fsockopen异步调用代码\n$start = time();\n$fh = fsockopen(&apos;127.0.0.1&apos;, 80, $errno, $errstr, 5);\nif (!$fh) { exit($errstr); }\nfwrite($fh, &quot;GET /demo/fsockopen/two.php HTTP/1.1\\r\\nhost: localhost\\r\\n\\r\\n&quot;);\nfclose($fh);\n$end = time();\necho &apos;开始时间：&apos; . $start . &apos;&lt;br /&gt;&apos;;\necho &apos;结束时间：&apos; . $end;\n?&gt;\n</code></pre><p>two.php页面代码：</p>\n<pre><code>&lt;?php\nsleep(5);    //休眠5秒\n$conn = @mysql_connect(&apos;localhost&apos;, &apos;test&apos;, &apos;123456&apos;);\nif (!$conn) { exit(&apos;connect error&apos;); }\nmysql_select_db(&apos;demo&apos;, $conn);\nfor ($i=1; $i&lt;=1000; $i++) {\n    $sql = &quot;insert into fsock_test values (null, &apos;person$i&apos;, &quot; .mt_rand(1, 100) . &quot;)&quot;;\n    $res = mysql_query($sql, $conn);\n    if (!$res) {\n        exit(&apos;error&apos;);\n    }\n}\nmysql_close($conn);\n?&gt;\n</code></pre><p>显示的消耗时间几乎为零</p>\n<p><img src=\"../images/201410/2014-10-11_124435.jpg\" alt=\"pic\"></p>\n<p>同时，数据库也插入了1000条数据：</p>\n<p><img src=\"../images/201410/2014-10-11_124539.jpg\" alt=\"pic\"></p>\n<p>从上面的结果可以看出，<code>two.php</code>页面至少消耗了5秒以上，但不会阻塞<code>one.php</code>的页面执行，表明了该过程是异步的。</p>\n<hr>\n<p>###注意几点</p>\n<p>1、使用<code>fsockopen()</code>函数时，第一个参数不能带<code>http://</code>字符串，除非使用SSL等。</p>\n<pre><code>$fh = fsockopen(&apos;127.0.0.1&apos;, 80, $errno, $errstr, 5);\n</code></pre><p>2、<code>fwrite（）</code>函数中可以使用GET请求，也可以使用POST请求</p>\n<pre><code>fwrite($fh, &quot;GET /demo/fsockopen/two.php HTTP/1.1\\r\\nhost: localhost\\r\\n\\r\\n&quot;);        //还可以使用POST请求\n</code></pre><p>3、<code>\\r\\n</code>换行符必须使用双引号来引用，如果使用单引号来引用会当作普通字符串来对待。</p>\n","site":{"data":{}},"excerpt":"<p>对于php而言本身没有提供多线程这个东西，但是可以通过其他方式做出同样的效果，即一中方式就是使用<code>fsockopen()</code>函数和<code>fwrite()</code>函数来请求一个url，然后不用等待该返回结果，所以当我们在被请求的那个url中做其他事时就相当于异步了。</p>\n<p>特此总结下，php如何模拟异步执行以及笔者在其中遇到的问题，如有错误，欢迎拍砖！ :)</p>\n<p>关键代码如下：</p>\n<pre><code>&lt;?php\n    $fh = fsockopen(&apos;localhost&apos;, 80, $errno, $errstr, 5);\n    //注意：这里还可以使用POST提交方式\n    fwrite($fh, &quot;GET /url_path/***.php\\r\\nhost: localhost\\r\\n\\r\\n&quot;);\n    fclose($fh);\n?&gt;\n</code></pre>","more":"<p>上面的代码向页面 <code>***.php</code>发送完请求就不管了，用不着等待请求页面的响应数据，利用这一点就可以在被请求的页面<code>***.php</code> 中异步的做些事情了,这就是核心思想。</p>\n<p>现在有一个需求，就是当用户访问<code>one.php</code>这个页面时，向数据库插入1000条数据（这里假设存在这种需求，当然，实际开发中可能不存在这种情况，也可能是发送1000封电子邮件等等）。</p>\n<p>代码实现类似于这样：</p>\n<pre><code>&lt;?php\n    //以上有其他操作\n    //向数据库模拟插入1000条数据\n    for ($i=1; $ &lt;= 1000; $i++) {\n        //mysql操作\n    }\n    echo &apos;insert ok&apos;;\n    //到此，可以输出给用户看到添加成功的页面了\n?&gt;\n</code></pre><p>上面实现代码的问题是，用户得等待请求页面的响应数据，而且用户可能要等待很长时间或者由于页面请求超时，而断开连接，这都是造成不好的用户体验的原因。所以，让用户等待是很不友好的，这个插入数据库大量新纪录的过程可以使用异步来完成。</p>\n<p>现在，来模拟php异步执行方式，首先创建<code>one.php</code>来让用户访问，然后创建<code>two.php</code>来实现数据库大量数据操作，同时该页面使用<code>sleep()</code>函数来延迟执行。</p>\n<p>one.php页面代码：</p>\n<pre><code>&lt;?php\nheader(&apos;content-type: text/html;charset=utf-8&apos;);\n//测试fsockopen异步调用代码\n$start = time();\n$fh = fsockopen(&apos;127.0.0.1&apos;, 80, $errno, $errstr, 5);\nif (!$fh) { exit($errstr); }\nfwrite($fh, &quot;GET /demo/fsockopen/two.php HTTP/1.1\\r\\nhost: localhost\\r\\n\\r\\n&quot;);\nfclose($fh);\n$end = time();\necho &apos;开始时间：&apos; . $start . &apos;&lt;br /&gt;&apos;;\necho &apos;结束时间：&apos; . $end;\n?&gt;\n</code></pre><p>two.php页面代码：</p>\n<pre><code>&lt;?php\nsleep(5);    //休眠5秒\n$conn = @mysql_connect(&apos;localhost&apos;, &apos;test&apos;, &apos;123456&apos;);\nif (!$conn) { exit(&apos;connect error&apos;); }\nmysql_select_db(&apos;demo&apos;, $conn);\nfor ($i=1; $i&lt;=1000; $i++) {\n    $sql = &quot;insert into fsock_test values (null, &apos;person$i&apos;, &quot; .mt_rand(1, 100) . &quot;)&quot;;\n    $res = mysql_query($sql, $conn);\n    if (!$res) {\n        exit(&apos;error&apos;);\n    }\n}\nmysql_close($conn);\n?&gt;\n</code></pre><p>显示的消耗时间几乎为零</p>\n<p><img src=\"../images/201410/2014-10-11_124435.jpg\" alt=\"pic\"></p>\n<p>同时，数据库也插入了1000条数据：</p>\n<p><img src=\"../images/201410/2014-10-11_124539.jpg\" alt=\"pic\"></p>\n<p>从上面的结果可以看出，<code>two.php</code>页面至少消耗了5秒以上，但不会阻塞<code>one.php</code>的页面执行，表明了该过程是异步的。</p>\n<hr>\n<p>###注意几点</p>\n<p>1、使用<code>fsockopen()</code>函数时，第一个参数不能带<code>http://</code>字符串，除非使用SSL等。</p>\n<pre><code>$fh = fsockopen(&apos;127.0.0.1&apos;, 80, $errno, $errstr, 5);\n</code></pre><p>2、<code>fwrite（）</code>函数中可以使用GET请求，也可以使用POST请求</p>\n<pre><code>fwrite($fh, &quot;GET /demo/fsockopen/two.php HTTP/1.1\\r\\nhost: localhost\\r\\n\\r\\n&quot;);        //还可以使用POST请求\n</code></pre><p>3、<code>\\r\\n</code>换行符必须使用双引号来引用，如果使用单引号来引用会当作普通字符串来对待。</p>"},{"layout":"post","title":"MySQL访问控制与管理","_content":"考虑到MySQL数据库的安全，用户应该对他们需要的数据具有适当的访问权，既不能多也不能少。换句话说，用户不能对过多的数据具有过多的访问权。那么现在就MySQL的访问权限问题，做一个小结，如有错误，欢迎拍砖! :)\n\nMySQL默认有一个root的用户帐号，他对整个的MySQL数据库具有完全的访问的控制，在测试中可以使用root帐号(不过并不建议)，但是在实际的应用中，绝不能使用root帐号。我们应该创建一系列的帐号，有的用于管理，有的供用户使用，而有的供开发人员使用，等等~~~\n\n<!--more-->\n\n**再次警告：**\n\n应该严肃对待root登录的使用，尽在绝对需要时才使用它，不要在日常的应用中使用root。创建一系列的帐号，可以保证用户不能执行他们不应该执行的语句，有助于避免mysql受到攻击等情况的发生。\n\n_废话不多说，下面一步步来说明：_\n\n###管理用户\n\nMySQL用户帐号和信息保存在名为mysql的数据库中的user表内。注意，一般不要去访问mysql数据库和里面的表。\n\n\tuse mysql;\n\tselect * from user;\n\n可以查看user表内的所有用户，其实红user字段保存用户名。\n\n###创建用户帐号\n\n创建一个新用户，使用以下语句：\n\n\tcreate user 用户名 identified by '密码';\n\n例如：\n\n\tcreate user test identified by '123456';\n\n`create user`创建了一个新用户，在创建用户时不一定需要密码，这里使用`identified by '密码'`给出了密码，MySQL将在插入user表之前对其进行加密。\n\n_注意:_\n\n使用grant也可以创建新用户，但是使用create user是最清楚和最简单的方式。也可以是用insert语句来创建新用户，但是为了安全起见，不建议这么做。MySQL用来存储用户帐号信息的，任何的错误都可能导致MYSQL数据崩溃。\n\n###重命名用户帐号\n\n使用以下语句进行用户名的重新命名：\n\n\trename user old_name to new_name;\n\n例如：\n\n\trename user test to new_test;\n\n_注意：_\n\n仅MySQL5之后的版本支持rename user，在MySQL5之前重命名一个用户可以使用update更新User表语句来达到目的。\n\n###删除用户帐号\n\n为了删除用户及其权限，使用以下语句：\n\n\tdrop user 用户名;\n\n例如：\n\n\tdrop user test;\n\n_注意：_\n\n自MySQL5以来，使用drop user语句可以删除用户以及相关的权限。但是在MySQL5之前，却只能删除用户，而不能删除该用户的相关权限。因次，必须先使用`revoke` 删除该帐号的权限，然后再删除该用户。\n\n###设置访问权限\n\n在创建新用户后，必须接着分配访问权限。新创建的用户帐号没有访问权限，他们智能登录MySQL数据库，但不能看到数据，不能执行任何的数据库操作。\n\n为了看到用户的权限，使用以下语句：\n\n\tshow grants for 用户名;\n\n如果没有使用名，即查看的就是自己的权限：\n\n\tshow grants;  //查看本身权限\n\n下面，我们查看test这个新用户的权限:\n\n\tshow grants for test;\n\n![pic](../images/201410/2014-10-10_184137.jpg)\n\n输出的结果显示用户test有一个权限`USAGE ON *.*`。USAGE表示根本没有权限，所以，此结果在任意数据库和任意表上对任何东西都没有权限。\n\n_注意：_\n\nMySQL的用户权限用用户名和主机名结合定义。如果不指定主机，则使用默认的主机名`%`来代替。\n\n下面，使用grant语句来设置用户一些相关权限：\n\n\tgrant 要授予的权限 on  被授予权限的数据库或者表 to 用户名;\n\n给用户test设置select和isnert的权限：\n\n\tgrant select,insert on demo.* to test;\n\tshow grants for test;\n\n![pic](../images/201410/2014-10-10_185303.jpg)\n\n此grant语句允许用户test在demo数据库（demo数据库内的所有表）上使用select和insert语句。每个grant添加的权限，MySQL都会读取所有权限，并根据他们确定权限。\n\n_注意：_\n\n可通过列出各个权限并用逗号分割来进行多个grant语句串在一起，从而达到授予多个权限的要求。\n\n\n那既然给用户test了查询和添加记录的权限，有一天，想把给用户的添加权限给删除掉，怎么办呢？可以受用revoke语句：\n\n\trevoke 要删除的权限列表 on 数据库或表 from  用户;\n\n删掉test用户的insert权限：\n\n\trevoke insert on demo.* from test;\n\n这条revoke语句取消了test用户的对于demo数据库内的所有表的insert权限，但是要注意，被撤销的权限必须存在，否则会出错。\n\n**grant和revoke可在几个层次上控制访问权限**\n\n>整个服务器,使用`grant all`和`revoke all`\n\n>整个数据库，使用`on database.*`\n\n>特定的表，使用`on database.table`\n\n>特定的列\n\n>特定的存储过程\n\n\n###更改密码\n\n为了更改用户密码，可以使用`set password`语句：\n\n\tset password for 用户名=password('新密码');\n\n这里给test这个用户，更改密码为test123；\n\n\tset password for test=password('test123');\n\n`set password`用户更新用户密码，新密码必须传递到`password()`函数内进行加密。\n\n_注意:_\n\n如果`set password`没有指定用户名，即代表的就是设置你自己（当前用户）的密码：\n\n\tset password=password('新密码');\t\t//更改自己的新密码\n\n---\n\n###小结：\n\n这里总结了MySQL访问权限的设置问题，在于说明了一个重要的事实，为了MySQL服务器的安全性考虑，你需要给用户提供他们需要的访问权限，且仅提供他们所需的访问权，这样可以在很大程度上保证了MySQL的较高安全性。\n\n另一方面，我们也提到了，在实际的应用上我们不应该使用root帐号，应该创建一系列的帐号来满足不同的需要，尽量不要给出过多的权限。\n\n\n（end）\n\n\n\n\n\n\t","source":"_posts/201410/2014-10-10-mysql_grant_and_manage_notes.md","raw":"---\nlayout : post\ntitle : MySQL访问控制与管理\ncategory : MySQL\ntags : MySQL\n---\n考虑到MySQL数据库的安全，用户应该对他们需要的数据具有适当的访问权，既不能多也不能少。换句话说，用户不能对过多的数据具有过多的访问权。那么现在就MySQL的访问权限问题，做一个小结，如有错误，欢迎拍砖! :)\n\nMySQL默认有一个root的用户帐号，他对整个的MySQL数据库具有完全的访问的控制，在测试中可以使用root帐号(不过并不建议)，但是在实际的应用中，绝不能使用root帐号。我们应该创建一系列的帐号，有的用于管理，有的供用户使用，而有的供开发人员使用，等等~~~\n\n<!--more-->\n\n**再次警告：**\n\n应该严肃对待root登录的使用，尽在绝对需要时才使用它，不要在日常的应用中使用root。创建一系列的帐号，可以保证用户不能执行他们不应该执行的语句，有助于避免mysql受到攻击等情况的发生。\n\n_废话不多说，下面一步步来说明：_\n\n###管理用户\n\nMySQL用户帐号和信息保存在名为mysql的数据库中的user表内。注意，一般不要去访问mysql数据库和里面的表。\n\n\tuse mysql;\n\tselect * from user;\n\n可以查看user表内的所有用户，其实红user字段保存用户名。\n\n###创建用户帐号\n\n创建一个新用户，使用以下语句：\n\n\tcreate user 用户名 identified by '密码';\n\n例如：\n\n\tcreate user test identified by '123456';\n\n`create user`创建了一个新用户，在创建用户时不一定需要密码，这里使用`identified by '密码'`给出了密码，MySQL将在插入user表之前对其进行加密。\n\n_注意:_\n\n使用grant也可以创建新用户，但是使用create user是最清楚和最简单的方式。也可以是用insert语句来创建新用户，但是为了安全起见，不建议这么做。MySQL用来存储用户帐号信息的，任何的错误都可能导致MYSQL数据崩溃。\n\n###重命名用户帐号\n\n使用以下语句进行用户名的重新命名：\n\n\trename user old_name to new_name;\n\n例如：\n\n\trename user test to new_test;\n\n_注意：_\n\n仅MySQL5之后的版本支持rename user，在MySQL5之前重命名一个用户可以使用update更新User表语句来达到目的。\n\n###删除用户帐号\n\n为了删除用户及其权限，使用以下语句：\n\n\tdrop user 用户名;\n\n例如：\n\n\tdrop user test;\n\n_注意：_\n\n自MySQL5以来，使用drop user语句可以删除用户以及相关的权限。但是在MySQL5之前，却只能删除用户，而不能删除该用户的相关权限。因次，必须先使用`revoke` 删除该帐号的权限，然后再删除该用户。\n\n###设置访问权限\n\n在创建新用户后，必须接着分配访问权限。新创建的用户帐号没有访问权限，他们智能登录MySQL数据库，但不能看到数据，不能执行任何的数据库操作。\n\n为了看到用户的权限，使用以下语句：\n\n\tshow grants for 用户名;\n\n如果没有使用名，即查看的就是自己的权限：\n\n\tshow grants;  //查看本身权限\n\n下面，我们查看test这个新用户的权限:\n\n\tshow grants for test;\n\n![pic](../images/201410/2014-10-10_184137.jpg)\n\n输出的结果显示用户test有一个权限`USAGE ON *.*`。USAGE表示根本没有权限，所以，此结果在任意数据库和任意表上对任何东西都没有权限。\n\n_注意：_\n\nMySQL的用户权限用用户名和主机名结合定义。如果不指定主机，则使用默认的主机名`%`来代替。\n\n下面，使用grant语句来设置用户一些相关权限：\n\n\tgrant 要授予的权限 on  被授予权限的数据库或者表 to 用户名;\n\n给用户test设置select和isnert的权限：\n\n\tgrant select,insert on demo.* to test;\n\tshow grants for test;\n\n![pic](../images/201410/2014-10-10_185303.jpg)\n\n此grant语句允许用户test在demo数据库（demo数据库内的所有表）上使用select和insert语句。每个grant添加的权限，MySQL都会读取所有权限，并根据他们确定权限。\n\n_注意：_\n\n可通过列出各个权限并用逗号分割来进行多个grant语句串在一起，从而达到授予多个权限的要求。\n\n\n那既然给用户test了查询和添加记录的权限，有一天，想把给用户的添加权限给删除掉，怎么办呢？可以受用revoke语句：\n\n\trevoke 要删除的权限列表 on 数据库或表 from  用户;\n\n删掉test用户的insert权限：\n\n\trevoke insert on demo.* from test;\n\n这条revoke语句取消了test用户的对于demo数据库内的所有表的insert权限，但是要注意，被撤销的权限必须存在，否则会出错。\n\n**grant和revoke可在几个层次上控制访问权限**\n\n>整个服务器,使用`grant all`和`revoke all`\n\n>整个数据库，使用`on database.*`\n\n>特定的表，使用`on database.table`\n\n>特定的列\n\n>特定的存储过程\n\n\n###更改密码\n\n为了更改用户密码，可以使用`set password`语句：\n\n\tset password for 用户名=password('新密码');\n\n这里给test这个用户，更改密码为test123；\n\n\tset password for test=password('test123');\n\n`set password`用户更新用户密码，新密码必须传递到`password()`函数内进行加密。\n\n_注意:_\n\n如果`set password`没有指定用户名，即代表的就是设置你自己（当前用户）的密码：\n\n\tset password=password('新密码');\t\t//更改自己的新密码\n\n---\n\n###小结：\n\n这里总结了MySQL访问权限的设置问题，在于说明了一个重要的事实，为了MySQL服务器的安全性考虑，你需要给用户提供他们需要的访问权限，且仅提供他们所需的访问权，这样可以在很大程度上保证了MySQL的较高安全性。\n\n另一方面，我们也提到了，在实际的应用上我们不应该使用root帐号，应该创建一系列的帐号来满足不同的需要，尽量不要给出过多的权限。\n\n\n（end）\n\n\n\n\n\n\t","slug":"201410-2014-10-10-mysql-grant-and-manage-notes","published":1,"date":"2018-04-12T15:20:38.828Z","updated":"2018-04-12T15:20:38.828Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6a0050ass6ihz2dlp9","content":"<p>考虑到MySQL数据库的安全，用户应该对他们需要的数据具有适当的访问权，既不能多也不能少。换句话说，用户不能对过多的数据具有过多的访问权。那么现在就MySQL的访问权限问题，做一个小结，如有错误，欢迎拍砖! :)</p>\n<p>MySQL默认有一个root的用户帐号，他对整个的MySQL数据库具有完全的访问的控制，在测试中可以使用root帐号(不过并不建议)，但是在实际的应用中，绝不能使用root帐号。我们应该创建一系列的帐号，有的用于管理，有的供用户使用，而有的供开发人员使用，等等~~~</p>\n<a id=\"more\"></a>\n<p><strong>再次警告：</strong></p>\n<p>应该严肃对待root登录的使用，尽在绝对需要时才使用它，不要在日常的应用中使用root。创建一系列的帐号，可以保证用户不能执行他们不应该执行的语句，有助于避免mysql受到攻击等情况的发生。</p>\n<p><em>废话不多说，下面一步步来说明：</em></p>\n<p>###管理用户</p>\n<p>MySQL用户帐号和信息保存在名为mysql的数据库中的user表内。注意，一般不要去访问mysql数据库和里面的表。</p>\n<pre><code>use mysql;\nselect * from user;\n</code></pre><p>可以查看user表内的所有用户，其实红user字段保存用户名。</p>\n<p>###创建用户帐号</p>\n<p>创建一个新用户，使用以下语句：</p>\n<pre><code>create user 用户名 identified by &apos;密码&apos;;\n</code></pre><p>例如：</p>\n<pre><code>create user test identified by &apos;123456&apos;;\n</code></pre><p><code>create user</code>创建了一个新用户，在创建用户时不一定需要密码，这里使用<code>identified by &#39;密码&#39;</code>给出了密码，MySQL将在插入user表之前对其进行加密。</p>\n<p><em>注意:</em></p>\n<p>使用grant也可以创建新用户，但是使用create user是最清楚和最简单的方式。也可以是用insert语句来创建新用户，但是为了安全起见，不建议这么做。MySQL用来存储用户帐号信息的，任何的错误都可能导致MYSQL数据崩溃。</p>\n<p>###重命名用户帐号</p>\n<p>使用以下语句进行用户名的重新命名：</p>\n<pre><code>rename user old_name to new_name;\n</code></pre><p>例如：</p>\n<pre><code>rename user test to new_test;\n</code></pre><p><em>注意：</em></p>\n<p>仅MySQL5之后的版本支持rename user，在MySQL5之前重命名一个用户可以使用update更新User表语句来达到目的。</p>\n<p>###删除用户帐号</p>\n<p>为了删除用户及其权限，使用以下语句：</p>\n<pre><code>drop user 用户名;\n</code></pre><p>例如：</p>\n<pre><code>drop user test;\n</code></pre><p><em>注意：</em></p>\n<p>自MySQL5以来，使用drop user语句可以删除用户以及相关的权限。但是在MySQL5之前，却只能删除用户，而不能删除该用户的相关权限。因次，必须先使用<code>revoke</code> 删除该帐号的权限，然后再删除该用户。</p>\n<p>###设置访问权限</p>\n<p>在创建新用户后，必须接着分配访问权限。新创建的用户帐号没有访问权限，他们智能登录MySQL数据库，但不能看到数据，不能执行任何的数据库操作。</p>\n<p>为了看到用户的权限，使用以下语句：</p>\n<pre><code>show grants for 用户名;\n</code></pre><p>如果没有使用名，即查看的就是自己的权限：</p>\n<pre><code>show grants;  //查看本身权限\n</code></pre><p>下面，我们查看test这个新用户的权限:</p>\n<pre><code>show grants for test;\n</code></pre><p><img src=\"../images/201410/2014-10-10_184137.jpg\" alt=\"pic\"></p>\n<p>输出的结果显示用户test有一个权限<code>USAGE ON *.*</code>。USAGE表示根本没有权限，所以，此结果在任意数据库和任意表上对任何东西都没有权限。</p>\n<p><em>注意：</em></p>\n<p>MySQL的用户权限用用户名和主机名结合定义。如果不指定主机，则使用默认的主机名<code>%</code>来代替。</p>\n<p>下面，使用grant语句来设置用户一些相关权限：</p>\n<pre><code>grant 要授予的权限 on  被授予权限的数据库或者表 to 用户名;\n</code></pre><p>给用户test设置select和isnert的权限：</p>\n<pre><code>grant select,insert on demo.* to test;\nshow grants for test;\n</code></pre><p><img src=\"../images/201410/2014-10-10_185303.jpg\" alt=\"pic\"></p>\n<p>此grant语句允许用户test在demo数据库（demo数据库内的所有表）上使用select和insert语句。每个grant添加的权限，MySQL都会读取所有权限，并根据他们确定权限。</p>\n<p><em>注意：</em></p>\n<p>可通过列出各个权限并用逗号分割来进行多个grant语句串在一起，从而达到授予多个权限的要求。</p>\n<p>那既然给用户test了查询和添加记录的权限，有一天，想把给用户的添加权限给删除掉，怎么办呢？可以受用revoke语句：</p>\n<pre><code>revoke 要删除的权限列表 on 数据库或表 from  用户;\n</code></pre><p>删掉test用户的insert权限：</p>\n<pre><code>revoke insert on demo.* from test;\n</code></pre><p>这条revoke语句取消了test用户的对于demo数据库内的所有表的insert权限，但是要注意，被撤销的权限必须存在，否则会出错。</p>\n<p><strong>grant和revoke可在几个层次上控制访问权限</strong></p>\n<blockquote>\n<p>整个服务器,使用<code>grant all</code>和<code>revoke all</code></p>\n</blockquote>\n<blockquote>\n<p>整个数据库，使用<code>on database.*</code></p>\n</blockquote>\n<blockquote>\n<p>特定的表，使用<code>on database.table</code></p>\n</blockquote>\n<blockquote>\n<p>特定的列</p>\n</blockquote>\n<blockquote>\n<p>特定的存储过程</p>\n</blockquote>\n<p>###更改密码</p>\n<p>为了更改用户密码，可以使用<code>set password</code>语句：</p>\n<pre><code>set password for 用户名=password(&apos;新密码&apos;);\n</code></pre><p>这里给test这个用户，更改密码为test123；</p>\n<pre><code>set password for test=password(&apos;test123&apos;);\n</code></pre><p><code>set password</code>用户更新用户密码，新密码必须传递到<code>password()</code>函数内进行加密。</p>\n<p><em>注意:</em></p>\n<p>如果<code>set password</code>没有指定用户名，即代表的就是设置你自己（当前用户）的密码：</p>\n<pre><code>set password=password(&apos;新密码&apos;);        //更改自己的新密码\n</code></pre><hr>\n<p>###小结：</p>\n<p>这里总结了MySQL访问权限的设置问题，在于说明了一个重要的事实，为了MySQL服务器的安全性考虑，你需要给用户提供他们需要的访问权限，且仅提供他们所需的访问权，这样可以在很大程度上保证了MySQL的较高安全性。</p>\n<p>另一方面，我们也提到了，在实际的应用上我们不应该使用root帐号，应该创建一系列的帐号来满足不同的需要，尽量不要给出过多的权限。</p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>考虑到MySQL数据库的安全，用户应该对他们需要的数据具有适当的访问权，既不能多也不能少。换句话说，用户不能对过多的数据具有过多的访问权。那么现在就MySQL的访问权限问题，做一个小结，如有错误，欢迎拍砖! :)</p>\n<p>MySQL默认有一个root的用户帐号，他对整个的MySQL数据库具有完全的访问的控制，在测试中可以使用root帐号(不过并不建议)，但是在实际的应用中，绝不能使用root帐号。我们应该创建一系列的帐号，有的用于管理，有的供用户使用，而有的供开发人员使用，等等~~~</p>","more":"<p><strong>再次警告：</strong></p>\n<p>应该严肃对待root登录的使用，尽在绝对需要时才使用它，不要在日常的应用中使用root。创建一系列的帐号，可以保证用户不能执行他们不应该执行的语句，有助于避免mysql受到攻击等情况的发生。</p>\n<p><em>废话不多说，下面一步步来说明：</em></p>\n<p>###管理用户</p>\n<p>MySQL用户帐号和信息保存在名为mysql的数据库中的user表内。注意，一般不要去访问mysql数据库和里面的表。</p>\n<pre><code>use mysql;\nselect * from user;\n</code></pre><p>可以查看user表内的所有用户，其实红user字段保存用户名。</p>\n<p>###创建用户帐号</p>\n<p>创建一个新用户，使用以下语句：</p>\n<pre><code>create user 用户名 identified by &apos;密码&apos;;\n</code></pre><p>例如：</p>\n<pre><code>create user test identified by &apos;123456&apos;;\n</code></pre><p><code>create user</code>创建了一个新用户，在创建用户时不一定需要密码，这里使用<code>identified by &#39;密码&#39;</code>给出了密码，MySQL将在插入user表之前对其进行加密。</p>\n<p><em>注意:</em></p>\n<p>使用grant也可以创建新用户，但是使用create user是最清楚和最简单的方式。也可以是用insert语句来创建新用户，但是为了安全起见，不建议这么做。MySQL用来存储用户帐号信息的，任何的错误都可能导致MYSQL数据崩溃。</p>\n<p>###重命名用户帐号</p>\n<p>使用以下语句进行用户名的重新命名：</p>\n<pre><code>rename user old_name to new_name;\n</code></pre><p>例如：</p>\n<pre><code>rename user test to new_test;\n</code></pre><p><em>注意：</em></p>\n<p>仅MySQL5之后的版本支持rename user，在MySQL5之前重命名一个用户可以使用update更新User表语句来达到目的。</p>\n<p>###删除用户帐号</p>\n<p>为了删除用户及其权限，使用以下语句：</p>\n<pre><code>drop user 用户名;\n</code></pre><p>例如：</p>\n<pre><code>drop user test;\n</code></pre><p><em>注意：</em></p>\n<p>自MySQL5以来，使用drop user语句可以删除用户以及相关的权限。但是在MySQL5之前，却只能删除用户，而不能删除该用户的相关权限。因次，必须先使用<code>revoke</code> 删除该帐号的权限，然后再删除该用户。</p>\n<p>###设置访问权限</p>\n<p>在创建新用户后，必须接着分配访问权限。新创建的用户帐号没有访问权限，他们智能登录MySQL数据库，但不能看到数据，不能执行任何的数据库操作。</p>\n<p>为了看到用户的权限，使用以下语句：</p>\n<pre><code>show grants for 用户名;\n</code></pre><p>如果没有使用名，即查看的就是自己的权限：</p>\n<pre><code>show grants;  //查看本身权限\n</code></pre><p>下面，我们查看test这个新用户的权限:</p>\n<pre><code>show grants for test;\n</code></pre><p><img src=\"../images/201410/2014-10-10_184137.jpg\" alt=\"pic\"></p>\n<p>输出的结果显示用户test有一个权限<code>USAGE ON *.*</code>。USAGE表示根本没有权限，所以，此结果在任意数据库和任意表上对任何东西都没有权限。</p>\n<p><em>注意：</em></p>\n<p>MySQL的用户权限用用户名和主机名结合定义。如果不指定主机，则使用默认的主机名<code>%</code>来代替。</p>\n<p>下面，使用grant语句来设置用户一些相关权限：</p>\n<pre><code>grant 要授予的权限 on  被授予权限的数据库或者表 to 用户名;\n</code></pre><p>给用户test设置select和isnert的权限：</p>\n<pre><code>grant select,insert on demo.* to test;\nshow grants for test;\n</code></pre><p><img src=\"../images/201410/2014-10-10_185303.jpg\" alt=\"pic\"></p>\n<p>此grant语句允许用户test在demo数据库（demo数据库内的所有表）上使用select和insert语句。每个grant添加的权限，MySQL都会读取所有权限，并根据他们确定权限。</p>\n<p><em>注意：</em></p>\n<p>可通过列出各个权限并用逗号分割来进行多个grant语句串在一起，从而达到授予多个权限的要求。</p>\n<p>那既然给用户test了查询和添加记录的权限，有一天，想把给用户的添加权限给删除掉，怎么办呢？可以受用revoke语句：</p>\n<pre><code>revoke 要删除的权限列表 on 数据库或表 from  用户;\n</code></pre><p>删掉test用户的insert权限：</p>\n<pre><code>revoke insert on demo.* from test;\n</code></pre><p>这条revoke语句取消了test用户的对于demo数据库内的所有表的insert权限，但是要注意，被撤销的权限必须存在，否则会出错。</p>\n<p><strong>grant和revoke可在几个层次上控制访问权限</strong></p>\n<blockquote>\n<p>整个服务器,使用<code>grant all</code>和<code>revoke all</code></p>\n</blockquote>\n<blockquote>\n<p>整个数据库，使用<code>on database.*</code></p>\n</blockquote>\n<blockquote>\n<p>特定的表，使用<code>on database.table</code></p>\n</blockquote>\n<blockquote>\n<p>特定的列</p>\n</blockquote>\n<blockquote>\n<p>特定的存储过程</p>\n</blockquote>\n<p>###更改密码</p>\n<p>为了更改用户密码，可以使用<code>set password</code>语句：</p>\n<pre><code>set password for 用户名=password(&apos;新密码&apos;);\n</code></pre><p>这里给test这个用户，更改密码为test123；</p>\n<pre><code>set password for test=password(&apos;test123&apos;);\n</code></pre><p><code>set password</code>用户更新用户密码，新密码必须传递到<code>password()</code>函数内进行加密。</p>\n<p><em>注意:</em></p>\n<p>如果<code>set password</code>没有指定用户名，即代表的就是设置你自己（当前用户）的密码：</p>\n<pre><code>set password=password(&apos;新密码&apos;);        //更改自己的新密码\n</code></pre><hr>\n<p>###小结：</p>\n<p>这里总结了MySQL访问权限的设置问题，在于说明了一个重要的事实，为了MySQL服务器的安全性考虑，你需要给用户提供他们需要的访问权限，且仅提供他们所需的访问权，这样可以在很大程度上保证了MySQL的较高安全性。</p>\n<p>另一方面，我们也提到了，在实际的应用上我们不应该使用root帐号，应该创建一系列的帐号来满足不同的需要，尽量不要给出过多的权限。</p>\n<p>（end）</p>"},{"layout":"post","title":"MyISAM存储引擎的碎片整理问题","_content":"最近，在使用MySQL数据库的MyISAM存储引擎建表，并且在删除大量数据时，发现在本地硬盘放置的的data文件并没有改变大小。碰到这种情况，笔者甚是郁闷而又感到奇怪，经查阅资料，终于解决了该问题。\n\n问题的根源是该数据库表产生了大量的碎片，只要进行碎片整理即可解决问题，现整理如下，方便以后查阅 :)\n\n关键操作：\n\n\tOPTIMIZE TABLE 表名;\n\n<!--more-->\n\n现在创建一个MyISAM引擎表`test_one`:\n\n> create table test_one (\n\n>id int unsigned ,\n\n>name varchar(32) not null default ''\n\n>)engine=myisam;\n\n插入测试数据：\n\t\n\tinsert into test_one values (1, 'test001'),(2, 'test002'),(3, 'test003');\n\tinsert into test_one select * from test_one;  //循环执行这条SQL语句，产生大量数据\n\n\n![pic](../images/201410/2014-10-19_122342.jpg)\n\n现在删除`id=3`的数据：\n\n\tdelete from test_one where id=3;\n\n执行完毕，查看硬盘数据保存文件大小，看大小是否减为原来的三分之一：\n\n![pic](../images/201410/2014-10-19_122734.jpg)\n\n发现，文件大小并没有减小，说明产生了碎片。当使用MyISAM引擎时，可以使用`optimize`命令来优化数据库,进行碎片整理：\n\n\toptimize table test_one;\n\n![pic](../images/201410/2014-10-19_123227.jpg)\n\n接下来查看硬盘文件大小是否改变：\n\n![pic](../images/201410/2014-10-19_123408.jpg)\n\n此时，保存在硬盘的数据文件发生了改变，减小了三分之一，说明使用`optimize`确实进行了碎片整理。\n\n---\n\n也许，会有人问，那假如我使用的是InnoDB引擎建表的呢？\n\n\n\n首先，我们要查看`innodb_file_per_table`(是否独享表空间)\n\n\tshow variables like 'innodb_file_per_table';\n\n![pic](../images/201410/2014-10-19_123736.jpg)\n\nOFF代表开启共享表空间没有打开，即采用的是默认的共享表空间。这个时候可以在mysql的datadir路径下看到一个非常大的文件ibdata1，这个文件存储了所有InnoDB表的数据与索引。\n\n如果`test_one`表是InnoDB引擎，当我们执行如下命令：\n\n\toptimize table test_one;\n\n此时，会返回`Table does not support optimize, doing recreate + analyze instead`，即代表optimize无法优化表。\n\n这个时候，可以使用如下命令来优化表：\n\n\talter table test_one engine='InnoDB';\n\tanalyze table test_one;\n\n输出如下信息：\n\n![pic](../images/201410/2014-10-19_124327.jpg)\n\n\n另一种情况，如果开启了独享表空间，即每张表都有ibdfile。这个时候如果删除了大量的行，索引会重组并且会释放相应的空间因此不必优化。\n\n---\n###小结：\n\n使用`optimize`命令可以进行数据表的碎片整理，从而对表进行优化。\n\n但是要**注意**，OPTIMIZE 操作会暂时锁住表,而且数据量越大,耗费的时间也越长,它毕竟不是简单查询操作.所以把 Optimize 命令放在程序中是不妥当的,不管设置的命中率多低,当访问量增大的时候,整体命中率也会上升,这样肯定会对程序的运行效率造成很大影响.比较好的方式就是做个 Script,定期检查mysql中 `information_schema`.`TABLES`字段,查看 `DATA_FREE` 字段,大于0话,就表示有碎片.脚本多长时间运行一次,可以根据实际情况来定,比如每周跑一次.\n\n（end）","source":"_posts/201410/2014-10-19-mysql_myisam_data_optimize.md","raw":"---\nlayout : post\ntitle : MyISAM存储引擎的碎片整理问题\ncategory : MySQL\ntags : MySQL MyISAM\n---\n最近，在使用MySQL数据库的MyISAM存储引擎建表，并且在删除大量数据时，发现在本地硬盘放置的的data文件并没有改变大小。碰到这种情况，笔者甚是郁闷而又感到奇怪，经查阅资料，终于解决了该问题。\n\n问题的根源是该数据库表产生了大量的碎片，只要进行碎片整理即可解决问题，现整理如下，方便以后查阅 :)\n\n关键操作：\n\n\tOPTIMIZE TABLE 表名;\n\n<!--more-->\n\n现在创建一个MyISAM引擎表`test_one`:\n\n> create table test_one (\n\n>id int unsigned ,\n\n>name varchar(32) not null default ''\n\n>)engine=myisam;\n\n插入测试数据：\n\t\n\tinsert into test_one values (1, 'test001'),(2, 'test002'),(3, 'test003');\n\tinsert into test_one select * from test_one;  //循环执行这条SQL语句，产生大量数据\n\n\n![pic](../images/201410/2014-10-19_122342.jpg)\n\n现在删除`id=3`的数据：\n\n\tdelete from test_one where id=3;\n\n执行完毕，查看硬盘数据保存文件大小，看大小是否减为原来的三分之一：\n\n![pic](../images/201410/2014-10-19_122734.jpg)\n\n发现，文件大小并没有减小，说明产生了碎片。当使用MyISAM引擎时，可以使用`optimize`命令来优化数据库,进行碎片整理：\n\n\toptimize table test_one;\n\n![pic](../images/201410/2014-10-19_123227.jpg)\n\n接下来查看硬盘文件大小是否改变：\n\n![pic](../images/201410/2014-10-19_123408.jpg)\n\n此时，保存在硬盘的数据文件发生了改变，减小了三分之一，说明使用`optimize`确实进行了碎片整理。\n\n---\n\n也许，会有人问，那假如我使用的是InnoDB引擎建表的呢？\n\n\n\n首先，我们要查看`innodb_file_per_table`(是否独享表空间)\n\n\tshow variables like 'innodb_file_per_table';\n\n![pic](../images/201410/2014-10-19_123736.jpg)\n\nOFF代表开启共享表空间没有打开，即采用的是默认的共享表空间。这个时候可以在mysql的datadir路径下看到一个非常大的文件ibdata1，这个文件存储了所有InnoDB表的数据与索引。\n\n如果`test_one`表是InnoDB引擎，当我们执行如下命令：\n\n\toptimize table test_one;\n\n此时，会返回`Table does not support optimize, doing recreate + analyze instead`，即代表optimize无法优化表。\n\n这个时候，可以使用如下命令来优化表：\n\n\talter table test_one engine='InnoDB';\n\tanalyze table test_one;\n\n输出如下信息：\n\n![pic](../images/201410/2014-10-19_124327.jpg)\n\n\n另一种情况，如果开启了独享表空间，即每张表都有ibdfile。这个时候如果删除了大量的行，索引会重组并且会释放相应的空间因此不必优化。\n\n---\n###小结：\n\n使用`optimize`命令可以进行数据表的碎片整理，从而对表进行优化。\n\n但是要**注意**，OPTIMIZE 操作会暂时锁住表,而且数据量越大,耗费的时间也越长,它毕竟不是简单查询操作.所以把 Optimize 命令放在程序中是不妥当的,不管设置的命中率多低,当访问量增大的时候,整体命中率也会上升,这样肯定会对程序的运行效率造成很大影响.比较好的方式就是做个 Script,定期检查mysql中 `information_schema`.`TABLES`字段,查看 `DATA_FREE` 字段,大于0话,就表示有碎片.脚本多长时间运行一次,可以根据实际情况来定,比如每周跑一次.\n\n（end）","slug":"201410-2014-10-19-mysql-myisam-data-optimize","published":1,"date":"2018-04-12T15:20:38.829Z","updated":"2018-04-12T15:20:38.829Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6c0055ass6n5r50trc","content":"<p>最近，在使用MySQL数据库的MyISAM存储引擎建表，并且在删除大量数据时，发现在本地硬盘放置的的data文件并没有改变大小。碰到这种情况，笔者甚是郁闷而又感到奇怪，经查阅资料，终于解决了该问题。</p>\n<p>问题的根源是该数据库表产生了大量的碎片，只要进行碎片整理即可解决问题，现整理如下，方便以后查阅 :)</p>\n<p>关键操作：</p>\n<pre><code>OPTIMIZE TABLE 表名;\n</code></pre><a id=\"more\"></a>\n<p>现在创建一个MyISAM引擎表<code>test_one</code>:</p>\n<blockquote>\n<p>create table test_one (</p>\n</blockquote>\n<blockquote>\n<p>id int unsigned ,</p>\n</blockquote>\n<blockquote>\n<p>name varchar(32) not null default ‘’</p>\n</blockquote>\n<blockquote>\n<p>)engine=myisam;</p>\n</blockquote>\n<p>插入测试数据：</p>\n<pre><code>insert into test_one values (1, &apos;test001&apos;),(2, &apos;test002&apos;),(3, &apos;test003&apos;);\ninsert into test_one select * from test_one;  //循环执行这条SQL语句，产生大量数据\n</code></pre><p><img src=\"../images/201410/2014-10-19_122342.jpg\" alt=\"pic\"></p>\n<p>现在删除<code>id=3</code>的数据：</p>\n<pre><code>delete from test_one where id=3;\n</code></pre><p>执行完毕，查看硬盘数据保存文件大小，看大小是否减为原来的三分之一：</p>\n<p><img src=\"../images/201410/2014-10-19_122734.jpg\" alt=\"pic\"></p>\n<p>发现，文件大小并没有减小，说明产生了碎片。当使用MyISAM引擎时，可以使用<code>optimize</code>命令来优化数据库,进行碎片整理：</p>\n<pre><code>optimize table test_one;\n</code></pre><p><img src=\"../images/201410/2014-10-19_123227.jpg\" alt=\"pic\"></p>\n<p>接下来查看硬盘文件大小是否改变：</p>\n<p><img src=\"../images/201410/2014-10-19_123408.jpg\" alt=\"pic\"></p>\n<p>此时，保存在硬盘的数据文件发生了改变，减小了三分之一，说明使用<code>optimize</code>确实进行了碎片整理。</p>\n<hr>\n<p>也许，会有人问，那假如我使用的是InnoDB引擎建表的呢？</p>\n<p>首先，我们要查看<code>innodb_file_per_table</code>(是否独享表空间)</p>\n<pre><code>show variables like &apos;innodb_file_per_table&apos;;\n</code></pre><p><img src=\"../images/201410/2014-10-19_123736.jpg\" alt=\"pic\"></p>\n<p>OFF代表开启共享表空间没有打开，即采用的是默认的共享表空间。这个时候可以在mysql的datadir路径下看到一个非常大的文件ibdata1，这个文件存储了所有InnoDB表的数据与索引。</p>\n<p>如果<code>test_one</code>表是InnoDB引擎，当我们执行如下命令：</p>\n<pre><code>optimize table test_one;\n</code></pre><p>此时，会返回<code>Table does not support optimize, doing recreate + analyze instead</code>，即代表optimize无法优化表。</p>\n<p>这个时候，可以使用如下命令来优化表：</p>\n<pre><code>alter table test_one engine=&apos;InnoDB&apos;;\nanalyze table test_one;\n</code></pre><p>输出如下信息：</p>\n<p><img src=\"../images/201410/2014-10-19_124327.jpg\" alt=\"pic\"></p>\n<p>另一种情况，如果开启了独享表空间，即每张表都有ibdfile。这个时候如果删除了大量的行，索引会重组并且会释放相应的空间因此不必优化。</p>\n<hr>\n<p>###小结：</p>\n<p>使用<code>optimize</code>命令可以进行数据表的碎片整理，从而对表进行优化。</p>\n<p>但是要<strong>注意</strong>，OPTIMIZE 操作会暂时锁住表,而且数据量越大,耗费的时间也越长,它毕竟不是简单查询操作.所以把 Optimize 命令放在程序中是不妥当的,不管设置的命中率多低,当访问量增大的时候,整体命中率也会上升,这样肯定会对程序的运行效率造成很大影响.比较好的方式就是做个 Script,定期检查mysql中 <code>information_schema</code>.<code>TABLES</code>字段,查看 <code>DATA_FREE</code> 字段,大于0话,就表示有碎片.脚本多长时间运行一次,可以根据实际情况来定,比如每周跑一次.</p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>最近，在使用MySQL数据库的MyISAM存储引擎建表，并且在删除大量数据时，发现在本地硬盘放置的的data文件并没有改变大小。碰到这种情况，笔者甚是郁闷而又感到奇怪，经查阅资料，终于解决了该问题。</p>\n<p>问题的根源是该数据库表产生了大量的碎片，只要进行碎片整理即可解决问题，现整理如下，方便以后查阅 :)</p>\n<p>关键操作：</p>\n<pre><code>OPTIMIZE TABLE 表名;\n</code></pre>","more":"<p>现在创建一个MyISAM引擎表<code>test_one</code>:</p>\n<blockquote>\n<p>create table test_one (</p>\n</blockquote>\n<blockquote>\n<p>id int unsigned ,</p>\n</blockquote>\n<blockquote>\n<p>name varchar(32) not null default ‘’</p>\n</blockquote>\n<blockquote>\n<p>)engine=myisam;</p>\n</blockquote>\n<p>插入测试数据：</p>\n<pre><code>insert into test_one values (1, &apos;test001&apos;),(2, &apos;test002&apos;),(3, &apos;test003&apos;);\ninsert into test_one select * from test_one;  //循环执行这条SQL语句，产生大量数据\n</code></pre><p><img src=\"../images/201410/2014-10-19_122342.jpg\" alt=\"pic\"></p>\n<p>现在删除<code>id=3</code>的数据：</p>\n<pre><code>delete from test_one where id=3;\n</code></pre><p>执行完毕，查看硬盘数据保存文件大小，看大小是否减为原来的三分之一：</p>\n<p><img src=\"../images/201410/2014-10-19_122734.jpg\" alt=\"pic\"></p>\n<p>发现，文件大小并没有减小，说明产生了碎片。当使用MyISAM引擎时，可以使用<code>optimize</code>命令来优化数据库,进行碎片整理：</p>\n<pre><code>optimize table test_one;\n</code></pre><p><img src=\"../images/201410/2014-10-19_123227.jpg\" alt=\"pic\"></p>\n<p>接下来查看硬盘文件大小是否改变：</p>\n<p><img src=\"../images/201410/2014-10-19_123408.jpg\" alt=\"pic\"></p>\n<p>此时，保存在硬盘的数据文件发生了改变，减小了三分之一，说明使用<code>optimize</code>确实进行了碎片整理。</p>\n<hr>\n<p>也许，会有人问，那假如我使用的是InnoDB引擎建表的呢？</p>\n<p>首先，我们要查看<code>innodb_file_per_table</code>(是否独享表空间)</p>\n<pre><code>show variables like &apos;innodb_file_per_table&apos;;\n</code></pre><p><img src=\"../images/201410/2014-10-19_123736.jpg\" alt=\"pic\"></p>\n<p>OFF代表开启共享表空间没有打开，即采用的是默认的共享表空间。这个时候可以在mysql的datadir路径下看到一个非常大的文件ibdata1，这个文件存储了所有InnoDB表的数据与索引。</p>\n<p>如果<code>test_one</code>表是InnoDB引擎，当我们执行如下命令：</p>\n<pre><code>optimize table test_one;\n</code></pre><p>此时，会返回<code>Table does not support optimize, doing recreate + analyze instead</code>，即代表optimize无法优化表。</p>\n<p>这个时候，可以使用如下命令来优化表：</p>\n<pre><code>alter table test_one engine=&apos;InnoDB&apos;;\nanalyze table test_one;\n</code></pre><p>输出如下信息：</p>\n<p><img src=\"../images/201410/2014-10-19_124327.jpg\" alt=\"pic\"></p>\n<p>另一种情况，如果开启了独享表空间，即每张表都有ibdfile。这个时候如果删除了大量的行，索引会重组并且会释放相应的空间因此不必优化。</p>\n<hr>\n<p>###小结：</p>\n<p>使用<code>optimize</code>命令可以进行数据表的碎片整理，从而对表进行优化。</p>\n<p>但是要<strong>注意</strong>，OPTIMIZE 操作会暂时锁住表,而且数据量越大,耗费的时间也越长,它毕竟不是简单查询操作.所以把 Optimize 命令放在程序中是不妥当的,不管设置的命中率多低,当访问量增大的时候,整体命中率也会上升,这样肯定会对程序的运行效率造成很大影响.比较好的方式就是做个 Script,定期检查mysql中 <code>information_schema</code>.<code>TABLES</code>字段,查看 <code>DATA_FREE</code> 字段,大于0话,就表示有碎片.脚本多长时间运行一次,可以根据实际情况来定,比如每周跑一次.</p>\n<p>（end）</p>"},{"layout":"post","title":"PHP检测gif图片是否为动态图片","_content":"当我们使用php自带的`getimagesize()`函数来判断一个gif图片是否为动态（动画）时，发现无法判别是否为动态的效果。本文介绍了php是如何判断gif图片是否为动画的方法，具体步骤如下：\n\n经过GOOGLE搜索可以查到，gif动态图的文件中包含:`chr(0×21).chr(0xff).chr(0×0b).'NETSCAPE2.0'`。所以，我们就可以使用`fopen()`和字符串系列函数来检测文件中是否包含这些字符串就可以判断该gif图是否动态的。\n\n<!--more-->\n\n编码实现如下：\n\n\t<?php\n\t//检测一个图片是否为gif动态图   \n\tfunction check_gif ($path) {\n    \t$str = file_get_contents($path);\t\t//获取全部文件内容\n    \tif (stripos($str, chr(0x21).chr(0xff).chr(0x0b).'NETSCAPE2.0')) {\n     \t   echo '是gif动态图';\n    \t} else {\n    \t   echo '不是gif动态图';\n   \t\t}\n\t}\n\tcheck_gif('./test.gif');\n\n上述代码就已经可以检测一个gif图是否为动画的了，但是还是可以在优化的。\n\n因为实际上 `chr(0×21).chr(0xff).chr(0×0b).'NETSCAPE2.0'` 只在文件头部出现，可以 `echo `来看看 ，但不是最头部，是在头部的某一个位置，所以，**严格来说需要读取一部分文件**，但不用全部，这样可以加快速度和节省内存。\n\n经测试，读取1024字节足够了，因为此时读取的数据流中正好包含了 `chr(0×21).chr(0xff).chr(0×0b).'NETSCAPE2.0'`.\n\n代码优化后：\n\n\t<?php    \n\tfunction check_gif ($path) {\n    \t$fh = fopen($path, 'rb');\n    \t$str = fread($fh, 1024);\t//读取1024个字节\n    \tfclose($fh);\n    \tif (stripos($str, chr(0x21).chr(0xff).chr(0x0b).'NETSCAPE2.0')) {\n    \t    echo '是gif动态图';\n    \t} else {\n    \t    echo '不是gif动态图';\n    \t}\n\t}\n\tcheck_gif('./test.gif');\n\n这样就可以很好的判断一个gif图是否为动画了，而且很高效。\n\n（end）\n\n\t","source":"_posts/201410/2014-10-15-check_gif_picture.md","raw":"---\nlayout : post\ntitle : PHP检测gif图片是否为动态图片\ncategory : PHP\ntags : php gif\n---\n当我们使用php自带的`getimagesize()`函数来判断一个gif图片是否为动态（动画）时，发现无法判别是否为动态的效果。本文介绍了php是如何判断gif图片是否为动画的方法，具体步骤如下：\n\n经过GOOGLE搜索可以查到，gif动态图的文件中包含:`chr(0×21).chr(0xff).chr(0×0b).'NETSCAPE2.0'`。所以，我们就可以使用`fopen()`和字符串系列函数来检测文件中是否包含这些字符串就可以判断该gif图是否动态的。\n\n<!--more-->\n\n编码实现如下：\n\n\t<?php\n\t//检测一个图片是否为gif动态图   \n\tfunction check_gif ($path) {\n    \t$str = file_get_contents($path);\t\t//获取全部文件内容\n    \tif (stripos($str, chr(0x21).chr(0xff).chr(0x0b).'NETSCAPE2.0')) {\n     \t   echo '是gif动态图';\n    \t} else {\n    \t   echo '不是gif动态图';\n   \t\t}\n\t}\n\tcheck_gif('./test.gif');\n\n上述代码就已经可以检测一个gif图是否为动画的了，但是还是可以在优化的。\n\n因为实际上 `chr(0×21).chr(0xff).chr(0×0b).'NETSCAPE2.0'` 只在文件头部出现，可以 `echo `来看看 ，但不是最头部，是在头部的某一个位置，所以，**严格来说需要读取一部分文件**，但不用全部，这样可以加快速度和节省内存。\n\n经测试，读取1024字节足够了，因为此时读取的数据流中正好包含了 `chr(0×21).chr(0xff).chr(0×0b).'NETSCAPE2.0'`.\n\n代码优化后：\n\n\t<?php    \n\tfunction check_gif ($path) {\n    \t$fh = fopen($path, 'rb');\n    \t$str = fread($fh, 1024);\t//读取1024个字节\n    \tfclose($fh);\n    \tif (stripos($str, chr(0x21).chr(0xff).chr(0x0b).'NETSCAPE2.0')) {\n    \t    echo '是gif动态图';\n    \t} else {\n    \t    echo '不是gif动态图';\n    \t}\n\t}\n\tcheck_gif('./test.gif');\n\n这样就可以很好的判断一个gif图是否为动画了，而且很高效。\n\n（end）\n\n\t","slug":"201410-2014-10-15-check-gif-picture","published":1,"date":"2018-04-12T15:20:38.828Z","updated":"2018-04-12T15:20:38.828Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6f0058ass6s8xyx8tx","content":"<p>当我们使用php自带的<code>getimagesize()</code>函数来判断一个gif图片是否为动态（动画）时，发现无法判别是否为动态的效果。本文介绍了php是如何判断gif图片是否为动画的方法，具体步骤如下：</p>\n<p>经过GOOGLE搜索可以查到，gif动态图的文件中包含:<code>chr(0×21).chr(0xff).chr(0×0b).&#39;NETSCAPE2.0&#39;</code>。所以，我们就可以使用<code>fopen()</code>和字符串系列函数来检测文件中是否包含这些字符串就可以判断该gif图是否动态的。</p>\n<a id=\"more\"></a>\n<p>编码实现如下：</p>\n<pre><code>&lt;?php\n//检测一个图片是否为gif动态图   \nfunction check_gif ($path) {\n    $str = file_get_contents($path);        //获取全部文件内容\n    if (stripos($str, chr(0x21).chr(0xff).chr(0x0b).&apos;NETSCAPE2.0&apos;)) {\n        echo &apos;是gif动态图&apos;;\n    } else {\n       echo &apos;不是gif动态图&apos;;\n       }\n}\ncheck_gif(&apos;./test.gif&apos;);\n</code></pre><p>上述代码就已经可以检测一个gif图是否为动画的了，但是还是可以在优化的。</p>\n<p>因为实际上 <code>chr(0×21).chr(0xff).chr(0×0b).&#39;NETSCAPE2.0&#39;</code> 只在文件头部出现，可以 <code>echo</code>来看看 ，但不是最头部，是在头部的某一个位置，所以，<strong>严格来说需要读取一部分文件</strong>，但不用全部，这样可以加快速度和节省内存。</p>\n<p>经测试，读取1024字节足够了，因为此时读取的数据流中正好包含了 <code>chr(0×21).chr(0xff).chr(0×0b).&#39;NETSCAPE2.0&#39;</code>.</p>\n<p>代码优化后：</p>\n<pre><code>&lt;?php    \nfunction check_gif ($path) {\n    $fh = fopen($path, &apos;rb&apos;);\n    $str = fread($fh, 1024);    //读取1024个字节\n    fclose($fh);\n    if (stripos($str, chr(0x21).chr(0xff).chr(0x0b).&apos;NETSCAPE2.0&apos;)) {\n        echo &apos;是gif动态图&apos;;\n    } else {\n        echo &apos;不是gif动态图&apos;;\n    }\n}\ncheck_gif(&apos;./test.gif&apos;);\n</code></pre><p>这样就可以很好的判断一个gif图是否为动画了，而且很高效。</p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>当我们使用php自带的<code>getimagesize()</code>函数来判断一个gif图片是否为动态（动画）时，发现无法判别是否为动态的效果。本文介绍了php是如何判断gif图片是否为动画的方法，具体步骤如下：</p>\n<p>经过GOOGLE搜索可以查到，gif动态图的文件中包含:<code>chr(0×21).chr(0xff).chr(0×0b).&#39;NETSCAPE2.0&#39;</code>。所以，我们就可以使用<code>fopen()</code>和字符串系列函数来检测文件中是否包含这些字符串就可以判断该gif图是否动态的。</p>","more":"<p>编码实现如下：</p>\n<pre><code>&lt;?php\n//检测一个图片是否为gif动态图   \nfunction check_gif ($path) {\n    $str = file_get_contents($path);        //获取全部文件内容\n    if (stripos($str, chr(0x21).chr(0xff).chr(0x0b).&apos;NETSCAPE2.0&apos;)) {\n        echo &apos;是gif动态图&apos;;\n    } else {\n       echo &apos;不是gif动态图&apos;;\n       }\n}\ncheck_gif(&apos;./test.gif&apos;);\n</code></pre><p>上述代码就已经可以检测一个gif图是否为动画的了，但是还是可以在优化的。</p>\n<p>因为实际上 <code>chr(0×21).chr(0xff).chr(0×0b).&#39;NETSCAPE2.0&#39;</code> 只在文件头部出现，可以 <code>echo</code>来看看 ，但不是最头部，是在头部的某一个位置，所以，<strong>严格来说需要读取一部分文件</strong>，但不用全部，这样可以加快速度和节省内存。</p>\n<p>经测试，读取1024字节足够了，因为此时读取的数据流中正好包含了 <code>chr(0×21).chr(0xff).chr(0×0b).&#39;NETSCAPE2.0&#39;</code>.</p>\n<p>代码优化后：</p>\n<pre><code>&lt;?php    \nfunction check_gif ($path) {\n    $fh = fopen($path, &apos;rb&apos;);\n    $str = fread($fh, 1024);    //读取1024个字节\n    fclose($fh);\n    if (stripos($str, chr(0x21).chr(0xff).chr(0x0b).&apos;NETSCAPE2.0&apos;)) {\n        echo &apos;是gif动态图&apos;;\n    } else {\n        echo &apos;不是gif动态图&apos;;\n    }\n}\ncheck_gif(&apos;./test.gif&apos;);\n</code></pre><p>这样就可以很好的判断一个gif图是否为动画了，而且很高效。</p>\n<p>（end）</p>"},{"layout":"post","title":"搭建Redis运行环境","_content":"Redis是一个高性能的`key-value`形式存储的非关系型数据库，可以处理超大量的数据，并且可以运行在便宜的PC服务器集群上，还有它击碎了性能瓶颈，对数据高并发读写的特点奠定了Redis很受欢迎的基础。\n\n下面，我们简单总结下如何在windows搭建Redis的环境以及简单的操作，Linux下环境的搭建请往下看。\n\n下载地址：`https://github.com/dmajkic/redis/downloads`，下载下来的包里分为32位和64位系统使用，可根据自己的实际情况来挑选。\n\n<!--more-->\n\n###Windows下搭建环境\n\n笔者使用的是Windows 64位，在D盘新建redis目录`d:\\lamp\\redis`,把下载下来的64位包里的文件全部拷贝到redis目录下。\n\n![pic](../images/201410/2014-10-22_113846.jpg)\n\n接下来，在cmd控制台下切换到redis目录下，执行：\n\n\tredis-server.exe redis.conf\n\n注意，不写`redis.conf`文件，会默认在该目录下寻找该文件。会出现如下图界面：\n\n![](../images/201410/2014-10-22_114255.jpg)\n\n**注意**\n\n此时表示服务器开始成功，一定不要关闭该控制台，否则后面就无法连接成功了！！！\n\n接下来，重新开启一个cmd控制台，切换到redis目录，执行:\n\n\tredis-cli.exe -h 127.0.0.1 -p 6379\n\n会出现如下界面：\n\n![](../images/201410/2014-10-22_114623.jpg)\n\n此时，表示redis连接成功了。我们可以在`redis.conf`中配置：\n\n\tport 6379\t\t\t//端口\n\tbind 127.0.0.1 \t\t//环回网络\n\n此时，就不用添加`-h -p`参数了,使用`redis-cli.exe `即可连接成功。\n\n下面，我们来测试下，在redis命令行，输入：\n\n\tset aa \"I Love Redis\"\n\n打印输出：\n\n\tget aa\n\n此时，即可看到刚才设置的\"I Love Redis\"字符串。\n\n更多关于Redis的设置项，请参考`redis.conf`文件。\n\n---\n\n###Linux下搭建环境\n\n首先，下载Redis安装包：\n\n\twget http://download.redis.io/releases/redis-2.8.17.tar.gz\n\n接下来创建redis安装文件\n\n\tmkdir -p /var/local/redis/etc\n\tmkdir -p /var/local/redis/bin\n\n然后，开始安装redis：\n\n\ttar -zxvf redis-2.8.17.tar.gz\n\tcd ./redis-2.8.17\n\tmake\n\n接下来：\n\n\tcp redis-benchmark redis-check-aof redis-check_dump  redis-cli redis-server /var/local/redis/bin\n\tcp ../redis.conf /var/local/redis/etc\n\n然后，切换到`/var/local/redis/etc`,打开`redis.conf`文件，配置如下：\n\n\tdaemonize yes\t//后台运行\n    bind 127.0.0.1\t\t\n\n到此，redis就配置完毕。\n\n接下来，测试下,先运行redis服务：\n\n\t/var/local/redis/bin/redis-server /var/local/redis/etc/redis.conf\n\n使用netstat查看下：\n\n\tnetstat -tunpl | grep redis\n\n![](../images/201411/2014-11-05_200206.jpg)\n\n说明redis服务已经运行成功。\n\n下面，打开使用redis：\n\t\n\t/var/local/redis/bin/redis-cli \n\t\n![](../images/201411/2014-11-05_200546.jpg)\n\n（end）\n\n\t\n\n","source":"_posts/201410/2014-10-22-redis-linux_and_windows-setup.md","raw":"---\nlayout : post\ntitle : 搭建Redis运行环境\ncategory : Redis\ntags : Redis \n---\nRedis是一个高性能的`key-value`形式存储的非关系型数据库，可以处理超大量的数据，并且可以运行在便宜的PC服务器集群上，还有它击碎了性能瓶颈，对数据高并发读写的特点奠定了Redis很受欢迎的基础。\n\n下面，我们简单总结下如何在windows搭建Redis的环境以及简单的操作，Linux下环境的搭建请往下看。\n\n下载地址：`https://github.com/dmajkic/redis/downloads`，下载下来的包里分为32位和64位系统使用，可根据自己的实际情况来挑选。\n\n<!--more-->\n\n###Windows下搭建环境\n\n笔者使用的是Windows 64位，在D盘新建redis目录`d:\\lamp\\redis`,把下载下来的64位包里的文件全部拷贝到redis目录下。\n\n![pic](../images/201410/2014-10-22_113846.jpg)\n\n接下来，在cmd控制台下切换到redis目录下，执行：\n\n\tredis-server.exe redis.conf\n\n注意，不写`redis.conf`文件，会默认在该目录下寻找该文件。会出现如下图界面：\n\n![](../images/201410/2014-10-22_114255.jpg)\n\n**注意**\n\n此时表示服务器开始成功，一定不要关闭该控制台，否则后面就无法连接成功了！！！\n\n接下来，重新开启一个cmd控制台，切换到redis目录，执行:\n\n\tredis-cli.exe -h 127.0.0.1 -p 6379\n\n会出现如下界面：\n\n![](../images/201410/2014-10-22_114623.jpg)\n\n此时，表示redis连接成功了。我们可以在`redis.conf`中配置：\n\n\tport 6379\t\t\t//端口\n\tbind 127.0.0.1 \t\t//环回网络\n\n此时，就不用添加`-h -p`参数了,使用`redis-cli.exe `即可连接成功。\n\n下面，我们来测试下，在redis命令行，输入：\n\n\tset aa \"I Love Redis\"\n\n打印输出：\n\n\tget aa\n\n此时，即可看到刚才设置的\"I Love Redis\"字符串。\n\n更多关于Redis的设置项，请参考`redis.conf`文件。\n\n---\n\n###Linux下搭建环境\n\n首先，下载Redis安装包：\n\n\twget http://download.redis.io/releases/redis-2.8.17.tar.gz\n\n接下来创建redis安装文件\n\n\tmkdir -p /var/local/redis/etc\n\tmkdir -p /var/local/redis/bin\n\n然后，开始安装redis：\n\n\ttar -zxvf redis-2.8.17.tar.gz\n\tcd ./redis-2.8.17\n\tmake\n\n接下来：\n\n\tcp redis-benchmark redis-check-aof redis-check_dump  redis-cli redis-server /var/local/redis/bin\n\tcp ../redis.conf /var/local/redis/etc\n\n然后，切换到`/var/local/redis/etc`,打开`redis.conf`文件，配置如下：\n\n\tdaemonize yes\t//后台运行\n    bind 127.0.0.1\t\t\n\n到此，redis就配置完毕。\n\n接下来，测试下,先运行redis服务：\n\n\t/var/local/redis/bin/redis-server /var/local/redis/etc/redis.conf\n\n使用netstat查看下：\n\n\tnetstat -tunpl | grep redis\n\n![](../images/201411/2014-11-05_200206.jpg)\n\n说明redis服务已经运行成功。\n\n下面，打开使用redis：\n\t\n\t/var/local/redis/bin/redis-cli \n\t\n![](../images/201411/2014-11-05_200546.jpg)\n\n（end）\n\n\t\n\n","slug":"201410-2014-10-22-redis-linux-and-windows-setup","published":1,"date":"2018-04-12T15:20:38.829Z","updated":"2018-04-12T15:20:38.829Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6h005bass6omklmnm3","content":"<p>Redis是一个高性能的<code>key-value</code>形式存储的非关系型数据库，可以处理超大量的数据，并且可以运行在便宜的PC服务器集群上，还有它击碎了性能瓶颈，对数据高并发读写的特点奠定了Redis很受欢迎的基础。</p>\n<p>下面，我们简单总结下如何在windows搭建Redis的环境以及简单的操作，Linux下环境的搭建请往下看。</p>\n<p>下载地址：<code>https://github.com/dmajkic/redis/downloads</code>，下载下来的包里分为32位和64位系统使用，可根据自己的实际情况来挑选。</p>\n<a id=\"more\"></a>\n<p>###Windows下搭建环境</p>\n<p>笔者使用的是Windows 64位，在D盘新建redis目录<code>d:\\lamp\\redis</code>,把下载下来的64位包里的文件全部拷贝到redis目录下。</p>\n<p><img src=\"../images/201410/2014-10-22_113846.jpg\" alt=\"pic\"></p>\n<p>接下来，在cmd控制台下切换到redis目录下，执行：</p>\n<pre><code>redis-server.exe redis.conf\n</code></pre><p>注意，不写<code>redis.conf</code>文件，会默认在该目录下寻找该文件。会出现如下图界面：</p>\n<p><img src=\"../images/201410/2014-10-22_114255.jpg\" alt=\"\"></p>\n<p><strong>注意</strong></p>\n<p>此时表示服务器开始成功，一定不要关闭该控制台，否则后面就无法连接成功了！！！</p>\n<p>接下来，重新开启一个cmd控制台，切换到redis目录，执行:</p>\n<pre><code>redis-cli.exe -h 127.0.0.1 -p 6379\n</code></pre><p>会出现如下界面：</p>\n<p><img src=\"../images/201410/2014-10-22_114623.jpg\" alt=\"\"></p>\n<p>此时，表示redis连接成功了。我们可以在<code>redis.conf</code>中配置：</p>\n<pre><code>port 6379            //端口\nbind 127.0.0.1         //环回网络\n</code></pre><p>此时，就不用添加<code>-h -p</code>参数了,使用<code>redis-cli.exe</code>即可连接成功。</p>\n<p>下面，我们来测试下，在redis命令行，输入：</p>\n<pre><code>set aa &quot;I Love Redis&quot;\n</code></pre><p>打印输出：</p>\n<pre><code>get aa\n</code></pre><p>此时，即可看到刚才设置的”I Love Redis”字符串。</p>\n<p>更多关于Redis的设置项，请参考<code>redis.conf</code>文件。</p>\n<hr>\n<p>###Linux下搭建环境</p>\n<p>首先，下载Redis安装包：</p>\n<pre><code>wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n</code></pre><p>接下来创建redis安装文件</p>\n<pre><code>mkdir -p /var/local/redis/etc\nmkdir -p /var/local/redis/bin\n</code></pre><p>然后，开始安装redis：</p>\n<pre><code>tar -zxvf redis-2.8.17.tar.gz\ncd ./redis-2.8.17\nmake\n</code></pre><p>接下来：</p>\n<pre><code>cp redis-benchmark redis-check-aof redis-check_dump  redis-cli redis-server /var/local/redis/bin\ncp ../redis.conf /var/local/redis/etc\n</code></pre><p>然后，切换到<code>/var/local/redis/etc</code>,打开<code>redis.conf</code>文件，配置如下：</p>\n<pre><code>daemonize yes    //后台运行\nbind 127.0.0.1        \n</code></pre><p>到此，redis就配置完毕。</p>\n<p>接下来，测试下,先运行redis服务：</p>\n<pre><code>/var/local/redis/bin/redis-server /var/local/redis/etc/redis.conf\n</code></pre><p>使用netstat查看下：</p>\n<pre><code>netstat -tunpl | grep redis\n</code></pre><p><img src=\"../images/201411/2014-11-05_200206.jpg\" alt=\"\"></p>\n<p>说明redis服务已经运行成功。</p>\n<p>下面，打开使用redis：</p>\n<pre><code>/var/local/redis/bin/redis-cli \n</code></pre><p><img src=\"../images/201411/2014-11-05_200546.jpg\" alt=\"\"></p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>Redis是一个高性能的<code>key-value</code>形式存储的非关系型数据库，可以处理超大量的数据，并且可以运行在便宜的PC服务器集群上，还有它击碎了性能瓶颈，对数据高并发读写的特点奠定了Redis很受欢迎的基础。</p>\n<p>下面，我们简单总结下如何在windows搭建Redis的环境以及简单的操作，Linux下环境的搭建请往下看。</p>\n<p>下载地址：<code>https://github.com/dmajkic/redis/downloads</code>，下载下来的包里分为32位和64位系统使用，可根据自己的实际情况来挑选。</p>","more":"<p>###Windows下搭建环境</p>\n<p>笔者使用的是Windows 64位，在D盘新建redis目录<code>d:\\lamp\\redis</code>,把下载下来的64位包里的文件全部拷贝到redis目录下。</p>\n<p><img src=\"../images/201410/2014-10-22_113846.jpg\" alt=\"pic\"></p>\n<p>接下来，在cmd控制台下切换到redis目录下，执行：</p>\n<pre><code>redis-server.exe redis.conf\n</code></pre><p>注意，不写<code>redis.conf</code>文件，会默认在该目录下寻找该文件。会出现如下图界面：</p>\n<p><img src=\"../images/201410/2014-10-22_114255.jpg\" alt=\"\"></p>\n<p><strong>注意</strong></p>\n<p>此时表示服务器开始成功，一定不要关闭该控制台，否则后面就无法连接成功了！！！</p>\n<p>接下来，重新开启一个cmd控制台，切换到redis目录，执行:</p>\n<pre><code>redis-cli.exe -h 127.0.0.1 -p 6379\n</code></pre><p>会出现如下界面：</p>\n<p><img src=\"../images/201410/2014-10-22_114623.jpg\" alt=\"\"></p>\n<p>此时，表示redis连接成功了。我们可以在<code>redis.conf</code>中配置：</p>\n<pre><code>port 6379            //端口\nbind 127.0.0.1         //环回网络\n</code></pre><p>此时，就不用添加<code>-h -p</code>参数了,使用<code>redis-cli.exe</code>即可连接成功。</p>\n<p>下面，我们来测试下，在redis命令行，输入：</p>\n<pre><code>set aa &quot;I Love Redis&quot;\n</code></pre><p>打印输出：</p>\n<pre><code>get aa\n</code></pre><p>此时，即可看到刚才设置的”I Love Redis”字符串。</p>\n<p>更多关于Redis的设置项，请参考<code>redis.conf</code>文件。</p>\n<hr>\n<p>###Linux下搭建环境</p>\n<p>首先，下载Redis安装包：</p>\n<pre><code>wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n</code></pre><p>接下来创建redis安装文件</p>\n<pre><code>mkdir -p /var/local/redis/etc\nmkdir -p /var/local/redis/bin\n</code></pre><p>然后，开始安装redis：</p>\n<pre><code>tar -zxvf redis-2.8.17.tar.gz\ncd ./redis-2.8.17\nmake\n</code></pre><p>接下来：</p>\n<pre><code>cp redis-benchmark redis-check-aof redis-check_dump  redis-cli redis-server /var/local/redis/bin\ncp ../redis.conf /var/local/redis/etc\n</code></pre><p>然后，切换到<code>/var/local/redis/etc</code>,打开<code>redis.conf</code>文件，配置如下：</p>\n<pre><code>daemonize yes    //后台运行\nbind 127.0.0.1        \n</code></pre><p>到此，redis就配置完毕。</p>\n<p>接下来，测试下,先运行redis服务：</p>\n<pre><code>/var/local/redis/bin/redis-server /var/local/redis/etc/redis.conf\n</code></pre><p>使用netstat查看下：</p>\n<pre><code>netstat -tunpl | grep redis\n</code></pre><p><img src=\"../images/201411/2014-11-05_200206.jpg\" alt=\"\"></p>\n<p>说明redis服务已经运行成功。</p>\n<p>下面，打开使用redis：</p>\n<pre><code>/var/local/redis/bin/redis-cli \n</code></pre><p><img src=\"../images/201411/2014-11-05_200546.jpg\" alt=\"\"></p>\n<p>（end）</p>"},{"layout":"post","title":"SSL/TLS协议概述","_content":"不使用SSL/TLS协议的HTTP通信，就是不加密的通信，所有信息都是明文传播。在这个不安全的网络上，当我们涉及金钱的交易时，如果信息使用明文传输，光是想想都觉得可怕（假如支付宝使用明文的HTTP协议，你还敢使用吗？）。\n\n信息使用铭文传输，有三大风险：\n\n*\t窃听风险：第三方可以获知通信内容。\n*\t篡改风险：第三方可以修改通信内容。\n*\t冒充风险：第三方可以冒充他人身份参与通信。\n\nSSL/TLS协议是为了解决这三大风险而设计的，希望达到：\n\n<!--more-->\n\n*\t所有信息都是加密传播，第三方无法窃听。\n*\t具有校验机制，一旦被篡改，通信双方会立刻发现。\n*\t配备身份证书，防止身份被冒充。\n\n![](../images/201411/bg2014020501.jpg)\n\n\n互联网是开放环境，通信双方都是未知身份，这为协议的设计带来了很大的难度。而且，协议还必须能够经受所有匪夷所思的攻击，这使得SSL/TLS协议变得异常复杂。\n\n**SSL/TLS协议的基本过程是这样的：**\n\n1、\t客户端向服务器端索要并验证公钥。\n\n2、\t双方协商生成\"对话密钥\"。\n\n3、  双方采用\"对话密钥\"进行加密通信\n\n上面过程的前两步，又称为\"**握手阶段**\"。\"握手阶段\"涉及四次通信，需要注意的是，**\"握手阶段\"的所有通信都是明文的**。\n\n###SSL协议的握手过程\n\n开始加密通信之前，客户端和服务器首先必须建立连接和交换参数，这个过程叫做握手。\n\n握手阶段分成五步：\n\n1、客户端给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。\n\n2、服务器确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server random）。\n\n3、客户端确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务器。\n\n4、服务器使用自己的私钥，获取客户端发来的随机数（即Premaster secret）。\n\n5、客户端和服务器根据约定的加密方法，使用前面的三个随机数，生成**\"对话密钥\"**（session key），用来加密接下来的整个对话过程。\n\n![](../images/201411/bg2014092004.png)\n\n###私钥的作用\n\n握手阶段有三点需要注意:\n\n*\t生成对话密钥一共需要三个随机数。\n*\t握手之后的对话使用**\"对话密钥\"**加密（对称加密），服务器的公钥和私钥只用于加密和解密\"对话密钥\"（非对称加密），无其他作用(**注意**)。\n*\t服务器公钥放在服务器的数字证书之中。\n\n从上面第二点可知，整个对话过程中（握手阶段和其后的对话），服务器的公钥和私钥只需要用到一次，后面的对话都不再会用到私钥了。\n\n###服务器的最后回应\n\n服务器收到客户端的第三个随机数之后，计算生成本次会话所用的**\"会话密钥\"**。\n\n至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的HTTP协议，只不过用\"会话密钥\"加密内容。\n\n**特此声明：**\n\n本文主要参考[阮一峰老师的个人博客](http://www.ruanyifeng.com/home.html),特此感谢！\n\n参考链接：[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n参考链接：[图解SSL/TLS协议](http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html)\n\n（end）\n","source":"_posts/201411/2014-11-02-ssl_tls_secure_notes.md","raw":"---\nlayout : post\ntitle : SSL/TLS协议概述\ncategory : SSL/TLS\ntags : SSL HTTPS\n---\n不使用SSL/TLS协议的HTTP通信，就是不加密的通信，所有信息都是明文传播。在这个不安全的网络上，当我们涉及金钱的交易时，如果信息使用明文传输，光是想想都觉得可怕（假如支付宝使用明文的HTTP协议，你还敢使用吗？）。\n\n信息使用铭文传输，有三大风险：\n\n*\t窃听风险：第三方可以获知通信内容。\n*\t篡改风险：第三方可以修改通信内容。\n*\t冒充风险：第三方可以冒充他人身份参与通信。\n\nSSL/TLS协议是为了解决这三大风险而设计的，希望达到：\n\n<!--more-->\n\n*\t所有信息都是加密传播，第三方无法窃听。\n*\t具有校验机制，一旦被篡改，通信双方会立刻发现。\n*\t配备身份证书，防止身份被冒充。\n\n![](../images/201411/bg2014020501.jpg)\n\n\n互联网是开放环境，通信双方都是未知身份，这为协议的设计带来了很大的难度。而且，协议还必须能够经受所有匪夷所思的攻击，这使得SSL/TLS协议变得异常复杂。\n\n**SSL/TLS协议的基本过程是这样的：**\n\n1、\t客户端向服务器端索要并验证公钥。\n\n2、\t双方协商生成\"对话密钥\"。\n\n3、  双方采用\"对话密钥\"进行加密通信\n\n上面过程的前两步，又称为\"**握手阶段**\"。\"握手阶段\"涉及四次通信，需要注意的是，**\"握手阶段\"的所有通信都是明文的**。\n\n###SSL协议的握手过程\n\n开始加密通信之前，客户端和服务器首先必须建立连接和交换参数，这个过程叫做握手。\n\n握手阶段分成五步：\n\n1、客户端给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。\n\n2、服务器确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server random）。\n\n3、客户端确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务器。\n\n4、服务器使用自己的私钥，获取客户端发来的随机数（即Premaster secret）。\n\n5、客户端和服务器根据约定的加密方法，使用前面的三个随机数，生成**\"对话密钥\"**（session key），用来加密接下来的整个对话过程。\n\n![](../images/201411/bg2014092004.png)\n\n###私钥的作用\n\n握手阶段有三点需要注意:\n\n*\t生成对话密钥一共需要三个随机数。\n*\t握手之后的对话使用**\"对话密钥\"**加密（对称加密），服务器的公钥和私钥只用于加密和解密\"对话密钥\"（非对称加密），无其他作用(**注意**)。\n*\t服务器公钥放在服务器的数字证书之中。\n\n从上面第二点可知，整个对话过程中（握手阶段和其后的对话），服务器的公钥和私钥只需要用到一次，后面的对话都不再会用到私钥了。\n\n###服务器的最后回应\n\n服务器收到客户端的第三个随机数之后，计算生成本次会话所用的**\"会话密钥\"**。\n\n至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的HTTP协议，只不过用\"会话密钥\"加密内容。\n\n**特此声明：**\n\n本文主要参考[阮一峰老师的个人博客](http://www.ruanyifeng.com/home.html),特此感谢！\n\n参考链接：[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n参考链接：[图解SSL/TLS协议](http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html)\n\n（end）\n","slug":"201411-2014-11-02-ssl-tls-secure-notes","published":1,"date":"2018-04-12T15:20:38.830Z","updated":"2018-04-12T15:20:38.830Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6i005fass6u3ny88j9","content":"<p>不使用SSL/TLS协议的HTTP通信，就是不加密的通信，所有信息都是明文传播。在这个不安全的网络上，当我们涉及金钱的交易时，如果信息使用明文传输，光是想想都觉得可怕（假如支付宝使用明文的HTTP协议，你还敢使用吗？）。</p>\n<p>信息使用铭文传输，有三大风险：</p>\n<ul>\n<li>窃听风险：第三方可以获知通信内容。</li>\n<li>篡改风险：第三方可以修改通信内容。</li>\n<li>冒充风险：第三方可以冒充他人身份参与通信。</li>\n</ul>\n<p>SSL/TLS协议是为了解决这三大风险而设计的，希望达到：</p>\n<a id=\"more\"></a>\n<ul>\n<li>所有信息都是加密传播，第三方无法窃听。</li>\n<li>具有校验机制，一旦被篡改，通信双方会立刻发现。</li>\n<li>配备身份证书，防止身份被冒充。</li>\n</ul>\n<p><img src=\"../images/201411/bg2014020501.jpg\" alt=\"\"></p>\n<p>互联网是开放环境，通信双方都是未知身份，这为协议的设计带来了很大的难度。而且，协议还必须能够经受所有匪夷所思的攻击，这使得SSL/TLS协议变得异常复杂。</p>\n<p><strong>SSL/TLS协议的基本过程是这样的：</strong></p>\n<p>1、    客户端向服务器端索要并验证公钥。</p>\n<p>2、    双方协商生成”对话密钥”。</p>\n<p>3、  双方采用”对话密钥”进行加密通信</p>\n<p>上面过程的前两步，又称为”<strong>握手阶段</strong>“。”握手阶段”涉及四次通信，需要注意的是，<strong>“握手阶段”的所有通信都是明文的</strong>。</p>\n<p>###SSL协议的握手过程</p>\n<p>开始加密通信之前，客户端和服务器首先必须建立连接和交换参数，这个过程叫做握手。</p>\n<p>握手阶段分成五步：</p>\n<p>1、客户端给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。</p>\n<p>2、服务器确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server random）。</p>\n<p>3、客户端确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务器。</p>\n<p>4、服务器使用自己的私钥，获取客户端发来的随机数（即Premaster secret）。</p>\n<p>5、客户端和服务器根据约定的加密方法，使用前面的三个随机数，生成<strong>“对话密钥”</strong>（session key），用来加密接下来的整个对话过程。</p>\n<p><img src=\"../images/201411/bg2014092004.png\" alt=\"\"></p>\n<p>###私钥的作用</p>\n<p>握手阶段有三点需要注意:</p>\n<ul>\n<li>生成对话密钥一共需要三个随机数。</li>\n<li>握手之后的对话使用<strong>“对话密钥”</strong>加密（对称加密），服务器的公钥和私钥只用于加密和解密”对话密钥”（非对称加密），无其他作用(<strong>注意</strong>)。</li>\n<li>服务器公钥放在服务器的数字证书之中。</li>\n</ul>\n<p>从上面第二点可知，整个对话过程中（握手阶段和其后的对话），服务器的公钥和私钥只需要用到一次，后面的对话都不再会用到私钥了。</p>\n<p>###服务器的最后回应</p>\n<p>服务器收到客户端的第三个随机数之后，计算生成本次会话所用的<strong>“会话密钥”</strong>。</p>\n<p>至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的HTTP协议，只不过用”会话密钥”加密内容。</p>\n<p><strong>特此声明：</strong></p>\n<p>本文主要参考<a href=\"http://www.ruanyifeng.com/home.html\" target=\"_blank\" rel=\"noopener\">阮一峰老师的个人博客</a>,特此感谢！</p>\n<p>参考链接：<a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"noopener\">SSL/TLS协议运行机制的概述</a></p>\n<p>参考链接：<a href=\"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\" target=\"_blank\" rel=\"noopener\">图解SSL/TLS协议</a></p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>不使用SSL/TLS协议的HTTP通信，就是不加密的通信，所有信息都是明文传播。在这个不安全的网络上，当我们涉及金钱的交易时，如果信息使用明文传输，光是想想都觉得可怕（假如支付宝使用明文的HTTP协议，你还敢使用吗？）。</p>\n<p>信息使用铭文传输，有三大风险：</p>\n<ul>\n<li>窃听风险：第三方可以获知通信内容。</li>\n<li>篡改风险：第三方可以修改通信内容。</li>\n<li>冒充风险：第三方可以冒充他人身份参与通信。</li>\n</ul>\n<p>SSL/TLS协议是为了解决这三大风险而设计的，希望达到：</p>","more":"<ul>\n<li>所有信息都是加密传播，第三方无法窃听。</li>\n<li>具有校验机制，一旦被篡改，通信双方会立刻发现。</li>\n<li>配备身份证书，防止身份被冒充。</li>\n</ul>\n<p><img src=\"../images/201411/bg2014020501.jpg\" alt=\"\"></p>\n<p>互联网是开放环境，通信双方都是未知身份，这为协议的设计带来了很大的难度。而且，协议还必须能够经受所有匪夷所思的攻击，这使得SSL/TLS协议变得异常复杂。</p>\n<p><strong>SSL/TLS协议的基本过程是这样的：</strong></p>\n<p>1、    客户端向服务器端索要并验证公钥。</p>\n<p>2、    双方协商生成”对话密钥”。</p>\n<p>3、  双方采用”对话密钥”进行加密通信</p>\n<p>上面过程的前两步，又称为”<strong>握手阶段</strong>“。”握手阶段”涉及四次通信，需要注意的是，<strong>“握手阶段”的所有通信都是明文的</strong>。</p>\n<p>###SSL协议的握手过程</p>\n<p>开始加密通信之前，客户端和服务器首先必须建立连接和交换参数，这个过程叫做握手。</p>\n<p>握手阶段分成五步：</p>\n<p>1、客户端给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。</p>\n<p>2、服务器确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server random）。</p>\n<p>3、客户端确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务器。</p>\n<p>4、服务器使用自己的私钥，获取客户端发来的随机数（即Premaster secret）。</p>\n<p>5、客户端和服务器根据约定的加密方法，使用前面的三个随机数，生成<strong>“对话密钥”</strong>（session key），用来加密接下来的整个对话过程。</p>\n<p><img src=\"../images/201411/bg2014092004.png\" alt=\"\"></p>\n<p>###私钥的作用</p>\n<p>握手阶段有三点需要注意:</p>\n<ul>\n<li>生成对话密钥一共需要三个随机数。</li>\n<li>握手之后的对话使用<strong>“对话密钥”</strong>加密（对称加密），服务器的公钥和私钥只用于加密和解密”对话密钥”（非对称加密），无其他作用(<strong>注意</strong>)。</li>\n<li>服务器公钥放在服务器的数字证书之中。</li>\n</ul>\n<p>从上面第二点可知，整个对话过程中（握手阶段和其后的对话），服务器的公钥和私钥只需要用到一次，后面的对话都不再会用到私钥了。</p>\n<p>###服务器的最后回应</p>\n<p>服务器收到客户端的第三个随机数之后，计算生成本次会话所用的<strong>“会话密钥”</strong>。</p>\n<p>至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的HTTP协议，只不过用”会话密钥”加密内容。</p>\n<p><strong>特此声明：</strong></p>\n<p>本文主要参考<a href=\"http://www.ruanyifeng.com/home.html\" target=\"_blank\" rel=\"noopener\">阮一峰老师的个人博客</a>,特此感谢！</p>\n<p>参考链接：<a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"noopener\">SSL/TLS协议运行机制的概述</a></p>\n<p>参考链接：<a href=\"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\" target=\"_blank\" rel=\"noopener\">图解SSL/TLS协议</a></p>\n<p>（end）</p>"},{"layout":"post","title":"MySQL实现增量备份小结","_content":"当我们误删了MySQL数据库某张表中的数据或者整张表，我们可以使用MySQL的增量备份机制来实现误删数据的恢复，接下来就来总结下MySQL的增量备份技术是如何实现的，以及其中需要我们注意的事项！\n\n首先，对于ddl和dml语句的二进制备份，我们要清楚的是MySQL在5.0还不支持增量备份，5.1开始支持。\n\n###增量备份的定义\n\nMySQL数据库会以二进制的形式，自动把用户对MySQL数据库的操作，记录到文件夹，当用户希望恢复的时候可以使用备份文件进行恢复。\n\n<!--more-->\n\n下面，我们开始详细说明如何配置增量备份机制。\n\n首先，要实现增量备份，需要在my.ini文件中配置备份路径，我们可以在`[mysqld]`下配置：\n\n\t#这里指定把备份文件放在哪个目录下\n\tlog-bin=d:/binlog/mylog\n\n然后重启MySQL服务器即可，增量备份就启动了：\n\n\tnet stop mysql\n\tnet start mysql\n\n此时会在在`d:\\binlog\\`下生成两个文件\n\n\tmylog.index\t\t//该文件记录索引\n\tmylog.000001\t//该文件记录二进制的详细信息\n\n此时，我们可以使用`mysqlbinlog`工具来查看生成的二进制文件，在cmd中进入mysql目录下的bin中 使用`msyqlbinlog`后面加上`mylog.000001`，可以看到所有**ddl和dml操作(不包括查询操作语句)**，且每一个操作都有具体的位置和时间点的记录。\n\n接下来，创建数据表进行测试：\n\n> create table test(\n\n> id int primary key auto_increment,\n\n> name varchar(32) not null default\n\n>) engine=myisam;\n\n插入数据：\n\n\tinsert into test values (null, 'Leeya'),(null, 'Hanson'),(null, 'Jack');\n\n切换到mysql下的bin目录，使用`mysqlbinlog`查看二进制文件：\n\n\tmysqlbinlog d:\\binlog\\mylog.000001\n\n结果如下图：\n\n![pic](../images/201410/2014-10-21_202809.jpg)\n\n图中已经显示，mysql已经帮我们把每一个操作（**再次提醒：不记录select查询操作**）的时间记录下来了，同时分配了一个位置position，我们就可以根据时间和位置来恢复数据。\n\n下面，我们使用`drop`来删除表;\n\n\tdrop table test;\n此时，数据库中已经不存在test这个数据表了，现在我们可以使用`mysqlbinlog`来进行恢复了。\n\n---\n\n在进行恢复数据之前，先总结下mysql进行恢复数据的两种方式：\n\n###通过时间来恢复\n\n一种是：\n\n\t//从开始恢复到这个时间点\t\n\tmysqlbinlog --stop-datetime=\"2014-10-21 20:39:21\" d:/binlog/mylog.000001 | mysql -uroot -p******\n\n另一种是\n\n\t//从这个时间点开始恢复到最后\n\tmysqlbinlog --start-datetime=\"2014-10-21 20:39:21\" d:/binlog/mylog.000001 | mysql -uroot -p******\n\n值得注意的是，时间格式，使用双引号包裹起来。\n\n###通过位置来恢复\n\n一种是：\n\n\t//从二进制日志中第1个位置等于N参量时的事件开始读。\n\t--start-position=N\n\n另一种是:\n\n\t//从二进制日志中第1个位置等于和大于N参量时的事件起停止读\n\t--stop-position=N\n\n下面，我们来进行数据的恢复：\n\n\tmysqlbinlog --stop-position=\"573\" d:\\binlog\\mylog.000001 | mysql -uroot -p******\n\n然后使用sql查看数据是否已经恢复;\n\n\tselect * from test;\n\n经测试，发现数据的确恢复成功，同理，我们也可以使用时间来恢复数据。\n\n###如何关闭增量备份\n\n把my.ini文件中mysqld下面的`log-bin=路径`前面添加#号，然后重启mysql服务器即可。\n\n---\n\n###注意：\n\n当随着时间的推移，二进制文件里面的数据会越来越大，所以要定期的做一些清理。\n\n*\t使用mysql命令`reset master`来把二进制日志索引文件重新设置为空。\n*\t设置`my.ini`中的参数[mysqld]下的`-EXPIRE_LOGS_DAYS`，此参数是设置日志过期的天数，过期的日志将被自动删除。\n\n**建议：**\n\n每周做一个全备份`mysqldump`，然后同时启用增量备份，把过期时间设为大于等于7。此时，如果出现数据库崩溃，就可以先完全恢复，然后再增量恢复。如果担心误操作，可先查看增量日志，然后再进行增量备份。\n\n","source":"_posts/201410/2014-10-21-mysql_mysqlbinlog_dump_note.md","raw":"---\nlayout : post\ntitle : MySQL实现增量备份小结\ncategory : MySQL\ntags : MySQL 增量备份\n---\n当我们误删了MySQL数据库某张表中的数据或者整张表，我们可以使用MySQL的增量备份机制来实现误删数据的恢复，接下来就来总结下MySQL的增量备份技术是如何实现的，以及其中需要我们注意的事项！\n\n首先，对于ddl和dml语句的二进制备份，我们要清楚的是MySQL在5.0还不支持增量备份，5.1开始支持。\n\n###增量备份的定义\n\nMySQL数据库会以二进制的形式，自动把用户对MySQL数据库的操作，记录到文件夹，当用户希望恢复的时候可以使用备份文件进行恢复。\n\n<!--more-->\n\n下面，我们开始详细说明如何配置增量备份机制。\n\n首先，要实现增量备份，需要在my.ini文件中配置备份路径，我们可以在`[mysqld]`下配置：\n\n\t#这里指定把备份文件放在哪个目录下\n\tlog-bin=d:/binlog/mylog\n\n然后重启MySQL服务器即可，增量备份就启动了：\n\n\tnet stop mysql\n\tnet start mysql\n\n此时会在在`d:\\binlog\\`下生成两个文件\n\n\tmylog.index\t\t//该文件记录索引\n\tmylog.000001\t//该文件记录二进制的详细信息\n\n此时，我们可以使用`mysqlbinlog`工具来查看生成的二进制文件，在cmd中进入mysql目录下的bin中 使用`msyqlbinlog`后面加上`mylog.000001`，可以看到所有**ddl和dml操作(不包括查询操作语句)**，且每一个操作都有具体的位置和时间点的记录。\n\n接下来，创建数据表进行测试：\n\n> create table test(\n\n> id int primary key auto_increment,\n\n> name varchar(32) not null default\n\n>) engine=myisam;\n\n插入数据：\n\n\tinsert into test values (null, 'Leeya'),(null, 'Hanson'),(null, 'Jack');\n\n切换到mysql下的bin目录，使用`mysqlbinlog`查看二进制文件：\n\n\tmysqlbinlog d:\\binlog\\mylog.000001\n\n结果如下图：\n\n![pic](../images/201410/2014-10-21_202809.jpg)\n\n图中已经显示，mysql已经帮我们把每一个操作（**再次提醒：不记录select查询操作**）的时间记录下来了，同时分配了一个位置position，我们就可以根据时间和位置来恢复数据。\n\n下面，我们使用`drop`来删除表;\n\n\tdrop table test;\n此时，数据库中已经不存在test这个数据表了，现在我们可以使用`mysqlbinlog`来进行恢复了。\n\n---\n\n在进行恢复数据之前，先总结下mysql进行恢复数据的两种方式：\n\n###通过时间来恢复\n\n一种是：\n\n\t//从开始恢复到这个时间点\t\n\tmysqlbinlog --stop-datetime=\"2014-10-21 20:39:21\" d:/binlog/mylog.000001 | mysql -uroot -p******\n\n另一种是\n\n\t//从这个时间点开始恢复到最后\n\tmysqlbinlog --start-datetime=\"2014-10-21 20:39:21\" d:/binlog/mylog.000001 | mysql -uroot -p******\n\n值得注意的是，时间格式，使用双引号包裹起来。\n\n###通过位置来恢复\n\n一种是：\n\n\t//从二进制日志中第1个位置等于N参量时的事件开始读。\n\t--start-position=N\n\n另一种是:\n\n\t//从二进制日志中第1个位置等于和大于N参量时的事件起停止读\n\t--stop-position=N\n\n下面，我们来进行数据的恢复：\n\n\tmysqlbinlog --stop-position=\"573\" d:\\binlog\\mylog.000001 | mysql -uroot -p******\n\n然后使用sql查看数据是否已经恢复;\n\n\tselect * from test;\n\n经测试，发现数据的确恢复成功，同理，我们也可以使用时间来恢复数据。\n\n###如何关闭增量备份\n\n把my.ini文件中mysqld下面的`log-bin=路径`前面添加#号，然后重启mysql服务器即可。\n\n---\n\n###注意：\n\n当随着时间的推移，二进制文件里面的数据会越来越大，所以要定期的做一些清理。\n\n*\t使用mysql命令`reset master`来把二进制日志索引文件重新设置为空。\n*\t设置`my.ini`中的参数[mysqld]下的`-EXPIRE_LOGS_DAYS`，此参数是设置日志过期的天数，过期的日志将被自动删除。\n\n**建议：**\n\n每周做一个全备份`mysqldump`，然后同时启用增量备份，把过期时间设为大于等于7。此时，如果出现数据库崩溃，就可以先完全恢复，然后再增量恢复。如果担心误操作，可先查看增量日志，然后再进行增量备份。\n\n","slug":"201410-2014-10-21-mysql-mysqlbinlog-dump-note","published":1,"date":"2018-04-12T15:20:38.829Z","updated":"2018-04-12T15:20:38.829Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6k005iass6803ch61k","content":"<p>当我们误删了MySQL数据库某张表中的数据或者整张表，我们可以使用MySQL的增量备份机制来实现误删数据的恢复，接下来就来总结下MySQL的增量备份技术是如何实现的，以及其中需要我们注意的事项！</p>\n<p>首先，对于ddl和dml语句的二进制备份，我们要清楚的是MySQL在5.0还不支持增量备份，5.1开始支持。</p>\n<p>###增量备份的定义</p>\n<p>MySQL数据库会以二进制的形式，自动把用户对MySQL数据库的操作，记录到文件夹，当用户希望恢复的时候可以使用备份文件进行恢复。</p>\n<a id=\"more\"></a>\n<p>下面，我们开始详细说明如何配置增量备份机制。</p>\n<p>首先，要实现增量备份，需要在my.ini文件中配置备份路径，我们可以在<code>[mysqld]</code>下配置：</p>\n<pre><code>#这里指定把备份文件放在哪个目录下\nlog-bin=d:/binlog/mylog\n</code></pre><p>然后重启MySQL服务器即可，增量备份就启动了：</p>\n<pre><code>net stop mysql\nnet start mysql\n</code></pre><p>此时会在在<code>d:\\binlog\\</code>下生成两个文件</p>\n<pre><code>mylog.index        //该文件记录索引\nmylog.000001    //该文件记录二进制的详细信息\n</code></pre><p>此时，我们可以使用<code>mysqlbinlog</code>工具来查看生成的二进制文件，在cmd中进入mysql目录下的bin中 使用<code>msyqlbinlog</code>后面加上<code>mylog.000001</code>，可以看到所有<strong>ddl和dml操作(不包括查询操作语句)</strong>，且每一个操作都有具体的位置和时间点的记录。</p>\n<p>接下来，创建数据表进行测试：</p>\n<blockquote>\n<p>create table test(</p>\n</blockquote>\n<blockquote>\n<p>id int primary key auto_increment,</p>\n</blockquote>\n<blockquote>\n<p>name varchar(32) not null default</p>\n</blockquote>\n<blockquote>\n<p>) engine=myisam;</p>\n</blockquote>\n<p>插入数据：</p>\n<pre><code>insert into test values (null, &apos;Leeya&apos;),(null, &apos;Hanson&apos;),(null, &apos;Jack&apos;);\n</code></pre><p>切换到mysql下的bin目录，使用<code>mysqlbinlog</code>查看二进制文件：</p>\n<pre><code>mysqlbinlog d:\\binlog\\mylog.000001\n</code></pre><p>结果如下图：</p>\n<p><img src=\"../images/201410/2014-10-21_202809.jpg\" alt=\"pic\"></p>\n<p>图中已经显示，mysql已经帮我们把每一个操作（<strong>再次提醒：不记录select查询操作</strong>）的时间记录下来了，同时分配了一个位置position，我们就可以根据时间和位置来恢复数据。</p>\n<p>下面，我们使用<code>drop</code>来删除表;</p>\n<pre><code>drop table test;\n</code></pre><p>此时，数据库中已经不存在test这个数据表了，现在我们可以使用<code>mysqlbinlog</code>来进行恢复了。</p>\n<hr>\n<p>在进行恢复数据之前，先总结下mysql进行恢复数据的两种方式：</p>\n<p>###通过时间来恢复</p>\n<p>一种是：</p>\n<pre><code>//从开始恢复到这个时间点    \nmysqlbinlog --stop-datetime=&quot;2014-10-21 20:39:21&quot; d:/binlog/mylog.000001 | mysql -uroot -p******\n</code></pre><p>另一种是</p>\n<pre><code>//从这个时间点开始恢复到最后\nmysqlbinlog --start-datetime=&quot;2014-10-21 20:39:21&quot; d:/binlog/mylog.000001 | mysql -uroot -p******\n</code></pre><p>值得注意的是，时间格式，使用双引号包裹起来。</p>\n<p>###通过位置来恢复</p>\n<p>一种是：</p>\n<pre><code>//从二进制日志中第1个位置等于N参量时的事件开始读。\n--start-position=N\n</code></pre><p>另一种是:</p>\n<pre><code>//从二进制日志中第1个位置等于和大于N参量时的事件起停止读\n--stop-position=N\n</code></pre><p>下面，我们来进行数据的恢复：</p>\n<pre><code>mysqlbinlog --stop-position=&quot;573&quot; d:\\binlog\\mylog.000001 | mysql -uroot -p******\n</code></pre><p>然后使用sql查看数据是否已经恢复;</p>\n<pre><code>select * from test;\n</code></pre><p>经测试，发现数据的确恢复成功，同理，我们也可以使用时间来恢复数据。</p>\n<p>###如何关闭增量备份</p>\n<p>把my.ini文件中mysqld下面的<code>log-bin=路径</code>前面添加#号，然后重启mysql服务器即可。</p>\n<hr>\n<p>###注意：</p>\n<p>当随着时间的推移，二进制文件里面的数据会越来越大，所以要定期的做一些清理。</p>\n<ul>\n<li>使用mysql命令<code>reset master</code>来把二进制日志索引文件重新设置为空。</li>\n<li>设置<code>my.ini</code>中的参数[mysqld]下的<code>-EXPIRE_LOGS_DAYS</code>，此参数是设置日志过期的天数，过期的日志将被自动删除。</li>\n</ul>\n<p><strong>建议：</strong></p>\n<p>每周做一个全备份<code>mysqldump</code>，然后同时启用增量备份，把过期时间设为大于等于7。此时，如果出现数据库崩溃，就可以先完全恢复，然后再增量恢复。如果担心误操作，可先查看增量日志，然后再进行增量备份。</p>\n","site":{"data":{}},"excerpt":"<p>当我们误删了MySQL数据库某张表中的数据或者整张表，我们可以使用MySQL的增量备份机制来实现误删数据的恢复，接下来就来总结下MySQL的增量备份技术是如何实现的，以及其中需要我们注意的事项！</p>\n<p>首先，对于ddl和dml语句的二进制备份，我们要清楚的是MySQL在5.0还不支持增量备份，5.1开始支持。</p>\n<p>###增量备份的定义</p>\n<p>MySQL数据库会以二进制的形式，自动把用户对MySQL数据库的操作，记录到文件夹，当用户希望恢复的时候可以使用备份文件进行恢复。</p>","more":"<p>下面，我们开始详细说明如何配置增量备份机制。</p>\n<p>首先，要实现增量备份，需要在my.ini文件中配置备份路径，我们可以在<code>[mysqld]</code>下配置：</p>\n<pre><code>#这里指定把备份文件放在哪个目录下\nlog-bin=d:/binlog/mylog\n</code></pre><p>然后重启MySQL服务器即可，增量备份就启动了：</p>\n<pre><code>net stop mysql\nnet start mysql\n</code></pre><p>此时会在在<code>d:\\binlog\\</code>下生成两个文件</p>\n<pre><code>mylog.index        //该文件记录索引\nmylog.000001    //该文件记录二进制的详细信息\n</code></pre><p>此时，我们可以使用<code>mysqlbinlog</code>工具来查看生成的二进制文件，在cmd中进入mysql目录下的bin中 使用<code>msyqlbinlog</code>后面加上<code>mylog.000001</code>，可以看到所有<strong>ddl和dml操作(不包括查询操作语句)</strong>，且每一个操作都有具体的位置和时间点的记录。</p>\n<p>接下来，创建数据表进行测试：</p>\n<blockquote>\n<p>create table test(</p>\n</blockquote>\n<blockquote>\n<p>id int primary key auto_increment,</p>\n</blockquote>\n<blockquote>\n<p>name varchar(32) not null default</p>\n</blockquote>\n<blockquote>\n<p>) engine=myisam;</p>\n</blockquote>\n<p>插入数据：</p>\n<pre><code>insert into test values (null, &apos;Leeya&apos;),(null, &apos;Hanson&apos;),(null, &apos;Jack&apos;);\n</code></pre><p>切换到mysql下的bin目录，使用<code>mysqlbinlog</code>查看二进制文件：</p>\n<pre><code>mysqlbinlog d:\\binlog\\mylog.000001\n</code></pre><p>结果如下图：</p>\n<p><img src=\"../images/201410/2014-10-21_202809.jpg\" alt=\"pic\"></p>\n<p>图中已经显示，mysql已经帮我们把每一个操作（<strong>再次提醒：不记录select查询操作</strong>）的时间记录下来了，同时分配了一个位置position，我们就可以根据时间和位置来恢复数据。</p>\n<p>下面，我们使用<code>drop</code>来删除表;</p>\n<pre><code>drop table test;\n</code></pre><p>此时，数据库中已经不存在test这个数据表了，现在我们可以使用<code>mysqlbinlog</code>来进行恢复了。</p>\n<hr>\n<p>在进行恢复数据之前，先总结下mysql进行恢复数据的两种方式：</p>\n<p>###通过时间来恢复</p>\n<p>一种是：</p>\n<pre><code>//从开始恢复到这个时间点    \nmysqlbinlog --stop-datetime=&quot;2014-10-21 20:39:21&quot; d:/binlog/mylog.000001 | mysql -uroot -p******\n</code></pre><p>另一种是</p>\n<pre><code>//从这个时间点开始恢复到最后\nmysqlbinlog --start-datetime=&quot;2014-10-21 20:39:21&quot; d:/binlog/mylog.000001 | mysql -uroot -p******\n</code></pre><p>值得注意的是，时间格式，使用双引号包裹起来。</p>\n<p>###通过位置来恢复</p>\n<p>一种是：</p>\n<pre><code>//从二进制日志中第1个位置等于N参量时的事件开始读。\n--start-position=N\n</code></pre><p>另一种是:</p>\n<pre><code>//从二进制日志中第1个位置等于和大于N参量时的事件起停止读\n--stop-position=N\n</code></pre><p>下面，我们来进行数据的恢复：</p>\n<pre><code>mysqlbinlog --stop-position=&quot;573&quot; d:\\binlog\\mylog.000001 | mysql -uroot -p******\n</code></pre><p>然后使用sql查看数据是否已经恢复;</p>\n<pre><code>select * from test;\n</code></pre><p>经测试，发现数据的确恢复成功，同理，我们也可以使用时间来恢复数据。</p>\n<p>###如何关闭增量备份</p>\n<p>把my.ini文件中mysqld下面的<code>log-bin=路径</code>前面添加#号，然后重启mysql服务器即可。</p>\n<hr>\n<p>###注意：</p>\n<p>当随着时间的推移，二进制文件里面的数据会越来越大，所以要定期的做一些清理。</p>\n<ul>\n<li>使用mysql命令<code>reset master</code>来把二进制日志索引文件重新设置为空。</li>\n<li>设置<code>my.ini</code>中的参数[mysqld]下的<code>-EXPIRE_LOGS_DAYS</code>，此参数是设置日志过期的天数，过期的日志将被自动删除。</li>\n</ul>\n<p><strong>建议：</strong></p>\n<p>每周做一个全备份<code>mysqldump</code>，然后同时启用增量备份，把过期时间设为大于等于7。此时，如果出现数据库崩溃，就可以先完全恢复，然后再增量恢复。如果担心误操作，可先查看增量日志，然后再进行增量备份。</p>"},{"layout":"post","title":"如何高效管理我们的时间","_content":"不知道大家有没有发现，有时候一天过去了却发现自己好像什么都没干。不要虚伪，我相信每个人都会碰到这种情况的，所以不要说在你身上没有发生过。说到底，原因是我们没有充分以及高效的利用好我们时间，总被各种繁琐的事情所打扰。\n\n下面转载自[伯乐博客的一篇文章](http://blog.jobbole.com/78755/)，笔者个人觉得写的挺好，可以很好的解决上述问题，因此转载过来与大家分享，同时勉励自己,还要感谢文章的原创作者。\n\n<!--more-->\n\n【伯乐在线注】：这个问题来自 Quora，下面是来自 Marius Ursache 的最佳回复，目前有 6400+ 赞。\n\n我一直在测试和调整各种生产效率的技术，在过去的五年中，阅读了大量的书籍（其中大多数是重复的） ，这里是我的一些结论：\n\n这不是一个关于时间的问题，而是关于精力。\n\n为了“有效率”，我们试图在一个工作日内塞进尽可能多的小时，但最终一切都更多地取决于你的注意力，积极性和良好状态（这些都是直接与精力等级联系在一起）而不是工作时间 。\n\n我最近在葡萄柚的一个内部演示上提及了我提高效率的想法，结果性的演示是在Slideshare上的：[producitivity porn](http://www.slideshare.net/mariusursache/productivity-porn).\n\n其中一些关键结论：\n\n1. 决定什么是重要的事，因为在5年之内，你现在做的80%的事情都不会有任何结果。那只是无用功，没有有用的结果。\n\n2. 睡眠，饮食和运动可以让你的成果提高到三倍，因为他们可以帮助你增强你的注意力，动力和精力水平。\n\n3. 两分钟法则：如果你可以在两分钟内做完一件事（比如回复邮件或是一个家务），那就现在做。计划着一会儿完成它，记着它，并在未来完成它会花费五分钟甚至更多的时间。\n\n4. 五分钟法则：治疗拖延症最好的办法不是定目标去完成一个可怕的大任务，而是只在那件事上花五分钟。你会发现在大多数情况下，它在超出五分钟的时候依旧很顺利，因为你进入了平坦期。\n\n5. Seinfeld生产链：如果你想做好一件事，那就每天去做。包括圣诞节，复活节和审判日。没有例外。\n\n6. 微小的生活习惯：与五分钟法则高度结合起来，你可以很快地形成好习惯。这个很有用，我测试过的。\n\n7. 你的记忆力烂透了。 即使你是一个天才也要把每件事都从你的脑子里清出来。把他们写在一个笔记本上，放进待办事项列表的应用程序里，记在手机里，或是告诉Siri，我不在意你使用的方法。\n\n8. 尽量少使用工具。我曾经测试过大多数代办事件管理器，并最终保持使用Cultured Code的Thing app和谷歌日历（iCal 是不错，但是谷歌日历和我的默认客户端Gmail结合得很好）。如果你了解了下一条规则，你用什么就并不重要了（铅笔或是钢笔都是可以的）。\n\n9. 规则强于工具。你需要纪律，这对我来说意味着两件事：我每天早晨做得第一件事是计划我的一天，并且我每天都写一个简短的工作日志。这有助于帮助我保持清醒，有良好的优先级排序，去掉无用的任务，并且做有意义的事情。这节约了我很多时间。\n\n10. 番茄计时器，这是一个时间盒。在30分钟内只做手头的事情，不做任何其他的事情：没有电话，邮件，不和别人说话，没有社交网站。除了记得在发生火灾时从楼里跑出来外，没有别的了。（[可参见这篇译文《番茄时间管理法：一个番茄是如何让你工作更有效率的》](http://blog.jobbole.com/49688/)）\n\n11. 总是带着耳机。 你没必要在听音乐，但是这会阻碍别人接近你。\n\n12. 邮箱调度和收件箱清零。不要把查邮箱当做你一天里的第一件事，也不要在晚上看它（这件事毁掉了我的很多个晚上），试着一天只查三次：早上十一点，下午两点和下午五点。你的收件箱并不是一个待办事项列表。把它清空：每一封邮件都应该是一个可操作的任务（把它和待办列表连在一起），或是一个参考文献（把它发到Evernote或存档），或是现在就应该删掉。\n\n13. 对手机来说也是一样的。不要总是能被联系到，我总是把手机静音，并分批回电话。\n\n14. 把小事情分批，比如邮件，电话，或是facebook等等。\n\n15. MI3，最重要的三件事（或是改成一件必做的，3件应该做的，或是五件可以做的）。早晨开始做最重要的一件事。\n\n16. 意志力是有限的。不要认为在你遇到麻烦的时候意志力会帮你。把最重要的事情放在早晨做，并且尽可能地让所有事情自动化（委托，分批等等）。美国总统不需要每天选择他们的菜单和衣服颜色，否则他们的意志力会在晚些他们需要按下（或不按）红色按钮时耗尽。\n\n17. 最有驱使力的事情。总是问问自己，你现在能做的最有驱使力的事情是什么，然后应用规则14。\n\n18. 经常推出新产品。不要过分地润色它。就像他们在创业公司圈所说的，“如果你不因你的产品感到难堪，你已经推出得太晚了。”\n\n19. 压力会带来奇迹。使用奖励或是社会承诺。我们最近在新的葡萄柚网站上实施了这一点。之前的那个网站投入使用花了两年半的时间，而新的这个只花了两天半，我们用了一个周末进行编程马拉松（外加周一）。\n\n20. 有计划的拖延。你的大脑需要休息，并且有时候新一期的绿箭侠可以比最好的TED演讲创造更大的奇迹。\n\n21. 删除，说不，忽略，不要坚守日程表。我喜欢最后一点，它来自于马克·安德森，因为这样可以让他立即见任何他想见的人。这样很多人会恨你，但是你有时间做相关的事情。你认为你会在20年后后悔这样做吗？或是为了一些人做一些你不在意的事情，只是为了表面上的赞赏。\n\n22. 假装无能。这是一个应用之前规矩的很有策略的方法。\n\n这次就到这里，我的拖沓休息结束了，我要回去工作了。\n\n---\n\n###笔者补充：\n\n[番茄时间管理法](http://blog.jobbole.com/49688/)的确是很好的而且很高效的管理时间的方法，这是一种极好的帮助你集中注意力、获得更高工作效率的方法，特此推荐大家使用。\n\n（end）","source":"_posts/201410/2014-10-30-how_to_manage_our_time.md","raw":"---\nlayout : post\ntitle : 如何高效管理我们的时间\ncategory : 随笔\ntags : Essay\n---\n不知道大家有没有发现，有时候一天过去了却发现自己好像什么都没干。不要虚伪，我相信每个人都会碰到这种情况的，所以不要说在你身上没有发生过。说到底，原因是我们没有充分以及高效的利用好我们时间，总被各种繁琐的事情所打扰。\n\n下面转载自[伯乐博客的一篇文章](http://blog.jobbole.com/78755/)，笔者个人觉得写的挺好，可以很好的解决上述问题，因此转载过来与大家分享，同时勉励自己,还要感谢文章的原创作者。\n\n<!--more-->\n\n【伯乐在线注】：这个问题来自 Quora，下面是来自 Marius Ursache 的最佳回复，目前有 6400+ 赞。\n\n我一直在测试和调整各种生产效率的技术，在过去的五年中，阅读了大量的书籍（其中大多数是重复的） ，这里是我的一些结论：\n\n这不是一个关于时间的问题，而是关于精力。\n\n为了“有效率”，我们试图在一个工作日内塞进尽可能多的小时，但最终一切都更多地取决于你的注意力，积极性和良好状态（这些都是直接与精力等级联系在一起）而不是工作时间 。\n\n我最近在葡萄柚的一个内部演示上提及了我提高效率的想法，结果性的演示是在Slideshare上的：[producitivity porn](http://www.slideshare.net/mariusursache/productivity-porn).\n\n其中一些关键结论：\n\n1. 决定什么是重要的事，因为在5年之内，你现在做的80%的事情都不会有任何结果。那只是无用功，没有有用的结果。\n\n2. 睡眠，饮食和运动可以让你的成果提高到三倍，因为他们可以帮助你增强你的注意力，动力和精力水平。\n\n3. 两分钟法则：如果你可以在两分钟内做完一件事（比如回复邮件或是一个家务），那就现在做。计划着一会儿完成它，记着它，并在未来完成它会花费五分钟甚至更多的时间。\n\n4. 五分钟法则：治疗拖延症最好的办法不是定目标去完成一个可怕的大任务，而是只在那件事上花五分钟。你会发现在大多数情况下，它在超出五分钟的时候依旧很顺利，因为你进入了平坦期。\n\n5. Seinfeld生产链：如果你想做好一件事，那就每天去做。包括圣诞节，复活节和审判日。没有例外。\n\n6. 微小的生活习惯：与五分钟法则高度结合起来，你可以很快地形成好习惯。这个很有用，我测试过的。\n\n7. 你的记忆力烂透了。 即使你是一个天才也要把每件事都从你的脑子里清出来。把他们写在一个笔记本上，放进待办事项列表的应用程序里，记在手机里，或是告诉Siri，我不在意你使用的方法。\n\n8. 尽量少使用工具。我曾经测试过大多数代办事件管理器，并最终保持使用Cultured Code的Thing app和谷歌日历（iCal 是不错，但是谷歌日历和我的默认客户端Gmail结合得很好）。如果你了解了下一条规则，你用什么就并不重要了（铅笔或是钢笔都是可以的）。\n\n9. 规则强于工具。你需要纪律，这对我来说意味着两件事：我每天早晨做得第一件事是计划我的一天，并且我每天都写一个简短的工作日志。这有助于帮助我保持清醒，有良好的优先级排序，去掉无用的任务，并且做有意义的事情。这节约了我很多时间。\n\n10. 番茄计时器，这是一个时间盒。在30分钟内只做手头的事情，不做任何其他的事情：没有电话，邮件，不和别人说话，没有社交网站。除了记得在发生火灾时从楼里跑出来外，没有别的了。（[可参见这篇译文《番茄时间管理法：一个番茄是如何让你工作更有效率的》](http://blog.jobbole.com/49688/)）\n\n11. 总是带着耳机。 你没必要在听音乐，但是这会阻碍别人接近你。\n\n12. 邮箱调度和收件箱清零。不要把查邮箱当做你一天里的第一件事，也不要在晚上看它（这件事毁掉了我的很多个晚上），试着一天只查三次：早上十一点，下午两点和下午五点。你的收件箱并不是一个待办事项列表。把它清空：每一封邮件都应该是一个可操作的任务（把它和待办列表连在一起），或是一个参考文献（把它发到Evernote或存档），或是现在就应该删掉。\n\n13. 对手机来说也是一样的。不要总是能被联系到，我总是把手机静音，并分批回电话。\n\n14. 把小事情分批，比如邮件，电话，或是facebook等等。\n\n15. MI3，最重要的三件事（或是改成一件必做的，3件应该做的，或是五件可以做的）。早晨开始做最重要的一件事。\n\n16. 意志力是有限的。不要认为在你遇到麻烦的时候意志力会帮你。把最重要的事情放在早晨做，并且尽可能地让所有事情自动化（委托，分批等等）。美国总统不需要每天选择他们的菜单和衣服颜色，否则他们的意志力会在晚些他们需要按下（或不按）红色按钮时耗尽。\n\n17. 最有驱使力的事情。总是问问自己，你现在能做的最有驱使力的事情是什么，然后应用规则14。\n\n18. 经常推出新产品。不要过分地润色它。就像他们在创业公司圈所说的，“如果你不因你的产品感到难堪，你已经推出得太晚了。”\n\n19. 压力会带来奇迹。使用奖励或是社会承诺。我们最近在新的葡萄柚网站上实施了这一点。之前的那个网站投入使用花了两年半的时间，而新的这个只花了两天半，我们用了一个周末进行编程马拉松（外加周一）。\n\n20. 有计划的拖延。你的大脑需要休息，并且有时候新一期的绿箭侠可以比最好的TED演讲创造更大的奇迹。\n\n21. 删除，说不，忽略，不要坚守日程表。我喜欢最后一点，它来自于马克·安德森，因为这样可以让他立即见任何他想见的人。这样很多人会恨你，但是你有时间做相关的事情。你认为你会在20年后后悔这样做吗？或是为了一些人做一些你不在意的事情，只是为了表面上的赞赏。\n\n22. 假装无能。这是一个应用之前规矩的很有策略的方法。\n\n这次就到这里，我的拖沓休息结束了，我要回去工作了。\n\n---\n\n###笔者补充：\n\n[番茄时间管理法](http://blog.jobbole.com/49688/)的确是很好的而且很高效的管理时间的方法，这是一种极好的帮助你集中注意力、获得更高工作效率的方法，特此推荐大家使用。\n\n（end）","slug":"201410-2014-10-30-how-to-manage-our-time","published":1,"date":"2018-04-12T15:20:38.829Z","updated":"2018-04-12T15:20:38.830Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6l005lass6tx7b79mr","content":"<p>不知道大家有没有发现，有时候一天过去了却发现自己好像什么都没干。不要虚伪，我相信每个人都会碰到这种情况的，所以不要说在你身上没有发生过。说到底，原因是我们没有充分以及高效的利用好我们时间，总被各种繁琐的事情所打扰。</p>\n<p>下面转载自<a href=\"http://blog.jobbole.com/78755/\" target=\"_blank\" rel=\"noopener\">伯乐博客的一篇文章</a>，笔者个人觉得写的挺好，可以很好的解决上述问题，因此转载过来与大家分享，同时勉励自己,还要感谢文章的原创作者。</p>\n<a id=\"more\"></a>\n<p>【伯乐在线注】：这个问题来自 Quora，下面是来自 Marius Ursache 的最佳回复，目前有 6400+ 赞。</p>\n<p>我一直在测试和调整各种生产效率的技术，在过去的五年中，阅读了大量的书籍（其中大多数是重复的） ，这里是我的一些结论：</p>\n<p>这不是一个关于时间的问题，而是关于精力。</p>\n<p>为了“有效率”，我们试图在一个工作日内塞进尽可能多的小时，但最终一切都更多地取决于你的注意力，积极性和良好状态（这些都是直接与精力等级联系在一起）而不是工作时间 。</p>\n<p>我最近在葡萄柚的一个内部演示上提及了我提高效率的想法，结果性的演示是在Slideshare上的：<a href=\"http://www.slideshare.net/mariusursache/productivity-porn\" target=\"_blank\" rel=\"noopener\">producitivity porn</a>.</p>\n<p>其中一些关键结论：</p>\n<ol>\n<li><p>决定什么是重要的事，因为在5年之内，你现在做的80%的事情都不会有任何结果。那只是无用功，没有有用的结果。</p>\n</li>\n<li><p>睡眠，饮食和运动可以让你的成果提高到三倍，因为他们可以帮助你增强你的注意力，动力和精力水平。</p>\n</li>\n<li><p>两分钟法则：如果你可以在两分钟内做完一件事（比如回复邮件或是一个家务），那就现在做。计划着一会儿完成它，记着它，并在未来完成它会花费五分钟甚至更多的时间。</p>\n</li>\n<li><p>五分钟法则：治疗拖延症最好的办法不是定目标去完成一个可怕的大任务，而是只在那件事上花五分钟。你会发现在大多数情况下，它在超出五分钟的时候依旧很顺利，因为你进入了平坦期。</p>\n</li>\n<li><p>Seinfeld生产链：如果你想做好一件事，那就每天去做。包括圣诞节，复活节和审判日。没有例外。</p>\n</li>\n<li><p>微小的生活习惯：与五分钟法则高度结合起来，你可以很快地形成好习惯。这个很有用，我测试过的。</p>\n</li>\n<li><p>你的记忆力烂透了。 即使你是一个天才也要把每件事都从你的脑子里清出来。把他们写在一个笔记本上，放进待办事项列表的应用程序里，记在手机里，或是告诉Siri，我不在意你使用的方法。</p>\n</li>\n<li><p>尽量少使用工具。我曾经测试过大多数代办事件管理器，并最终保持使用Cultured Code的Thing app和谷歌日历（iCal 是不错，但是谷歌日历和我的默认客户端Gmail结合得很好）。如果你了解了下一条规则，你用什么就并不重要了（铅笔或是钢笔都是可以的）。</p>\n</li>\n<li><p>规则强于工具。你需要纪律，这对我来说意味着两件事：我每天早晨做得第一件事是计划我的一天，并且我每天都写一个简短的工作日志。这有助于帮助我保持清醒，有良好的优先级排序，去掉无用的任务，并且做有意义的事情。这节约了我很多时间。</p>\n</li>\n<li><p>番茄计时器，这是一个时间盒。在30分钟内只做手头的事情，不做任何其他的事情：没有电话，邮件，不和别人说话，没有社交网站。除了记得在发生火灾时从楼里跑出来外，没有别的了。（<a href=\"http://blog.jobbole.com/49688/\" target=\"_blank\" rel=\"noopener\">可参见这篇译文《番茄时间管理法：一个番茄是如何让你工作更有效率的》</a>）</p>\n</li>\n<li><p>总是带着耳机。 你没必要在听音乐，但是这会阻碍别人接近你。</p>\n</li>\n<li><p>邮箱调度和收件箱清零。不要把查邮箱当做你一天里的第一件事，也不要在晚上看它（这件事毁掉了我的很多个晚上），试着一天只查三次：早上十一点，下午两点和下午五点。你的收件箱并不是一个待办事项列表。把它清空：每一封邮件都应该是一个可操作的任务（把它和待办列表连在一起），或是一个参考文献（把它发到Evernote或存档），或是现在就应该删掉。</p>\n</li>\n<li><p>对手机来说也是一样的。不要总是能被联系到，我总是把手机静音，并分批回电话。</p>\n</li>\n<li><p>把小事情分批，比如邮件，电话，或是facebook等等。</p>\n</li>\n<li><p>MI3，最重要的三件事（或是改成一件必做的，3件应该做的，或是五件可以做的）。早晨开始做最重要的一件事。</p>\n</li>\n<li><p>意志力是有限的。不要认为在你遇到麻烦的时候意志力会帮你。把最重要的事情放在早晨做，并且尽可能地让所有事情自动化（委托，分批等等）。美国总统不需要每天选择他们的菜单和衣服颜色，否则他们的意志力会在晚些他们需要按下（或不按）红色按钮时耗尽。</p>\n</li>\n<li><p>最有驱使力的事情。总是问问自己，你现在能做的最有驱使力的事情是什么，然后应用规则14。</p>\n</li>\n<li><p>经常推出新产品。不要过分地润色它。就像他们在创业公司圈所说的，“如果你不因你的产品感到难堪，你已经推出得太晚了。”</p>\n</li>\n<li><p>压力会带来奇迹。使用奖励或是社会承诺。我们最近在新的葡萄柚网站上实施了这一点。之前的那个网站投入使用花了两年半的时间，而新的这个只花了两天半，我们用了一个周末进行编程马拉松（外加周一）。</p>\n</li>\n<li><p>有计划的拖延。你的大脑需要休息，并且有时候新一期的绿箭侠可以比最好的TED演讲创造更大的奇迹。</p>\n</li>\n<li><p>删除，说不，忽略，不要坚守日程表。我喜欢最后一点，它来自于马克·安德森，因为这样可以让他立即见任何他想见的人。这样很多人会恨你，但是你有时间做相关的事情。你认为你会在20年后后悔这样做吗？或是为了一些人做一些你不在意的事情，只是为了表面上的赞赏。</p>\n</li>\n<li><p>假装无能。这是一个应用之前规矩的很有策略的方法。</p>\n</li>\n</ol>\n<p>这次就到这里，我的拖沓休息结束了，我要回去工作了。</p>\n<hr>\n<p>###笔者补充：</p>\n<p><a href=\"http://blog.jobbole.com/49688/\" target=\"_blank\" rel=\"noopener\">番茄时间管理法</a>的确是很好的而且很高效的管理时间的方法，这是一种极好的帮助你集中注意力、获得更高工作效率的方法，特此推荐大家使用。</p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>不知道大家有没有发现，有时候一天过去了却发现自己好像什么都没干。不要虚伪，我相信每个人都会碰到这种情况的，所以不要说在你身上没有发生过。说到底，原因是我们没有充分以及高效的利用好我们时间，总被各种繁琐的事情所打扰。</p>\n<p>下面转载自<a href=\"http://blog.jobbole.com/78755/\" target=\"_blank\" rel=\"noopener\">伯乐博客的一篇文章</a>，笔者个人觉得写的挺好，可以很好的解决上述问题，因此转载过来与大家分享，同时勉励自己,还要感谢文章的原创作者。</p>","more":"<p>【伯乐在线注】：这个问题来自 Quora，下面是来自 Marius Ursache 的最佳回复，目前有 6400+ 赞。</p>\n<p>我一直在测试和调整各种生产效率的技术，在过去的五年中，阅读了大量的书籍（其中大多数是重复的） ，这里是我的一些结论：</p>\n<p>这不是一个关于时间的问题，而是关于精力。</p>\n<p>为了“有效率”，我们试图在一个工作日内塞进尽可能多的小时，但最终一切都更多地取决于你的注意力，积极性和良好状态（这些都是直接与精力等级联系在一起）而不是工作时间 。</p>\n<p>我最近在葡萄柚的一个内部演示上提及了我提高效率的想法，结果性的演示是在Slideshare上的：<a href=\"http://www.slideshare.net/mariusursache/productivity-porn\" target=\"_blank\" rel=\"noopener\">producitivity porn</a>.</p>\n<p>其中一些关键结论：</p>\n<ol>\n<li><p>决定什么是重要的事，因为在5年之内，你现在做的80%的事情都不会有任何结果。那只是无用功，没有有用的结果。</p>\n</li>\n<li><p>睡眠，饮食和运动可以让你的成果提高到三倍，因为他们可以帮助你增强你的注意力，动力和精力水平。</p>\n</li>\n<li><p>两分钟法则：如果你可以在两分钟内做完一件事（比如回复邮件或是一个家务），那就现在做。计划着一会儿完成它，记着它，并在未来完成它会花费五分钟甚至更多的时间。</p>\n</li>\n<li><p>五分钟法则：治疗拖延症最好的办法不是定目标去完成一个可怕的大任务，而是只在那件事上花五分钟。你会发现在大多数情况下，它在超出五分钟的时候依旧很顺利，因为你进入了平坦期。</p>\n</li>\n<li><p>Seinfeld生产链：如果你想做好一件事，那就每天去做。包括圣诞节，复活节和审判日。没有例外。</p>\n</li>\n<li><p>微小的生活习惯：与五分钟法则高度结合起来，你可以很快地形成好习惯。这个很有用，我测试过的。</p>\n</li>\n<li><p>你的记忆力烂透了。 即使你是一个天才也要把每件事都从你的脑子里清出来。把他们写在一个笔记本上，放进待办事项列表的应用程序里，记在手机里，或是告诉Siri，我不在意你使用的方法。</p>\n</li>\n<li><p>尽量少使用工具。我曾经测试过大多数代办事件管理器，并最终保持使用Cultured Code的Thing app和谷歌日历（iCal 是不错，但是谷歌日历和我的默认客户端Gmail结合得很好）。如果你了解了下一条规则，你用什么就并不重要了（铅笔或是钢笔都是可以的）。</p>\n</li>\n<li><p>规则强于工具。你需要纪律，这对我来说意味着两件事：我每天早晨做得第一件事是计划我的一天，并且我每天都写一个简短的工作日志。这有助于帮助我保持清醒，有良好的优先级排序，去掉无用的任务，并且做有意义的事情。这节约了我很多时间。</p>\n</li>\n<li><p>番茄计时器，这是一个时间盒。在30分钟内只做手头的事情，不做任何其他的事情：没有电话，邮件，不和别人说话，没有社交网站。除了记得在发生火灾时从楼里跑出来外，没有别的了。（<a href=\"http://blog.jobbole.com/49688/\" target=\"_blank\" rel=\"noopener\">可参见这篇译文《番茄时间管理法：一个番茄是如何让你工作更有效率的》</a>）</p>\n</li>\n<li><p>总是带着耳机。 你没必要在听音乐，但是这会阻碍别人接近你。</p>\n</li>\n<li><p>邮箱调度和收件箱清零。不要把查邮箱当做你一天里的第一件事，也不要在晚上看它（这件事毁掉了我的很多个晚上），试着一天只查三次：早上十一点，下午两点和下午五点。你的收件箱并不是一个待办事项列表。把它清空：每一封邮件都应该是一个可操作的任务（把它和待办列表连在一起），或是一个参考文献（把它发到Evernote或存档），或是现在就应该删掉。</p>\n</li>\n<li><p>对手机来说也是一样的。不要总是能被联系到，我总是把手机静音，并分批回电话。</p>\n</li>\n<li><p>把小事情分批，比如邮件，电话，或是facebook等等。</p>\n</li>\n<li><p>MI3，最重要的三件事（或是改成一件必做的，3件应该做的，或是五件可以做的）。早晨开始做最重要的一件事。</p>\n</li>\n<li><p>意志力是有限的。不要认为在你遇到麻烦的时候意志力会帮你。把最重要的事情放在早晨做，并且尽可能地让所有事情自动化（委托，分批等等）。美国总统不需要每天选择他们的菜单和衣服颜色，否则他们的意志力会在晚些他们需要按下（或不按）红色按钮时耗尽。</p>\n</li>\n<li><p>最有驱使力的事情。总是问问自己，你现在能做的最有驱使力的事情是什么，然后应用规则14。</p>\n</li>\n<li><p>经常推出新产品。不要过分地润色它。就像他们在创业公司圈所说的，“如果你不因你的产品感到难堪，你已经推出得太晚了。”</p>\n</li>\n<li><p>压力会带来奇迹。使用奖励或是社会承诺。我们最近在新的葡萄柚网站上实施了这一点。之前的那个网站投入使用花了两年半的时间，而新的这个只花了两天半，我们用了一个周末进行编程马拉松（外加周一）。</p>\n</li>\n<li><p>有计划的拖延。你的大脑需要休息，并且有时候新一期的绿箭侠可以比最好的TED演讲创造更大的奇迹。</p>\n</li>\n<li><p>删除，说不，忽略，不要坚守日程表。我喜欢最后一点，它来自于马克·安德森，因为这样可以让他立即见任何他想见的人。这样很多人会恨你，但是你有时间做相关的事情。你认为你会在20年后后悔这样做吗？或是为了一些人做一些你不在意的事情，只是为了表面上的赞赏。</p>\n</li>\n<li><p>假装无能。这是一个应用之前规矩的很有策略的方法。</p>\n</li>\n</ol>\n<p>这次就到这里，我的拖沓休息结束了，我要回去工作了。</p>\n<hr>\n<p>###笔者补充：</p>\n<p><a href=\"http://blog.jobbole.com/49688/\" target=\"_blank\" rel=\"noopener\">番茄时间管理法</a>的确是很好的而且很高效的管理时间的方法，这是一种极好的帮助你集中注意力、获得更高工作效率的方法，特此推荐大家使用。</p>\n<p>（end）</p>"},{"layout":"post","title":"初次认识Tmux","_content":"最近，刚接触了命令行神器[Tmux](http://baike.baidu.com/view/9065064.htm?fr=aladdin),然后瞬间被她的神奇所吸引，真是相见很晚啊！！\n\nTmux是一个优秀的终端复用软件，使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机；当然其功能远不止于此。\n\n当我们在使用Tmux时，即使非正常掉线，也能保证当前的任务运行，这一点对于远程SSH访问特别有用，网络不好的情况下仍然能保证工作现场不丢失!此外，tmux完全使用键盘控制窗口，实现窗口的切换功能。\n\n<!--more-->\n\n由于刚接触Tmux，还不是特别熟悉，先来截个图炫耀下，哈哈：\n\n![](../../images/201411/2014-11-29_141142.jpg)\n\n下面，我们就先来安装下一定会让你钟情的Tmux。\n\nCentOS官方软件源中没有tmux，如果不想使用EPEL源或者其他第三方源，就要自己编译安装。tmux依赖于ncurses-devel和libevent-devel，我们使用yum安装来解决依赖：\n\n\tyum -y install ncurses-devel\n\tyum -y install libevent-devel\n\n然后，开始安装Tmux：\n\n\twget http://downloads.sourceforge.net/tmux/tmux-1.9a.tar.gz\n\ttar -zxvf tmux-1.9a.tar.gz\n\tcd tmux-1.9a\n\t./configure --prefix=/usr/local/tmux/\n\tmake\n\tmake install\n\n至此，我们Tmux就安装好了，然后把路径添加到PATH环境变量中：\n\n\tvim ~/.bashrc\n\tPATH=${PATH}:/usr/local/tmux/bin/\n\tsource ~/.bashrc\n\n安装完成后输入命令tmux即可打开软件，界面十分简单，类似一个下方带有状态栏的终端控制台；但根据tmux的定义，在开启了tmux服务器后，会首先创建一个会话，而这个会话则会首先创建一个窗口，其中仅包含一个面板；也就是说，这里看到的所谓终端控制台应该称作tmux的一个面板，虽然其使用方法与终端控制台完全相同。\n\n##单元模块\n\n**tmux使用C/S模型构建，主要包括以下单元模块：**\n\n>* server 服务器。输入tmux命令时就开启了一个服务器。\n>* session 会话。一个服务器可以包含多个会话。\n>* window 窗口。一个会话可以包含多个窗口。\n>* panel 面板。一个窗口可以包含多个面板。\n\n\n不出意外，这时候你会跟我第一次一样，觉得tmux没什么牛逼的，没关系，后面我会慢慢更新博客，详细介绍Tmux的强大之处，你们做好拭目以待了吗？哈哈。。。","source":"_posts/201411/2014-11-29-hello_tmux_note.md","raw":"---\nlayout : post\ntitle : 初次认识Tmux\ncategory : Tmux\ntags : tmux\n---\n最近，刚接触了命令行神器[Tmux](http://baike.baidu.com/view/9065064.htm?fr=aladdin),然后瞬间被她的神奇所吸引，真是相见很晚啊！！\n\nTmux是一个优秀的终端复用软件，使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机；当然其功能远不止于此。\n\n当我们在使用Tmux时，即使非正常掉线，也能保证当前的任务运行，这一点对于远程SSH访问特别有用，网络不好的情况下仍然能保证工作现场不丢失!此外，tmux完全使用键盘控制窗口，实现窗口的切换功能。\n\n<!--more-->\n\n由于刚接触Tmux，还不是特别熟悉，先来截个图炫耀下，哈哈：\n\n![](../../images/201411/2014-11-29_141142.jpg)\n\n下面，我们就先来安装下一定会让你钟情的Tmux。\n\nCentOS官方软件源中没有tmux，如果不想使用EPEL源或者其他第三方源，就要自己编译安装。tmux依赖于ncurses-devel和libevent-devel，我们使用yum安装来解决依赖：\n\n\tyum -y install ncurses-devel\n\tyum -y install libevent-devel\n\n然后，开始安装Tmux：\n\n\twget http://downloads.sourceforge.net/tmux/tmux-1.9a.tar.gz\n\ttar -zxvf tmux-1.9a.tar.gz\n\tcd tmux-1.9a\n\t./configure --prefix=/usr/local/tmux/\n\tmake\n\tmake install\n\n至此，我们Tmux就安装好了，然后把路径添加到PATH环境变量中：\n\n\tvim ~/.bashrc\n\tPATH=${PATH}:/usr/local/tmux/bin/\n\tsource ~/.bashrc\n\n安装完成后输入命令tmux即可打开软件，界面十分简单，类似一个下方带有状态栏的终端控制台；但根据tmux的定义，在开启了tmux服务器后，会首先创建一个会话，而这个会话则会首先创建一个窗口，其中仅包含一个面板；也就是说，这里看到的所谓终端控制台应该称作tmux的一个面板，虽然其使用方法与终端控制台完全相同。\n\n##单元模块\n\n**tmux使用C/S模型构建，主要包括以下单元模块：**\n\n>* server 服务器。输入tmux命令时就开启了一个服务器。\n>* session 会话。一个服务器可以包含多个会话。\n>* window 窗口。一个会话可以包含多个窗口。\n>* panel 面板。一个窗口可以包含多个面板。\n\n\n不出意外，这时候你会跟我第一次一样，觉得tmux没什么牛逼的，没关系，后面我会慢慢更新博客，详细介绍Tmux的强大之处，你们做好拭目以待了吗？哈哈。。。","slug":"201411-2014-11-29-hello-tmux-note","published":1,"date":"2018-04-12T15:20:38.830Z","updated":"2018-04-12T15:20:38.830Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6n005oass6cgfe3bjl","content":"<p>最近，刚接触了命令行神器<a href=\"http://baike.baidu.com/view/9065064.htm?fr=aladdin\" target=\"_blank\" rel=\"noopener\">Tmux</a>,然后瞬间被她的神奇所吸引，真是相见很晚啊！！</p>\n<p>Tmux是一个优秀的终端复用软件，使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机；当然其功能远不止于此。</p>\n<p>当我们在使用Tmux时，即使非正常掉线，也能保证当前的任务运行，这一点对于远程SSH访问特别有用，网络不好的情况下仍然能保证工作现场不丢失!此外，tmux完全使用键盘控制窗口，实现窗口的切换功能。</p>\n<a id=\"more\"></a>\n<p>由于刚接触Tmux，还不是特别熟悉，先来截个图炫耀下，哈哈：</p>\n<p><img src=\"../../images/201411/2014-11-29_141142.jpg\" alt=\"\"></p>\n<p>下面，我们就先来安装下一定会让你钟情的Tmux。</p>\n<p>CentOS官方软件源中没有tmux，如果不想使用EPEL源或者其他第三方源，就要自己编译安装。tmux依赖于ncurses-devel和libevent-devel，我们使用yum安装来解决依赖：</p>\n<pre><code>yum -y install ncurses-devel\nyum -y install libevent-devel\n</code></pre><p>然后，开始安装Tmux：</p>\n<pre><code>wget http://downloads.sourceforge.net/tmux/tmux-1.9a.tar.gz\ntar -zxvf tmux-1.9a.tar.gz\ncd tmux-1.9a\n./configure --prefix=/usr/local/tmux/\nmake\nmake install\n</code></pre><p>至此，我们Tmux就安装好了，然后把路径添加到PATH环境变量中：</p>\n<pre><code>vim ~/.bashrc\nPATH=${PATH}:/usr/local/tmux/bin/\nsource ~/.bashrc\n</code></pre><p>安装完成后输入命令tmux即可打开软件，界面十分简单，类似一个下方带有状态栏的终端控制台；但根据tmux的定义，在开启了tmux服务器后，会首先创建一个会话，而这个会话则会首先创建一个窗口，其中仅包含一个面板；也就是说，这里看到的所谓终端控制台应该称作tmux的一个面板，虽然其使用方法与终端控制台完全相同。</p>\n<p>##单元模块</p>\n<p><strong>tmux使用C/S模型构建，主要包括以下单元模块：</strong></p>\n<blockquote>\n<ul>\n<li>server 服务器。输入tmux命令时就开启了一个服务器。</li>\n<li>session 会话。一个服务器可以包含多个会话。</li>\n<li>window 窗口。一个会话可以包含多个窗口。</li>\n<li>panel 面板。一个窗口可以包含多个面板。</li>\n</ul>\n</blockquote>\n<p>不出意外，这时候你会跟我第一次一样，觉得tmux没什么牛逼的，没关系，后面我会慢慢更新博客，详细介绍Tmux的强大之处，你们做好拭目以待了吗？哈哈。。。</p>\n","site":{"data":{}},"excerpt":"<p>最近，刚接触了命令行神器<a href=\"http://baike.baidu.com/view/9065064.htm?fr=aladdin\" target=\"_blank\" rel=\"noopener\">Tmux</a>,然后瞬间被她的神奇所吸引，真是相见很晚啊！！</p>\n<p>Tmux是一个优秀的终端复用软件，使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机；当然其功能远不止于此。</p>\n<p>当我们在使用Tmux时，即使非正常掉线，也能保证当前的任务运行，这一点对于远程SSH访问特别有用，网络不好的情况下仍然能保证工作现场不丢失!此外，tmux完全使用键盘控制窗口，实现窗口的切换功能。</p>","more":"<p>由于刚接触Tmux，还不是特别熟悉，先来截个图炫耀下，哈哈：</p>\n<p><img src=\"../../images/201411/2014-11-29_141142.jpg\" alt=\"\"></p>\n<p>下面，我们就先来安装下一定会让你钟情的Tmux。</p>\n<p>CentOS官方软件源中没有tmux，如果不想使用EPEL源或者其他第三方源，就要自己编译安装。tmux依赖于ncurses-devel和libevent-devel，我们使用yum安装来解决依赖：</p>\n<pre><code>yum -y install ncurses-devel\nyum -y install libevent-devel\n</code></pre><p>然后，开始安装Tmux：</p>\n<pre><code>wget http://downloads.sourceforge.net/tmux/tmux-1.9a.tar.gz\ntar -zxvf tmux-1.9a.tar.gz\ncd tmux-1.9a\n./configure --prefix=/usr/local/tmux/\nmake\nmake install\n</code></pre><p>至此，我们Tmux就安装好了，然后把路径添加到PATH环境变量中：</p>\n<pre><code>vim ~/.bashrc\nPATH=${PATH}:/usr/local/tmux/bin/\nsource ~/.bashrc\n</code></pre><p>安装完成后输入命令tmux即可打开软件，界面十分简单，类似一个下方带有状态栏的终端控制台；但根据tmux的定义，在开启了tmux服务器后，会首先创建一个会话，而这个会话则会首先创建一个窗口，其中仅包含一个面板；也就是说，这里看到的所谓终端控制台应该称作tmux的一个面板，虽然其使用方法与终端控制台完全相同。</p>\n<p>##单元模块</p>\n<p><strong>tmux使用C/S模型构建，主要包括以下单元模块：</strong></p>\n<blockquote>\n<ul>\n<li>server 服务器。输入tmux命令时就开启了一个服务器。</li>\n<li>session 会话。一个服务器可以包含多个会话。</li>\n<li>window 窗口。一个会话可以包含多个窗口。</li>\n<li>panel 面板。一个窗口可以包含多个面板。</li>\n</ul>\n</blockquote>\n<p>不出意外，这时候你会跟我第一次一样，觉得tmux没什么牛逼的，没关系，后面我会慢慢更新博客，详细介绍Tmux的强大之处，你们做好拭目以待了吗？哈哈。。。</p>"},{"layout":"post","title":"Tmux进阶篇","_content":"今天是12月1日，昨天是今年沈阳下的第一场雪，阴沉沉的天气下了整整一天，虽然不是很大但却是刺骨的冷，由于特么太冷我上午钻进实验室，一天几乎没出去，懒人就是这样。另外就是觉得现在的天气真是扭曲（天气不正常），记得去年沈阳这里下雪很早，连双十一都是踩着雪去取包裹的，今年整整晚了将近一个月，你们懂吧...\n\n好了，闲话少说，进入正题吧。上一篇介绍了Tmux的常用命令和个性配置，切记不要一口吃一个胖子，厚积薄发每天练习一点就可以了。今天来介绍Tmux的进阶，功能更强大的配置，让我们开始吧。\n\n<!--more-->\n\n##复制模式\n\n>* `前缀+[` 进入复制模式\n>* 按`space`开始复制，移动光标选择复制区域\n>* 按`Enter`复制并退出复制模式\n>* 将光标移动到指定位置，按`前缀+]`粘贴\n\n如果把tmux比作vim的话，那么我们大部分时间都是处于编辑模式，我们复制的时候可不可以像 vim一样移动呢？当然可以拉，只需要在配置文件(`~/.tmux.conf`)中加入如下行即可：\n\n\t#copy-mode 将快捷键设置为vi 模式\n\tsetw -g mode-keys vi\n\n然后就可以像使用vim一样操作编辑了，快哉快哉！\n\n##滚屏\n\n滚屏要进入复制模式，即`前缀+[`，然后就可以用上下键来滚动屏幕，**如果配置了vi快捷键模式，就 可以像操作vi一样来滚动屏幕**，非常的方便，退出直接按`q`键即可。\n\n##当前pane最大化\n\n[参考赖明星的博客](http://mingxinglai.com/cn/2012/09/tmux/)\n\n就像vim里的ZommWinPlugin.vim插件一样，你按下某键，当前窗口就最大化了，获得最大可视界面。当目前为止，就还没有发现我有需求而别人没有的，同样，已有前人找到的解决办法，方法如下：\n\n\t# zoom pane <-> window\n\t#http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/examples/tmux-zoom.sh\n\tbind ^z run \"tmux-zoom\"\n\n好了，今天就到这吧。拜~~~\n\n\n\n","source":"_posts/201412/2014-12-01-copy_model_note.md","raw":"---\nlayout : post\ntitle : Tmux进阶篇\ncategory : Tmux\ntags : Tmux\n---\n今天是12月1日，昨天是今年沈阳下的第一场雪，阴沉沉的天气下了整整一天，虽然不是很大但却是刺骨的冷，由于特么太冷我上午钻进实验室，一天几乎没出去，懒人就是这样。另外就是觉得现在的天气真是扭曲（天气不正常），记得去年沈阳这里下雪很早，连双十一都是踩着雪去取包裹的，今年整整晚了将近一个月，你们懂吧...\n\n好了，闲话少说，进入正题吧。上一篇介绍了Tmux的常用命令和个性配置，切记不要一口吃一个胖子，厚积薄发每天练习一点就可以了。今天来介绍Tmux的进阶，功能更强大的配置，让我们开始吧。\n\n<!--more-->\n\n##复制模式\n\n>* `前缀+[` 进入复制模式\n>* 按`space`开始复制，移动光标选择复制区域\n>* 按`Enter`复制并退出复制模式\n>* 将光标移动到指定位置，按`前缀+]`粘贴\n\n如果把tmux比作vim的话，那么我们大部分时间都是处于编辑模式，我们复制的时候可不可以像 vim一样移动呢？当然可以拉，只需要在配置文件(`~/.tmux.conf`)中加入如下行即可：\n\n\t#copy-mode 将快捷键设置为vi 模式\n\tsetw -g mode-keys vi\n\n然后就可以像使用vim一样操作编辑了，快哉快哉！\n\n##滚屏\n\n滚屏要进入复制模式，即`前缀+[`，然后就可以用上下键来滚动屏幕，**如果配置了vi快捷键模式，就 可以像操作vi一样来滚动屏幕**，非常的方便，退出直接按`q`键即可。\n\n##当前pane最大化\n\n[参考赖明星的博客](http://mingxinglai.com/cn/2012/09/tmux/)\n\n就像vim里的ZommWinPlugin.vim插件一样，你按下某键，当前窗口就最大化了，获得最大可视界面。当目前为止，就还没有发现我有需求而别人没有的，同样，已有前人找到的解决办法，方法如下：\n\n\t# zoom pane <-> window\n\t#http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/examples/tmux-zoom.sh\n\tbind ^z run \"tmux-zoom\"\n\n好了，今天就到这吧。拜~~~\n\n\n\n","slug":"201412-2014-12-01-copy-model-note","published":1,"date":"2018-04-12T15:20:38.831Z","updated":"2018-04-12T15:20:38.831Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6o005tass62rol0clq","content":"<p>今天是12月1日，昨天是今年沈阳下的第一场雪，阴沉沉的天气下了整整一天，虽然不是很大但却是刺骨的冷，由于特么太冷我上午钻进实验室，一天几乎没出去，懒人就是这样。另外就是觉得现在的天气真是扭曲（天气不正常），记得去年沈阳这里下雪很早，连双十一都是踩着雪去取包裹的，今年整整晚了将近一个月，你们懂吧…</p>\n<p>好了，闲话少说，进入正题吧。上一篇介绍了Tmux的常用命令和个性配置，切记不要一口吃一个胖子，厚积薄发每天练习一点就可以了。今天来介绍Tmux的进阶，功能更强大的配置，让我们开始吧。</p>\n<a id=\"more\"></a>\n<p>##复制模式</p>\n<blockquote>\n<ul>\n<li><code>前缀+[</code> 进入复制模式</li>\n<li>按<code>space</code>开始复制，移动光标选择复制区域</li>\n<li>按<code>Enter</code>复制并退出复制模式</li>\n<li>将光标移动到指定位置，按<code>前缀+]</code>粘贴</li>\n</ul>\n</blockquote>\n<p>如果把tmux比作vim的话，那么我们大部分时间都是处于编辑模式，我们复制的时候可不可以像 vim一样移动呢？当然可以拉，只需要在配置文件(<code>~/.tmux.conf</code>)中加入如下行即可：</p>\n<pre><code>#copy-mode 将快捷键设置为vi 模式\nsetw -g mode-keys vi\n</code></pre><p>然后就可以像使用vim一样操作编辑了，快哉快哉！</p>\n<p>##滚屏</p>\n<p>滚屏要进入复制模式，即<code>前缀+[</code>，然后就可以用上下键来滚动屏幕，<strong>如果配置了vi快捷键模式，就 可以像操作vi一样来滚动屏幕</strong>，非常的方便，退出直接按<code>q</code>键即可。</p>\n<p>##当前pane最大化</p>\n<p><a href=\"http://mingxinglai.com/cn/2012/09/tmux/\" target=\"_blank\" rel=\"noopener\">参考赖明星的博客</a></p>\n<p>就像vim里的ZommWinPlugin.vim插件一样，你按下某键，当前窗口就最大化了，获得最大可视界面。当目前为止，就还没有发现我有需求而别人没有的，同样，已有前人找到的解决办法，方法如下：</p>\n<pre><code># zoom pane &lt;-&gt; window\n#http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/examples/tmux-zoom.sh\nbind ^z run &quot;tmux-zoom&quot;\n</code></pre><p>好了，今天就到这吧。拜~~~</p>\n","site":{"data":{}},"excerpt":"<p>今天是12月1日，昨天是今年沈阳下的第一场雪，阴沉沉的天气下了整整一天，虽然不是很大但却是刺骨的冷，由于特么太冷我上午钻进实验室，一天几乎没出去，懒人就是这样。另外就是觉得现在的天气真是扭曲（天气不正常），记得去年沈阳这里下雪很早，连双十一都是踩着雪去取包裹的，今年整整晚了将近一个月，你们懂吧…</p>\n<p>好了，闲话少说，进入正题吧。上一篇介绍了Tmux的常用命令和个性配置，切记不要一口吃一个胖子，厚积薄发每天练习一点就可以了。今天来介绍Tmux的进阶，功能更强大的配置，让我们开始吧。</p>","more":"<p>##复制模式</p>\n<blockquote>\n<ul>\n<li><code>前缀+[</code> 进入复制模式</li>\n<li>按<code>space</code>开始复制，移动光标选择复制区域</li>\n<li>按<code>Enter</code>复制并退出复制模式</li>\n<li>将光标移动到指定位置，按<code>前缀+]</code>粘贴</li>\n</ul>\n</blockquote>\n<p>如果把tmux比作vim的话，那么我们大部分时间都是处于编辑模式，我们复制的时候可不可以像 vim一样移动呢？当然可以拉，只需要在配置文件(<code>~/.tmux.conf</code>)中加入如下行即可：</p>\n<pre><code>#copy-mode 将快捷键设置为vi 模式\nsetw -g mode-keys vi\n</code></pre><p>然后就可以像使用vim一样操作编辑了，快哉快哉！</p>\n<p>##滚屏</p>\n<p>滚屏要进入复制模式，即<code>前缀+[</code>，然后就可以用上下键来滚动屏幕，<strong>如果配置了vi快捷键模式，就 可以像操作vi一样来滚动屏幕</strong>，非常的方便，退出直接按<code>q</code>键即可。</p>\n<p>##当前pane最大化</p>\n<p><a href=\"http://mingxinglai.com/cn/2012/09/tmux/\" target=\"_blank\" rel=\"noopener\">参考赖明星的博客</a></p>\n<p>就像vim里的ZommWinPlugin.vim插件一样，你按下某键，当前窗口就最大化了，获得最大可视界面。当目前为止，就还没有发现我有需求而别人没有的，同样，已有前人找到的解决办法，方法如下：</p>\n<pre><code># zoom pane &lt;-&gt; window\n#http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/examples/tmux-zoom.sh\nbind ^z run &quot;tmux-zoom&quot;\n</code></pre><p>好了，今天就到这吧。拜~~~</p>"},{"layout":"post","title":"配置篇-玩转Tmux","_content":"上一篇，我们已经安装好了我们的威猛先生Tmux神器。既然被称为是神器，肯定是其被人称道的地方，那么现在就来动手亲自配置我们的Tmux，初体验她的酷以及可定制化。\n\n废话不多说，下面开始吧。。。\n\n**常用快捷键**\n\nTmux的任何指令都包含一个前缀，也就是说当你按了前缀（默认Ctrl+b）以后，系统才知道你的命令是发给Tmux来执行的（[你也可以参考这里](http://baike.baidu.com/view/9065064.htm?fr=aladdin)）\n\n<!--more-->\n\n>* C-b ? 显示快捷键帮助\n>* C-b C-o 调换窗口位置，类似与vim 里的C-w\n>* C-b 空格键 采用下一个内置布局\n>* C-b ! 把当前窗口变为新窗口\n>* C-b \" 模向分隔窗口\n>* C-b % 纵向分隔窗口\n>* C-b q 显示分隔窗口的编号\n>* C-b o 跳到下一个分隔窗口\n>* C-b 上下键 上一个及下一个分隔窗口\n>* C-b C-方向键 调整分隔窗口大小\n>* C-b c 创建新窗口\n>* C-b 0~9 选择几号窗口\n>* C-b c 创建新窗口\n>* C-b n 选择下一个窗口\n>* C-b l 切换到最后使用的窗口\n>* C-b p 选择前一个窗口\n>* C-b w 以菜单方式显示及选择窗口\n>* C-b t 显示时钟\n>* C-b ; 切换到最后一个使用的面板\n>* C-b x 关闭面板\n>* C-b & 关闭窗口\n>* C-b s 以菜单方式显示和选择会话\n>* C-b d 退出tumx，并保存当前会话，这时，tmux仍在后台运行，可以通过tmux attach进入 到指定的会话\n\n##开始定制Tmux\n\nTmux的配置文件是 `~/.tmux.conf`，这个文件可能不存在，你可以自己新建。开始配置前，首先，有没有觉得tmux的前缀按起来太不方便了，ctrl与b键隔得太远，很多人把它映射成C+a，也就 是在配置文件(`~/.tmux.conf`)中加入下面这条语句：\n\n\t#设置前缀为Ctrl + x\n\tset -g prefix C-x\n\n于此同时，取消掉默认的前缀按键：\n\n\t#解除Ctrl+b 与前缀的对应关系\n\tunbind C-b\t\n\n配置完以后，重启tmux起效，或者先按C+b，然后输入：，进入命令行模式， 在命令行模式下输入：\n\n\tsource-file ~/.tmux.conf\n\n你也可以在配置文件中加入下面这句话，以后改了只需要按`前缀+r`了。\n\t\n\t#将r 设置为加载配置文件，并显示\"reloaded!\"信息\n\tbind r source-file ~/.tmux.conf \\; display \"Reloaded!\"\n\n很多人都喜欢改成Ctrl+a，不过我个人更喜欢Ctrl+x，如果你是vim用户，你一定懂的。把前缀映射改成Ctrl+x，再加入如下几条语句， 现在切换窗口就和vim一摸一样了，顿时觉得亲切了很多。\n\n\t#up\n\tbind-key k select-pane -U\n\t#down\n\tbind-key j select-pane -D\n\t#left\n\tind-key h select-pane -L\n\t#right\n\tbind-key l select-pane -R\n\n上面的最后一条语句会更改C-x l的功能，我挺喜欢这个功能的，因为我们很时候都是在两个窗 口或这两个面板中切换，所以我又加入如下语句\n\n\t#select last window\n\tbind-key C-l select-window -l\n\n现在我的l键可不能随便按了，`Ctrl+x l`是切换面板，`Ctrl+x Ctrl+l`切换窗口，`Ctrl+l`清屏。\n\n##会话\n\n>* C-x s 以菜单的方式查看并选择会话\n>* C-x :new-session 新建一个会话\n>* C-x d 退出并保存会话\n>* 终端运行 tmux attach 返回会话\n\n##命名会话\n\n\ttmux new -s session\n\ttmux new -s session -d #在后台建立会话\n\ttmux ls #列出会话\n\ttmux attach -t session #进入某个会话\n\n---\n\n好了，今天先练习这么多，看的太多其实也记不住多少的，你说对吧。就像学vim，很多人都是因为听了很多大牛说vim是神器才去学的（vim本来就是神器），但是这些菜鸟想着就是一下子完全掌握vim，唉，你觉得可能吗。vim学习起来难度大、成本也高，但是当我们放下浮躁的心态，每天学一点点vim命令或者操作，然后坚持下去，你说你能学不会？答案肯定是：总有一天会完全掌握的，vim也就那么回事。\n\n其实，这些话也是说给我自己听的，因为最近发现自己有点浮躁的苗头，拒绝浮躁，踏实自我~~~\n\n**参考博客：**\n\n[http://mingxinglai.com/cn/2012/09/tmux/](http://mingxinglai.com/cn/2012/09/tmux/)\n\n","source":"_posts/201411/2014-11-30-happy_tmux_note.md","raw":"---\nlayout : post\ntitle : 配置篇-玩转Tmux\ncategory : Tmux\ntags : tmux\n---\n上一篇，我们已经安装好了我们的威猛先生Tmux神器。既然被称为是神器，肯定是其被人称道的地方，那么现在就来动手亲自配置我们的Tmux，初体验她的酷以及可定制化。\n\n废话不多说，下面开始吧。。。\n\n**常用快捷键**\n\nTmux的任何指令都包含一个前缀，也就是说当你按了前缀（默认Ctrl+b）以后，系统才知道你的命令是发给Tmux来执行的（[你也可以参考这里](http://baike.baidu.com/view/9065064.htm?fr=aladdin)）\n\n<!--more-->\n\n>* C-b ? 显示快捷键帮助\n>* C-b C-o 调换窗口位置，类似与vim 里的C-w\n>* C-b 空格键 采用下一个内置布局\n>* C-b ! 把当前窗口变为新窗口\n>* C-b \" 模向分隔窗口\n>* C-b % 纵向分隔窗口\n>* C-b q 显示分隔窗口的编号\n>* C-b o 跳到下一个分隔窗口\n>* C-b 上下键 上一个及下一个分隔窗口\n>* C-b C-方向键 调整分隔窗口大小\n>* C-b c 创建新窗口\n>* C-b 0~9 选择几号窗口\n>* C-b c 创建新窗口\n>* C-b n 选择下一个窗口\n>* C-b l 切换到最后使用的窗口\n>* C-b p 选择前一个窗口\n>* C-b w 以菜单方式显示及选择窗口\n>* C-b t 显示时钟\n>* C-b ; 切换到最后一个使用的面板\n>* C-b x 关闭面板\n>* C-b & 关闭窗口\n>* C-b s 以菜单方式显示和选择会话\n>* C-b d 退出tumx，并保存当前会话，这时，tmux仍在后台运行，可以通过tmux attach进入 到指定的会话\n\n##开始定制Tmux\n\nTmux的配置文件是 `~/.tmux.conf`，这个文件可能不存在，你可以自己新建。开始配置前，首先，有没有觉得tmux的前缀按起来太不方便了，ctrl与b键隔得太远，很多人把它映射成C+a，也就 是在配置文件(`~/.tmux.conf`)中加入下面这条语句：\n\n\t#设置前缀为Ctrl + x\n\tset -g prefix C-x\n\n于此同时，取消掉默认的前缀按键：\n\n\t#解除Ctrl+b 与前缀的对应关系\n\tunbind C-b\t\n\n配置完以后，重启tmux起效，或者先按C+b，然后输入：，进入命令行模式， 在命令行模式下输入：\n\n\tsource-file ~/.tmux.conf\n\n你也可以在配置文件中加入下面这句话，以后改了只需要按`前缀+r`了。\n\t\n\t#将r 设置为加载配置文件，并显示\"reloaded!\"信息\n\tbind r source-file ~/.tmux.conf \\; display \"Reloaded!\"\n\n很多人都喜欢改成Ctrl+a，不过我个人更喜欢Ctrl+x，如果你是vim用户，你一定懂的。把前缀映射改成Ctrl+x，再加入如下几条语句， 现在切换窗口就和vim一摸一样了，顿时觉得亲切了很多。\n\n\t#up\n\tbind-key k select-pane -U\n\t#down\n\tbind-key j select-pane -D\n\t#left\n\tind-key h select-pane -L\n\t#right\n\tbind-key l select-pane -R\n\n上面的最后一条语句会更改C-x l的功能，我挺喜欢这个功能的，因为我们很时候都是在两个窗 口或这两个面板中切换，所以我又加入如下语句\n\n\t#select last window\n\tbind-key C-l select-window -l\n\n现在我的l键可不能随便按了，`Ctrl+x l`是切换面板，`Ctrl+x Ctrl+l`切换窗口，`Ctrl+l`清屏。\n\n##会话\n\n>* C-x s 以菜单的方式查看并选择会话\n>* C-x :new-session 新建一个会话\n>* C-x d 退出并保存会话\n>* 终端运行 tmux attach 返回会话\n\n##命名会话\n\n\ttmux new -s session\n\ttmux new -s session -d #在后台建立会话\n\ttmux ls #列出会话\n\ttmux attach -t session #进入某个会话\n\n---\n\n好了，今天先练习这么多，看的太多其实也记不住多少的，你说对吧。就像学vim，很多人都是因为听了很多大牛说vim是神器才去学的（vim本来就是神器），但是这些菜鸟想着就是一下子完全掌握vim，唉，你觉得可能吗。vim学习起来难度大、成本也高，但是当我们放下浮躁的心态，每天学一点点vim命令或者操作，然后坚持下去，你说你能学不会？答案肯定是：总有一天会完全掌握的，vim也就那么回事。\n\n其实，这些话也是说给我自己听的，因为最近发现自己有点浮躁的苗头，拒绝浮躁，踏实自我~~~\n\n**参考博客：**\n\n[http://mingxinglai.com/cn/2012/09/tmux/](http://mingxinglai.com/cn/2012/09/tmux/)\n\n","slug":"201411-2014-11-30-happy-tmux-note","published":1,"date":"2018-04-12T15:20:38.831Z","updated":"2018-04-12T15:20:38.831Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6q005wass6i95tw6uy","content":"<p>上一篇，我们已经安装好了我们的威猛先生Tmux神器。既然被称为是神器，肯定是其被人称道的地方，那么现在就来动手亲自配置我们的Tmux，初体验她的酷以及可定制化。</p>\n<p>废话不多说，下面开始吧。。。</p>\n<p><strong>常用快捷键</strong></p>\n<p>Tmux的任何指令都包含一个前缀，也就是说当你按了前缀（默认Ctrl+b）以后，系统才知道你的命令是发给Tmux来执行的（<a href=\"http://baike.baidu.com/view/9065064.htm?fr=aladdin\" target=\"_blank\" rel=\"noopener\">你也可以参考这里</a>）</p>\n<a id=\"more\"></a>\n<blockquote>\n<ul>\n<li>C-b ? 显示快捷键帮助</li>\n<li>C-b C-o 调换窗口位置，类似与vim 里的C-w</li>\n<li>C-b 空格键 采用下一个内置布局</li>\n<li>C-b ! 把当前窗口变为新窗口</li>\n<li>C-b “ 模向分隔窗口</li>\n<li>C-b % 纵向分隔窗口</li>\n<li>C-b q 显示分隔窗口的编号</li>\n<li>C-b o 跳到下一个分隔窗口</li>\n<li>C-b 上下键 上一个及下一个分隔窗口</li>\n<li>C-b C-方向键 调整分隔窗口大小</li>\n<li>C-b c 创建新窗口</li>\n<li>C-b 0~9 选择几号窗口</li>\n<li>C-b c 创建新窗口</li>\n<li>C-b n 选择下一个窗口</li>\n<li>C-b l 切换到最后使用的窗口</li>\n<li>C-b p 选择前一个窗口</li>\n<li>C-b w 以菜单方式显示及选择窗口</li>\n<li>C-b t 显示时钟</li>\n<li>C-b ; 切换到最后一个使用的面板</li>\n<li>C-b x 关闭面板</li>\n<li>C-b &amp; 关闭窗口</li>\n<li>C-b s 以菜单方式显示和选择会话</li>\n<li>C-b d 退出tumx，并保存当前会话，这时，tmux仍在后台运行，可以通过tmux attach进入 到指定的会话</li>\n</ul>\n</blockquote>\n<p>##开始定制Tmux</p>\n<p>Tmux的配置文件是 <code>~/.tmux.conf</code>，这个文件可能不存在，你可以自己新建。开始配置前，首先，有没有觉得tmux的前缀按起来太不方便了，ctrl与b键隔得太远，很多人把它映射成C+a，也就 是在配置文件(<code>~/.tmux.conf</code>)中加入下面这条语句：</p>\n<pre><code>#设置前缀为Ctrl + x\nset -g prefix C-x\n</code></pre><p>于此同时，取消掉默认的前缀按键：</p>\n<pre><code>#解除Ctrl+b 与前缀的对应关系\nunbind C-b    \n</code></pre><p>配置完以后，重启tmux起效，或者先按C+b，然后输入：，进入命令行模式， 在命令行模式下输入：</p>\n<pre><code>source-file ~/.tmux.conf\n</code></pre><p>你也可以在配置文件中加入下面这句话，以后改了只需要按<code>前缀+r</code>了。</p>\n<pre><code>#将r 设置为加载配置文件，并显示&quot;reloaded!&quot;信息\nbind r source-file ~/.tmux.conf \\; display &quot;Reloaded!&quot;\n</code></pre><p>很多人都喜欢改成Ctrl+a，不过我个人更喜欢Ctrl+x，如果你是vim用户，你一定懂的。把前缀映射改成Ctrl+x，再加入如下几条语句， 现在切换窗口就和vim一摸一样了，顿时觉得亲切了很多。</p>\n<pre><code>#up\nbind-key k select-pane -U\n#down\nbind-key j select-pane -D\n#left\nind-key h select-pane -L\n#right\nbind-key l select-pane -R\n</code></pre><p>上面的最后一条语句会更改C-x l的功能，我挺喜欢这个功能的，因为我们很时候都是在两个窗 口或这两个面板中切换，所以我又加入如下语句</p>\n<pre><code>#select last window\nbind-key C-l select-window -l\n</code></pre><p>现在我的l键可不能随便按了，<code>Ctrl+x l</code>是切换面板，<code>Ctrl+x Ctrl+l</code>切换窗口，<code>Ctrl+l</code>清屏。</p>\n<p>##会话</p>\n<blockquote>\n<ul>\n<li>C-x s 以菜单的方式查看并选择会话</li>\n<li>C-x :new-session 新建一个会话</li>\n<li>C-x d 退出并保存会话</li>\n<li>终端运行 tmux attach 返回会话</li>\n</ul>\n</blockquote>\n<p>##命名会话</p>\n<pre><code>tmux new -s session\ntmux new -s session -d #在后台建立会话\ntmux ls #列出会话\ntmux attach -t session #进入某个会话\n</code></pre><hr>\n<p>好了，今天先练习这么多，看的太多其实也记不住多少的，你说对吧。就像学vim，很多人都是因为听了很多大牛说vim是神器才去学的（vim本来就是神器），但是这些菜鸟想着就是一下子完全掌握vim，唉，你觉得可能吗。vim学习起来难度大、成本也高，但是当我们放下浮躁的心态，每天学一点点vim命令或者操作，然后坚持下去，你说你能学不会？答案肯定是：总有一天会完全掌握的，vim也就那么回事。</p>\n<p>其实，这些话也是说给我自己听的，因为最近发现自己有点浮躁的苗头，拒绝浮躁，踏实自我~~~</p>\n<p><strong>参考博客：</strong></p>\n<p><a href=\"http://mingxinglai.com/cn/2012/09/tmux/\" target=\"_blank\" rel=\"noopener\">http://mingxinglai.com/cn/2012/09/tmux/</a></p>\n","site":{"data":{}},"excerpt":"<p>上一篇，我们已经安装好了我们的威猛先生Tmux神器。既然被称为是神器，肯定是其被人称道的地方，那么现在就来动手亲自配置我们的Tmux，初体验她的酷以及可定制化。</p>\n<p>废话不多说，下面开始吧。。。</p>\n<p><strong>常用快捷键</strong></p>\n<p>Tmux的任何指令都包含一个前缀，也就是说当你按了前缀（默认Ctrl+b）以后，系统才知道你的命令是发给Tmux来执行的（<a href=\"http://baike.baidu.com/view/9065064.htm?fr=aladdin\" target=\"_blank\" rel=\"noopener\">你也可以参考这里</a>）</p>","more":"<blockquote>\n<ul>\n<li>C-b ? 显示快捷键帮助</li>\n<li>C-b C-o 调换窗口位置，类似与vim 里的C-w</li>\n<li>C-b 空格键 采用下一个内置布局</li>\n<li>C-b ! 把当前窗口变为新窗口</li>\n<li>C-b “ 模向分隔窗口</li>\n<li>C-b % 纵向分隔窗口</li>\n<li>C-b q 显示分隔窗口的编号</li>\n<li>C-b o 跳到下一个分隔窗口</li>\n<li>C-b 上下键 上一个及下一个分隔窗口</li>\n<li>C-b C-方向键 调整分隔窗口大小</li>\n<li>C-b c 创建新窗口</li>\n<li>C-b 0~9 选择几号窗口</li>\n<li>C-b c 创建新窗口</li>\n<li>C-b n 选择下一个窗口</li>\n<li>C-b l 切换到最后使用的窗口</li>\n<li>C-b p 选择前一个窗口</li>\n<li>C-b w 以菜单方式显示及选择窗口</li>\n<li>C-b t 显示时钟</li>\n<li>C-b ; 切换到最后一个使用的面板</li>\n<li>C-b x 关闭面板</li>\n<li>C-b &amp; 关闭窗口</li>\n<li>C-b s 以菜单方式显示和选择会话</li>\n<li>C-b d 退出tumx，并保存当前会话，这时，tmux仍在后台运行，可以通过tmux attach进入 到指定的会话</li>\n</ul>\n</blockquote>\n<p>##开始定制Tmux</p>\n<p>Tmux的配置文件是 <code>~/.tmux.conf</code>，这个文件可能不存在，你可以自己新建。开始配置前，首先，有没有觉得tmux的前缀按起来太不方便了，ctrl与b键隔得太远，很多人把它映射成C+a，也就 是在配置文件(<code>~/.tmux.conf</code>)中加入下面这条语句：</p>\n<pre><code>#设置前缀为Ctrl + x\nset -g prefix C-x\n</code></pre><p>于此同时，取消掉默认的前缀按键：</p>\n<pre><code>#解除Ctrl+b 与前缀的对应关系\nunbind C-b    \n</code></pre><p>配置完以后，重启tmux起效，或者先按C+b，然后输入：，进入命令行模式， 在命令行模式下输入：</p>\n<pre><code>source-file ~/.tmux.conf\n</code></pre><p>你也可以在配置文件中加入下面这句话，以后改了只需要按<code>前缀+r</code>了。</p>\n<pre><code>#将r 设置为加载配置文件，并显示&quot;reloaded!&quot;信息\nbind r source-file ~/.tmux.conf \\; display &quot;Reloaded!&quot;\n</code></pre><p>很多人都喜欢改成Ctrl+a，不过我个人更喜欢Ctrl+x，如果你是vim用户，你一定懂的。把前缀映射改成Ctrl+x，再加入如下几条语句， 现在切换窗口就和vim一摸一样了，顿时觉得亲切了很多。</p>\n<pre><code>#up\nbind-key k select-pane -U\n#down\nbind-key j select-pane -D\n#left\nind-key h select-pane -L\n#right\nbind-key l select-pane -R\n</code></pre><p>上面的最后一条语句会更改C-x l的功能，我挺喜欢这个功能的，因为我们很时候都是在两个窗 口或这两个面板中切换，所以我又加入如下语句</p>\n<pre><code>#select last window\nbind-key C-l select-window -l\n</code></pre><p>现在我的l键可不能随便按了，<code>Ctrl+x l</code>是切换面板，<code>Ctrl+x Ctrl+l</code>切换窗口，<code>Ctrl+l</code>清屏。</p>\n<p>##会话</p>\n<blockquote>\n<ul>\n<li>C-x s 以菜单的方式查看并选择会话</li>\n<li>C-x :new-session 新建一个会话</li>\n<li>C-x d 退出并保存会话</li>\n<li>终端运行 tmux attach 返回会话</li>\n</ul>\n</blockquote>\n<p>##命名会话</p>\n<pre><code>tmux new -s session\ntmux new -s session -d #在后台建立会话\ntmux ls #列出会话\ntmux attach -t session #进入某个会话\n</code></pre><hr>\n<p>好了，今天先练习这么多，看的太多其实也记不住多少的，你说对吧。就像学vim，很多人都是因为听了很多大牛说vim是神器才去学的（vim本来就是神器），但是这些菜鸟想着就是一下子完全掌握vim，唉，你觉得可能吗。vim学习起来难度大、成本也高，但是当我们放下浮躁的心态，每天学一点点vim命令或者操作，然后坚持下去，你说你能学不会？答案肯定是：总有一天会完全掌握的，vim也就那么回事。</p>\n<p>其实，这些话也是说给我自己听的，因为最近发现自己有点浮躁的苗头，拒绝浮躁，踏实自我~~~</p>\n<p><strong>参考博客：</strong></p>\n<p><a href=\"http://mingxinglai.com/cn/2012/09/tmux/\" target=\"_blank\" rel=\"noopener\">http://mingxinglai.com/cn/2012/09/tmux/</a></p>"},{"layout":"post","title":"潇洒的Tmux结对编程","_content":"本来计划是一天总结一篇Tmux使用技巧的，但是现在真的忍不住要提前介绍一个更炫酷的关于使用Tmux的技巧了，哈哈，技术控嘛，碰到新鲜的而自己又喜欢的技术肯定是不会放过的，破例一下。\n\nTmux另一个很潇洒的应用技巧是**结对编程**。比如说有一个场景，一个程序猿叫hello在北京，另一个程序媛叫world在上海，他们两个现在要对他们共同开发的项目进行代码讨论。解决这个需求，我们当然可以使用桌面共享工具来把他们各自的桌面图形界面分享给彼此，但是由于网速的原因，这样做的效果并不是很好。\n\n<!--more-->\n\n下面来介绍如何使用Tmux来高效的完成相同的工作。首先，我们让用户hello使用ssh登录到我们的远程服务器（这里使用VMware来测试），并创建名叫`helloworld`的会话：\n\n\ttmux new -s helloworld\n\t//打开一个测试文件index.php\n\tvim index.php\n\n然后，使用户world也登录同样的服务器（本地虚拟机测试），并加入hello创建的`helloworld`会话：\n\n\ttmux attach -t hellowrld\n\n然后他们，就可以通过语音来共同研究代码了，每当其中一个用户对代码进行修改时，同时另一个用户就会看到同样的显示。由于两个用户传递的是纯文本字符串，网速对其影响也不大，效果也很好。附上一张效果图，勿喷：\n\n![pic](../../images/201412/2014-12-01_170202.jpg)\n\n所以，我们使用耳麦语音通话再配合上我们潇洒的Tmux来结对编程，效果会非常的理想，不管做啥都 so easy，妈妈再也不用担心我敲代码了，哈哈。\n\n\n","source":"_posts/201412/2014-12-01-program_with_each_other.md","raw":"---\nlayout : post\ntitle : 潇洒的Tmux结对编程\ncategory : Tmux\ntags : Tmux\n---\n本来计划是一天总结一篇Tmux使用技巧的，但是现在真的忍不住要提前介绍一个更炫酷的关于使用Tmux的技巧了，哈哈，技术控嘛，碰到新鲜的而自己又喜欢的技术肯定是不会放过的，破例一下。\n\nTmux另一个很潇洒的应用技巧是**结对编程**。比如说有一个场景，一个程序猿叫hello在北京，另一个程序媛叫world在上海，他们两个现在要对他们共同开发的项目进行代码讨论。解决这个需求，我们当然可以使用桌面共享工具来把他们各自的桌面图形界面分享给彼此，但是由于网速的原因，这样做的效果并不是很好。\n\n<!--more-->\n\n下面来介绍如何使用Tmux来高效的完成相同的工作。首先，我们让用户hello使用ssh登录到我们的远程服务器（这里使用VMware来测试），并创建名叫`helloworld`的会话：\n\n\ttmux new -s helloworld\n\t//打开一个测试文件index.php\n\tvim index.php\n\n然后，使用户world也登录同样的服务器（本地虚拟机测试），并加入hello创建的`helloworld`会话：\n\n\ttmux attach -t hellowrld\n\n然后他们，就可以通过语音来共同研究代码了，每当其中一个用户对代码进行修改时，同时另一个用户就会看到同样的显示。由于两个用户传递的是纯文本字符串，网速对其影响也不大，效果也很好。附上一张效果图，勿喷：\n\n![pic](../../images/201412/2014-12-01_170202.jpg)\n\n所以，我们使用耳麦语音通话再配合上我们潇洒的Tmux来结对编程，效果会非常的理想，不管做啥都 so easy，妈妈再也不用担心我敲代码了，哈哈。\n\n\n","slug":"201412-2014-12-01-program-with-each-other","published":1,"date":"2018-04-12T15:20:38.831Z","updated":"2018-04-12T15:20:38.831Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6r0060ass6p83k7udz","content":"<p>本来计划是一天总结一篇Tmux使用技巧的，但是现在真的忍不住要提前介绍一个更炫酷的关于使用Tmux的技巧了，哈哈，技术控嘛，碰到新鲜的而自己又喜欢的技术肯定是不会放过的，破例一下。</p>\n<p>Tmux另一个很潇洒的应用技巧是<strong>结对编程</strong>。比如说有一个场景，一个程序猿叫hello在北京，另一个程序媛叫world在上海，他们两个现在要对他们共同开发的项目进行代码讨论。解决这个需求，我们当然可以使用桌面共享工具来把他们各自的桌面图形界面分享给彼此，但是由于网速的原因，这样做的效果并不是很好。</p>\n<a id=\"more\"></a>\n<p>下面来介绍如何使用Tmux来高效的完成相同的工作。首先，我们让用户hello使用ssh登录到我们的远程服务器（这里使用VMware来测试），并创建名叫<code>helloworld</code>的会话：</p>\n<pre><code>tmux new -s helloworld\n//打开一个测试文件index.php\nvim index.php\n</code></pre><p>然后，使用户world也登录同样的服务器（本地虚拟机测试），并加入hello创建的<code>helloworld</code>会话：</p>\n<pre><code>tmux attach -t hellowrld\n</code></pre><p>然后他们，就可以通过语音来共同研究代码了，每当其中一个用户对代码进行修改时，同时另一个用户就会看到同样的显示。由于两个用户传递的是纯文本字符串，网速对其影响也不大，效果也很好。附上一张效果图，勿喷：</p>\n<p><img src=\"../../images/201412/2014-12-01_170202.jpg\" alt=\"pic\"></p>\n<p>所以，我们使用耳麦语音通话再配合上我们潇洒的Tmux来结对编程，效果会非常的理想，不管做啥都 so easy，妈妈再也不用担心我敲代码了，哈哈。</p>\n","site":{"data":{}},"excerpt":"<p>本来计划是一天总结一篇Tmux使用技巧的，但是现在真的忍不住要提前介绍一个更炫酷的关于使用Tmux的技巧了，哈哈，技术控嘛，碰到新鲜的而自己又喜欢的技术肯定是不会放过的，破例一下。</p>\n<p>Tmux另一个很潇洒的应用技巧是<strong>结对编程</strong>。比如说有一个场景，一个程序猿叫hello在北京，另一个程序媛叫world在上海，他们两个现在要对他们共同开发的项目进行代码讨论。解决这个需求，我们当然可以使用桌面共享工具来把他们各自的桌面图形界面分享给彼此，但是由于网速的原因，这样做的效果并不是很好。</p>","more":"<p>下面来介绍如何使用Tmux来高效的完成相同的工作。首先，我们让用户hello使用ssh登录到我们的远程服务器（这里使用VMware来测试），并创建名叫<code>helloworld</code>的会话：</p>\n<pre><code>tmux new -s helloworld\n//打开一个测试文件index.php\nvim index.php\n</code></pre><p>然后，使用户world也登录同样的服务器（本地虚拟机测试），并加入hello创建的<code>helloworld</code>会话：</p>\n<pre><code>tmux attach -t hellowrld\n</code></pre><p>然后他们，就可以通过语音来共同研究代码了，每当其中一个用户对代码进行修改时，同时另一个用户就会看到同样的显示。由于两个用户传递的是纯文本字符串，网速对其影响也不大，效果也很好。附上一张效果图，勿喷：</p>\n<p><img src=\"../../images/201412/2014-12-01_170202.jpg\" alt=\"pic\"></p>\n<p>所以，我们使用耳麦语音通话再配合上我们潇洒的Tmux来结对编程，效果会非常的理想，不管做啥都 so easy，妈妈再也不用担心我敲代码了，哈哈。</p>"},{"layout":"post","title":"Centos源码编译安装LNMP环境","_content":"这里总结下如何在Centos下利用源代码编译安装LNMP环境。\n\n首先，说明下我这里的安装环境：\n\n\tCentos 6.5(VMware下测试)\n\t笔记本一台\n\n然后，我们先配置下本地测试服务器：\n\n\t配好IP、DNS、网关，确保可以'远程'连接服务器\n\n<!--more-->\n\n\t配置防火墙，开启80和3306端口\n\tvim /etc/sysconfig/iptables\n\t-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n\t-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n\t//重启防火墙，使配置生效\n\tservices iptables restart\n\n接下来，关闭SELINUX\n\n\tvim /etc/selinux/config\n\t#SELINUX=enforcing       #注释掉 \n\t#SELINUXTYPE=targeted    #注释掉 \n\tSELINUX=disabled         #增加 \n\tshutdown -r now   #重启系统\n\n下面下载软件包：\n\t\n>* Nginx\n>* Pcre\n>* MySQL\n>* PHP\n>* Cmake\n>* Libmcrypt\n\n安装编译工具以及库文件，可以使用yum安装：\n\n\tyum install make apr* autoconf automake curl-devel gcc gcc-c++ zlib-devel openssl openssl-devel pcre-devel gd  kernel keyutils  patch  perl kernel-headers compat* mpfr cpp glibc libgomp libstdc++-devel ppl cloog-ppl keyutils-libs-devel libcom_err-devel libsepol-devel libselinux-devel krb5-devel zlib-devel libXpm* freetype libjpeg* libpng* php-common php-gd ncurses* libtool* libxml2 libxml2-devel patch freetype-devel\n\n###安装cmake\n\n\ttar zxvf cmake-2.8.8.tar.gz \n\tcd cmake-2.8.8 \n\t./configure \n\tmake && make install  \n\n###安装MySQL\n\n\troupadd mysql  #添加mysql组    \n\tuseradd -g mysql mysql -s /bin/false  #创建用户mysql并加入到mysql组，不允许mysql用户直接登录系统    \n\tmkdir -p /data/mysql  #创建MySQL数据库存放目录    \n\tchown -R mysql:mysql /data/mysql   #设置MySQL数据库目录权限    \n\tmkdir -p /usr/local/mysql #创建MySQL安装目录    \n\tcd /root/lnmp/ \n\tcd mysql-5.5.25    \n\tcmake  -DCMAKE_INSTALL_PREFIX=/usr/local/mysql  -DMYSQL_DATADIR=/data/mysql  -DSYSCONFDIR=/etc   #配置    \n\tmake && make install  #编译和安装    \n\tcd /usr/local/mysql    \n\tcp ./support-files/my-huge.cnf  /etc/my.cnf   #拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）    \n\tvi /etc/my.cnf   #编辑配置文件,在 [mysqld] 部分增加下面一行    \n\tdatadir = /data/mysql  #添加MySQL数据库路径    \n\t./scripts/mysql_install_db --user=mysql  #生成mysql系统数据库    \n\tcp ./support-files/mysql.server  /etc/rc.d/init.d/mysqld  #把Mysql加入系统启动    \n\tchmod 755 /etc/init.d/mysqld   #增加执行权限    \n\tchkconfig mysqld on  #设置开机启动    \n\tvim /etc/rc.d/init.d/mysqld  #编辑    \n\tbasedir = /usr/local/mysql   #MySQL程序安装路径    \n\tdatadir = /data/mysql  #MySQl数据库存放目录    \n\tservice mysqld start  #启动    \n\tvim /etc/profile   #把mysql服务加入系统环境变量：在最后添加下面这一行    \n\texport PATH=$PATH:/usr/local/mysql/bin      \n\tshutdown -r now     #需要重启系统，等待系统重新启动之后继续在终端命令行下面操作    \n\tmysql_secure_installation    #设置Mysql密码    \n\t根据提示按Y 回车（默认密码为空）    \n\t然后输入2次密码    \n\t继续按Y 回车，直到设置完成    \n\t或者直接修改密码/usr/local/mysql/bin/mysqladmin -u root -p password \"123456\" #修改密码    \n\tservice mysqld restart  #重启    \n\t到此，mysql安装完成！   \n\t\n###安装pcre\n\t\n\tcd pcre-8.36\n\t./configure  --prefix=/usr/local/pcre \n\tmake && make install   \n\n###安装nginx\n\n\tcd /usr/local/src    \n\tgroupadd  www  #添加www组    \n\tuseradd -g  www www -s /bin/false  #创建nginx运行账户www并加入到www组，不允许www用户直接登录系统    \n\ttar  zxvf nginx-1.2.0.tar.gz    \n\tcd nginx-1.2.0    \n\t./configure --prefix=/usr/local/nginx --without-http_memcached_module --user=www --group=www --with-http_stub_status_module --with-openssl=/usr/ --with-pcre=/usr/local/src/pcre-8.36   \n\t#注意:--with-pcre=/usr/local/src/pcre-8.36指向的是源码包解压的路径，而不是安装的路径，否则会报错 \n\tmake && make install   \n\t#设置开机启动nginx服务器\n\tvim /etc/profile\n\t添加下面一句话\n\t/usr/local/nginx/sbin/nginx\n\n\n###安装libmcrypt\n\n\ttar zxvf  libmcrypt-2.5.8.tar.gz\n\tcd  libmcrypt-2.5.8 \n\t./configure \n\tmake && make install   #编译安装 \n\n###安装php\n\n\tcd php-5.4.12\n\t./configure --prefix=/usr/local/php5 --with-config-file-path=/usr/local/php5/etc --with-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-mysql-sock=/tmp/mysql.sock --with-gd --with-iconv  --with-zlib  --enable-xml --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curlwrappers --enable-mbregex  --enable-fpm --enable-mbstring --enable-ftp --enable-gd-native-ttf --with-openssl --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-gettext --enable-session --with-mcrypt --with-curl --with-jpeg-dir --with-freetype-dir \n\tmake   #编译    \n\tmake install    #安装    \n\tcp  php.ini-production   /usr/local/php5/etc/php.ini  #复制php配置文件到安装目录    \n\trm -rf /etc/php.ini   #删除系统自带配置文件    \n\tln -s /usr/local/php5/etc/php.ini  /etc/php.ini    #添加软链接    \n\tcp  /usr/local/php5/etc/php-fpm.conf.default   /usr/local/php5/etc/php-fpm.conf      #拷贝模板文件为php-fpm配置文件    \n\tvi  /usr/local/php5/etc/php-fpm.conf  #编辑    \n\tuser = www    #设置php-fpm运行账号为www    \n\tgroup = www   #设置php-fpm运行组为www    \n\tpid = run/php-fpm.pid    #取消前面的分号    \n\tcp /usr/local/src/php-5.4.12/sapi/fpm/init.d.php-fpm   /etc/rc.d/init.d/php-fpm  #设置 php-fpm开机启动，拷贝php-fpm到启动目录    \n\tchmod +x /etc/rc.d/init.d/php-fpm  #添加执行权限    \n\tchkconfig php-fpm on    #设置开机启动    \n\tvi /usr/local/php5/etc/php.ini    #编辑配置文件    \n\t找到：disable_functions =    \n\t修改为：disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,getservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname   \n\t#列出PHP可以禁用的函数，如果某些程序需要用到这个函数，可以删除，取消禁用。    \n\t找到：;date.timezone =    \n\t修改为：date.timezone = PRC   #设置时区    \n\t找到：expose_php = On    \n\t修改为：expose_php = OFF  #禁止显示php版本的信息    \n\tPS：在编译PHP的过程中可能会报UNDEFINED REFERENCE TO `LIBICONV_OPEN 无法编译PHP LIBICONV错误.\n\n###配置nginx支持php\n\n\tvi /usr/local/nginx/conf/nginx.conf      #编辑配置文件    \n\tuser   www  www;          #首行user去掉注释,修改Nginx运行组为www www；必须与/usr/local/php5/etc/php-fpm.conf中的user,group配置相同，否则php运行出错    \n\tindex  index.php  index.html index.htm;    #添加index.php    \n\t# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000    \n\t#    \n\tlocation ~ \\.php$ {    \n   \t\troot           html;#此处和server下面root保持一致,默认为html    \n   \t\tfastcgi_pass   127.0.0.1:9000;    \n   \t\tfastcgi_index  index.php;    \n   \t\tfastcgi_param  SCRIPT_FILENAME   /usr/local/nginx/html/$fastcgi_script_name;    \n   \t\tinclude        fastcgi_params;     \n\t注意：取消FastCGI server部分location的注释,并要注意fastcgi_param行的参数,改为/usr/local/nginx/html(此为网站根目录绝对路径)$fastcgi_script_name\n\tpkill nginx\t\n\t/usr/local/nginx/sbin/nginx #重启nginx\n\t\n###测试\n\n\tcd /usr/local/nginx/html/\n\techo <?php phpinfo(); > ./info.php\n\n打开浏览器，输入：`192.168.1.110/info.php`,显示如下界面，说明环境搭建成功。\n\n![](../../images/201412/2014-12-10_173100.jpg)\n\n---\n\n到此,Centos的LNMP环境已经搭建成功，其中很多部分参考了网络资料，不为别的，只作为本人练习笔记，仅此而已。\n\n(end)\n\n\n\t\n\t","source":"_posts/201412/2014-12-10-centos_compiler_lnmp_notes.md","raw":"---\nlayout : post\ntitle : Centos源码编译安装LNMP环境\ncategory : LNMP\ntags : LNMP\n---\n这里总结下如何在Centos下利用源代码编译安装LNMP环境。\n\n首先，说明下我这里的安装环境：\n\n\tCentos 6.5(VMware下测试)\n\t笔记本一台\n\n然后，我们先配置下本地测试服务器：\n\n\t配好IP、DNS、网关，确保可以'远程'连接服务器\n\n<!--more-->\n\n\t配置防火墙，开启80和3306端口\n\tvim /etc/sysconfig/iptables\n\t-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n\t-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n\t//重启防火墙，使配置生效\n\tservices iptables restart\n\n接下来，关闭SELINUX\n\n\tvim /etc/selinux/config\n\t#SELINUX=enforcing       #注释掉 \n\t#SELINUXTYPE=targeted    #注释掉 \n\tSELINUX=disabled         #增加 \n\tshutdown -r now   #重启系统\n\n下面下载软件包：\n\t\n>* Nginx\n>* Pcre\n>* MySQL\n>* PHP\n>* Cmake\n>* Libmcrypt\n\n安装编译工具以及库文件，可以使用yum安装：\n\n\tyum install make apr* autoconf automake curl-devel gcc gcc-c++ zlib-devel openssl openssl-devel pcre-devel gd  kernel keyutils  patch  perl kernel-headers compat* mpfr cpp glibc libgomp libstdc++-devel ppl cloog-ppl keyutils-libs-devel libcom_err-devel libsepol-devel libselinux-devel krb5-devel zlib-devel libXpm* freetype libjpeg* libpng* php-common php-gd ncurses* libtool* libxml2 libxml2-devel patch freetype-devel\n\n###安装cmake\n\n\ttar zxvf cmake-2.8.8.tar.gz \n\tcd cmake-2.8.8 \n\t./configure \n\tmake && make install  \n\n###安装MySQL\n\n\troupadd mysql  #添加mysql组    \n\tuseradd -g mysql mysql -s /bin/false  #创建用户mysql并加入到mysql组，不允许mysql用户直接登录系统    \n\tmkdir -p /data/mysql  #创建MySQL数据库存放目录    \n\tchown -R mysql:mysql /data/mysql   #设置MySQL数据库目录权限    \n\tmkdir -p /usr/local/mysql #创建MySQL安装目录    \n\tcd /root/lnmp/ \n\tcd mysql-5.5.25    \n\tcmake  -DCMAKE_INSTALL_PREFIX=/usr/local/mysql  -DMYSQL_DATADIR=/data/mysql  -DSYSCONFDIR=/etc   #配置    \n\tmake && make install  #编译和安装    \n\tcd /usr/local/mysql    \n\tcp ./support-files/my-huge.cnf  /etc/my.cnf   #拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）    \n\tvi /etc/my.cnf   #编辑配置文件,在 [mysqld] 部分增加下面一行    \n\tdatadir = /data/mysql  #添加MySQL数据库路径    \n\t./scripts/mysql_install_db --user=mysql  #生成mysql系统数据库    \n\tcp ./support-files/mysql.server  /etc/rc.d/init.d/mysqld  #把Mysql加入系统启动    \n\tchmod 755 /etc/init.d/mysqld   #增加执行权限    \n\tchkconfig mysqld on  #设置开机启动    \n\tvim /etc/rc.d/init.d/mysqld  #编辑    \n\tbasedir = /usr/local/mysql   #MySQL程序安装路径    \n\tdatadir = /data/mysql  #MySQl数据库存放目录    \n\tservice mysqld start  #启动    \n\tvim /etc/profile   #把mysql服务加入系统环境变量：在最后添加下面这一行    \n\texport PATH=$PATH:/usr/local/mysql/bin      \n\tshutdown -r now     #需要重启系统，等待系统重新启动之后继续在终端命令行下面操作    \n\tmysql_secure_installation    #设置Mysql密码    \n\t根据提示按Y 回车（默认密码为空）    \n\t然后输入2次密码    \n\t继续按Y 回车，直到设置完成    \n\t或者直接修改密码/usr/local/mysql/bin/mysqladmin -u root -p password \"123456\" #修改密码    \n\tservice mysqld restart  #重启    \n\t到此，mysql安装完成！   \n\t\n###安装pcre\n\t\n\tcd pcre-8.36\n\t./configure  --prefix=/usr/local/pcre \n\tmake && make install   \n\n###安装nginx\n\n\tcd /usr/local/src    \n\tgroupadd  www  #添加www组    \n\tuseradd -g  www www -s /bin/false  #创建nginx运行账户www并加入到www组，不允许www用户直接登录系统    \n\ttar  zxvf nginx-1.2.0.tar.gz    \n\tcd nginx-1.2.0    \n\t./configure --prefix=/usr/local/nginx --without-http_memcached_module --user=www --group=www --with-http_stub_status_module --with-openssl=/usr/ --with-pcre=/usr/local/src/pcre-8.36   \n\t#注意:--with-pcre=/usr/local/src/pcre-8.36指向的是源码包解压的路径，而不是安装的路径，否则会报错 \n\tmake && make install   \n\t#设置开机启动nginx服务器\n\tvim /etc/profile\n\t添加下面一句话\n\t/usr/local/nginx/sbin/nginx\n\n\n###安装libmcrypt\n\n\ttar zxvf  libmcrypt-2.5.8.tar.gz\n\tcd  libmcrypt-2.5.8 \n\t./configure \n\tmake && make install   #编译安装 \n\n###安装php\n\n\tcd php-5.4.12\n\t./configure --prefix=/usr/local/php5 --with-config-file-path=/usr/local/php5/etc --with-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-mysql-sock=/tmp/mysql.sock --with-gd --with-iconv  --with-zlib  --enable-xml --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curlwrappers --enable-mbregex  --enable-fpm --enable-mbstring --enable-ftp --enable-gd-native-ttf --with-openssl --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-gettext --enable-session --with-mcrypt --with-curl --with-jpeg-dir --with-freetype-dir \n\tmake   #编译    \n\tmake install    #安装    \n\tcp  php.ini-production   /usr/local/php5/etc/php.ini  #复制php配置文件到安装目录    \n\trm -rf /etc/php.ini   #删除系统自带配置文件    \n\tln -s /usr/local/php5/etc/php.ini  /etc/php.ini    #添加软链接    \n\tcp  /usr/local/php5/etc/php-fpm.conf.default   /usr/local/php5/etc/php-fpm.conf      #拷贝模板文件为php-fpm配置文件    \n\tvi  /usr/local/php5/etc/php-fpm.conf  #编辑    \n\tuser = www    #设置php-fpm运行账号为www    \n\tgroup = www   #设置php-fpm运行组为www    \n\tpid = run/php-fpm.pid    #取消前面的分号    \n\tcp /usr/local/src/php-5.4.12/sapi/fpm/init.d.php-fpm   /etc/rc.d/init.d/php-fpm  #设置 php-fpm开机启动，拷贝php-fpm到启动目录    \n\tchmod +x /etc/rc.d/init.d/php-fpm  #添加执行权限    \n\tchkconfig php-fpm on    #设置开机启动    \n\tvi /usr/local/php5/etc/php.ini    #编辑配置文件    \n\t找到：disable_functions =    \n\t修改为：disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,getservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname   \n\t#列出PHP可以禁用的函数，如果某些程序需要用到这个函数，可以删除，取消禁用。    \n\t找到：;date.timezone =    \n\t修改为：date.timezone = PRC   #设置时区    \n\t找到：expose_php = On    \n\t修改为：expose_php = OFF  #禁止显示php版本的信息    \n\tPS：在编译PHP的过程中可能会报UNDEFINED REFERENCE TO `LIBICONV_OPEN 无法编译PHP LIBICONV错误.\n\n###配置nginx支持php\n\n\tvi /usr/local/nginx/conf/nginx.conf      #编辑配置文件    \n\tuser   www  www;          #首行user去掉注释,修改Nginx运行组为www www；必须与/usr/local/php5/etc/php-fpm.conf中的user,group配置相同，否则php运行出错    \n\tindex  index.php  index.html index.htm;    #添加index.php    \n\t# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000    \n\t#    \n\tlocation ~ \\.php$ {    \n   \t\troot           html;#此处和server下面root保持一致,默认为html    \n   \t\tfastcgi_pass   127.0.0.1:9000;    \n   \t\tfastcgi_index  index.php;    \n   \t\tfastcgi_param  SCRIPT_FILENAME   /usr/local/nginx/html/$fastcgi_script_name;    \n   \t\tinclude        fastcgi_params;     \n\t注意：取消FastCGI server部分location的注释,并要注意fastcgi_param行的参数,改为/usr/local/nginx/html(此为网站根目录绝对路径)$fastcgi_script_name\n\tpkill nginx\t\n\t/usr/local/nginx/sbin/nginx #重启nginx\n\t\n###测试\n\n\tcd /usr/local/nginx/html/\n\techo <?php phpinfo(); > ./info.php\n\n打开浏览器，输入：`192.168.1.110/info.php`,显示如下界面，说明环境搭建成功。\n\n![](../../images/201412/2014-12-10_173100.jpg)\n\n---\n\n到此,Centos的LNMP环境已经搭建成功，其中很多部分参考了网络资料，不为别的，只作为本人练习笔记，仅此而已。\n\n(end)\n\n\n\t\n\t","slug":"201412-2014-12-10-centos-compiler-lnmp-notes","published":1,"date":"2018-04-12T15:20:38.832Z","updated":"2018-04-12T15:20:38.832Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6t0063ass60i2y2dfz","content":"<p>这里总结下如何在Centos下利用源代码编译安装LNMP环境。</p>\n<p>首先，说明下我这里的安装环境：</p>\n<pre><code>Centos 6.5(VMware下测试)\n笔记本一台\n</code></pre><p>然后，我们先配置下本地测试服务器：</p>\n<pre><code>配好IP、DNS、网关，确保可以&apos;远程&apos;连接服务器\n</code></pre><a id=\"more\"></a>\n<pre><code>配置防火墙，开启80和3306端口\nvim /etc/sysconfig/iptables\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n//重启防火墙，使配置生效\nservices iptables restart\n</code></pre><p>接下来，关闭SELINUX</p>\n<pre><code>vim /etc/selinux/config\n#SELINUX=enforcing       #注释掉 \n#SELINUXTYPE=targeted    #注释掉 \nSELINUX=disabled         #增加 \nshutdown -r now   #重启系统\n</code></pre><p>下面下载软件包：</p>\n<blockquote>\n<ul>\n<li>Nginx</li>\n<li>Pcre</li>\n<li>MySQL</li>\n<li>PHP</li>\n<li>Cmake</li>\n<li>Libmcrypt</li>\n</ul>\n</blockquote>\n<p>安装编译工具以及库文件，可以使用yum安装：</p>\n<pre><code>yum install make apr* autoconf automake curl-devel gcc gcc-c++ zlib-devel openssl openssl-devel pcre-devel gd  kernel keyutils  patch  perl kernel-headers compat* mpfr cpp glibc libgomp libstdc++-devel ppl cloog-ppl keyutils-libs-devel libcom_err-devel libsepol-devel libselinux-devel krb5-devel zlib-devel libXpm* freetype libjpeg* libpng* php-common php-gd ncurses* libtool* libxml2 libxml2-devel patch freetype-devel\n</code></pre><p>###安装cmake</p>\n<pre><code>tar zxvf cmake-2.8.8.tar.gz \ncd cmake-2.8.8 \n./configure \nmake &amp;&amp; make install  \n</code></pre><p>###安装MySQL</p>\n<pre><code>roupadd mysql  #添加mysql组    \nuseradd -g mysql mysql -s /bin/false  #创建用户mysql并加入到mysql组，不允许mysql用户直接登录系统    \nmkdir -p /data/mysql  #创建MySQL数据库存放目录    \nchown -R mysql:mysql /data/mysql   #设置MySQL数据库目录权限    \nmkdir -p /usr/local/mysql #创建MySQL安装目录    \ncd /root/lnmp/ \ncd mysql-5.5.25    \ncmake  -DCMAKE_INSTALL_PREFIX=/usr/local/mysql  -DMYSQL_DATADIR=/data/mysql  -DSYSCONFDIR=/etc   #配置    \nmake &amp;&amp; make install  #编译和安装    \ncd /usr/local/mysql    \ncp ./support-files/my-huge.cnf  /etc/my.cnf   #拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）    \nvi /etc/my.cnf   #编辑配置文件,在 [mysqld] 部分增加下面一行    \ndatadir = /data/mysql  #添加MySQL数据库路径    \n./scripts/mysql_install_db --user=mysql  #生成mysql系统数据库    \ncp ./support-files/mysql.server  /etc/rc.d/init.d/mysqld  #把Mysql加入系统启动    \nchmod 755 /etc/init.d/mysqld   #增加执行权限    \nchkconfig mysqld on  #设置开机启动    \nvim /etc/rc.d/init.d/mysqld  #编辑    \nbasedir = /usr/local/mysql   #MySQL程序安装路径    \ndatadir = /data/mysql  #MySQl数据库存放目录    \nservice mysqld start  #启动    \nvim /etc/profile   #把mysql服务加入系统环境变量：在最后添加下面这一行    \nexport PATH=$PATH:/usr/local/mysql/bin      \nshutdown -r now     #需要重启系统，等待系统重新启动之后继续在终端命令行下面操作    \nmysql_secure_installation    #设置Mysql密码    \n根据提示按Y 回车（默认密码为空）    \n然后输入2次密码    \n继续按Y 回车，直到设置完成    \n或者直接修改密码/usr/local/mysql/bin/mysqladmin -u root -p password &quot;123456&quot; #修改密码    \nservice mysqld restart  #重启    \n到此，mysql安装完成！   \n</code></pre><p>###安装pcre</p>\n<pre><code>cd pcre-8.36\n./configure  --prefix=/usr/local/pcre \nmake &amp;&amp; make install   \n</code></pre><p>###安装nginx</p>\n<pre><code>cd /usr/local/src    \ngroupadd  www  #添加www组    \nuseradd -g  www www -s /bin/false  #创建nginx运行账户www并加入到www组，不允许www用户直接登录系统    \ntar  zxvf nginx-1.2.0.tar.gz    \ncd nginx-1.2.0    \n./configure --prefix=/usr/local/nginx --without-http_memcached_module --user=www --group=www --with-http_stub_status_module --with-openssl=/usr/ --with-pcre=/usr/local/src/pcre-8.36   \n#注意:--with-pcre=/usr/local/src/pcre-8.36指向的是源码包解压的路径，而不是安装的路径，否则会报错 \nmake &amp;&amp; make install   \n#设置开机启动nginx服务器\nvim /etc/profile\n添加下面一句话\n/usr/local/nginx/sbin/nginx\n</code></pre><p>###安装libmcrypt</p>\n<pre><code>tar zxvf  libmcrypt-2.5.8.tar.gz\ncd  libmcrypt-2.5.8 \n./configure \nmake &amp;&amp; make install   #编译安装 \n</code></pre><p>###安装php</p>\n<pre><code>cd php-5.4.12\n./configure --prefix=/usr/local/php5 --with-config-file-path=/usr/local/php5/etc --with-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-mysql-sock=/tmp/mysql.sock --with-gd --with-iconv  --with-zlib  --enable-xml --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curlwrappers --enable-mbregex  --enable-fpm --enable-mbstring --enable-ftp --enable-gd-native-ttf --with-openssl --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-gettext --enable-session --with-mcrypt --with-curl --with-jpeg-dir --with-freetype-dir \nmake   #编译    \nmake install    #安装    \ncp  php.ini-production   /usr/local/php5/etc/php.ini  #复制php配置文件到安装目录    \nrm -rf /etc/php.ini   #删除系统自带配置文件    \nln -s /usr/local/php5/etc/php.ini  /etc/php.ini    #添加软链接    \ncp  /usr/local/php5/etc/php-fpm.conf.default   /usr/local/php5/etc/php-fpm.conf      #拷贝模板文件为php-fpm配置文件    \nvi  /usr/local/php5/etc/php-fpm.conf  #编辑    \nuser = www    #设置php-fpm运行账号为www    \ngroup = www   #设置php-fpm运行组为www    \npid = run/php-fpm.pid    #取消前面的分号    \ncp /usr/local/src/php-5.4.12/sapi/fpm/init.d.php-fpm   /etc/rc.d/init.d/php-fpm  #设置 php-fpm开机启动，拷贝php-fpm到启动目录    \nchmod +x /etc/rc.d/init.d/php-fpm  #添加执行权限    \nchkconfig php-fpm on    #设置开机启动    \nvi /usr/local/php5/etc/php.ini    #编辑配置文件    \n找到：disable_functions =    \n修改为：disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,getservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname   \n#列出PHP可以禁用的函数，如果某些程序需要用到这个函数，可以删除，取消禁用。    \n找到：;date.timezone =    \n修改为：date.timezone = PRC   #设置时区    \n找到：expose_php = On    \n修改为：expose_php = OFF  #禁止显示php版本的信息    \nPS：在编译PHP的过程中可能会报UNDEFINED REFERENCE TO `LIBICONV_OPEN 无法编译PHP LIBICONV错误.\n</code></pre><p>###配置nginx支持php</p>\n<pre><code>vi /usr/local/nginx/conf/nginx.conf      #编辑配置文件    \nuser   www  www;          #首行user去掉注释,修改Nginx运行组为www www；必须与/usr/local/php5/etc/php-fpm.conf中的user,group配置相同，否则php运行出错    \nindex  index.php  index.html index.htm;    #添加index.php    \n# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000    \n#    \nlocation ~ \\.php$ {    \n       root           html;#此处和server下面root保持一致,默认为html    \n       fastcgi_pass   127.0.0.1:9000;    \n       fastcgi_index  index.php;    \n       fastcgi_param  SCRIPT_FILENAME   /usr/local/nginx/html/$fastcgi_script_name;    \n       include        fastcgi_params;     \n注意：取消FastCGI server部分location的注释,并要注意fastcgi_param行的参数,改为/usr/local/nginx/html(此为网站根目录绝对路径)$fastcgi_script_name\npkill nginx    \n/usr/local/nginx/sbin/nginx #重启nginx\n</code></pre><p>###测试</p>\n<pre><code>cd /usr/local/nginx/html/\necho &lt;?php phpinfo(); &gt; ./info.php\n</code></pre><p>打开浏览器，输入：<code>192.168.1.110/info.php</code>,显示如下界面，说明环境搭建成功。</p>\n<p><img src=\"../../images/201412/2014-12-10_173100.jpg\" alt=\"\"></p>\n<hr>\n<p>到此,Centos的LNMP环境已经搭建成功，其中很多部分参考了网络资料，不为别的，只作为本人练习笔记，仅此而已。</p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>这里总结下如何在Centos下利用源代码编译安装LNMP环境。</p>\n<p>首先，说明下我这里的安装环境：</p>\n<pre><code>Centos 6.5(VMware下测试)\n笔记本一台\n</code></pre><p>然后，我们先配置下本地测试服务器：</p>\n<pre><code>配好IP、DNS、网关，确保可以&apos;远程&apos;连接服务器\n</code></pre>","more":"<pre><code>配置防火墙，开启80和3306端口\nvim /etc/sysconfig/iptables\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n//重启防火墙，使配置生效\nservices iptables restart\n</code></pre><p>接下来，关闭SELINUX</p>\n<pre><code>vim /etc/selinux/config\n#SELINUX=enforcing       #注释掉 \n#SELINUXTYPE=targeted    #注释掉 \nSELINUX=disabled         #增加 \nshutdown -r now   #重启系统\n</code></pre><p>下面下载软件包：</p>\n<blockquote>\n<ul>\n<li>Nginx</li>\n<li>Pcre</li>\n<li>MySQL</li>\n<li>PHP</li>\n<li>Cmake</li>\n<li>Libmcrypt</li>\n</ul>\n</blockquote>\n<p>安装编译工具以及库文件，可以使用yum安装：</p>\n<pre><code>yum install make apr* autoconf automake curl-devel gcc gcc-c++ zlib-devel openssl openssl-devel pcre-devel gd  kernel keyutils  patch  perl kernel-headers compat* mpfr cpp glibc libgomp libstdc++-devel ppl cloog-ppl keyutils-libs-devel libcom_err-devel libsepol-devel libselinux-devel krb5-devel zlib-devel libXpm* freetype libjpeg* libpng* php-common php-gd ncurses* libtool* libxml2 libxml2-devel patch freetype-devel\n</code></pre><p>###安装cmake</p>\n<pre><code>tar zxvf cmake-2.8.8.tar.gz \ncd cmake-2.8.8 \n./configure \nmake &amp;&amp; make install  \n</code></pre><p>###安装MySQL</p>\n<pre><code>roupadd mysql  #添加mysql组    \nuseradd -g mysql mysql -s /bin/false  #创建用户mysql并加入到mysql组，不允许mysql用户直接登录系统    \nmkdir -p /data/mysql  #创建MySQL数据库存放目录    \nchown -R mysql:mysql /data/mysql   #设置MySQL数据库目录权限    \nmkdir -p /usr/local/mysql #创建MySQL安装目录    \ncd /root/lnmp/ \ncd mysql-5.5.25    \ncmake  -DCMAKE_INSTALL_PREFIX=/usr/local/mysql  -DMYSQL_DATADIR=/data/mysql  -DSYSCONFDIR=/etc   #配置    \nmake &amp;&amp; make install  #编译和安装    \ncd /usr/local/mysql    \ncp ./support-files/my-huge.cnf  /etc/my.cnf   #拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）    \nvi /etc/my.cnf   #编辑配置文件,在 [mysqld] 部分增加下面一行    \ndatadir = /data/mysql  #添加MySQL数据库路径    \n./scripts/mysql_install_db --user=mysql  #生成mysql系统数据库    \ncp ./support-files/mysql.server  /etc/rc.d/init.d/mysqld  #把Mysql加入系统启动    \nchmod 755 /etc/init.d/mysqld   #增加执行权限    \nchkconfig mysqld on  #设置开机启动    \nvim /etc/rc.d/init.d/mysqld  #编辑    \nbasedir = /usr/local/mysql   #MySQL程序安装路径    \ndatadir = /data/mysql  #MySQl数据库存放目录    \nservice mysqld start  #启动    \nvim /etc/profile   #把mysql服务加入系统环境变量：在最后添加下面这一行    \nexport PATH=$PATH:/usr/local/mysql/bin      \nshutdown -r now     #需要重启系统，等待系统重新启动之后继续在终端命令行下面操作    \nmysql_secure_installation    #设置Mysql密码    \n根据提示按Y 回车（默认密码为空）    \n然后输入2次密码    \n继续按Y 回车，直到设置完成    \n或者直接修改密码/usr/local/mysql/bin/mysqladmin -u root -p password &quot;123456&quot; #修改密码    \nservice mysqld restart  #重启    \n到此，mysql安装完成！   \n</code></pre><p>###安装pcre</p>\n<pre><code>cd pcre-8.36\n./configure  --prefix=/usr/local/pcre \nmake &amp;&amp; make install   \n</code></pre><p>###安装nginx</p>\n<pre><code>cd /usr/local/src    \ngroupadd  www  #添加www组    \nuseradd -g  www www -s /bin/false  #创建nginx运行账户www并加入到www组，不允许www用户直接登录系统    \ntar  zxvf nginx-1.2.0.tar.gz    \ncd nginx-1.2.0    \n./configure --prefix=/usr/local/nginx --without-http_memcached_module --user=www --group=www --with-http_stub_status_module --with-openssl=/usr/ --with-pcre=/usr/local/src/pcre-8.36   \n#注意:--with-pcre=/usr/local/src/pcre-8.36指向的是源码包解压的路径，而不是安装的路径，否则会报错 \nmake &amp;&amp; make install   \n#设置开机启动nginx服务器\nvim /etc/profile\n添加下面一句话\n/usr/local/nginx/sbin/nginx\n</code></pre><p>###安装libmcrypt</p>\n<pre><code>tar zxvf  libmcrypt-2.5.8.tar.gz\ncd  libmcrypt-2.5.8 \n./configure \nmake &amp;&amp; make install   #编译安装 \n</code></pre><p>###安装php</p>\n<pre><code>cd php-5.4.12\n./configure --prefix=/usr/local/php5 --with-config-file-path=/usr/local/php5/etc --with-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-mysql-sock=/tmp/mysql.sock --with-gd --with-iconv  --with-zlib  --enable-xml --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curlwrappers --enable-mbregex  --enable-fpm --enable-mbstring --enable-ftp --enable-gd-native-ttf --with-openssl --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-gettext --enable-session --with-mcrypt --with-curl --with-jpeg-dir --with-freetype-dir \nmake   #编译    \nmake install    #安装    \ncp  php.ini-production   /usr/local/php5/etc/php.ini  #复制php配置文件到安装目录    \nrm -rf /etc/php.ini   #删除系统自带配置文件    \nln -s /usr/local/php5/etc/php.ini  /etc/php.ini    #添加软链接    \ncp  /usr/local/php5/etc/php-fpm.conf.default   /usr/local/php5/etc/php-fpm.conf      #拷贝模板文件为php-fpm配置文件    \nvi  /usr/local/php5/etc/php-fpm.conf  #编辑    \nuser = www    #设置php-fpm运行账号为www    \ngroup = www   #设置php-fpm运行组为www    \npid = run/php-fpm.pid    #取消前面的分号    \ncp /usr/local/src/php-5.4.12/sapi/fpm/init.d.php-fpm   /etc/rc.d/init.d/php-fpm  #设置 php-fpm开机启动，拷贝php-fpm到启动目录    \nchmod +x /etc/rc.d/init.d/php-fpm  #添加执行权限    \nchkconfig php-fpm on    #设置开机启动    \nvi /usr/local/php5/etc/php.ini    #编辑配置文件    \n找到：disable_functions =    \n修改为：disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,getservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname   \n#列出PHP可以禁用的函数，如果某些程序需要用到这个函数，可以删除，取消禁用。    \n找到：;date.timezone =    \n修改为：date.timezone = PRC   #设置时区    \n找到：expose_php = On    \n修改为：expose_php = OFF  #禁止显示php版本的信息    \nPS：在编译PHP的过程中可能会报UNDEFINED REFERENCE TO `LIBICONV_OPEN 无法编译PHP LIBICONV错误.\n</code></pre><p>###配置nginx支持php</p>\n<pre><code>vi /usr/local/nginx/conf/nginx.conf      #编辑配置文件    \nuser   www  www;          #首行user去掉注释,修改Nginx运行组为www www；必须与/usr/local/php5/etc/php-fpm.conf中的user,group配置相同，否则php运行出错    \nindex  index.php  index.html index.htm;    #添加index.php    \n# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000    \n#    \nlocation ~ \\.php$ {    \n       root           html;#此处和server下面root保持一致,默认为html    \n       fastcgi_pass   127.0.0.1:9000;    \n       fastcgi_index  index.php;    \n       fastcgi_param  SCRIPT_FILENAME   /usr/local/nginx/html/$fastcgi_script_name;    \n       include        fastcgi_params;     \n注意：取消FastCGI server部分location的注释,并要注意fastcgi_param行的参数,改为/usr/local/nginx/html(此为网站根目录绝对路径)$fastcgi_script_name\npkill nginx    \n/usr/local/nginx/sbin/nginx #重启nginx\n</code></pre><p>###测试</p>\n<pre><code>cd /usr/local/nginx/html/\necho &lt;?php phpinfo(); &gt; ./info.php\n</code></pre><p>打开浏览器，输入：<code>192.168.1.110/info.php</code>,显示如下界面，说明环境搭建成功。</p>\n<p><img src=\"../../images/201412/2014-12-10_173100.jpg\" alt=\"\"></p>\n<hr>\n<p>到此,Centos的LNMP环境已经搭建成功，其中很多部分参考了网络资料，不为别的，只作为本人练习笔记，仅此而已。</p>\n<p>(end)</p>"},{"layout":"post","title":"MySQL的root密码丢失怎么办？","_content":"当我们Linux服务器中的MySQL超级用户密码丢了或者忘记了（唉，真是脑残！），这时候我们应该咋办，下面给出解决方案，分分钟搞定你的烦恼。\n\n首先，当我们在重新设置MySQL数据库密码期间必须确保此时服务器的安全状态，最安全的方法就是在服务器命令行操作，并且拔掉网线。\n\n接下来，关闭MySQL服务;\n\n\tservice mysqld stop\n\t//或者直接干掉进程\n\tpkill mysqld\n\n<!--more-->\n\n然后，我们使用`skip-grant-tables`绕过权限启动：\n\n\t/usr/bin/mysqld_safe --skip-grant-tables --user=mysql &\n\n等几秒钟...\n\n下面，我们直接使用无密码命令登录MySQL:\n\n\tmysql -u root\n\n此时，奇迹般地绕过密码直接进入MySQL了。\n\n好了，下面开始重新设置密码：\n\n\tupdate user set password=password('your password') where user='root' and host = 'localhost';\n\n**注意：**\n\n不要使用`set password=password('your pasword')`的方式来更改密码，会报错，因为使用了`skip-grant-tables`命令的缘故，切记。\n\n到此，我们就重设root密码成功了，界面我们重启MySQL服务。\n\n\tpkill mysqld\n\t/usr/bin/mysqld_safe --user=mysql &  或者 service mysqld restart\n\tmysql -uroot -p your pasword\n\n最终，我们已经给MySQL的root用户重新设置密码成功了，就这么回事，下面碰到这类问题就不是事儿了吧。\n\n(end)","source":"_posts/201412/2014-12-16-mysql_forget_passwd.md","raw":"---\nlayout : post\ntitle : MySQL的root密码丢失怎么办？\ncategory : MySQL\ntags : MySQL\n---\n当我们Linux服务器中的MySQL超级用户密码丢了或者忘记了（唉，真是脑残！），这时候我们应该咋办，下面给出解决方案，分分钟搞定你的烦恼。\n\n首先，当我们在重新设置MySQL数据库密码期间必须确保此时服务器的安全状态，最安全的方法就是在服务器命令行操作，并且拔掉网线。\n\n接下来，关闭MySQL服务;\n\n\tservice mysqld stop\n\t//或者直接干掉进程\n\tpkill mysqld\n\n<!--more-->\n\n然后，我们使用`skip-grant-tables`绕过权限启动：\n\n\t/usr/bin/mysqld_safe --skip-grant-tables --user=mysql &\n\n等几秒钟...\n\n下面，我们直接使用无密码命令登录MySQL:\n\n\tmysql -u root\n\n此时，奇迹般地绕过密码直接进入MySQL了。\n\n好了，下面开始重新设置密码：\n\n\tupdate user set password=password('your password') where user='root' and host = 'localhost';\n\n**注意：**\n\n不要使用`set password=password('your pasword')`的方式来更改密码，会报错，因为使用了`skip-grant-tables`命令的缘故，切记。\n\n到此，我们就重设root密码成功了，界面我们重启MySQL服务。\n\n\tpkill mysqld\n\t/usr/bin/mysqld_safe --user=mysql &  或者 service mysqld restart\n\tmysql -uroot -p your pasword\n\n最终，我们已经给MySQL的root用户重新设置密码成功了，就这么回事，下面碰到这类问题就不是事儿了吧。\n\n(end)","slug":"201412-2014-12-16-mysql-forget-passwd","published":1,"date":"2018-04-12T15:20:38.832Z","updated":"2018-04-12T15:20:38.832Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6y0067ass66wa28h6k","content":"<p>当我们Linux服务器中的MySQL超级用户密码丢了或者忘记了（唉，真是脑残！），这时候我们应该咋办，下面给出解决方案，分分钟搞定你的烦恼。</p>\n<p>首先，当我们在重新设置MySQL数据库密码期间必须确保此时服务器的安全状态，最安全的方法就是在服务器命令行操作，并且拔掉网线。</p>\n<p>接下来，关闭MySQL服务;</p>\n<pre><code>service mysqld stop\n//或者直接干掉进程\npkill mysqld\n</code></pre><a id=\"more\"></a>\n<p>然后，我们使用<code>skip-grant-tables</code>绕过权限启动：</p>\n<pre><code>/usr/bin/mysqld_safe --skip-grant-tables --user=mysql &amp;\n</code></pre><p>等几秒钟…</p>\n<p>下面，我们直接使用无密码命令登录MySQL:</p>\n<pre><code>mysql -u root\n</code></pre><p>此时，奇迹般地绕过密码直接进入MySQL了。</p>\n<p>好了，下面开始重新设置密码：</p>\n<pre><code>update user set password=password(&apos;your password&apos;) where user=&apos;root&apos; and host = &apos;localhost&apos;;\n</code></pre><p><strong>注意：</strong></p>\n<p>不要使用<code>set password=password(&#39;your pasword&#39;)</code>的方式来更改密码，会报错，因为使用了<code>skip-grant-tables</code>命令的缘故，切记。</p>\n<p>到此，我们就重设root密码成功了，界面我们重启MySQL服务。</p>\n<pre><code>pkill mysqld\n/usr/bin/mysqld_safe --user=mysql &amp;  或者 service mysqld restart\nmysql -uroot -p your pasword\n</code></pre><p>最终，我们已经给MySQL的root用户重新设置密码成功了，就这么回事，下面碰到这类问题就不是事儿了吧。</p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>当我们Linux服务器中的MySQL超级用户密码丢了或者忘记了（唉，真是脑残！），这时候我们应该咋办，下面给出解决方案，分分钟搞定你的烦恼。</p>\n<p>首先，当我们在重新设置MySQL数据库密码期间必须确保此时服务器的安全状态，最安全的方法就是在服务器命令行操作，并且拔掉网线。</p>\n<p>接下来，关闭MySQL服务;</p>\n<pre><code>service mysqld stop\n//或者直接干掉进程\npkill mysqld\n</code></pre>","more":"<p>然后，我们使用<code>skip-grant-tables</code>绕过权限启动：</p>\n<pre><code>/usr/bin/mysqld_safe --skip-grant-tables --user=mysql &amp;\n</code></pre><p>等几秒钟…</p>\n<p>下面，我们直接使用无密码命令登录MySQL:</p>\n<pre><code>mysql -u root\n</code></pre><p>此时，奇迹般地绕过密码直接进入MySQL了。</p>\n<p>好了，下面开始重新设置密码：</p>\n<pre><code>update user set password=password(&apos;your password&apos;) where user=&apos;root&apos; and host = &apos;localhost&apos;;\n</code></pre><p><strong>注意：</strong></p>\n<p>不要使用<code>set password=password(&#39;your pasword&#39;)</code>的方式来更改密码，会报错，因为使用了<code>skip-grant-tables</code>命令的缘故，切记。</p>\n<p>到此，我们就重设root密码成功了，界面我们重启MySQL服务。</p>\n<pre><code>pkill mysqld\n/usr/bin/mysqld_safe --user=mysql &amp;  或者 service mysqld restart\nmysql -uroot -p your pasword\n</code></pre><p>最终，我们已经给MySQL的root用户重新设置密码成功了，就这么回事，下面碰到这类问题就不是事儿了吧。</p>\n<p>(end)</p>"},{"layout":"post","title":"Vim使用技巧の快速加密","_content":"我们知道对于Linux服务器来说是支持多用户多任务环境的，聪明的Linux同学给我们每个用户都有各自的权限，彼此工作互不干扰。但是环境中有一个Super man存在呢，谁拥有它的权限就可以*'偷窥'*别人隐私了，真是不讲理。那么问题来了，我既没有super man权限，又不想给super man来看我们隐私，咋办呢？\n\n今天冬至，教您一招来保护自己的隐私，推翻霸道的super man独裁的世道，就这么任性。好了，废话不多说，玩过Linux的同学都知道**在Linux中一切都是文件**。\n\n<!--more-->\n\n所以，思路来了，既然一切皆是文件，那么可不可以对自己不想公开的私密文件进行加密呢。答案是肯定的，那么该如何加密呢？ 下面，介绍给你或者说我自己.\n\n###文件加密\n\n当想为编辑的文件进行加密时，可以在启动vim时使用`-x`参数：\n\n\tvim -x test.sh\n\nvim会向你要一个密码用于加密/解密该文件;\n\n\t//输入密码\n\tEnter encryption key:\n\n现在要小心地键入你的密码了. 键入的同时你看不到这些字符, 它们都以星号显示. 为了避免你的键入有误, Vim会要求你再次输入:\n\n\t//请再一次输入密码\n\tEnter same key again:\n\n现在，你可以放心地在文件里写下你的秘密了，任何人想偷看你加密文件或者你输入密码错误时，都会显示一堆乱码。\n\n###打开或关闭文件加密\n\n当我们想要停止对一个文件进行加密时，可以把`key`选项设置为一个空字符串：\n\n\tset key=\n\n下次你存盘该文件时就不会进行加密了. 通过设置´key´的值来进行加密可不是一个好主意, 因为密码会显露无遗. 任何趴在你肩膀上的人都能看到你的密码. 为避免这个问题大牛们创造了`:X`命令. 它会象`-x`一样问你要一个密码:\n\n\t:X\t\t//特别注意，这里是大写的X字母\n\tEnter encryption key: ******\n\tEnter same key again: ******\n\n###加密的限制\n\nVim中所用的加密算法还不够强大. 偶尔防范一下窥视者还可以, 对付\n一个加密专家尤其是他有充足的时间就不行了. 同时你应该知道交换文件\n并没有被加密, 所以在你编辑时拥有超级用户特权的人还是可以从该文件\n中获取未加密的内容. 有一个避免别人读取你的交换文件的办法就是禁用\n交换文件. 如果在命令行上指定了`-n`参数, 就不会生成交换文件(Vim会把所\n有东西都放到内存里). 比如, 下面的命令就在编辑加密文件`test.sh`时\n不使用交换文件:\n\n\tvim -x -n test.sh\n\n如果已经在编辑过程中, 也可以通过下面的命令禁用交换文件:\n\n\t:setlocal noswapfile\n\n因为没有了交换文件, 所以灾难恢复也不可能了. 这时最好是经常保存\n编辑的结果, 免得一番辛苦的成果杳然无踪.\n\n当文件在内存中时, 它是以普通文本的形式保存的. 任何有足够权限的\n人还是可以查看编辑器的内存和文件的内容. 如果你还用到了`viminfo`文件,\n要注意文本寄存器也可能会把你的机密在这里泄露. 如果你的确是要高度\n保密你的文件, 最好在一个没有联网的电脑上编辑, 使用足够强大的加密工\n具, 用完就把电脑锁在一个安全的地方.\n\n---\n\n###小结\n\n没有绝对的安全，所以如果想要百分百的安全那恐怕太难了，这里只是简单第介绍了一个小技巧来加密文件，而且很方便、快速、省事 :)\n\n(end)","source":"_posts/201412/2014-12-22-vim_miracle_encrypt_note.md","raw":"---\nlayout : post\ntitle : Vim使用技巧の快速加密\ncategory : Vim\ntags : Vim\n---\n我们知道对于Linux服务器来说是支持多用户多任务环境的，聪明的Linux同学给我们每个用户都有各自的权限，彼此工作互不干扰。但是环境中有一个Super man存在呢，谁拥有它的权限就可以*'偷窥'*别人隐私了，真是不讲理。那么问题来了，我既没有super man权限，又不想给super man来看我们隐私，咋办呢？\n\n今天冬至，教您一招来保护自己的隐私，推翻霸道的super man独裁的世道，就这么任性。好了，废话不多说，玩过Linux的同学都知道**在Linux中一切都是文件**。\n\n<!--more-->\n\n所以，思路来了，既然一切皆是文件，那么可不可以对自己不想公开的私密文件进行加密呢。答案是肯定的，那么该如何加密呢？ 下面，介绍给你或者说我自己.\n\n###文件加密\n\n当想为编辑的文件进行加密时，可以在启动vim时使用`-x`参数：\n\n\tvim -x test.sh\n\nvim会向你要一个密码用于加密/解密该文件;\n\n\t//输入密码\n\tEnter encryption key:\n\n现在要小心地键入你的密码了. 键入的同时你看不到这些字符, 它们都以星号显示. 为了避免你的键入有误, Vim会要求你再次输入:\n\n\t//请再一次输入密码\n\tEnter same key again:\n\n现在，你可以放心地在文件里写下你的秘密了，任何人想偷看你加密文件或者你输入密码错误时，都会显示一堆乱码。\n\n###打开或关闭文件加密\n\n当我们想要停止对一个文件进行加密时，可以把`key`选项设置为一个空字符串：\n\n\tset key=\n\n下次你存盘该文件时就不会进行加密了. 通过设置´key´的值来进行加密可不是一个好主意, 因为密码会显露无遗. 任何趴在你肩膀上的人都能看到你的密码. 为避免这个问题大牛们创造了`:X`命令. 它会象`-x`一样问你要一个密码:\n\n\t:X\t\t//特别注意，这里是大写的X字母\n\tEnter encryption key: ******\n\tEnter same key again: ******\n\n###加密的限制\n\nVim中所用的加密算法还不够强大. 偶尔防范一下窥视者还可以, 对付\n一个加密专家尤其是他有充足的时间就不行了. 同时你应该知道交换文件\n并没有被加密, 所以在你编辑时拥有超级用户特权的人还是可以从该文件\n中获取未加密的内容. 有一个避免别人读取你的交换文件的办法就是禁用\n交换文件. 如果在命令行上指定了`-n`参数, 就不会生成交换文件(Vim会把所\n有东西都放到内存里). 比如, 下面的命令就在编辑加密文件`test.sh`时\n不使用交换文件:\n\n\tvim -x -n test.sh\n\n如果已经在编辑过程中, 也可以通过下面的命令禁用交换文件:\n\n\t:setlocal noswapfile\n\n因为没有了交换文件, 所以灾难恢复也不可能了. 这时最好是经常保存\n编辑的结果, 免得一番辛苦的成果杳然无踪.\n\n当文件在内存中时, 它是以普通文本的形式保存的. 任何有足够权限的\n人还是可以查看编辑器的内存和文件的内容. 如果你还用到了`viminfo`文件,\n要注意文本寄存器也可能会把你的机密在这里泄露. 如果你的确是要高度\n保密你的文件, 最好在一个没有联网的电脑上编辑, 使用足够强大的加密工\n具, 用完就把电脑锁在一个安全的地方.\n\n---\n\n###小结\n\n没有绝对的安全，所以如果想要百分百的安全那恐怕太难了，这里只是简单第介绍了一个小技巧来加密文件，而且很方便、快速、省事 :)\n\n(end)","slug":"201412-2014-12-22-vim-miracle-encrypt-note","published":1,"date":"2018-04-12T15:20:38.833Z","updated":"2018-04-12T15:20:38.833Z","comments":1,"photos":[],"link":"","_id":"cjfwomb6z006aass6zfp8mb6r","content":"<p>我们知道对于Linux服务器来说是支持多用户多任务环境的，聪明的Linux同学给我们每个用户都有各自的权限，彼此工作互不干扰。但是环境中有一个Super man存在呢，谁拥有它的权限就可以<em>‘偷窥’</em>别人隐私了，真是不讲理。那么问题来了，我既没有super man权限，又不想给super man来看我们隐私，咋办呢？</p>\n<p>今天冬至，教您一招来保护自己的隐私，推翻霸道的super man独裁的世道，就这么任性。好了，废话不多说，玩过Linux的同学都知道<strong>在Linux中一切都是文件</strong>。</p>\n<a id=\"more\"></a>\n<p>所以，思路来了，既然一切皆是文件，那么可不可以对自己不想公开的私密文件进行加密呢。答案是肯定的，那么该如何加密呢？ 下面，介绍给你或者说我自己.</p>\n<p>###文件加密</p>\n<p>当想为编辑的文件进行加密时，可以在启动vim时使用<code>-x</code>参数：</p>\n<pre><code>vim -x test.sh\n</code></pre><p>vim会向你要一个密码用于加密/解密该文件;</p>\n<pre><code>//输入密码\nEnter encryption key:\n</code></pre><p>现在要小心地键入你的密码了. 键入的同时你看不到这些字符, 它们都以星号显示. 为了避免你的键入有误, Vim会要求你再次输入:</p>\n<pre><code>//请再一次输入密码\nEnter same key again:\n</code></pre><p>现在，你可以放心地在文件里写下你的秘密了，任何人想偷看你加密文件或者你输入密码错误时，都会显示一堆乱码。</p>\n<p>###打开或关闭文件加密</p>\n<p>当我们想要停止对一个文件进行加密时，可以把<code>key</code>选项设置为一个空字符串：</p>\n<pre><code>set key=\n</code></pre><p>下次你存盘该文件时就不会进行加密了. 通过设置´key´的值来进行加密可不是一个好主意, 因为密码会显露无遗. 任何趴在你肩膀上的人都能看到你的密码. 为避免这个问题大牛们创造了<code>:X</code>命令. 它会象<code>-x</code>一样问你要一个密码:</p>\n<pre><code>:X        //特别注意，这里是大写的X字母\nEnter encryption key: ******\nEnter same key again: ******\n</code></pre><p>###加密的限制</p>\n<p>Vim中所用的加密算法还不够强大. 偶尔防范一下窥视者还可以, 对付<br>一个加密专家尤其是他有充足的时间就不行了. 同时你应该知道交换文件<br>并没有被加密, 所以在你编辑时拥有超级用户特权的人还是可以从该文件<br>中获取未加密的内容. 有一个避免别人读取你的交换文件的办法就是禁用<br>交换文件. 如果在命令行上指定了<code>-n</code>参数, 就不会生成交换文件(Vim会把所<br>有东西都放到内存里). 比如, 下面的命令就在编辑加密文件<code>test.sh</code>时<br>不使用交换文件:</p>\n<pre><code>vim -x -n test.sh\n</code></pre><p>如果已经在编辑过程中, 也可以通过下面的命令禁用交换文件:</p>\n<pre><code>:setlocal noswapfile\n</code></pre><p>因为没有了交换文件, 所以灾难恢复也不可能了. 这时最好是经常保存<br>编辑的结果, 免得一番辛苦的成果杳然无踪.</p>\n<p>当文件在内存中时, 它是以普通文本的形式保存的. 任何有足够权限的<br>人还是可以查看编辑器的内存和文件的内容. 如果你还用到了<code>viminfo</code>文件,<br>要注意文本寄存器也可能会把你的机密在这里泄露. 如果你的确是要高度<br>保密你的文件, 最好在一个没有联网的电脑上编辑, 使用足够强大的加密工<br>具, 用完就把电脑锁在一个安全的地方.</p>\n<hr>\n<p>###小结</p>\n<p>没有绝对的安全，所以如果想要百分百的安全那恐怕太难了，这里只是简单第介绍了一个小技巧来加密文件，而且很方便、快速、省事 :)</p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>我们知道对于Linux服务器来说是支持多用户多任务环境的，聪明的Linux同学给我们每个用户都有各自的权限，彼此工作互不干扰。但是环境中有一个Super man存在呢，谁拥有它的权限就可以<em>‘偷窥’</em>别人隐私了，真是不讲理。那么问题来了，我既没有super man权限，又不想给super man来看我们隐私，咋办呢？</p>\n<p>今天冬至，教您一招来保护自己的隐私，推翻霸道的super man独裁的世道，就这么任性。好了，废话不多说，玩过Linux的同学都知道<strong>在Linux中一切都是文件</strong>。</p>","more":"<p>所以，思路来了，既然一切皆是文件，那么可不可以对自己不想公开的私密文件进行加密呢。答案是肯定的，那么该如何加密呢？ 下面，介绍给你或者说我自己.</p>\n<p>###文件加密</p>\n<p>当想为编辑的文件进行加密时，可以在启动vim时使用<code>-x</code>参数：</p>\n<pre><code>vim -x test.sh\n</code></pre><p>vim会向你要一个密码用于加密/解密该文件;</p>\n<pre><code>//输入密码\nEnter encryption key:\n</code></pre><p>现在要小心地键入你的密码了. 键入的同时你看不到这些字符, 它们都以星号显示. 为了避免你的键入有误, Vim会要求你再次输入:</p>\n<pre><code>//请再一次输入密码\nEnter same key again:\n</code></pre><p>现在，你可以放心地在文件里写下你的秘密了，任何人想偷看你加密文件或者你输入密码错误时，都会显示一堆乱码。</p>\n<p>###打开或关闭文件加密</p>\n<p>当我们想要停止对一个文件进行加密时，可以把<code>key</code>选项设置为一个空字符串：</p>\n<pre><code>set key=\n</code></pre><p>下次你存盘该文件时就不会进行加密了. 通过设置´key´的值来进行加密可不是一个好主意, 因为密码会显露无遗. 任何趴在你肩膀上的人都能看到你的密码. 为避免这个问题大牛们创造了<code>:X</code>命令. 它会象<code>-x</code>一样问你要一个密码:</p>\n<pre><code>:X        //特别注意，这里是大写的X字母\nEnter encryption key: ******\nEnter same key again: ******\n</code></pre><p>###加密的限制</p>\n<p>Vim中所用的加密算法还不够强大. 偶尔防范一下窥视者还可以, 对付<br>一个加密专家尤其是他有充足的时间就不行了. 同时你应该知道交换文件<br>并没有被加密, 所以在你编辑时拥有超级用户特权的人还是可以从该文件<br>中获取未加密的内容. 有一个避免别人读取你的交换文件的办法就是禁用<br>交换文件. 如果在命令行上指定了<code>-n</code>参数, 就不会生成交换文件(Vim会把所<br>有东西都放到内存里). 比如, 下面的命令就在编辑加密文件<code>test.sh</code>时<br>不使用交换文件:</p>\n<pre><code>vim -x -n test.sh\n</code></pre><p>如果已经在编辑过程中, 也可以通过下面的命令禁用交换文件:</p>\n<pre><code>:setlocal noswapfile\n</code></pre><p>因为没有了交换文件, 所以灾难恢复也不可能了. 这时最好是经常保存<br>编辑的结果, 免得一番辛苦的成果杳然无踪.</p>\n<p>当文件在内存中时, 它是以普通文本的形式保存的. 任何有足够权限的<br>人还是可以查看编辑器的内存和文件的内容. 如果你还用到了<code>viminfo</code>文件,<br>要注意文本寄存器也可能会把你的机密在这里泄露. 如果你的确是要高度<br>保密你的文件, 最好在一个没有联网的电脑上编辑, 使用足够强大的加密工<br>具, 用完就把电脑锁在一个安全的地方.</p>\n<hr>\n<p>###小结</p>\n<p>没有绝对的安全，所以如果想要百分百的安全那恐怕太难了，这里只是简单第介绍了一个小技巧来加密文件，而且很方便、快速、省事 :)</p>\n<p>(end)</p>"},{"layout":"post","title":"Kindle爱之初体验","_content":"自入手kindle差不多已经一个月了，这将近一个月的阅读体验确实本人感概良多，发现自己更爱读书了，也逐渐喜欢上和离不开 kindle了（推荐给喜欢阅读的小伙伴们~）。其实，早就有写一篇博客来记录这段时间的kindle初体验的想法了，奈何拖延综合症根深蒂固，自己无法自拔。今日早醒，神经恍惚，突然意识到不能再拖延了，于是才有了下面的内容，欢迎拍砖 :)\n\n<!--more-->\n\n##购买kindle之初一二事\n\n其实，早就有听说过kindle的大名了，知道她是为专注阅读而诞生的电子阅读器，最关键的是护眼很棒。又想到自己大学还没毕业、平时课也挺多、还得做项目或者研究前沿技术，除了上课自己几乎整日都把自己关在实验室里，似乎并没有多少时间来阅读，主要是当时自己并不怎么喜欢阅读，整天做技术就已经很累了，没有那个\"闲时间\"来阅读啥好的东东，于是乎就没有狠心花那几百大洋去给自己买个kindle玩玩了。\n\n就在2015的元旦之初，终于看完了拖延了将近一学期的“闲书”《遇见未知的自己》(张德芬著)，这是一本关于心灵的自身成长小说，自我感觉写的挺好，这里不再赘余书评了，大家可以点击[豆瓣查看](http://book.douban.com/subject/2340100/ )。看完后的当天晚上自己突然头脑一热，意识到我应该读更多的书，想想自从上了大学，到现在都两年半了，发觉自己只读过屈指可数的几本书啊（专业书除外），光想想都觉得羞愧、脸红，要是以后毕业后去面试，别人问我大学都读过哪些书啊、做个评价啊，估计自己除了尴尬就是枉为学生的羞愧了，还好意思说自己是大学生呢，唉~~\n\n当然，上面说到的只是一方面的啦，另外就是恍惚之间觉得不该把自己限制的这么窄，大千世界无奇不有，既然选择了技术这一行当，理所应当每日坚守技术道路，给予大部分时间来提升自己。但是，你要知道，学技术或者钻研啥好东西等等可不是生活的全部啊，如果只是一味地甚至日夜颠倒地做技术，锻炼身体、人际经营、娱乐或其他什么的都抛弃了，只顾闷头做技术，这样的人无疑是弄迷糊了什么是生活（曾经我觉得自己是这样的人呐）、丧失了生活得原本的意义，到最后，自己损害了自己的身体、越来越孤僻、变得不会说话、甚至整日神经兮兮的，想想都觉得可悲，哪怕最后真的学到了高深的技术，却需要这么高的代价，值得吗？看到这，也许会有同行不屑一笑说，“SB，技术才是硬道理...”， “逗*, 像我们这种挨踢屌丝，没得拼爹，只有苦逼似的没日没夜学技术，将来才可能逆袭啊...”等等。首先，我跟大家一样都是同道中人，深知其中苦与乐，记的哪听的一句话，“开心学程序， 快乐过生活”，这句话我曾一直作为自己的qq签名，我不反驳大家的看法，只要开心过、快乐过就够了，这里只保留我个人的看法。\n\n出于以上两点（当然还有其他次要原因）， 我觉得我应该多读书， 并决定以后每个月至少读一本书（现在看来，一本太少了，哈哈~~）， 每天抽出一个小时来读书。其实，我是属于那种比较细腻的人儿，嘿嘿，我怕自己花费太多时间在阅读上，遗漏了技术路线的进度，所以选择在晚上这个时间来看的，差不多我都是晚上九点半从实验室会寝室的，到寝室差不多快十点了，我们学校是晚上十一点断电的（周五六除外），除去洗漱等其他一些杂事，差不多有一个小时来供我睡觉前阅读，哈哈，想想都觉得快哉~~~\n\n所以后来在放寒假前终于入手了心仪已久的kindle阅读器，玩弄了一个下午，差不多功能就已经掌握的差不多了，接下来就按部就班的享受阅读了。\n\n附上一张刚入手时的照片:\n![pic](../../images/201502/kindle_new.jpg)\n\n##谈谈kindle的使用感受\n\n总的来说，kindle的阅读体验个人觉得蛮好的，这也就是我离不开kindle的原因了，相信你入手后也会很喜欢的，且看下面：\n\n1、**专注阅读**\n\nkindle专注于阅读，就只能阅读，不能听歌、看视频、玩游戏，能浏览网页，但体验性不好。所以后来有人问我kindle怎么怎么样，能不能上qq时，我就想说，你不会看上kindle的，买你的平板去吧。\n\n2、**电子墨水屏幕**\n\n这中显示屏，可以给你带来纸质版的阅读体验，表怀疑，真的跟纸质版相差不多，而且可以根据喜好自行调节字体样式和大小。起初，不太适应kindle每次换页时的一点闪屏，可能用习惯了智能手机的缘故吧，但习惯了就没有闪的感觉了，最后想说这种纸质版的阅读体验真的很赞。\n\n3、**柔和护眼，超长续航**\n\nkindle使用的是电子墨水屏幕，比较护眼，像我们平时如果使用手机或者ipad看电子书，时间一长眼睛就会很累甚至会流泪。kindle就不会出现那种问题，看的时间长了，如果你没有找个舒服的姿势，估计是脖子或者手很累，却不是眼睛很累，这点我还是比较喜欢的。另外就是kindke续航能力太强了，我回家后差不多每天看1-2个小时，用了三个星期左右，你说续航给力不？\n\n4、**单手阅读，轻便做笔记**\n\nkindle为方便单手持握，给屏幕划分了比例，很方便地实现了这个功能。还有就是方便做笔记，也方便查看，并且可以直接存储到云端进行管理。\n\n5、**携带方便**\n\n学挨踢的人都知道，一本《算法导论》那么厚的书，每次回家或者搬家都要塞进背包，一本还可以，多了真的就要命了，是吧，但kindle就可以放下1000多本那么厚的书都没问题，随着电子藏书的日益丰富，还可以建立并命名云端收藏夹，进行图书分类管理。个人分类还可以同步到其他Kindle设备和阅读软件上，海量图书，转瞬即得。\n\n6、......\n\n反正，好处多多，这里权就当给kindle做免费广告了，哈哈~~\n\n##选购图书\n\n有了kindle，剩下的自然就是买书和下载书了。按照习惯，看书一般会根据一些个人博客推荐的书单或平时了解到的，然后去豆瓣看相应的书评来选择，一般8.0以上的就算评价不错的书了。当然，好书太多了，并不是每本好书都适合自己，也不是每本书自己都读得懂，所以还得自己去筛选。\n\n接下来就是购买了，可以在亚马逊上或者多看上购买（我至今还没买过呢，嘿嘿~~），下面推荐一个比较好的免费的kindle电子书网站。\n\n**[读远](http://www.readfar.com/)** 网站，是专门提供给kindle用户的，强烈推荐，这是最棒的kindle电子书网站，各种书籍都有，质量很好，我一般会首先在这里搜索，读远上的书，好像有些是一些书友购买了，然后上传共享的（不知道算不算是盗版的）。而且可以免费下载，更好的是可以直接推送给kindle（这段时间估计停用了，以后应该会重新上线）。\n\n不过，如果真的要是有自己喜欢的书，又没有免费的资源，我也会花银子买下的，要学会给自己投资啊。\n\n\n\n---\n\n###小结：\n\n象征性的写个小结。其实，刚开始也害怕自己“浪费”太多时间在阅读上，耽误技术路线的进度，造成不好的结果，后来想想也是多虑了。给自己制定好阅读计划，规划好时间，剩下的就交给坚持吧，事在人为，对吧。\n\n最近看了于娟写的[《此生未完成》](http://book.douban.com/subject/6397275/),说的是作为一位母亲、女儿和妻子在被诊断为乳腺癌后的一年半岁月里的生命日记，在日记中反思生活细节，并发出“买车买房买不来健康”的感叹，引起网友关注和众多媒体热议。对其中一句**\"我们要用多大的代价，才能认清活着的意义\"**很是难忘,推荐大家有时间的话去看看，看完估计对生命会有不一样的看法和概念。\n\n好吧，就到这里。\n\n(end)","source":"_posts/201502/2015-02-07-experience_of_kindle.md","raw":"---\nlayout : post\ntitle : Kindle爱之初体验\ncategory : 随笔\ntags : Essay\n---\n自入手kindle差不多已经一个月了，这将近一个月的阅读体验确实本人感概良多，发现自己更爱读书了，也逐渐喜欢上和离不开 kindle了（推荐给喜欢阅读的小伙伴们~）。其实，早就有写一篇博客来记录这段时间的kindle初体验的想法了，奈何拖延综合症根深蒂固，自己无法自拔。今日早醒，神经恍惚，突然意识到不能再拖延了，于是才有了下面的内容，欢迎拍砖 :)\n\n<!--more-->\n\n##购买kindle之初一二事\n\n其实，早就有听说过kindle的大名了，知道她是为专注阅读而诞生的电子阅读器，最关键的是护眼很棒。又想到自己大学还没毕业、平时课也挺多、还得做项目或者研究前沿技术，除了上课自己几乎整日都把自己关在实验室里，似乎并没有多少时间来阅读，主要是当时自己并不怎么喜欢阅读，整天做技术就已经很累了，没有那个\"闲时间\"来阅读啥好的东东，于是乎就没有狠心花那几百大洋去给自己买个kindle玩玩了。\n\n就在2015的元旦之初，终于看完了拖延了将近一学期的“闲书”《遇见未知的自己》(张德芬著)，这是一本关于心灵的自身成长小说，自我感觉写的挺好，这里不再赘余书评了，大家可以点击[豆瓣查看](http://book.douban.com/subject/2340100/ )。看完后的当天晚上自己突然头脑一热，意识到我应该读更多的书，想想自从上了大学，到现在都两年半了，发觉自己只读过屈指可数的几本书啊（专业书除外），光想想都觉得羞愧、脸红，要是以后毕业后去面试，别人问我大学都读过哪些书啊、做个评价啊，估计自己除了尴尬就是枉为学生的羞愧了，还好意思说自己是大学生呢，唉~~\n\n当然，上面说到的只是一方面的啦，另外就是恍惚之间觉得不该把自己限制的这么窄，大千世界无奇不有，既然选择了技术这一行当，理所应当每日坚守技术道路，给予大部分时间来提升自己。但是，你要知道，学技术或者钻研啥好东西等等可不是生活的全部啊，如果只是一味地甚至日夜颠倒地做技术，锻炼身体、人际经营、娱乐或其他什么的都抛弃了，只顾闷头做技术，这样的人无疑是弄迷糊了什么是生活（曾经我觉得自己是这样的人呐）、丧失了生活得原本的意义，到最后，自己损害了自己的身体、越来越孤僻、变得不会说话、甚至整日神经兮兮的，想想都觉得可悲，哪怕最后真的学到了高深的技术，却需要这么高的代价，值得吗？看到这，也许会有同行不屑一笑说，“SB，技术才是硬道理...”， “逗*, 像我们这种挨踢屌丝，没得拼爹，只有苦逼似的没日没夜学技术，将来才可能逆袭啊...”等等。首先，我跟大家一样都是同道中人，深知其中苦与乐，记的哪听的一句话，“开心学程序， 快乐过生活”，这句话我曾一直作为自己的qq签名，我不反驳大家的看法，只要开心过、快乐过就够了，这里只保留我个人的看法。\n\n出于以上两点（当然还有其他次要原因）， 我觉得我应该多读书， 并决定以后每个月至少读一本书（现在看来，一本太少了，哈哈~~）， 每天抽出一个小时来读书。其实，我是属于那种比较细腻的人儿，嘿嘿，我怕自己花费太多时间在阅读上，遗漏了技术路线的进度，所以选择在晚上这个时间来看的，差不多我都是晚上九点半从实验室会寝室的，到寝室差不多快十点了，我们学校是晚上十一点断电的（周五六除外），除去洗漱等其他一些杂事，差不多有一个小时来供我睡觉前阅读，哈哈，想想都觉得快哉~~~\n\n所以后来在放寒假前终于入手了心仪已久的kindle阅读器，玩弄了一个下午，差不多功能就已经掌握的差不多了，接下来就按部就班的享受阅读了。\n\n附上一张刚入手时的照片:\n![pic](../../images/201502/kindle_new.jpg)\n\n##谈谈kindle的使用感受\n\n总的来说，kindle的阅读体验个人觉得蛮好的，这也就是我离不开kindle的原因了，相信你入手后也会很喜欢的，且看下面：\n\n1、**专注阅读**\n\nkindle专注于阅读，就只能阅读，不能听歌、看视频、玩游戏，能浏览网页，但体验性不好。所以后来有人问我kindle怎么怎么样，能不能上qq时，我就想说，你不会看上kindle的，买你的平板去吧。\n\n2、**电子墨水屏幕**\n\n这中显示屏，可以给你带来纸质版的阅读体验，表怀疑，真的跟纸质版相差不多，而且可以根据喜好自行调节字体样式和大小。起初，不太适应kindle每次换页时的一点闪屏，可能用习惯了智能手机的缘故吧，但习惯了就没有闪的感觉了，最后想说这种纸质版的阅读体验真的很赞。\n\n3、**柔和护眼，超长续航**\n\nkindle使用的是电子墨水屏幕，比较护眼，像我们平时如果使用手机或者ipad看电子书，时间一长眼睛就会很累甚至会流泪。kindle就不会出现那种问题，看的时间长了，如果你没有找个舒服的姿势，估计是脖子或者手很累，却不是眼睛很累，这点我还是比较喜欢的。另外就是kindke续航能力太强了，我回家后差不多每天看1-2个小时，用了三个星期左右，你说续航给力不？\n\n4、**单手阅读，轻便做笔记**\n\nkindle为方便单手持握，给屏幕划分了比例，很方便地实现了这个功能。还有就是方便做笔记，也方便查看，并且可以直接存储到云端进行管理。\n\n5、**携带方便**\n\n学挨踢的人都知道，一本《算法导论》那么厚的书，每次回家或者搬家都要塞进背包，一本还可以，多了真的就要命了，是吧，但kindle就可以放下1000多本那么厚的书都没问题，随着电子藏书的日益丰富，还可以建立并命名云端收藏夹，进行图书分类管理。个人分类还可以同步到其他Kindle设备和阅读软件上，海量图书，转瞬即得。\n\n6、......\n\n反正，好处多多，这里权就当给kindle做免费广告了，哈哈~~\n\n##选购图书\n\n有了kindle，剩下的自然就是买书和下载书了。按照习惯，看书一般会根据一些个人博客推荐的书单或平时了解到的，然后去豆瓣看相应的书评来选择，一般8.0以上的就算评价不错的书了。当然，好书太多了，并不是每本好书都适合自己，也不是每本书自己都读得懂，所以还得自己去筛选。\n\n接下来就是购买了，可以在亚马逊上或者多看上购买（我至今还没买过呢，嘿嘿~~），下面推荐一个比较好的免费的kindle电子书网站。\n\n**[读远](http://www.readfar.com/)** 网站，是专门提供给kindle用户的，强烈推荐，这是最棒的kindle电子书网站，各种书籍都有，质量很好，我一般会首先在这里搜索，读远上的书，好像有些是一些书友购买了，然后上传共享的（不知道算不算是盗版的）。而且可以免费下载，更好的是可以直接推送给kindle（这段时间估计停用了，以后应该会重新上线）。\n\n不过，如果真的要是有自己喜欢的书，又没有免费的资源，我也会花银子买下的，要学会给自己投资啊。\n\n\n\n---\n\n###小结：\n\n象征性的写个小结。其实，刚开始也害怕自己“浪费”太多时间在阅读上，耽误技术路线的进度，造成不好的结果，后来想想也是多虑了。给自己制定好阅读计划，规划好时间，剩下的就交给坚持吧，事在人为，对吧。\n\n最近看了于娟写的[《此生未完成》](http://book.douban.com/subject/6397275/),说的是作为一位母亲、女儿和妻子在被诊断为乳腺癌后的一年半岁月里的生命日记，在日记中反思生活细节，并发出“买车买房买不来健康”的感叹，引起网友关注和众多媒体热议。对其中一句**\"我们要用多大的代价，才能认清活着的意义\"**很是难忘,推荐大家有时间的话去看看，看完估计对生命会有不一样的看法和概念。\n\n好吧，就到这里。\n\n(end)","slug":"201502-2015-02-07-experience-of-kindle","published":1,"date":"2018-04-12T15:20:38.833Z","updated":"2018-04-12T15:20:38.833Z","comments":1,"photos":[],"link":"","_id":"cjfwomb70006dass6xzvyp32h","content":"<p>自入手kindle差不多已经一个月了，这将近一个月的阅读体验确实本人感概良多，发现自己更爱读书了，也逐渐喜欢上和离不开 kindle了（推荐给喜欢阅读的小伙伴们~）。其实，早就有写一篇博客来记录这段时间的kindle初体验的想法了，奈何拖延综合症根深蒂固，自己无法自拔。今日早醒，神经恍惚，突然意识到不能再拖延了，于是才有了下面的内容，欢迎拍砖 :)</p>\n<a id=\"more\"></a>\n<p>##购买kindle之初一二事</p>\n<p>其实，早就有听说过kindle的大名了，知道她是为专注阅读而诞生的电子阅读器，最关键的是护眼很棒。又想到自己大学还没毕业、平时课也挺多、还得做项目或者研究前沿技术，除了上课自己几乎整日都把自己关在实验室里，似乎并没有多少时间来阅读，主要是当时自己并不怎么喜欢阅读，整天做技术就已经很累了，没有那个”闲时间”来阅读啥好的东东，于是乎就没有狠心花那几百大洋去给自己买个kindle玩玩了。</p>\n<p>就在2015的元旦之初，终于看完了拖延了将近一学期的“闲书”《遇见未知的自己》(张德芬著)，这是一本关于心灵的自身成长小说，自我感觉写的挺好，这里不再赘余书评了，大家可以点击<a href=\"http://book.douban.com/subject/2340100/\" target=\"_blank\" rel=\"noopener\">豆瓣查看</a>。看完后的当天晚上自己突然头脑一热，意识到我应该读更多的书，想想自从上了大学，到现在都两年半了，发觉自己只读过屈指可数的几本书啊（专业书除外），光想想都觉得羞愧、脸红，要是以后毕业后去面试，别人问我大学都读过哪些书啊、做个评价啊，估计自己除了尴尬就是枉为学生的羞愧了，还好意思说自己是大学生呢，唉~~</p>\n<p>当然，上面说到的只是一方面的啦，另外就是恍惚之间觉得不该把自己限制的这么窄，大千世界无奇不有，既然选择了技术这一行当，理所应当每日坚守技术道路，给予大部分时间来提升自己。但是，你要知道，学技术或者钻研啥好东西等等可不是生活的全部啊，如果只是一味地甚至日夜颠倒地做技术，锻炼身体、人际经营、娱乐或其他什么的都抛弃了，只顾闷头做技术，这样的人无疑是弄迷糊了什么是生活（曾经我觉得自己是这样的人呐）、丧失了生活得原本的意义，到最后，自己损害了自己的身体、越来越孤僻、变得不会说话、甚至整日神经兮兮的，想想都觉得可悲，哪怕最后真的学到了高深的技术，却需要这么高的代价，值得吗？看到这，也许会有同行不屑一笑说，“SB，技术才是硬道理…”， “逗*, 像我们这种挨踢屌丝，没得拼爹，只有苦逼似的没日没夜学技术，将来才可能逆袭啊…”等等。首先，我跟大家一样都是同道中人，深知其中苦与乐，记的哪听的一句话，“开心学程序， 快乐过生活”，这句话我曾一直作为自己的qq签名，我不反驳大家的看法，只要开心过、快乐过就够了，这里只保留我个人的看法。</p>\n<p>出于以上两点（当然还有其他次要原因）， 我觉得我应该多读书， 并决定以后每个月至少读一本书（现在看来，一本太少了，哈哈<del>）， 每天抽出一个小时来读书。其实，我是属于那种比较细腻的人儿，嘿嘿，我怕自己花费太多时间在阅读上，遗漏了技术路线的进度，所以选择在晚上这个时间来看的，差不多我都是晚上九点半从实验室会寝室的，到寝室差不多快十点了，我们学校是晚上十一点断电的（周五六除外），除去洗漱等其他一些杂事，差不多有一个小时来供我睡觉前阅读，哈哈，想想都觉得快哉</del>~</p>\n<p>所以后来在放寒假前终于入手了心仪已久的kindle阅读器，玩弄了一个下午，差不多功能就已经掌握的差不多了，接下来就按部就班的享受阅读了。</p>\n<p>附上一张刚入手时的照片:<br><img src=\"../../images/201502/kindle_new.jpg\" alt=\"pic\"></p>\n<p>##谈谈kindle的使用感受</p>\n<p>总的来说，kindle的阅读体验个人觉得蛮好的，这也就是我离不开kindle的原因了，相信你入手后也会很喜欢的，且看下面：</p>\n<p>1、<strong>专注阅读</strong></p>\n<p>kindle专注于阅读，就只能阅读，不能听歌、看视频、玩游戏，能浏览网页，但体验性不好。所以后来有人问我kindle怎么怎么样，能不能上qq时，我就想说，你不会看上kindle的，买你的平板去吧。</p>\n<p>2、<strong>电子墨水屏幕</strong></p>\n<p>这中显示屏，可以给你带来纸质版的阅读体验，表怀疑，真的跟纸质版相差不多，而且可以根据喜好自行调节字体样式和大小。起初，不太适应kindle每次换页时的一点闪屏，可能用习惯了智能手机的缘故吧，但习惯了就没有闪的感觉了，最后想说这种纸质版的阅读体验真的很赞。</p>\n<p>3、<strong>柔和护眼，超长续航</strong></p>\n<p>kindle使用的是电子墨水屏幕，比较护眼，像我们平时如果使用手机或者ipad看电子书，时间一长眼睛就会很累甚至会流泪。kindle就不会出现那种问题，看的时间长了，如果你没有找个舒服的姿势，估计是脖子或者手很累，却不是眼睛很累，这点我还是比较喜欢的。另外就是kindke续航能力太强了，我回家后差不多每天看1-2个小时，用了三个星期左右，你说续航给力不？</p>\n<p>4、<strong>单手阅读，轻便做笔记</strong></p>\n<p>kindle为方便单手持握，给屏幕划分了比例，很方便地实现了这个功能。还有就是方便做笔记，也方便查看，并且可以直接存储到云端进行管理。</p>\n<p>5、<strong>携带方便</strong></p>\n<p>学挨踢的人都知道，一本《算法导论》那么厚的书，每次回家或者搬家都要塞进背包，一本还可以，多了真的就要命了，是吧，但kindle就可以放下1000多本那么厚的书都没问题，随着电子藏书的日益丰富，还可以建立并命名云端收藏夹，进行图书分类管理。个人分类还可以同步到其他Kindle设备和阅读软件上，海量图书，转瞬即得。</p>\n<p>6、……</p>\n<p>反正，好处多多，这里权就当给kindle做免费广告了，哈哈~~</p>\n<p>##选购图书</p>\n<p>有了kindle，剩下的自然就是买书和下载书了。按照习惯，看书一般会根据一些个人博客推荐的书单或平时了解到的，然后去豆瓣看相应的书评来选择，一般8.0以上的就算评价不错的书了。当然，好书太多了，并不是每本好书都适合自己，也不是每本书自己都读得懂，所以还得自己去筛选。</p>\n<p>接下来就是购买了，可以在亚马逊上或者多看上购买（我至今还没买过呢，嘿嘿~~），下面推荐一个比较好的免费的kindle电子书网站。</p>\n<p><strong><a href=\"http://www.readfar.com/\" target=\"_blank\" rel=\"noopener\">读远</a></strong> 网站，是专门提供给kindle用户的，强烈推荐，这是最棒的kindle电子书网站，各种书籍都有，质量很好，我一般会首先在这里搜索，读远上的书，好像有些是一些书友购买了，然后上传共享的（不知道算不算是盗版的）。而且可以免费下载，更好的是可以直接推送给kindle（这段时间估计停用了，以后应该会重新上线）。</p>\n<p>不过，如果真的要是有自己喜欢的书，又没有免费的资源，我也会花银子买下的，要学会给自己投资啊。</p>\n<hr>\n<p>###小结：</p>\n<p>象征性的写个小结。其实，刚开始也害怕自己“浪费”太多时间在阅读上，耽误技术路线的进度，造成不好的结果，后来想想也是多虑了。给自己制定好阅读计划，规划好时间，剩下的就交给坚持吧，事在人为，对吧。</p>\n<p>最近看了于娟写的<a href=\"http://book.douban.com/subject/6397275/\" target=\"_blank\" rel=\"noopener\">《此生未完成》</a>,说的是作为一位母亲、女儿和妻子在被诊断为乳腺癌后的一年半岁月里的生命日记，在日记中反思生活细节，并发出“买车买房买不来健康”的感叹，引起网友关注和众多媒体热议。对其中一句<strong>“我们要用多大的代价，才能认清活着的意义”</strong>很是难忘,推荐大家有时间的话去看看，看完估计对生命会有不一样的看法和概念。</p>\n<p>好吧，就到这里。</p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>自入手kindle差不多已经一个月了，这将近一个月的阅读体验确实本人感概良多，发现自己更爱读书了，也逐渐喜欢上和离不开 kindle了（推荐给喜欢阅读的小伙伴们~）。其实，早就有写一篇博客来记录这段时间的kindle初体验的想法了，奈何拖延综合症根深蒂固，自己无法自拔。今日早醒，神经恍惚，突然意识到不能再拖延了，于是才有了下面的内容，欢迎拍砖 :)</p>","more":"<p>##购买kindle之初一二事</p>\n<p>其实，早就有听说过kindle的大名了，知道她是为专注阅读而诞生的电子阅读器，最关键的是护眼很棒。又想到自己大学还没毕业、平时课也挺多、还得做项目或者研究前沿技术，除了上课自己几乎整日都把自己关在实验室里，似乎并没有多少时间来阅读，主要是当时自己并不怎么喜欢阅读，整天做技术就已经很累了，没有那个”闲时间”来阅读啥好的东东，于是乎就没有狠心花那几百大洋去给自己买个kindle玩玩了。</p>\n<p>就在2015的元旦之初，终于看完了拖延了将近一学期的“闲书”《遇见未知的自己》(张德芬著)，这是一本关于心灵的自身成长小说，自我感觉写的挺好，这里不再赘余书评了，大家可以点击<a href=\"http://book.douban.com/subject/2340100/\" target=\"_blank\" rel=\"noopener\">豆瓣查看</a>。看完后的当天晚上自己突然头脑一热，意识到我应该读更多的书，想想自从上了大学，到现在都两年半了，发觉自己只读过屈指可数的几本书啊（专业书除外），光想想都觉得羞愧、脸红，要是以后毕业后去面试，别人问我大学都读过哪些书啊、做个评价啊，估计自己除了尴尬就是枉为学生的羞愧了，还好意思说自己是大学生呢，唉~~</p>\n<p>当然，上面说到的只是一方面的啦，另外就是恍惚之间觉得不该把自己限制的这么窄，大千世界无奇不有，既然选择了技术这一行当，理所应当每日坚守技术道路，给予大部分时间来提升自己。但是，你要知道，学技术或者钻研啥好东西等等可不是生活的全部啊，如果只是一味地甚至日夜颠倒地做技术，锻炼身体、人际经营、娱乐或其他什么的都抛弃了，只顾闷头做技术，这样的人无疑是弄迷糊了什么是生活（曾经我觉得自己是这样的人呐）、丧失了生活得原本的意义，到最后，自己损害了自己的身体、越来越孤僻、变得不会说话、甚至整日神经兮兮的，想想都觉得可悲，哪怕最后真的学到了高深的技术，却需要这么高的代价，值得吗？看到这，也许会有同行不屑一笑说，“SB，技术才是硬道理…”， “逗*, 像我们这种挨踢屌丝，没得拼爹，只有苦逼似的没日没夜学技术，将来才可能逆袭啊…”等等。首先，我跟大家一样都是同道中人，深知其中苦与乐，记的哪听的一句话，“开心学程序， 快乐过生活”，这句话我曾一直作为自己的qq签名，我不反驳大家的看法，只要开心过、快乐过就够了，这里只保留我个人的看法。</p>\n<p>出于以上两点（当然还有其他次要原因）， 我觉得我应该多读书， 并决定以后每个月至少读一本书（现在看来，一本太少了，哈哈<del>）， 每天抽出一个小时来读书。其实，我是属于那种比较细腻的人儿，嘿嘿，我怕自己花费太多时间在阅读上，遗漏了技术路线的进度，所以选择在晚上这个时间来看的，差不多我都是晚上九点半从实验室会寝室的，到寝室差不多快十点了，我们学校是晚上十一点断电的（周五六除外），除去洗漱等其他一些杂事，差不多有一个小时来供我睡觉前阅读，哈哈，想想都觉得快哉</del>~</p>\n<p>所以后来在放寒假前终于入手了心仪已久的kindle阅读器，玩弄了一个下午，差不多功能就已经掌握的差不多了，接下来就按部就班的享受阅读了。</p>\n<p>附上一张刚入手时的照片:<br><img src=\"../../images/201502/kindle_new.jpg\" alt=\"pic\"></p>\n<p>##谈谈kindle的使用感受</p>\n<p>总的来说，kindle的阅读体验个人觉得蛮好的，这也就是我离不开kindle的原因了，相信你入手后也会很喜欢的，且看下面：</p>\n<p>1、<strong>专注阅读</strong></p>\n<p>kindle专注于阅读，就只能阅读，不能听歌、看视频、玩游戏，能浏览网页，但体验性不好。所以后来有人问我kindle怎么怎么样，能不能上qq时，我就想说，你不会看上kindle的，买你的平板去吧。</p>\n<p>2、<strong>电子墨水屏幕</strong></p>\n<p>这中显示屏，可以给你带来纸质版的阅读体验，表怀疑，真的跟纸质版相差不多，而且可以根据喜好自行调节字体样式和大小。起初，不太适应kindle每次换页时的一点闪屏，可能用习惯了智能手机的缘故吧，但习惯了就没有闪的感觉了，最后想说这种纸质版的阅读体验真的很赞。</p>\n<p>3、<strong>柔和护眼，超长续航</strong></p>\n<p>kindle使用的是电子墨水屏幕，比较护眼，像我们平时如果使用手机或者ipad看电子书，时间一长眼睛就会很累甚至会流泪。kindle就不会出现那种问题，看的时间长了，如果你没有找个舒服的姿势，估计是脖子或者手很累，却不是眼睛很累，这点我还是比较喜欢的。另外就是kindke续航能力太强了，我回家后差不多每天看1-2个小时，用了三个星期左右，你说续航给力不？</p>\n<p>4、<strong>单手阅读，轻便做笔记</strong></p>\n<p>kindle为方便单手持握，给屏幕划分了比例，很方便地实现了这个功能。还有就是方便做笔记，也方便查看，并且可以直接存储到云端进行管理。</p>\n<p>5、<strong>携带方便</strong></p>\n<p>学挨踢的人都知道，一本《算法导论》那么厚的书，每次回家或者搬家都要塞进背包，一本还可以，多了真的就要命了，是吧，但kindle就可以放下1000多本那么厚的书都没问题，随着电子藏书的日益丰富，还可以建立并命名云端收藏夹，进行图书分类管理。个人分类还可以同步到其他Kindle设备和阅读软件上，海量图书，转瞬即得。</p>\n<p>6、……</p>\n<p>反正，好处多多，这里权就当给kindle做免费广告了，哈哈~~</p>\n<p>##选购图书</p>\n<p>有了kindle，剩下的自然就是买书和下载书了。按照习惯，看书一般会根据一些个人博客推荐的书单或平时了解到的，然后去豆瓣看相应的书评来选择，一般8.0以上的就算评价不错的书了。当然，好书太多了，并不是每本好书都适合自己，也不是每本书自己都读得懂，所以还得自己去筛选。</p>\n<p>接下来就是购买了，可以在亚马逊上或者多看上购买（我至今还没买过呢，嘿嘿~~），下面推荐一个比较好的免费的kindle电子书网站。</p>\n<p><strong><a href=\"http://www.readfar.com/\" target=\"_blank\" rel=\"noopener\">读远</a></strong> 网站，是专门提供给kindle用户的，强烈推荐，这是最棒的kindle电子书网站，各种书籍都有，质量很好，我一般会首先在这里搜索，读远上的书，好像有些是一些书友购买了，然后上传共享的（不知道算不算是盗版的）。而且可以免费下载，更好的是可以直接推送给kindle（这段时间估计停用了，以后应该会重新上线）。</p>\n<p>不过，如果真的要是有自己喜欢的书，又没有免费的资源，我也会花银子买下的，要学会给自己投资啊。</p>\n<hr>\n<p>###小结：</p>\n<p>象征性的写个小结。其实，刚开始也害怕自己“浪费”太多时间在阅读上，耽误技术路线的进度，造成不好的结果，后来想想也是多虑了。给自己制定好阅读计划，规划好时间，剩下的就交给坚持吧，事在人为，对吧。</p>\n<p>最近看了于娟写的<a href=\"http://book.douban.com/subject/6397275/\" target=\"_blank\" rel=\"noopener\">《此生未完成》</a>,说的是作为一位母亲、女儿和妻子在被诊断为乳腺癌后的一年半岁月里的生命日记，在日记中反思生活细节，并发出“买车买房买不来健康”的感叹，引起网友关注和众多媒体热议。对其中一句<strong>“我们要用多大的代价，才能认清活着的意义”</strong>很是难忘,推荐大家有时间的话去看看，看完估计对生命会有不一样的看法和概念。</p>\n<p>好吧，就到这里。</p>\n<p>(end)</p>"},{"layout":"post","title":"大学最后一个寒假","_content":"猛地意识到今天就已经是3月7日了，而我买的是明天的火车票，对于我来说意味着毫无防备并且来不及拾掇就要滚回学校了。呜呼，时间过的真TM快，将近俩月的大学最后一个大长假就这么一睁眼一闭眼就嗝屁（方言）了,虽然到家没过一半时间就已经呆够了想回去，但此时此刻即将出发却也难免有恋家情节......\n\n明天就要出发了，晚上简单收拾了下行李后就被母亲大人催促着早点睡觉，而对于一个习惯了熬夜的夜猫子来说很早睡觉真的不习惯，相信你懂得。于是打开笔记本，想看点东西却也没有了心思，干脆写点有感而发的东西也不错哦，算是这个寒假小结吧，说干就干，于是就有了下文 :)\n\n<!--more-->\n\n先说点高兴的事儿吧，就是年前把驾驶证考下来了，拖拖拉拉了将近两年，终于给搞定了，心里甚是高兴。记得寒假我是1月19号到的家，然后我爹就告诉我23号就要考科目三，听到我瞬间就石化了，心想时间赶得这么紧啊都来不及缓几天，然后就连续几天都在练车，由于时间短又仓促，考试当天都心虚，还好最终在极度紧张中顺利考过了科目三。后来又等了将近半个月把科目四拿下了，考完科目四下午就直接拿到驾驶证了，了却了心中一桩心事，哈哈。\n\n再说点不高兴的事儿吧，想想就虐心，如果你看到这了，应该可以想到是什么了。当然就是英语六级啊，挂掉了，呜呜~~~，可恶的不是挂掉而是就差那么一点点分。所以下学期的目标计划之一就是拿下英语六级，嗯，就这样！\n\n按说，刚开始我应该先说的是学习方面、学了哪些技术、完成了多少计划等等一些东西，后来想想，还是觉得没必要，就像韩寒说的：“我们可以不上学，但是不可以不学习”,似乎没什么关系啊，哈哈。我现在倒觉得学习是留给自己的，没必要炫耀给别人，更不想被别人说成是呆子，所以学习方面（略），只是完成计划的50%而已......\n\n因为，寒假回来前刚入手了kindle，整个寒假都在体验，个人觉得很赞，这里不再赘余kindle方面。我想说的是在寒假期间，我差不多每天抽出一个小时左右来阅读（睡觉前一小时），虽不至于每晚都能够坚持，但也差不多了，所以整个寒假算下来差不多读了有四本书，而且每本读完后都觉得很赞。下面说下感受吧：\n\n1、**[此生未完成](http://book.douban.com/subject/6397275/)**（于娟）\n\n本书记录的是32岁的复旦女博士于娟当时作为母亲、女儿和妻子在被诊断为乳腺癌后的一年半岁月里的生命日记，在日记中反思生活细节，并发出“买车买房买不来健康”的感叹，引起网友关注和众多媒体热议。对其中一句\"我们要用多大的代价，才能认清活着的意义\"很是难忘,推荐大家有时间的话去看看，不是很厚的一本书，看完估计对生命会有不一样的看法和概念。看完后，认识到癌症是多么的可怕，我们都应该关注健康，不要等到身体出现问题了才去关注，要活在当下。\n\n2、**[看见](http://book.douban.com/subject/20427187/)**（柴静）\n\n《看见》是知名记者和主持人柴静讲述央视十年历程的自传性作品，既是柴静个人的成长告白书，某种程度上亦可视作中国社会十年变迁的备忘录。柴静的《看见》中大量的新闻报道给人看见未曾看见的现实，文字朴实但厚重，却也少不了很多的经典语录，的确是本好书。\n\n很喜欢的一句语录：\n\n> 不要因为走得太远，忘了我们为什么出发。如果哀痛中，我们不再出发，那你的离去还有什么意义？\n> ---《看见》\n\n3、**[疯狂的程序员](http://book.douban.com/subject/3267945/)**（绝影）\n\n这本书是从朋友那里所知道的，而且豆瓣评分很高，于是就看了，感觉不错，如果你是搞挨踢的，相信你会看到自己的影子，真的。\n\n书中描写了绝影等程序员的成长之路，分为大学、工作、创业三部分。作者笔下以绝影、BOSS liu、Bug Yang等为代表的程序员是大多程序员成长的真实写照，很多网友看过小说之后都说“这些事好像就是我身上发生的事情，但是我写不出来，绝影写出来了”，个人感觉的确是这样的，你可以看一看。\n\n个人很喜欢的一句语录：\n\n> 要么做第一个，要么做最好的一个。   \n\n4、**[天才在左 疯子在右](http://book.douban.com/subject/4242172/)**（高铭 ）_完成50%_\n\n从第一个访谈开始，用了两天的时间发疯版的读完，怎么说呢？意犹未尽。面对这些所谓的精神病患者，他们的思维逻辑严密到一环扣一环，从哲学到宗教、从传统物理学到量子力学，他们的关注与思辨令捧着书的正常人汗颜。我不停的在问自己，究竟是他们有病还只是因为我们想得太少、太过肤浅？究竟什么才算是正常人？就是群体的认可？那究竟什么才算是精神病患者？只是被多数人定义了的一小部分？（来自一个网友的评论）\n\n记一段，在我看来印象最深刻或者说最恐惧的一部分：\n\n> 那天晚上我失眠了，各种各样乱七八糟的思绪混在一起，理不清头绪。我懂了他说的，但是我不知道怎么做。第二天我很想再次跟他聊聊，突然间我觉得这很可怕。因为我昨儿晚上睡觉前一直在设计把DV固定在衣服的什么位置上。\n> \n> 我想起N个精神病医师告诉我的：千万千万千万被太在意精神病人说的话，别深想他们告诉你的世界观，否侧你迟早会疯的。\n\n---\n\n###小结\n\n寒假匆匆而来，却又急忙而去，留下多少，只有心知道。而我也愿意翻山越岭看风景。\n\n（end）\n\n\n","source":"_posts/201503/2015-03-07-winter_holiday_conclusion.md","raw":"---\nlayout : post\ntitle : 大学最后一个寒假\ncategory : 随笔\ntags : Essay\n---\n猛地意识到今天就已经是3月7日了，而我买的是明天的火车票，对于我来说意味着毫无防备并且来不及拾掇就要滚回学校了。呜呼，时间过的真TM快，将近俩月的大学最后一个大长假就这么一睁眼一闭眼就嗝屁（方言）了,虽然到家没过一半时间就已经呆够了想回去，但此时此刻即将出发却也难免有恋家情节......\n\n明天就要出发了，晚上简单收拾了下行李后就被母亲大人催促着早点睡觉，而对于一个习惯了熬夜的夜猫子来说很早睡觉真的不习惯，相信你懂得。于是打开笔记本，想看点东西却也没有了心思，干脆写点有感而发的东西也不错哦，算是这个寒假小结吧，说干就干，于是就有了下文 :)\n\n<!--more-->\n\n先说点高兴的事儿吧，就是年前把驾驶证考下来了，拖拖拉拉了将近两年，终于给搞定了，心里甚是高兴。记得寒假我是1月19号到的家，然后我爹就告诉我23号就要考科目三，听到我瞬间就石化了，心想时间赶得这么紧啊都来不及缓几天，然后就连续几天都在练车，由于时间短又仓促，考试当天都心虚，还好最终在极度紧张中顺利考过了科目三。后来又等了将近半个月把科目四拿下了，考完科目四下午就直接拿到驾驶证了，了却了心中一桩心事，哈哈。\n\n再说点不高兴的事儿吧，想想就虐心，如果你看到这了，应该可以想到是什么了。当然就是英语六级啊，挂掉了，呜呜~~~，可恶的不是挂掉而是就差那么一点点分。所以下学期的目标计划之一就是拿下英语六级，嗯，就这样！\n\n按说，刚开始我应该先说的是学习方面、学了哪些技术、完成了多少计划等等一些东西，后来想想，还是觉得没必要，就像韩寒说的：“我们可以不上学，但是不可以不学习”,似乎没什么关系啊，哈哈。我现在倒觉得学习是留给自己的，没必要炫耀给别人，更不想被别人说成是呆子，所以学习方面（略），只是完成计划的50%而已......\n\n因为，寒假回来前刚入手了kindle，整个寒假都在体验，个人觉得很赞，这里不再赘余kindle方面。我想说的是在寒假期间，我差不多每天抽出一个小时左右来阅读（睡觉前一小时），虽不至于每晚都能够坚持，但也差不多了，所以整个寒假算下来差不多读了有四本书，而且每本读完后都觉得很赞。下面说下感受吧：\n\n1、**[此生未完成](http://book.douban.com/subject/6397275/)**（于娟）\n\n本书记录的是32岁的复旦女博士于娟当时作为母亲、女儿和妻子在被诊断为乳腺癌后的一年半岁月里的生命日记，在日记中反思生活细节，并发出“买车买房买不来健康”的感叹，引起网友关注和众多媒体热议。对其中一句\"我们要用多大的代价，才能认清活着的意义\"很是难忘,推荐大家有时间的话去看看，不是很厚的一本书，看完估计对生命会有不一样的看法和概念。看完后，认识到癌症是多么的可怕，我们都应该关注健康，不要等到身体出现问题了才去关注，要活在当下。\n\n2、**[看见](http://book.douban.com/subject/20427187/)**（柴静）\n\n《看见》是知名记者和主持人柴静讲述央视十年历程的自传性作品，既是柴静个人的成长告白书，某种程度上亦可视作中国社会十年变迁的备忘录。柴静的《看见》中大量的新闻报道给人看见未曾看见的现实，文字朴实但厚重，却也少不了很多的经典语录，的确是本好书。\n\n很喜欢的一句语录：\n\n> 不要因为走得太远，忘了我们为什么出发。如果哀痛中，我们不再出发，那你的离去还有什么意义？\n> ---《看见》\n\n3、**[疯狂的程序员](http://book.douban.com/subject/3267945/)**（绝影）\n\n这本书是从朋友那里所知道的，而且豆瓣评分很高，于是就看了，感觉不错，如果你是搞挨踢的，相信你会看到自己的影子，真的。\n\n书中描写了绝影等程序员的成长之路，分为大学、工作、创业三部分。作者笔下以绝影、BOSS liu、Bug Yang等为代表的程序员是大多程序员成长的真实写照，很多网友看过小说之后都说“这些事好像就是我身上发生的事情，但是我写不出来，绝影写出来了”，个人感觉的确是这样的，你可以看一看。\n\n个人很喜欢的一句语录：\n\n> 要么做第一个，要么做最好的一个。   \n\n4、**[天才在左 疯子在右](http://book.douban.com/subject/4242172/)**（高铭 ）_完成50%_\n\n从第一个访谈开始，用了两天的时间发疯版的读完，怎么说呢？意犹未尽。面对这些所谓的精神病患者，他们的思维逻辑严密到一环扣一环，从哲学到宗教、从传统物理学到量子力学，他们的关注与思辨令捧着书的正常人汗颜。我不停的在问自己，究竟是他们有病还只是因为我们想得太少、太过肤浅？究竟什么才算是正常人？就是群体的认可？那究竟什么才算是精神病患者？只是被多数人定义了的一小部分？（来自一个网友的评论）\n\n记一段，在我看来印象最深刻或者说最恐惧的一部分：\n\n> 那天晚上我失眠了，各种各样乱七八糟的思绪混在一起，理不清头绪。我懂了他说的，但是我不知道怎么做。第二天我很想再次跟他聊聊，突然间我觉得这很可怕。因为我昨儿晚上睡觉前一直在设计把DV固定在衣服的什么位置上。\n> \n> 我想起N个精神病医师告诉我的：千万千万千万被太在意精神病人说的话，别深想他们告诉你的世界观，否侧你迟早会疯的。\n\n---\n\n###小结\n\n寒假匆匆而来，却又急忙而去，留下多少，只有心知道。而我也愿意翻山越岭看风景。\n\n（end）\n\n\n","slug":"201503-2015-03-07-winter-holiday-conclusion","published":1,"date":"2018-04-12T15:20:38.833Z","updated":"2018-04-12T15:20:38.834Z","comments":1,"photos":[],"link":"","_id":"cjfwomb71006gass62itnkfao","content":"<p>猛地意识到今天就已经是3月7日了，而我买的是明天的火车票，对于我来说意味着毫无防备并且来不及拾掇就要滚回学校了。呜呼，时间过的真TM快，将近俩月的大学最后一个大长假就这么一睁眼一闭眼就嗝屁（方言）了,虽然到家没过一半时间就已经呆够了想回去，但此时此刻即将出发却也难免有恋家情节……</p>\n<p>明天就要出发了，晚上简单收拾了下行李后就被母亲大人催促着早点睡觉，而对于一个习惯了熬夜的夜猫子来说很早睡觉真的不习惯，相信你懂得。于是打开笔记本，想看点东西却也没有了心思，干脆写点有感而发的东西也不错哦，算是这个寒假小结吧，说干就干，于是就有了下文 :)</p>\n<a id=\"more\"></a>\n<p>先说点高兴的事儿吧，就是年前把驾驶证考下来了，拖拖拉拉了将近两年，终于给搞定了，心里甚是高兴。记得寒假我是1月19号到的家，然后我爹就告诉我23号就要考科目三，听到我瞬间就石化了，心想时间赶得这么紧啊都来不及缓几天，然后就连续几天都在练车，由于时间短又仓促，考试当天都心虚，还好最终在极度紧张中顺利考过了科目三。后来又等了将近半个月把科目四拿下了，考完科目四下午就直接拿到驾驶证了，了却了心中一桩心事，哈哈。</p>\n<p>再说点不高兴的事儿吧，想想就虐心，如果你看到这了，应该可以想到是什么了。当然就是英语六级啊，挂掉了，呜呜~~~，可恶的不是挂掉而是就差那么一点点分。所以下学期的目标计划之一就是拿下英语六级，嗯，就这样！</p>\n<p>按说，刚开始我应该先说的是学习方面、学了哪些技术、完成了多少计划等等一些东西，后来想想，还是觉得没必要，就像韩寒说的：“我们可以不上学，但是不可以不学习”,似乎没什么关系啊，哈哈。我现在倒觉得学习是留给自己的，没必要炫耀给别人，更不想被别人说成是呆子，所以学习方面（略），只是完成计划的50%而已……</p>\n<p>因为，寒假回来前刚入手了kindle，整个寒假都在体验，个人觉得很赞，这里不再赘余kindle方面。我想说的是在寒假期间，我差不多每天抽出一个小时左右来阅读（睡觉前一小时），虽不至于每晚都能够坚持，但也差不多了，所以整个寒假算下来差不多读了有四本书，而且每本读完后都觉得很赞。下面说下感受吧：</p>\n<p>1、<strong><a href=\"http://book.douban.com/subject/6397275/\" target=\"_blank\" rel=\"noopener\">此生未完成</a></strong>（于娟）</p>\n<p>本书记录的是32岁的复旦女博士于娟当时作为母亲、女儿和妻子在被诊断为乳腺癌后的一年半岁月里的生命日记，在日记中反思生活细节，并发出“买车买房买不来健康”的感叹，引起网友关注和众多媒体热议。对其中一句”我们要用多大的代价，才能认清活着的意义”很是难忘,推荐大家有时间的话去看看，不是很厚的一本书，看完估计对生命会有不一样的看法和概念。看完后，认识到癌症是多么的可怕，我们都应该关注健康，不要等到身体出现问题了才去关注，要活在当下。</p>\n<p>2、<strong><a href=\"http://book.douban.com/subject/20427187/\" target=\"_blank\" rel=\"noopener\">看见</a></strong>（柴静）</p>\n<p>《看见》是知名记者和主持人柴静讲述央视十年历程的自传性作品，既是柴静个人的成长告白书，某种程度上亦可视作中国社会十年变迁的备忘录。柴静的《看见》中大量的新闻报道给人看见未曾看见的现实，文字朴实但厚重，却也少不了很多的经典语录，的确是本好书。</p>\n<p>很喜欢的一句语录：</p>\n<blockquote>\n<p>不要因为走得太远，忘了我们为什么出发。如果哀痛中，我们不再出发，那你的离去还有什么意义？<br>—《看见》</p>\n</blockquote>\n<p>3、<strong><a href=\"http://book.douban.com/subject/3267945/\" target=\"_blank\" rel=\"noopener\">疯狂的程序员</a></strong>（绝影）</p>\n<p>这本书是从朋友那里所知道的，而且豆瓣评分很高，于是就看了，感觉不错，如果你是搞挨踢的，相信你会看到自己的影子，真的。</p>\n<p>书中描写了绝影等程序员的成长之路，分为大学、工作、创业三部分。作者笔下以绝影、BOSS liu、Bug Yang等为代表的程序员是大多程序员成长的真实写照，很多网友看过小说之后都说“这些事好像就是我身上发生的事情，但是我写不出来，绝影写出来了”，个人感觉的确是这样的，你可以看一看。</p>\n<p>个人很喜欢的一句语录：</p>\n<blockquote>\n<p>要么做第一个，要么做最好的一个。   </p>\n</blockquote>\n<p>4、<strong><a href=\"http://book.douban.com/subject/4242172/\" target=\"_blank\" rel=\"noopener\">天才在左 疯子在右</a></strong>（高铭 ）<em>完成50%</em></p>\n<p>从第一个访谈开始，用了两天的时间发疯版的读完，怎么说呢？意犹未尽。面对这些所谓的精神病患者，他们的思维逻辑严密到一环扣一环，从哲学到宗教、从传统物理学到量子力学，他们的关注与思辨令捧着书的正常人汗颜。我不停的在问自己，究竟是他们有病还只是因为我们想得太少、太过肤浅？究竟什么才算是正常人？就是群体的认可？那究竟什么才算是精神病患者？只是被多数人定义了的一小部分？（来自一个网友的评论）</p>\n<p>记一段，在我看来印象最深刻或者说最恐惧的一部分：</p>\n<blockquote>\n<p>那天晚上我失眠了，各种各样乱七八糟的思绪混在一起，理不清头绪。我懂了他说的，但是我不知道怎么做。第二天我很想再次跟他聊聊，突然间我觉得这很可怕。因为我昨儿晚上睡觉前一直在设计把DV固定在衣服的什么位置上。</p>\n<p>我想起N个精神病医师告诉我的：千万千万千万被太在意精神病人说的话，别深想他们告诉你的世界观，否侧你迟早会疯的。</p>\n</blockquote>\n<hr>\n<p>###小结</p>\n<p>寒假匆匆而来，却又急忙而去，留下多少，只有心知道。而我也愿意翻山越岭看风景。</p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>猛地意识到今天就已经是3月7日了，而我买的是明天的火车票，对于我来说意味着毫无防备并且来不及拾掇就要滚回学校了。呜呼，时间过的真TM快，将近俩月的大学最后一个大长假就这么一睁眼一闭眼就嗝屁（方言）了,虽然到家没过一半时间就已经呆够了想回去，但此时此刻即将出发却也难免有恋家情节……</p>\n<p>明天就要出发了，晚上简单收拾了下行李后就被母亲大人催促着早点睡觉，而对于一个习惯了熬夜的夜猫子来说很早睡觉真的不习惯，相信你懂得。于是打开笔记本，想看点东西却也没有了心思，干脆写点有感而发的东西也不错哦，算是这个寒假小结吧，说干就干，于是就有了下文 :)</p>","more":"<p>先说点高兴的事儿吧，就是年前把驾驶证考下来了，拖拖拉拉了将近两年，终于给搞定了，心里甚是高兴。记得寒假我是1月19号到的家，然后我爹就告诉我23号就要考科目三，听到我瞬间就石化了，心想时间赶得这么紧啊都来不及缓几天，然后就连续几天都在练车，由于时间短又仓促，考试当天都心虚，还好最终在极度紧张中顺利考过了科目三。后来又等了将近半个月把科目四拿下了，考完科目四下午就直接拿到驾驶证了，了却了心中一桩心事，哈哈。</p>\n<p>再说点不高兴的事儿吧，想想就虐心，如果你看到这了，应该可以想到是什么了。当然就是英语六级啊，挂掉了，呜呜~~~，可恶的不是挂掉而是就差那么一点点分。所以下学期的目标计划之一就是拿下英语六级，嗯，就这样！</p>\n<p>按说，刚开始我应该先说的是学习方面、学了哪些技术、完成了多少计划等等一些东西，后来想想，还是觉得没必要，就像韩寒说的：“我们可以不上学，但是不可以不学习”,似乎没什么关系啊，哈哈。我现在倒觉得学习是留给自己的，没必要炫耀给别人，更不想被别人说成是呆子，所以学习方面（略），只是完成计划的50%而已……</p>\n<p>因为，寒假回来前刚入手了kindle，整个寒假都在体验，个人觉得很赞，这里不再赘余kindle方面。我想说的是在寒假期间，我差不多每天抽出一个小时左右来阅读（睡觉前一小时），虽不至于每晚都能够坚持，但也差不多了，所以整个寒假算下来差不多读了有四本书，而且每本读完后都觉得很赞。下面说下感受吧：</p>\n<p>1、<strong><a href=\"http://book.douban.com/subject/6397275/\" target=\"_blank\" rel=\"noopener\">此生未完成</a></strong>（于娟）</p>\n<p>本书记录的是32岁的复旦女博士于娟当时作为母亲、女儿和妻子在被诊断为乳腺癌后的一年半岁月里的生命日记，在日记中反思生活细节，并发出“买车买房买不来健康”的感叹，引起网友关注和众多媒体热议。对其中一句”我们要用多大的代价，才能认清活着的意义”很是难忘,推荐大家有时间的话去看看，不是很厚的一本书，看完估计对生命会有不一样的看法和概念。看完后，认识到癌症是多么的可怕，我们都应该关注健康，不要等到身体出现问题了才去关注，要活在当下。</p>\n<p>2、<strong><a href=\"http://book.douban.com/subject/20427187/\" target=\"_blank\" rel=\"noopener\">看见</a></strong>（柴静）</p>\n<p>《看见》是知名记者和主持人柴静讲述央视十年历程的自传性作品，既是柴静个人的成长告白书，某种程度上亦可视作中国社会十年变迁的备忘录。柴静的《看见》中大量的新闻报道给人看见未曾看见的现实，文字朴实但厚重，却也少不了很多的经典语录，的确是本好书。</p>\n<p>很喜欢的一句语录：</p>\n<blockquote>\n<p>不要因为走得太远，忘了我们为什么出发。如果哀痛中，我们不再出发，那你的离去还有什么意义？<br>—《看见》</p>\n</blockquote>\n<p>3、<strong><a href=\"http://book.douban.com/subject/3267945/\" target=\"_blank\" rel=\"noopener\">疯狂的程序员</a></strong>（绝影）</p>\n<p>这本书是从朋友那里所知道的，而且豆瓣评分很高，于是就看了，感觉不错，如果你是搞挨踢的，相信你会看到自己的影子，真的。</p>\n<p>书中描写了绝影等程序员的成长之路，分为大学、工作、创业三部分。作者笔下以绝影、BOSS liu、Bug Yang等为代表的程序员是大多程序员成长的真实写照，很多网友看过小说之后都说“这些事好像就是我身上发生的事情，但是我写不出来，绝影写出来了”，个人感觉的确是这样的，你可以看一看。</p>\n<p>个人很喜欢的一句语录：</p>\n<blockquote>\n<p>要么做第一个，要么做最好的一个。   </p>\n</blockquote>\n<p>4、<strong><a href=\"http://book.douban.com/subject/4242172/\" target=\"_blank\" rel=\"noopener\">天才在左 疯子在右</a></strong>（高铭 ）<em>完成50%</em></p>\n<p>从第一个访谈开始，用了两天的时间发疯版的读完，怎么说呢？意犹未尽。面对这些所谓的精神病患者，他们的思维逻辑严密到一环扣一环，从哲学到宗教、从传统物理学到量子力学，他们的关注与思辨令捧着书的正常人汗颜。我不停的在问自己，究竟是他们有病还只是因为我们想得太少、太过肤浅？究竟什么才算是正常人？就是群体的认可？那究竟什么才算是精神病患者？只是被多数人定义了的一小部分？（来自一个网友的评论）</p>\n<p>记一段，在我看来印象最深刻或者说最恐惧的一部分：</p>\n<blockquote>\n<p>那天晚上我失眠了，各种各样乱七八糟的思绪混在一起，理不清头绪。我懂了他说的，但是我不知道怎么做。第二天我很想再次跟他聊聊，突然间我觉得这很可怕。因为我昨儿晚上睡觉前一直在设计把DV固定在衣服的什么位置上。</p>\n<p>我想起N个精神病医师告诉我的：千万千万千万被太在意精神病人说的话，别深想他们告诉你的世界观，否侧你迟早会疯的。</p>\n</blockquote>\n<hr>\n<p>###小结</p>\n<p>寒假匆匆而来，却又急忙而去，留下多少，只有心知道。而我也愿意翻山越岭看风景。</p>\n<p>（end）</p>"},{"layout":"post","title":"MySQL数据库主从复制","_content":"MySQL数据库主从复制的工作方式很简单，一台主机作为主服务器，一台或者多台主机作为从服务器。主服务器会把数据库的变化记录到日志，一旦这些变化被记录到日志，就会马上或者以固定的时间间隔被发送从服务器，使得主从服务器得到同步。\n\n下面，总结下主从服务器配置原理，作为笔记，首先说明下测试环境（局域网内）：\n\n\tCentos 6.5 主 192.168.1.103 (VMware测试)\n\tCentos 6.5 从 192.168.1.104 (VMware测试)\n\tMySQL 5.4\n\n<!--more-->\n\n\n###MySQL主从复制优点\n\n\n>* 如果主服务器出现问题，可以快速切换到从服务器提供的服务\n>* 可以在从服务器上执行查询操作，降低主服务器的访问压力\n>* 可以在从服务器上执行备份，以避免备份期间影响主服务器的服务\n\n**注意**\n\n一般只有更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，对于实时性要求高的数据仍然要从主服务器上获得。\n\n在正式开始配置前，先看下摘自网上的一个简单完整的 Mysql 主从复制，读写分离的示意图。\n\n![](../../images/201412/bc837715-8d0e-36b4-b659-4389e01f76d0.png)\n\n\n###主服务器配置\n\n1、登录数据库\n\n\tmysql -u root -p *** test\n\n2、给从服务器设置授权用户\n\n\tmysql>grant all slave on *.* to slave@192.168.1.104 identified by '123456';\n\tmysql>flush privileges\n\n3、修改主服务器配置文件`my.cnf`:\n\n\tvim /etc/my.cnf\n\tserver-id  = 1   \t\t #主机标示，整数\n\tlog_bin    = mysql-bin   #开启bin-log\n\tservice mysqld restart   #注意：更改mysql配置文件后一定要重新启动mysqld服务\n\n4、在主服务器上设置读锁定有效，确保没有数据库操作，以便获得一个一致性的快照。\n\n\tmysql>flush tables with read lock;\n\n5、目前主服务器已经停止了更新操作，生成主数据库的备份方式有两种：\n\n>* cp全部的数据文件到从服务器\n>* mysqldump备份数据方式\n\n*如果数据库的服务可以停止的话，那么直接使用cp复制数据文件应该是最快的生成快照的方法了。*\n\n这里使用mysqldump备份数据文件：\n\n\tmysqldump -uroot -p*** test > /tmp/test.sql\n\t\n\n6、主数据库备份完毕后，主数据库要进行解锁操作：\n\n\tmysql>unlock tables;\n\n7、把数据库备份的一致性文件复制到从服务器,并在从数据库导入数据：\n\n\tscp /tmp/test.sql 192.168.1.104:/tmp/\t\t//复制到从服务器\t\n\tmysqldump -uroot -p*** test < /tmp/test.sql\n\n###从服务器配置\n\n1、修改从服务器数据库的server-id,注意从数据库的server-id的值必须是唯一的，不能和主数据酷的配置相同，如果有多个从服务器，则每个服务器必须有自己唯一的server-id值。\n\n\tvim /etc/my.cnf\n\t//下面是从数据库的配置\n\tserver-id = 2\n\tmaster-host     = 192.168.1.103\t\t//注意：这里是主服务器ip\n\tmaster-user     = slave\t\t\t\t//从数据库用户\n\tmaster-password = 123456\n\tmaster-port     = 3306\n\tmaster-connect-retry=60 \t\t     //如果从服务器发现主服务器断掉，重新连接的时间差(秒)\n\treplicate-do-db =test                //只复制某个库\n\treplicate-ignore-db=mysql            //不复制某个库\n\tservice mysqld restart\t\t\t\t //重新启动mysqld服务\n\n2、在从数据库内开启slave进程：\n\n\tmysql>start slave;\n\n\n3、在从数据库进行`show slave status\\G`进行查看从服务器是否配置成功：\n\n![](../../images/201412/2014-12-18_143809.png)\n\n4、从数据库常用命令：\n\n\tstart slave\t\t\t//启动复制线程\n\tstop  slave \t\t//停止复制线程\n\tshow  slave  status //查看从数据库状态\n\tshow master logs    //查看主数据酷bin-log日志\n\tchange master to    //动态改变主服务器配置\n\tshow processlist    //查看数据库运行进程\n\n5、现在可以在主数据库进行一些insert、update和delete操作，看看从数据库是不是已经同步完成，答案是肯定的啦。 :)\n\n（end）\n\n\n","source":"_posts/201503/2015-03-20-mysql_and_slave_test.md","raw":"---\nlayout : post\ntitle : MySQL数据库主从复制\ncategory : MySQL\ntags : MySQL\n---\nMySQL数据库主从复制的工作方式很简单，一台主机作为主服务器，一台或者多台主机作为从服务器。主服务器会把数据库的变化记录到日志，一旦这些变化被记录到日志，就会马上或者以固定的时间间隔被发送从服务器，使得主从服务器得到同步。\n\n下面，总结下主从服务器配置原理，作为笔记，首先说明下测试环境（局域网内）：\n\n\tCentos 6.5 主 192.168.1.103 (VMware测试)\n\tCentos 6.5 从 192.168.1.104 (VMware测试)\n\tMySQL 5.4\n\n<!--more-->\n\n\n###MySQL主从复制优点\n\n\n>* 如果主服务器出现问题，可以快速切换到从服务器提供的服务\n>* 可以在从服务器上执行查询操作，降低主服务器的访问压力\n>* 可以在从服务器上执行备份，以避免备份期间影响主服务器的服务\n\n**注意**\n\n一般只有更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，对于实时性要求高的数据仍然要从主服务器上获得。\n\n在正式开始配置前，先看下摘自网上的一个简单完整的 Mysql 主从复制，读写分离的示意图。\n\n![](../../images/201412/bc837715-8d0e-36b4-b659-4389e01f76d0.png)\n\n\n###主服务器配置\n\n1、登录数据库\n\n\tmysql -u root -p *** test\n\n2、给从服务器设置授权用户\n\n\tmysql>grant all slave on *.* to slave@192.168.1.104 identified by '123456';\n\tmysql>flush privileges\n\n3、修改主服务器配置文件`my.cnf`:\n\n\tvim /etc/my.cnf\n\tserver-id  = 1   \t\t #主机标示，整数\n\tlog_bin    = mysql-bin   #开启bin-log\n\tservice mysqld restart   #注意：更改mysql配置文件后一定要重新启动mysqld服务\n\n4、在主服务器上设置读锁定有效，确保没有数据库操作，以便获得一个一致性的快照。\n\n\tmysql>flush tables with read lock;\n\n5、目前主服务器已经停止了更新操作，生成主数据库的备份方式有两种：\n\n>* cp全部的数据文件到从服务器\n>* mysqldump备份数据方式\n\n*如果数据库的服务可以停止的话，那么直接使用cp复制数据文件应该是最快的生成快照的方法了。*\n\n这里使用mysqldump备份数据文件：\n\n\tmysqldump -uroot -p*** test > /tmp/test.sql\n\t\n\n6、主数据库备份完毕后，主数据库要进行解锁操作：\n\n\tmysql>unlock tables;\n\n7、把数据库备份的一致性文件复制到从服务器,并在从数据库导入数据：\n\n\tscp /tmp/test.sql 192.168.1.104:/tmp/\t\t//复制到从服务器\t\n\tmysqldump -uroot -p*** test < /tmp/test.sql\n\n###从服务器配置\n\n1、修改从服务器数据库的server-id,注意从数据库的server-id的值必须是唯一的，不能和主数据酷的配置相同，如果有多个从服务器，则每个服务器必须有自己唯一的server-id值。\n\n\tvim /etc/my.cnf\n\t//下面是从数据库的配置\n\tserver-id = 2\n\tmaster-host     = 192.168.1.103\t\t//注意：这里是主服务器ip\n\tmaster-user     = slave\t\t\t\t//从数据库用户\n\tmaster-password = 123456\n\tmaster-port     = 3306\n\tmaster-connect-retry=60 \t\t     //如果从服务器发现主服务器断掉，重新连接的时间差(秒)\n\treplicate-do-db =test                //只复制某个库\n\treplicate-ignore-db=mysql            //不复制某个库\n\tservice mysqld restart\t\t\t\t //重新启动mysqld服务\n\n2、在从数据库内开启slave进程：\n\n\tmysql>start slave;\n\n\n3、在从数据库进行`show slave status\\G`进行查看从服务器是否配置成功：\n\n![](../../images/201412/2014-12-18_143809.png)\n\n4、从数据库常用命令：\n\n\tstart slave\t\t\t//启动复制线程\n\tstop  slave \t\t//停止复制线程\n\tshow  slave  status //查看从数据库状态\n\tshow master logs    //查看主数据酷bin-log日志\n\tchange master to    //动态改变主服务器配置\n\tshow processlist    //查看数据库运行进程\n\n5、现在可以在主数据库进行一些insert、update和delete操作，看看从数据库是不是已经同步完成，答案是肯定的啦。 :)\n\n（end）\n\n\n","slug":"201503-2015-03-20-mysql-and-slave-test","published":1,"date":"2018-04-12T15:20:38.834Z","updated":"2018-04-12T15:20:38.834Z","comments":1,"photos":[],"link":"","_id":"cjfwomb72006kass6idzp2a4e","content":"<p>MySQL数据库主从复制的工作方式很简单，一台主机作为主服务器，一台或者多台主机作为从服务器。主服务器会把数据库的变化记录到日志，一旦这些变化被记录到日志，就会马上或者以固定的时间间隔被发送从服务器，使得主从服务器得到同步。</p>\n<p>下面，总结下主从服务器配置原理，作为笔记，首先说明下测试环境（局域网内）：</p>\n<pre><code>Centos 6.5 主 192.168.1.103 (VMware测试)\nCentos 6.5 从 192.168.1.104 (VMware测试)\nMySQL 5.4\n</code></pre><a id=\"more\"></a>\n<p>###MySQL主从复制优点</p>\n<blockquote>\n<ul>\n<li>如果主服务器出现问题，可以快速切换到从服务器提供的服务</li>\n<li>可以在从服务器上执行查询操作，降低主服务器的访问压力</li>\n<li>可以在从服务器上执行备份，以避免备份期间影响主服务器的服务</li>\n</ul>\n</blockquote>\n<p><strong>注意</strong></p>\n<p>一般只有更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，对于实时性要求高的数据仍然要从主服务器上获得。</p>\n<p>在正式开始配置前，先看下摘自网上的一个简单完整的 Mysql 主从复制，读写分离的示意图。</p>\n<p><img src=\"../../images/201412/bc837715-8d0e-36b4-b659-4389e01f76d0.png\" alt=\"\"></p>\n<p>###主服务器配置</p>\n<p>1、登录数据库</p>\n<pre><code>mysql -u root -p *** test\n</code></pre><p>2、给从服务器设置授权用户</p>\n<pre><code>mysql&gt;grant all slave on *.* to slave@192.168.1.104 identified by &apos;123456&apos;;\nmysql&gt;flush privileges\n</code></pre><p>3、修改主服务器配置文件<code>my.cnf</code>:</p>\n<pre><code>vim /etc/my.cnf\nserver-id  = 1            #主机标示，整数\nlog_bin    = mysql-bin   #开启bin-log\nservice mysqld restart   #注意：更改mysql配置文件后一定要重新启动mysqld服务\n</code></pre><p>4、在主服务器上设置读锁定有效，确保没有数据库操作，以便获得一个一致性的快照。</p>\n<pre><code>mysql&gt;flush tables with read lock;\n</code></pre><p>5、目前主服务器已经停止了更新操作，生成主数据库的备份方式有两种：</p>\n<blockquote>\n<ul>\n<li>cp全部的数据文件到从服务器</li>\n<li>mysqldump备份数据方式</li>\n</ul>\n</blockquote>\n<p><em>如果数据库的服务可以停止的话，那么直接使用cp复制数据文件应该是最快的生成快照的方法了。</em></p>\n<p>这里使用mysqldump备份数据文件：</p>\n<pre><code>mysqldump -uroot -p*** test &gt; /tmp/test.sql\n</code></pre><p>6、主数据库备份完毕后，主数据库要进行解锁操作：</p>\n<pre><code>mysql&gt;unlock tables;\n</code></pre><p>7、把数据库备份的一致性文件复制到从服务器,并在从数据库导入数据：</p>\n<pre><code>scp /tmp/test.sql 192.168.1.104:/tmp/        //复制到从服务器    \nmysqldump -uroot -p*** test &lt; /tmp/test.sql\n</code></pre><p>###从服务器配置</p>\n<p>1、修改从服务器数据库的server-id,注意从数据库的server-id的值必须是唯一的，不能和主数据酷的配置相同，如果有多个从服务器，则每个服务器必须有自己唯一的server-id值。</p>\n<pre><code>vim /etc/my.cnf\n//下面是从数据库的配置\nserver-id = 2\nmaster-host     = 192.168.1.103        //注意：这里是主服务器ip\nmaster-user     = slave                //从数据库用户\nmaster-password = 123456\nmaster-port     = 3306\nmaster-connect-retry=60              //如果从服务器发现主服务器断掉，重新连接的时间差(秒)\nreplicate-do-db =test                //只复制某个库\nreplicate-ignore-db=mysql            //不复制某个库\nservice mysqld restart                 //重新启动mysqld服务\n</code></pre><p>2、在从数据库内开启slave进程：</p>\n<pre><code>mysql&gt;start slave;\n</code></pre><p>3、在从数据库进行<code>show slave status\\G</code>进行查看从服务器是否配置成功：</p>\n<p><img src=\"../../images/201412/2014-12-18_143809.png\" alt=\"\"></p>\n<p>4、从数据库常用命令：</p>\n<pre><code>start slave            //启动复制线程\nstop  slave         //停止复制线程\nshow  slave  status //查看从数据库状态\nshow master logs    //查看主数据酷bin-log日志\nchange master to    //动态改变主服务器配置\nshow processlist    //查看数据库运行进程\n</code></pre><p>5、现在可以在主数据库进行一些insert、update和delete操作，看看从数据库是不是已经同步完成，答案是肯定的啦。 :)</p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>MySQL数据库主从复制的工作方式很简单，一台主机作为主服务器，一台或者多台主机作为从服务器。主服务器会把数据库的变化记录到日志，一旦这些变化被记录到日志，就会马上或者以固定的时间间隔被发送从服务器，使得主从服务器得到同步。</p>\n<p>下面，总结下主从服务器配置原理，作为笔记，首先说明下测试环境（局域网内）：</p>\n<pre><code>Centos 6.5 主 192.168.1.103 (VMware测试)\nCentos 6.5 从 192.168.1.104 (VMware测试)\nMySQL 5.4\n</code></pre>","more":"<p>###MySQL主从复制优点</p>\n<blockquote>\n<ul>\n<li>如果主服务器出现问题，可以快速切换到从服务器提供的服务</li>\n<li>可以在从服务器上执行查询操作，降低主服务器的访问压力</li>\n<li>可以在从服务器上执行备份，以避免备份期间影响主服务器的服务</li>\n</ul>\n</blockquote>\n<p><strong>注意</strong></p>\n<p>一般只有更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，对于实时性要求高的数据仍然要从主服务器上获得。</p>\n<p>在正式开始配置前，先看下摘自网上的一个简单完整的 Mysql 主从复制，读写分离的示意图。</p>\n<p><img src=\"../../images/201412/bc837715-8d0e-36b4-b659-4389e01f76d0.png\" alt=\"\"></p>\n<p>###主服务器配置</p>\n<p>1、登录数据库</p>\n<pre><code>mysql -u root -p *** test\n</code></pre><p>2、给从服务器设置授权用户</p>\n<pre><code>mysql&gt;grant all slave on *.* to slave@192.168.1.104 identified by &apos;123456&apos;;\nmysql&gt;flush privileges\n</code></pre><p>3、修改主服务器配置文件<code>my.cnf</code>:</p>\n<pre><code>vim /etc/my.cnf\nserver-id  = 1            #主机标示，整数\nlog_bin    = mysql-bin   #开启bin-log\nservice mysqld restart   #注意：更改mysql配置文件后一定要重新启动mysqld服务\n</code></pre><p>4、在主服务器上设置读锁定有效，确保没有数据库操作，以便获得一个一致性的快照。</p>\n<pre><code>mysql&gt;flush tables with read lock;\n</code></pre><p>5、目前主服务器已经停止了更新操作，生成主数据库的备份方式有两种：</p>\n<blockquote>\n<ul>\n<li>cp全部的数据文件到从服务器</li>\n<li>mysqldump备份数据方式</li>\n</ul>\n</blockquote>\n<p><em>如果数据库的服务可以停止的话，那么直接使用cp复制数据文件应该是最快的生成快照的方法了。</em></p>\n<p>这里使用mysqldump备份数据文件：</p>\n<pre><code>mysqldump -uroot -p*** test &gt; /tmp/test.sql\n</code></pre><p>6、主数据库备份完毕后，主数据库要进行解锁操作：</p>\n<pre><code>mysql&gt;unlock tables;\n</code></pre><p>7、把数据库备份的一致性文件复制到从服务器,并在从数据库导入数据：</p>\n<pre><code>scp /tmp/test.sql 192.168.1.104:/tmp/        //复制到从服务器    \nmysqldump -uroot -p*** test &lt; /tmp/test.sql\n</code></pre><p>###从服务器配置</p>\n<p>1、修改从服务器数据库的server-id,注意从数据库的server-id的值必须是唯一的，不能和主数据酷的配置相同，如果有多个从服务器，则每个服务器必须有自己唯一的server-id值。</p>\n<pre><code>vim /etc/my.cnf\n//下面是从数据库的配置\nserver-id = 2\nmaster-host     = 192.168.1.103        //注意：这里是主服务器ip\nmaster-user     = slave                //从数据库用户\nmaster-password = 123456\nmaster-port     = 3306\nmaster-connect-retry=60              //如果从服务器发现主服务器断掉，重新连接的时间差(秒)\nreplicate-do-db =test                //只复制某个库\nreplicate-ignore-db=mysql            //不复制某个库\nservice mysqld restart                 //重新启动mysqld服务\n</code></pre><p>2、在从数据库内开启slave进程：</p>\n<pre><code>mysql&gt;start slave;\n</code></pre><p>3、在从数据库进行<code>show slave status\\G</code>进行查看从服务器是否配置成功：</p>\n<p><img src=\"../../images/201412/2014-12-18_143809.png\" alt=\"\"></p>\n<p>4、从数据库常用命令：</p>\n<pre><code>start slave            //启动复制线程\nstop  slave         //停止复制线程\nshow  slave  status //查看从数据库状态\nshow master logs    //查看主数据酷bin-log日志\nchange master to    //动态改变主服务器配置\nshow processlist    //查看数据库运行进程\n</code></pre><p>5、现在可以在主数据库进行一些insert、update和delete操作，看看从数据库是不是已经同步完成，答案是肯定的啦。 :)</p>\n<p>（end）</p>"},{"layout":"post","title":"Memcache的内存分配管理","_content":"首先，我们要明白什么是**内存的碎片化**，要解释这个也不困难。大概可以这样描述，如果用c 语言直接`malloc`,`free` 来向操作系统申请和释放内存时,在不断的申请和释放过程中,形成了一些很小的内存片断,无法再利用.这种空闲,但无法利用内存的现象,即被称为**内存的碎片化**.\n\n<!--more-->\n\n##Page为内存分配的最小单位\n\nMemcached的内存分配以page为单位，默认情况下一个page是1M，可以通过-I(大写字母i)参数在启动时指定。如果需要申请内存 时，memcached会划分出一个新的page并分配给需要的slab区域。需要注意的是，**page一旦被分配在重启前不会被回收或者重新分配**。\n\n![](../../images/201503/1866742045547134261.jpg)\n\n##slab allocator缓解内存碎片化\n\nMemcached并不是将所有大小的数据都放在一起的，而是预先将数据空间划分为一系列slabs，每个slab只负责一定范围内的数据存储。如 下图，每个slab只存储大于其上一个slab的chunk并小于或者等于自己最大chunk的数据。例如：slab 3只存储大小介于137 到 224 bytes的数据。如果一个数据大小为230byte将被分配到slab 4中。从下图可以看出，每个slab负责的空间其实是不等的，memcached默认情况下下一个slab的chunk最大值为前一个的1.25倍，这个可以通过修改`-f`参数来修改增长比例。 \n\n![](../../images/201503/1866742045547134262.jpg)\n\n##Chunk才是存放缓存数据的单位\n\nmemcache把申请到的每个slab仓库按照需要切分成不同的小块（chunk）来存储数据。Chunk是一系列固定的内存空间，这个大小就是管理它的slab的最大存放大小。例如：slab 1的每个chunk都是104byte，而slab 4的每个chunk都是280byte。chunk是memcached实际存放缓存数据的地方，因为chunk的大小固定为slab能够存放的最大值， 所以所有分配给当前slab的数据都可以被chunk存下。如果时间的数据大小小于chunk的大小，空余的空间将会被闲置，这个是为了防止内存碎片而设 计的。例如下图，chunk size是224byte，而存储的数据只有200byte，剩下的24byte将被闲置。\n\n![](../../images/201503/1866742045547134263.jpg)\n\n###注意：\n\n如果有100byte 的内容要存,但122 大小的仓库中的chunk 满了，并不会寻找更大的,如144 的仓库来存储,而是把122 仓库的旧数据踢掉! 这个会在后面的memcache过期与删除机制那部分介绍。\n\n##grow factor调优\n\n由于slab allocator 机制中, 分配的chunk 的大小是”固定”的, 因此,对于特定的item，可能造成内存空间的浪费.比如, 将100 字节的数据缓存到122 字节的chunk 中, 剩余的22 字节就浪费了，是吧。那怎么办？\n\n对于chunk 空间的浪费问题,无法彻底解决,只能缓解该问题.开发者可以对网站中缓存中的item 的长度进行统计,并制定合理的slab class 中的chunk 的大小.\n\n可惜的是,我们目前还不能自定义chunk 的大小,但可以通过参数来调整各slab class 中chunk\n大小的增长速度. 即增长因子, grow factor!\n\nmemcached 在启动时可以通过`f`选项指定Growth Factor增长因子, 并在某种程度上控制slab 之\n间的差异. 默认值为1.25. 但是,在该选项出现之前,这个因子曾经固定为2,称为”powers of 2”\n策略。\n我们分别用grow factor 为2 和1.25 来看一看效果:\n\n\t> memcache -m 64 -p 11211 -f 2 -vvv\n\n![](../../images/201503/2015-03-28_203830.jpg)\n\n可以看到，从96 字节的chunk组开始，chunk组的大小依次增大为原来的2 倍.\n\n下面看看`f = 1.25`时的输出\n\n\t> memcache -m 64 -p 11211 -f 1.25 -vvv\n\n![](../../images/201503/2015-03-28_204133.jpg)\n\n对比可知, 当f=2 时, 各slab 中的chunk size 增长很快,有些情况下就相当浪费内存.\n因此,我们应细心统计缓存的大小,制定合理的增长因子.\n\n###注意：\n\n当f=1.25 时,从输出结果来看,某些相邻的slab class 的大小比值并非为1.25,可能会觉得有些\n计算误差，这些误差是为了保持字节数的对齐而故意设置的.\n\n---\n\n##小结:\n\n综合上面的介绍，memcached的内存分配策略就是：\n\n1、按slab需求分配page\n\n2、各slab按需使用chunk存储\n\n这里有几个特点要注意：\n\n**Memcached分配出去的page不会被回收或者重新分配，Memcached申请的内存不会被释放，slab空闲的chunk不会借给任何其他slab使用**。","source":"_posts/201503/2015-03-28-memcache_memory_manage_note.md","raw":"---\nlayout : post\ntitle : Memcache的内存分配管理\ncategory : Memcache\ntags : Memcache\n---\n首先，我们要明白什么是**内存的碎片化**，要解释这个也不困难。大概可以这样描述，如果用c 语言直接`malloc`,`free` 来向操作系统申请和释放内存时,在不断的申请和释放过程中,形成了一些很小的内存片断,无法再利用.这种空闲,但无法利用内存的现象,即被称为**内存的碎片化**.\n\n<!--more-->\n\n##Page为内存分配的最小单位\n\nMemcached的内存分配以page为单位，默认情况下一个page是1M，可以通过-I(大写字母i)参数在启动时指定。如果需要申请内存 时，memcached会划分出一个新的page并分配给需要的slab区域。需要注意的是，**page一旦被分配在重启前不会被回收或者重新分配**。\n\n![](../../images/201503/1866742045547134261.jpg)\n\n##slab allocator缓解内存碎片化\n\nMemcached并不是将所有大小的数据都放在一起的，而是预先将数据空间划分为一系列slabs，每个slab只负责一定范围内的数据存储。如 下图，每个slab只存储大于其上一个slab的chunk并小于或者等于自己最大chunk的数据。例如：slab 3只存储大小介于137 到 224 bytes的数据。如果一个数据大小为230byte将被分配到slab 4中。从下图可以看出，每个slab负责的空间其实是不等的，memcached默认情况下下一个slab的chunk最大值为前一个的1.25倍，这个可以通过修改`-f`参数来修改增长比例。 \n\n![](../../images/201503/1866742045547134262.jpg)\n\n##Chunk才是存放缓存数据的单位\n\nmemcache把申请到的每个slab仓库按照需要切分成不同的小块（chunk）来存储数据。Chunk是一系列固定的内存空间，这个大小就是管理它的slab的最大存放大小。例如：slab 1的每个chunk都是104byte，而slab 4的每个chunk都是280byte。chunk是memcached实际存放缓存数据的地方，因为chunk的大小固定为slab能够存放的最大值， 所以所有分配给当前slab的数据都可以被chunk存下。如果时间的数据大小小于chunk的大小，空余的空间将会被闲置，这个是为了防止内存碎片而设 计的。例如下图，chunk size是224byte，而存储的数据只有200byte，剩下的24byte将被闲置。\n\n![](../../images/201503/1866742045547134263.jpg)\n\n###注意：\n\n如果有100byte 的内容要存,但122 大小的仓库中的chunk 满了，并不会寻找更大的,如144 的仓库来存储,而是把122 仓库的旧数据踢掉! 这个会在后面的memcache过期与删除机制那部分介绍。\n\n##grow factor调优\n\n由于slab allocator 机制中, 分配的chunk 的大小是”固定”的, 因此,对于特定的item，可能造成内存空间的浪费.比如, 将100 字节的数据缓存到122 字节的chunk 中, 剩余的22 字节就浪费了，是吧。那怎么办？\n\n对于chunk 空间的浪费问题,无法彻底解决,只能缓解该问题.开发者可以对网站中缓存中的item 的长度进行统计,并制定合理的slab class 中的chunk 的大小.\n\n可惜的是,我们目前还不能自定义chunk 的大小,但可以通过参数来调整各slab class 中chunk\n大小的增长速度. 即增长因子, grow factor!\n\nmemcached 在启动时可以通过`f`选项指定Growth Factor增长因子, 并在某种程度上控制slab 之\n间的差异. 默认值为1.25. 但是,在该选项出现之前,这个因子曾经固定为2,称为”powers of 2”\n策略。\n我们分别用grow factor 为2 和1.25 来看一看效果:\n\n\t> memcache -m 64 -p 11211 -f 2 -vvv\n\n![](../../images/201503/2015-03-28_203830.jpg)\n\n可以看到，从96 字节的chunk组开始，chunk组的大小依次增大为原来的2 倍.\n\n下面看看`f = 1.25`时的输出\n\n\t> memcache -m 64 -p 11211 -f 1.25 -vvv\n\n![](../../images/201503/2015-03-28_204133.jpg)\n\n对比可知, 当f=2 时, 各slab 中的chunk size 增长很快,有些情况下就相当浪费内存.\n因此,我们应细心统计缓存的大小,制定合理的增长因子.\n\n###注意：\n\n当f=1.25 时,从输出结果来看,某些相邻的slab class 的大小比值并非为1.25,可能会觉得有些\n计算误差，这些误差是为了保持字节数的对齐而故意设置的.\n\n---\n\n##小结:\n\n综合上面的介绍，memcached的内存分配策略就是：\n\n1、按slab需求分配page\n\n2、各slab按需使用chunk存储\n\n这里有几个特点要注意：\n\n**Memcached分配出去的page不会被回收或者重新分配，Memcached申请的内存不会被释放，slab空闲的chunk不会借给任何其他slab使用**。","slug":"201503-2015-03-28-memcache-memory-manage-note","published":1,"date":"2018-04-12T15:20:38.834Z","updated":"2018-04-12T15:20:38.834Z","comments":1,"photos":[],"link":"","_id":"cjfwomb74006oass6yicxre3f","content":"<p>首先，我们要明白什么是<strong>内存的碎片化</strong>，要解释这个也不困难。大概可以这样描述，如果用c 语言直接<code>malloc</code>,<code>free</code> 来向操作系统申请和释放内存时,在不断的申请和释放过程中,形成了一些很小的内存片断,无法再利用.这种空闲,但无法利用内存的现象,即被称为<strong>内存的碎片化</strong>.</p>\n<a id=\"more\"></a>\n<p>##Page为内存分配的最小单位</p>\n<p>Memcached的内存分配以page为单位，默认情况下一个page是1M，可以通过-I(大写字母i)参数在启动时指定。如果需要申请内存 时，memcached会划分出一个新的page并分配给需要的slab区域。需要注意的是，<strong>page一旦被分配在重启前不会被回收或者重新分配</strong>。</p>\n<p><img src=\"../../images/201503/1866742045547134261.jpg\" alt=\"\"></p>\n<p>##slab allocator缓解内存碎片化</p>\n<p>Memcached并不是将所有大小的数据都放在一起的，而是预先将数据空间划分为一系列slabs，每个slab只负责一定范围内的数据存储。如 下图，每个slab只存储大于其上一个slab的chunk并小于或者等于自己最大chunk的数据。例如：slab 3只存储大小介于137 到 224 bytes的数据。如果一个数据大小为230byte将被分配到slab 4中。从下图可以看出，每个slab负责的空间其实是不等的，memcached默认情况下下一个slab的chunk最大值为前一个的1.25倍，这个可以通过修改<code>-f</code>参数来修改增长比例。 </p>\n<p><img src=\"../../images/201503/1866742045547134262.jpg\" alt=\"\"></p>\n<p>##Chunk才是存放缓存数据的单位</p>\n<p>memcache把申请到的每个slab仓库按照需要切分成不同的小块（chunk）来存储数据。Chunk是一系列固定的内存空间，这个大小就是管理它的slab的最大存放大小。例如：slab 1的每个chunk都是104byte，而slab 4的每个chunk都是280byte。chunk是memcached实际存放缓存数据的地方，因为chunk的大小固定为slab能够存放的最大值， 所以所有分配给当前slab的数据都可以被chunk存下。如果时间的数据大小小于chunk的大小，空余的空间将会被闲置，这个是为了防止内存碎片而设 计的。例如下图，chunk size是224byte，而存储的数据只有200byte，剩下的24byte将被闲置。</p>\n<p><img src=\"../../images/201503/1866742045547134263.jpg\" alt=\"\"></p>\n<p>###注意：</p>\n<p>如果有100byte 的内容要存,但122 大小的仓库中的chunk 满了，并不会寻找更大的,如144 的仓库来存储,而是把122 仓库的旧数据踢掉! 这个会在后面的memcache过期与删除机制那部分介绍。</p>\n<p>##grow factor调优</p>\n<p>由于slab allocator 机制中, 分配的chunk 的大小是”固定”的, 因此,对于特定的item，可能造成内存空间的浪费.比如, 将100 字节的数据缓存到122 字节的chunk 中, 剩余的22 字节就浪费了，是吧。那怎么办？</p>\n<p>对于chunk 空间的浪费问题,无法彻底解决,只能缓解该问题.开发者可以对网站中缓存中的item 的长度进行统计,并制定合理的slab class 中的chunk 的大小.</p>\n<p>可惜的是,我们目前还不能自定义chunk 的大小,但可以通过参数来调整各slab class 中chunk<br>大小的增长速度. 即增长因子, grow factor!</p>\n<p>memcached 在启动时可以通过<code>f</code>选项指定Growth Factor增长因子, 并在某种程度上控制slab 之<br>间的差异. 默认值为1.25. 但是,在该选项出现之前,这个因子曾经固定为2,称为”powers of 2”<br>策略。<br>我们分别用grow factor 为2 和1.25 来看一看效果:</p>\n<pre><code>&gt; memcache -m 64 -p 11211 -f 2 -vvv\n</code></pre><p><img src=\"../../images/201503/2015-03-28_203830.jpg\" alt=\"\"></p>\n<p>可以看到，从96 字节的chunk组开始，chunk组的大小依次增大为原来的2 倍.</p>\n<p>下面看看<code>f = 1.25</code>时的输出</p>\n<pre><code>&gt; memcache -m 64 -p 11211 -f 1.25 -vvv\n</code></pre><p><img src=\"../../images/201503/2015-03-28_204133.jpg\" alt=\"\"></p>\n<p>对比可知, 当f=2 时, 各slab 中的chunk size 增长很快,有些情况下就相当浪费内存.<br>因此,我们应细心统计缓存的大小,制定合理的增长因子.</p>\n<p>###注意：</p>\n<p>当f=1.25 时,从输出结果来看,某些相邻的slab class 的大小比值并非为1.25,可能会觉得有些<br>计算误差，这些误差是为了保持字节数的对齐而故意设置的.</p>\n<hr>\n<p>##小结:</p>\n<p>综合上面的介绍，memcached的内存分配策略就是：</p>\n<p>1、按slab需求分配page</p>\n<p>2、各slab按需使用chunk存储</p>\n<p>这里有几个特点要注意：</p>\n<p><strong>Memcached分配出去的page不会被回收或者重新分配，Memcached申请的内存不会被释放，slab空闲的chunk不会借给任何其他slab使用</strong>。</p>\n","site":{"data":{}},"excerpt":"<p>首先，我们要明白什么是<strong>内存的碎片化</strong>，要解释这个也不困难。大概可以这样描述，如果用c 语言直接<code>malloc</code>,<code>free</code> 来向操作系统申请和释放内存时,在不断的申请和释放过程中,形成了一些很小的内存片断,无法再利用.这种空闲,但无法利用内存的现象,即被称为<strong>内存的碎片化</strong>.</p>","more":"<p>##Page为内存分配的最小单位</p>\n<p>Memcached的内存分配以page为单位，默认情况下一个page是1M，可以通过-I(大写字母i)参数在启动时指定。如果需要申请内存 时，memcached会划分出一个新的page并分配给需要的slab区域。需要注意的是，<strong>page一旦被分配在重启前不会被回收或者重新分配</strong>。</p>\n<p><img src=\"../../images/201503/1866742045547134261.jpg\" alt=\"\"></p>\n<p>##slab allocator缓解内存碎片化</p>\n<p>Memcached并不是将所有大小的数据都放在一起的，而是预先将数据空间划分为一系列slabs，每个slab只负责一定范围内的数据存储。如 下图，每个slab只存储大于其上一个slab的chunk并小于或者等于自己最大chunk的数据。例如：slab 3只存储大小介于137 到 224 bytes的数据。如果一个数据大小为230byte将被分配到slab 4中。从下图可以看出，每个slab负责的空间其实是不等的，memcached默认情况下下一个slab的chunk最大值为前一个的1.25倍，这个可以通过修改<code>-f</code>参数来修改增长比例。 </p>\n<p><img src=\"../../images/201503/1866742045547134262.jpg\" alt=\"\"></p>\n<p>##Chunk才是存放缓存数据的单位</p>\n<p>memcache把申请到的每个slab仓库按照需要切分成不同的小块（chunk）来存储数据。Chunk是一系列固定的内存空间，这个大小就是管理它的slab的最大存放大小。例如：slab 1的每个chunk都是104byte，而slab 4的每个chunk都是280byte。chunk是memcached实际存放缓存数据的地方，因为chunk的大小固定为slab能够存放的最大值， 所以所有分配给当前slab的数据都可以被chunk存下。如果时间的数据大小小于chunk的大小，空余的空间将会被闲置，这个是为了防止内存碎片而设 计的。例如下图，chunk size是224byte，而存储的数据只有200byte，剩下的24byte将被闲置。</p>\n<p><img src=\"../../images/201503/1866742045547134263.jpg\" alt=\"\"></p>\n<p>###注意：</p>\n<p>如果有100byte 的内容要存,但122 大小的仓库中的chunk 满了，并不会寻找更大的,如144 的仓库来存储,而是把122 仓库的旧数据踢掉! 这个会在后面的memcache过期与删除机制那部分介绍。</p>\n<p>##grow factor调优</p>\n<p>由于slab allocator 机制中, 分配的chunk 的大小是”固定”的, 因此,对于特定的item，可能造成内存空间的浪费.比如, 将100 字节的数据缓存到122 字节的chunk 中, 剩余的22 字节就浪费了，是吧。那怎么办？</p>\n<p>对于chunk 空间的浪费问题,无法彻底解决,只能缓解该问题.开发者可以对网站中缓存中的item 的长度进行统计,并制定合理的slab class 中的chunk 的大小.</p>\n<p>可惜的是,我们目前还不能自定义chunk 的大小,但可以通过参数来调整各slab class 中chunk<br>大小的增长速度. 即增长因子, grow factor!</p>\n<p>memcached 在启动时可以通过<code>f</code>选项指定Growth Factor增长因子, 并在某种程度上控制slab 之<br>间的差异. 默认值为1.25. 但是,在该选项出现之前,这个因子曾经固定为2,称为”powers of 2”<br>策略。<br>我们分别用grow factor 为2 和1.25 来看一看效果:</p>\n<pre><code>&gt; memcache -m 64 -p 11211 -f 2 -vvv\n</code></pre><p><img src=\"../../images/201503/2015-03-28_203830.jpg\" alt=\"\"></p>\n<p>可以看到，从96 字节的chunk组开始，chunk组的大小依次增大为原来的2 倍.</p>\n<p>下面看看<code>f = 1.25</code>时的输出</p>\n<pre><code>&gt; memcache -m 64 -p 11211 -f 1.25 -vvv\n</code></pre><p><img src=\"../../images/201503/2015-03-28_204133.jpg\" alt=\"\"></p>\n<p>对比可知, 当f=2 时, 各slab 中的chunk size 增长很快,有些情况下就相当浪费内存.<br>因此,我们应细心统计缓存的大小,制定合理的增长因子.</p>\n<p>###注意：</p>\n<p>当f=1.25 时,从输出结果来看,某些相邻的slab class 的大小比值并非为1.25,可能会觉得有些<br>计算误差，这些误差是为了保持字节数的对齐而故意设置的.</p>\n<hr>\n<p>##小结:</p>\n<p>综合上面的介绍，memcached的内存分配策略就是：</p>\n<p>1、按slab需求分配page</p>\n<p>2、各slab按需使用chunk存储</p>\n<p>这里有几个特点要注意：</p>\n<p><strong>Memcached分配出去的page不会被回收或者重新分配，Memcached申请的内存不会被释放，slab空闲的chunk不会借给任何其他slab使用</strong>。</p>"},{"layout":"post","title":"缓存无底洞现象","_content":"该问题由facebook 的工作人员提出的, facebook 在2010 年左右,memcached 节点就已经达\n3000 个,缓存数千G 内容.\n\n他们发现了一个问题，即由于memcache连接频繁，导致效率下降了。于是他们开始添加memcache节点，添加新节点后，发现因为连接频繁导致的问题,仍然存在,并没有好转,称之为”**无底洞现象**”. 具体原文在这:[Facebook Multiget Hole](http://highscalability.com/blog/2009/10/26/facebooks-memcached-multiget-hole-more-machinesmore-capacit.html)\n\n<!--more-->\n\n##Multiget Hole问题分析\n\n以用户为例: user-133-age, user-133-name,user-133-height .....N 个key,\n当服务器增多时,133号用户的信息也被散落在更多的节点。所以,同样是访问个人主页,得到相同的个人信息, 节点越多,需要连接的节点也越多.对于memcached 的连接数,并没有随着节点的增多,而降低. 于是无底洞问题出现.\n\n##Multiget Hole现象解决方案\n\n> 把某一组key,按其共同前缀,来分布在同一个节点上。\n\n比如user-133-age, user-133-name,user-133-height 这3 个key（当然也可能有更多的key，这里只是举例说明）,在用分布式算法求其节点时,应该以**共同前缀**‘user-133’来计算,而不是以user-133-age、user-133-name、user-133-height来计算.\n\n于是，三个关于个人信息的key都落在同一个节点上面，当访问个人主页时候，只需要连接一个节点即可，问题解决。\n\n这里是官方的回应：[http://dormando.livejournal.com/521163.html](http://dormando.livejournal.com/521163.html \"http://dormando.livejournal.com/521163.html\")\n\n---\n\n###小结\n\n事实上，非关系型数据库和传统的关系型数据库,并不是水火不容,两者在某些设计上,是可以相互参考的.\n对于memcached, redis 这种kv 存储, key 的设计,可以参考MySQL 中表/列的设计.\n比如在关系型数据库中: user 表下,有age 列,name 列,height列。对应在NoSQL中的key,可以用user:133:age = 23, user:133:name = ‘lisi’, user:133:height = 168来表示。\n\n(end)\n\n","source":"_posts/201503/2015-03-30-memcache_multiget_hole_note.md","raw":"---\nlayout : post\ntitle : 缓存无底洞现象\ncategory : Memcache\ntags : Memcache\n---\n该问题由facebook 的工作人员提出的, facebook 在2010 年左右,memcached 节点就已经达\n3000 个,缓存数千G 内容.\n\n他们发现了一个问题，即由于memcache连接频繁，导致效率下降了。于是他们开始添加memcache节点，添加新节点后，发现因为连接频繁导致的问题,仍然存在,并没有好转,称之为”**无底洞现象**”. 具体原文在这:[Facebook Multiget Hole](http://highscalability.com/blog/2009/10/26/facebooks-memcached-multiget-hole-more-machinesmore-capacit.html)\n\n<!--more-->\n\n##Multiget Hole问题分析\n\n以用户为例: user-133-age, user-133-name,user-133-height .....N 个key,\n当服务器增多时,133号用户的信息也被散落在更多的节点。所以,同样是访问个人主页,得到相同的个人信息, 节点越多,需要连接的节点也越多.对于memcached 的连接数,并没有随着节点的增多,而降低. 于是无底洞问题出现.\n\n##Multiget Hole现象解决方案\n\n> 把某一组key,按其共同前缀,来分布在同一个节点上。\n\n比如user-133-age, user-133-name,user-133-height 这3 个key（当然也可能有更多的key，这里只是举例说明）,在用分布式算法求其节点时,应该以**共同前缀**‘user-133’来计算,而不是以user-133-age、user-133-name、user-133-height来计算.\n\n于是，三个关于个人信息的key都落在同一个节点上面，当访问个人主页时候，只需要连接一个节点即可，问题解决。\n\n这里是官方的回应：[http://dormando.livejournal.com/521163.html](http://dormando.livejournal.com/521163.html \"http://dormando.livejournal.com/521163.html\")\n\n---\n\n###小结\n\n事实上，非关系型数据库和传统的关系型数据库,并不是水火不容,两者在某些设计上,是可以相互参考的.\n对于memcached, redis 这种kv 存储, key 的设计,可以参考MySQL 中表/列的设计.\n比如在关系型数据库中: user 表下,有age 列,name 列,height列。对应在NoSQL中的key,可以用user:133:age = 23, user:133:name = ‘lisi’, user:133:height = 168来表示。\n\n(end)\n\n","slug":"201503-2015-03-30-memcache-multiget-hole-note","published":1,"date":"2018-04-12T15:20:38.835Z","updated":"2018-04-12T15:20:38.835Z","comments":1,"photos":[],"link":"","_id":"cjfwomb75006rass66ct50eqj","content":"<p>该问题由facebook 的工作人员提出的, facebook 在2010 年左右,memcached 节点就已经达<br>3000 个,缓存数千G 内容.</p>\n<p>他们发现了一个问题，即由于memcache连接频繁，导致效率下降了。于是他们开始添加memcache节点，添加新节点后，发现因为连接频繁导致的问题,仍然存在,并没有好转,称之为”<strong>无底洞现象</strong>”. 具体原文在这:<a href=\"http://highscalability.com/blog/2009/10/26/facebooks-memcached-multiget-hole-more-machinesmore-capacit.html\" target=\"_blank\" rel=\"noopener\">Facebook Multiget Hole</a></p>\n<a id=\"more\"></a>\n<p>##Multiget Hole问题分析</p>\n<p>以用户为例: user-133-age, user-133-name,user-133-height …..N 个key,<br>当服务器增多时,133号用户的信息也被散落在更多的节点。所以,同样是访问个人主页,得到相同的个人信息, 节点越多,需要连接的节点也越多.对于memcached 的连接数,并没有随着节点的增多,而降低. 于是无底洞问题出现.</p>\n<p>##Multiget Hole现象解决方案</p>\n<blockquote>\n<p>把某一组key,按其共同前缀,来分布在同一个节点上。</p>\n</blockquote>\n<p>比如user-133-age, user-133-name,user-133-height 这3 个key（当然也可能有更多的key，这里只是举例说明）,在用分布式算法求其节点时,应该以<strong>共同前缀</strong>‘user-133’来计算,而不是以user-133-age、user-133-name、user-133-height来计算.</p>\n<p>于是，三个关于个人信息的key都落在同一个节点上面，当访问个人主页时候，只需要连接一个节点即可，问题解决。</p>\n<p>这里是官方的回应：<a href=\"http://dormando.livejournal.com/521163.html\" title=\"http://dormando.livejournal.com/521163.html\" target=\"_blank\" rel=\"noopener\">http://dormando.livejournal.com/521163.html</a></p>\n<hr>\n<p>###小结</p>\n<p>事实上，非关系型数据库和传统的关系型数据库,并不是水火不容,两者在某些设计上,是可以相互参考的.<br>对于memcached, redis 这种kv 存储, key 的设计,可以参考MySQL 中表/列的设计.<br>比如在关系型数据库中: user 表下,有age 列,name 列,height列。对应在NoSQL中的key,可以用user:133:age = 23, user:133:name = ‘lisi’, user:133:height = 168来表示。</p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>该问题由facebook 的工作人员提出的, facebook 在2010 年左右,memcached 节点就已经达<br>3000 个,缓存数千G 内容.</p>\n<p>他们发现了一个问题，即由于memcache连接频繁，导致效率下降了。于是他们开始添加memcache节点，添加新节点后，发现因为连接频繁导致的问题,仍然存在,并没有好转,称之为”<strong>无底洞现象</strong>”. 具体原文在这:<a href=\"http://highscalability.com/blog/2009/10/26/facebooks-memcached-multiget-hole-more-machinesmore-capacit.html\" target=\"_blank\" rel=\"noopener\">Facebook Multiget Hole</a></p>","more":"<p>##Multiget Hole问题分析</p>\n<p>以用户为例: user-133-age, user-133-name,user-133-height …..N 个key,<br>当服务器增多时,133号用户的信息也被散落在更多的节点。所以,同样是访问个人主页,得到相同的个人信息, 节点越多,需要连接的节点也越多.对于memcached 的连接数,并没有随着节点的增多,而降低. 于是无底洞问题出现.</p>\n<p>##Multiget Hole现象解决方案</p>\n<blockquote>\n<p>把某一组key,按其共同前缀,来分布在同一个节点上。</p>\n</blockquote>\n<p>比如user-133-age, user-133-name,user-133-height 这3 个key（当然也可能有更多的key，这里只是举例说明）,在用分布式算法求其节点时,应该以<strong>共同前缀</strong>‘user-133’来计算,而不是以user-133-age、user-133-name、user-133-height来计算.</p>\n<p>于是，三个关于个人信息的key都落在同一个节点上面，当访问个人主页时候，只需要连接一个节点即可，问题解决。</p>\n<p>这里是官方的回应：<a href=\"http://dormando.livejournal.com/521163.html\" title=\"http://dormando.livejournal.com/521163.html\" target=\"_blank\" rel=\"noopener\">http://dormando.livejournal.com/521163.html</a></p>\n<hr>\n<p>###小结</p>\n<p>事实上，非关系型数据库和传统的关系型数据库,并不是水火不容,两者在某些设计上,是可以相互参考的.<br>对于memcached, redis 这种kv 存储, key 的设计,可以参考MySQL 中表/列的设计.<br>比如在关系型数据库中: user 表下,有age 列,name 列,height列。对应在NoSQL中的key,可以用user:133:age = 23, user:133:name = ‘lisi’, user:133:height = 168来表示。</p>\n<p>(end)</p>"},{"layout":"post","title":"Memcache过期数据惰性和LRU删除机制","_content":"Memcache是缓存，所以数据不会永久保存在服务器上，这也是在服务器上引进Memcache的前提。当我们在memcache中存放数据时会设置超时时间（不设置，默认为永久有效，但不排除会被新数据剔除的可能性），那么当到达超时时间时memcache是如何做到删除数据的呢？这里需要引入**Lazy Expiration**即惰性失效的概念。  \n\n<!--more-->\n\n##过期数据的惰性删除\n\n首先，我们在memcache中存入测试数据：\n\n\ttelnet 127.0.0.1 11211 //使用telnet做连接测试\n\t>add aa 0 10 \n\t>test\n\n此时，我们存入了一个key为aa的测试数据，并且设置超时时间是10s。\n\n等待10s......滴答滴答......\n\n这时候，我们使用`stats`命令在telnet下查看运行状态：\n\n![](../../images/201503/2015-03-29_163610.jpg)\n\n我们发现，当某个值过期后,并没有从内存删除, 因此,stats 统计时, curr_item仍有其信息。此时，我们使用命令`get`后，再次stats查看信息，发现内存中已经没有该信息了，也就是说被删掉了。如下图：\n\n![](../../images/201503/2015-03-29_163855.jpg)\n\n因此，我们可以总结如下：\n\n1、 当某个值过期后,并没有从内存删除, 因此,stats 统计时, curr_item 有其信息.\n\n2、 当某个新值去占用他的位置时,当成空chunk 来占用.\n\n3、 当get 值时,判断是否过期,如果过期,返回空,并且清空, curr_item 就减少了.\n\n所以，这个时期，memcached内部不会监视记录是否过期，memcache只是让用户看不到数据而已，并没有在过期的瞬间立即从内存删掉数据，而是在get时查看记录的时间戳，检查记录是否过期,这种技术被称为**Lazy Expiration**， 也就是惰性失效。\n\n那么，有什么好处呢？\n\n好处就是节省了CPU的时间和检测成本。\n\n##LRU删除机制\n\n如果以122byte 大小的chunk举例, 122 的chunk 都满了, 又有新的值(例如长度为120)要加入, 要\n挤掉谁?\n\nmemcache会优先使用已超时的记录的空间，即便如此，也会出现追加新纪录时空间不足的情况，那该怎么办呢？此时，memcache就要使用名为\"LRU\"(Least Recently Used, 最近最少使用)机制来分配空间。因此，当memcached的内存空间不足时（无法从slab class 获取到新的空间时），就从最近未被使用的记录中搜索，并将其空间分配给新的记录。\n\n**原理:** \n\n> 当某个单元被请求时,维护一个计数器,通过计数器来判断最近谁最少被使用.就把谁剔除。\n\n需要**注意**的是: 即使某个key 是设置的永久有效期,也一样会有被踢出来的可能!即**永久数据被踢现象**。这个会在后面总结。\n\n不过，有些情况下LRU机制反倒会造成麻烦。memcached启动时通过`-M`参数可以禁止LRU，如下所示：\n\t\n\t$ memcached -M -m 1024\n\n启动时必须注意的是，小写的“-m”选项是用来指定最大内存大小的。不指定具体数值则使用默认值64MB。\n\n指定`-M`参数启动后，内存用尽时memcached会返回错误。话说回来，memcached毕竟不是存储器，而是缓存，所以推荐使用LRU。\n\n\n(end)","source":"_posts/201503/2015-03-29-memcache_item_delete_note.md","raw":"---\nlayout : post\ntitle : Memcache过期数据惰性和LRU删除机制\ncategory : Memcache\ntags : Memcache\n---\nMemcache是缓存，所以数据不会永久保存在服务器上，这也是在服务器上引进Memcache的前提。当我们在memcache中存放数据时会设置超时时间（不设置，默认为永久有效，但不排除会被新数据剔除的可能性），那么当到达超时时间时memcache是如何做到删除数据的呢？这里需要引入**Lazy Expiration**即惰性失效的概念。  \n\n<!--more-->\n\n##过期数据的惰性删除\n\n首先，我们在memcache中存入测试数据：\n\n\ttelnet 127.0.0.1 11211 //使用telnet做连接测试\n\t>add aa 0 10 \n\t>test\n\n此时，我们存入了一个key为aa的测试数据，并且设置超时时间是10s。\n\n等待10s......滴答滴答......\n\n这时候，我们使用`stats`命令在telnet下查看运行状态：\n\n![](../../images/201503/2015-03-29_163610.jpg)\n\n我们发现，当某个值过期后,并没有从内存删除, 因此,stats 统计时, curr_item仍有其信息。此时，我们使用命令`get`后，再次stats查看信息，发现内存中已经没有该信息了，也就是说被删掉了。如下图：\n\n![](../../images/201503/2015-03-29_163855.jpg)\n\n因此，我们可以总结如下：\n\n1、 当某个值过期后,并没有从内存删除, 因此,stats 统计时, curr_item 有其信息.\n\n2、 当某个新值去占用他的位置时,当成空chunk 来占用.\n\n3、 当get 值时,判断是否过期,如果过期,返回空,并且清空, curr_item 就减少了.\n\n所以，这个时期，memcached内部不会监视记录是否过期，memcache只是让用户看不到数据而已，并没有在过期的瞬间立即从内存删掉数据，而是在get时查看记录的时间戳，检查记录是否过期,这种技术被称为**Lazy Expiration**， 也就是惰性失效。\n\n那么，有什么好处呢？\n\n好处就是节省了CPU的时间和检测成本。\n\n##LRU删除机制\n\n如果以122byte 大小的chunk举例, 122 的chunk 都满了, 又有新的值(例如长度为120)要加入, 要\n挤掉谁?\n\nmemcache会优先使用已超时的记录的空间，即便如此，也会出现追加新纪录时空间不足的情况，那该怎么办呢？此时，memcache就要使用名为\"LRU\"(Least Recently Used, 最近最少使用)机制来分配空间。因此，当memcached的内存空间不足时（无法从slab class 获取到新的空间时），就从最近未被使用的记录中搜索，并将其空间分配给新的记录。\n\n**原理:** \n\n> 当某个单元被请求时,维护一个计数器,通过计数器来判断最近谁最少被使用.就把谁剔除。\n\n需要**注意**的是: 即使某个key 是设置的永久有效期,也一样会有被踢出来的可能!即**永久数据被踢现象**。这个会在后面总结。\n\n不过，有些情况下LRU机制反倒会造成麻烦。memcached启动时通过`-M`参数可以禁止LRU，如下所示：\n\t\n\t$ memcached -M -m 1024\n\n启动时必须注意的是，小写的“-m”选项是用来指定最大内存大小的。不指定具体数值则使用默认值64MB。\n\n指定`-M`参数启动后，内存用尽时memcached会返回错误。话说回来，memcached毕竟不是存储器，而是缓存，所以推荐使用LRU。\n\n\n(end)","slug":"201503-2015-03-29-memcache-item-delete-note","published":1,"date":"2018-04-12T15:20:38.834Z","updated":"2018-04-12T15:20:38.835Z","comments":1,"photos":[],"link":"","_id":"cjfwomb77006vass6nnk6lhd9","content":"<p>Memcache是缓存，所以数据不会永久保存在服务器上，这也是在服务器上引进Memcache的前提。当我们在memcache中存放数据时会设置超时时间（不设置，默认为永久有效，但不排除会被新数据剔除的可能性），那么当到达超时时间时memcache是如何做到删除数据的呢？这里需要引入<strong>Lazy Expiration</strong>即惰性失效的概念。  </p>\n<a id=\"more\"></a>\n<p>##过期数据的惰性删除</p>\n<p>首先，我们在memcache中存入测试数据：</p>\n<pre><code>telnet 127.0.0.1 11211 //使用telnet做连接测试\n&gt;add aa 0 10 \n&gt;test\n</code></pre><p>此时，我们存入了一个key为aa的测试数据，并且设置超时时间是10s。</p>\n<p>等待10s……滴答滴答……</p>\n<p>这时候，我们使用<code>stats</code>命令在telnet下查看运行状态：</p>\n<p><img src=\"../../images/201503/2015-03-29_163610.jpg\" alt=\"\"></p>\n<p>我们发现，当某个值过期后,并没有从内存删除, 因此,stats 统计时, curr_item仍有其信息。此时，我们使用命令<code>get</code>后，再次stats查看信息，发现内存中已经没有该信息了，也就是说被删掉了。如下图：</p>\n<p><img src=\"../../images/201503/2015-03-29_163855.jpg\" alt=\"\"></p>\n<p>因此，我们可以总结如下：</p>\n<p>1、 当某个值过期后,并没有从内存删除, 因此,stats 统计时, curr_item 有其信息.</p>\n<p>2、 当某个新值去占用他的位置时,当成空chunk 来占用.</p>\n<p>3、 当get 值时,判断是否过期,如果过期,返回空,并且清空, curr_item 就减少了.</p>\n<p>所以，这个时期，memcached内部不会监视记录是否过期，memcache只是让用户看不到数据而已，并没有在过期的瞬间立即从内存删掉数据，而是在get时查看记录的时间戳，检查记录是否过期,这种技术被称为<strong>Lazy Expiration</strong>， 也就是惰性失效。</p>\n<p>那么，有什么好处呢？</p>\n<p>好处就是节省了CPU的时间和检测成本。</p>\n<p>##LRU删除机制</p>\n<p>如果以122byte 大小的chunk举例, 122 的chunk 都满了, 又有新的值(例如长度为120)要加入, 要<br>挤掉谁?</p>\n<p>memcache会优先使用已超时的记录的空间，即便如此，也会出现追加新纪录时空间不足的情况，那该怎么办呢？此时，memcache就要使用名为”LRU”(Least Recently Used, 最近最少使用)机制来分配空间。因此，当memcached的内存空间不足时（无法从slab class 获取到新的空间时），就从最近未被使用的记录中搜索，并将其空间分配给新的记录。</p>\n<p><strong>原理:</strong> </p>\n<blockquote>\n<p>当某个单元被请求时,维护一个计数器,通过计数器来判断最近谁最少被使用.就把谁剔除。</p>\n</blockquote>\n<p>需要<strong>注意</strong>的是: 即使某个key 是设置的永久有效期,也一样会有被踢出来的可能!即<strong>永久数据被踢现象</strong>。这个会在后面总结。</p>\n<p>不过，有些情况下LRU机制反倒会造成麻烦。memcached启动时通过<code>-M</code>参数可以禁止LRU，如下所示：</p>\n<pre><code>$ memcached -M -m 1024\n</code></pre><p>启动时必须注意的是，小写的“-m”选项是用来指定最大内存大小的。不指定具体数值则使用默认值64MB。</p>\n<p>指定<code>-M</code>参数启动后，内存用尽时memcached会返回错误。话说回来，memcached毕竟不是存储器，而是缓存，所以推荐使用LRU。</p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>Memcache是缓存，所以数据不会永久保存在服务器上，这也是在服务器上引进Memcache的前提。当我们在memcache中存放数据时会设置超时时间（不设置，默认为永久有效，但不排除会被新数据剔除的可能性），那么当到达超时时间时memcache是如何做到删除数据的呢？这里需要引入<strong>Lazy Expiration</strong>即惰性失效的概念。  </p>","more":"<p>##过期数据的惰性删除</p>\n<p>首先，我们在memcache中存入测试数据：</p>\n<pre><code>telnet 127.0.0.1 11211 //使用telnet做连接测试\n&gt;add aa 0 10 \n&gt;test\n</code></pre><p>此时，我们存入了一个key为aa的测试数据，并且设置超时时间是10s。</p>\n<p>等待10s……滴答滴答……</p>\n<p>这时候，我们使用<code>stats</code>命令在telnet下查看运行状态：</p>\n<p><img src=\"../../images/201503/2015-03-29_163610.jpg\" alt=\"\"></p>\n<p>我们发现，当某个值过期后,并没有从内存删除, 因此,stats 统计时, curr_item仍有其信息。此时，我们使用命令<code>get</code>后，再次stats查看信息，发现内存中已经没有该信息了，也就是说被删掉了。如下图：</p>\n<p><img src=\"../../images/201503/2015-03-29_163855.jpg\" alt=\"\"></p>\n<p>因此，我们可以总结如下：</p>\n<p>1、 当某个值过期后,并没有从内存删除, 因此,stats 统计时, curr_item 有其信息.</p>\n<p>2、 当某个新值去占用他的位置时,当成空chunk 来占用.</p>\n<p>3、 当get 值时,判断是否过期,如果过期,返回空,并且清空, curr_item 就减少了.</p>\n<p>所以，这个时期，memcached内部不会监视记录是否过期，memcache只是让用户看不到数据而已，并没有在过期的瞬间立即从内存删掉数据，而是在get时查看记录的时间戳，检查记录是否过期,这种技术被称为<strong>Lazy Expiration</strong>， 也就是惰性失效。</p>\n<p>那么，有什么好处呢？</p>\n<p>好处就是节省了CPU的时间和检测成本。</p>\n<p>##LRU删除机制</p>\n<p>如果以122byte 大小的chunk举例, 122 的chunk 都满了, 又有新的值(例如长度为120)要加入, 要<br>挤掉谁?</p>\n<p>memcache会优先使用已超时的记录的空间，即便如此，也会出现追加新纪录时空间不足的情况，那该怎么办呢？此时，memcache就要使用名为”LRU”(Least Recently Used, 最近最少使用)机制来分配空间。因此，当memcached的内存空间不足时（无法从slab class 获取到新的空间时），就从最近未被使用的记录中搜索，并将其空间分配给新的记录。</p>\n<p><strong>原理:</strong> </p>\n<blockquote>\n<p>当某个单元被请求时,维护一个计数器,通过计数器来判断最近谁最少被使用.就把谁剔除。</p>\n</blockquote>\n<p>需要<strong>注意</strong>的是: 即使某个key 是设置的永久有效期,也一样会有被踢出来的可能!即<strong>永久数据被踢现象</strong>。这个会在后面总结。</p>\n<p>不过，有些情况下LRU机制反倒会造成麻烦。memcached启动时通过<code>-M</code>参数可以禁止LRU，如下所示：</p>\n<pre><code>$ memcached -M -m 1024\n</code></pre><p>启动时必须注意的是，小写的“-m”选项是用来指定最大内存大小的。不指定具体数值则使用默认值64MB。</p>\n<p>指定<code>-M</code>参数启动后，内存用尽时memcached会返回错误。话说回来，memcached毕竟不是存储器，而是缓存，所以推荐使用LRU。</p>\n<p>(end)</p>"},{"layout":"post","title":"永久数据丢失现象","_content":"有时候，在我们使用memcache过程中会出现\"数据丢失\"的现象， 也就是说明明数据被设为永久有效，却莫名其妙的丢失了，这是怎么回事呢？\n\n在上一篇博客[Memcache过期数据惰性和LRU删除机制](http://liyafeng.cn/memcache_item_delete_note/)中已经总结了memcache过期数据是如何被删除的以及根据LRU（最近最少使用机制）来从最近未被使用的记录中搜索，并将其空间分配给新的记录。\n\n<!--more-->\n\n所以，遇到这种情况我们只需要从以上两方面来分析，即可得到以下结论：\n\n1、如果Slab中的很多chunk尚未过期， 且非永久数据比较活跃，此时新增item，则永久数据被踢；\n\n2、如果Slab中的很多chunk已经过期， 且过期前比较活跃以及过期后未被get过，系统不知道他们已经过期，此时新增item， 则永久数据被踢；\n\n3、如果Slab中的很多chunk已经过期，且被get过，被标记为expire(过期)，此时新增item，则永久数据不会被踢；\n\n用图表示如下：\n\n![](../../images/201503/2015-03-30_155818.jpg)\n\n避免永久数据被踢现象的解决方案：\n\n> 永久数据和非永久数据分开放，具体如何设计，看具体环境。\n\n(end)\n\n\n","source":"_posts/201503/2015-03-29-memcache_perpetual_data_lose.md","raw":"---\nlayout : post\ntitle : 永久数据丢失现象\ncategory : Memcache\ntags : Memcache\n---\n有时候，在我们使用memcache过程中会出现\"数据丢失\"的现象， 也就是说明明数据被设为永久有效，却莫名其妙的丢失了，这是怎么回事呢？\n\n在上一篇博客[Memcache过期数据惰性和LRU删除机制](http://liyafeng.cn/memcache_item_delete_note/)中已经总结了memcache过期数据是如何被删除的以及根据LRU（最近最少使用机制）来从最近未被使用的记录中搜索，并将其空间分配给新的记录。\n\n<!--more-->\n\n所以，遇到这种情况我们只需要从以上两方面来分析，即可得到以下结论：\n\n1、如果Slab中的很多chunk尚未过期， 且非永久数据比较活跃，此时新增item，则永久数据被踢；\n\n2、如果Slab中的很多chunk已经过期， 且过期前比较活跃以及过期后未被get过，系统不知道他们已经过期，此时新增item， 则永久数据被踢；\n\n3、如果Slab中的很多chunk已经过期，且被get过，被标记为expire(过期)，此时新增item，则永久数据不会被踢；\n\n用图表示如下：\n\n![](../../images/201503/2015-03-30_155818.jpg)\n\n避免永久数据被踢现象的解决方案：\n\n> 永久数据和非永久数据分开放，具体如何设计，看具体环境。\n\n(end)\n\n\n","slug":"201503-2015-03-29-memcache-perpetual-data-lose","published":1,"date":"2018-04-12T15:20:38.835Z","updated":"2018-04-12T15:20:38.835Z","comments":1,"photos":[],"link":"","_id":"cjfwomb78006yass6y7s9jsnq","content":"<p>有时候，在我们使用memcache过程中会出现”数据丢失”的现象， 也就是说明明数据被设为永久有效，却莫名其妙的丢失了，这是怎么回事呢？</p>\n<p>在上一篇博客<a href=\"http://liyafeng.cn/memcache_item_delete_note/\" target=\"_blank\" rel=\"noopener\">Memcache过期数据惰性和LRU删除机制</a>中已经总结了memcache过期数据是如何被删除的以及根据LRU（最近最少使用机制）来从最近未被使用的记录中搜索，并将其空间分配给新的记录。</p>\n<a id=\"more\"></a>\n<p>所以，遇到这种情况我们只需要从以上两方面来分析，即可得到以下结论：</p>\n<p>1、如果Slab中的很多chunk尚未过期， 且非永久数据比较活跃，此时新增item，则永久数据被踢；</p>\n<p>2、如果Slab中的很多chunk已经过期， 且过期前比较活跃以及过期后未被get过，系统不知道他们已经过期，此时新增item， 则永久数据被踢；</p>\n<p>3、如果Slab中的很多chunk已经过期，且被get过，被标记为expire(过期)，此时新增item，则永久数据不会被踢；</p>\n<p>用图表示如下：</p>\n<p><img src=\"../../images/201503/2015-03-30_155818.jpg\" alt=\"\"></p>\n<p>避免永久数据被踢现象的解决方案：</p>\n<blockquote>\n<p>永久数据和非永久数据分开放，具体如何设计，看具体环境。</p>\n</blockquote>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>有时候，在我们使用memcache过程中会出现”数据丢失”的现象， 也就是说明明数据被设为永久有效，却莫名其妙的丢失了，这是怎么回事呢？</p>\n<p>在上一篇博客<a href=\"http://liyafeng.cn/memcache_item_delete_note/\" target=\"_blank\" rel=\"noopener\">Memcache过期数据惰性和LRU删除机制</a>中已经总结了memcache过期数据是如何被删除的以及根据LRU（最近最少使用机制）来从最近未被使用的记录中搜索，并将其空间分配给新的记录。</p>","more":"<p>所以，遇到这种情况我们只需要从以上两方面来分析，即可得到以下结论：</p>\n<p>1、如果Slab中的很多chunk尚未过期， 且非永久数据比较活跃，此时新增item，则永久数据被踢；</p>\n<p>2、如果Slab中的很多chunk已经过期， 且过期前比较活跃以及过期后未被get过，系统不知道他们已经过期，此时新增item， 则永久数据被踢；</p>\n<p>3、如果Slab中的很多chunk已经过期，且被get过，被标记为expire(过期)，此时新增item，则永久数据不会被踢；</p>\n<p>用图表示如下：</p>\n<p><img src=\"../../images/201503/2015-03-30_155818.jpg\" alt=\"\"></p>\n<p>避免永久数据被踢现象的解决方案：</p>\n<blockquote>\n<p>永久数据和非永久数据分开放，具体如何设计，看具体环境。</p>\n</blockquote>\n<p>(end)</p>"},{"layout":"post","title":"无锁共享内存---Yac","_content":"这几天一直在研究鸟哥[@laruence](http://weibo.com/laruence)的一个产品---**Yac**，它是为PHP实现的一个基于共享内存、并且无锁的User Data Cache。今天比较了下Memcache和Yac的高并发读写性能测试，发现Yac要比Memcache快很多（这里没有比较Yac和Apc的性能情况, 不过据说Yac要比Apc快很多，Apc比Memcache快一倍，待有时间再进行测试吧, 好吧，承认懒了 ^_^)。\n\n<!--more-->\n\n\n首先说下，Yac是无锁的、共享内存的Cache，因此可以减少CPU的消耗，这个本人确实有体会，而Memcache压力测试时CPU直接飙升到 ~100%，汗。\n\n另外，Yac的安装是很方便的，而且在windows下支持是灰常好滴，想学习的同学可以参考鸟哥[@laruence](http://weibo.com/laruence)的博客：\n\n[http://www.laruence.com/2013/03/18/2846.html](http://www.laruence.com/2013/03/18/2846.html)\n\ngithub 地址：[https://github.com/laruence/yac](https://github.com/laruence/yac)\n\n下面简单介绍下安装：\n\n\twgethttps://pecl.php.net/get/yac-0.9.2.tgz\n\ttar -zxvf yac-0.9.2.tgz\n\tcd yac-0.9.2\n\tphpize\n\t./config --prefix=/usr/local/yac --with-php-config=/usr/local/php/bin/php-config\n\tsudo make && make install\n\n接下来配置php.ini文件：\n\n\tvim /etc/php.ini\n\t//添加一下内容\n\textension=php-yac.so\n\t[yac]\n\tyac.enable = 1\t\t\t\t\t//是否开启yac，1表示开启， 0表示关闭\n\tyac.keys_memory_size = 4M\t\t//4M可以得到32768个key， 32M可以得到262144个key\n\tyac.values_memory_size = 64M\t//申请的最大value内存\n\tyac.compress_threshold = -1\t\t//是否压缩数据\n\tyac.enable_cli = 0\t\t\t\t//关闭在cli下使用yac\n\n最后重启Web Server服务器即可， windows下面安装yac扩展网上教程一大推，自己去搜索吧，这里不再赘余。。。\n\n###Yac的应用场景\n\n1.\t让PHP进程之间共享一些简单的数据\n2.\t高效地缓存一些页面结果\n\n###Yac的限制\n\n1.\t 缓存的键长度不能超过48字节，太长的话可以md5结果后再使用\n2.\tValue的最大长度不能超过64M，压缩后的长度不能超过1M\n3.\t当内存不够的时候, Yac会有比较明显的踢出率 (所以如果要使用Yac, 那么尽量多给点内存...)\n\n\n###Yac vs Memcache\n\n下面对Yac和Memcache进行性能比较：\n\nyac测试代码：\n\n\t//test-yac.php\n\t<?php\n\t\t$yac = new Yac();\n\t\tfor($i = 1; $i <= 100; $i++){\n    \t\t$key = 'key_' . $i;\n    \t\t$value = mt_rand(0, 10000);\n    \t\tif( ! $yac->set($key, $value))\n        \t\tvar_dump(\"Yac set error: $key --> $value\");\n\t\t}\n\n\t\tfor($i = 1; $i <= 100; $i++){\n    \t\t$key = 'key_' . $i;\n    \t\t$value = $yac->get($key);\n    \t\tif($value === false){\n        \t\tvar_dump(\"Yac get error: $key not found\");\n    \t\t}\n\t\t}\n\t?>\n\nmemcache测试代码：\n\n\t//test-mem.php\n\t<?php\n\t\t$mem = new Memcache();\n\t\t$mem->connect('localhost', 11211) or die('memcache connected error...');\n\n\t\tfor($i = 1; $i <= 100; $i++){\n    \t\t$key = 'key_' . $i;\n    \t\t$value = mt_rand(0, 10000);\n    \t\tif( ! $mem->set($key, $value))\n        \t\tvar_dump(\"Memcache set error: $key --> $value\");\n\t\t}\n\n\t\tfor($i = 1; $i <= 100; $i++){\n   \t\t\t$key = 'key_' . $i;\n    \t\t$value = $mem->get($key);\n    \t\tif($value === false){\n        \t\tvar_dump(\"Memcache get error: $key not found\");\n    \t\t}\n\t\t}\n\t?>\n然后对test-yac.php和test-mem.php文件分别进行ab压力测试：\n\n\tab -n 10000 -c 100 http://localhost/demo/test-yac.php\n\n![pic](../../images/201504/2015-04-20_194920.jpg)\n\n\tab -n 10000 -c 100 http://localhost/demo/test-mem.php\n\n![pic](../../images/201504/2015-04-20_195130.jpg)\n\n从上面的图中，相信大家可以看出结论了，Yac要比Memcache快很多，而且出错率很低，所以说Yac还是很不错的。\n\n---\n\n###小结\n\nYac固然很高效，但还是要注意一些方面，由于Yac是作为PHP的扩展形式存在的，所以Yac只能在单机的多个进程之间共享缓存的，这一点一定要注意。而在真实的生产环境下，由于服务器有很多，并且有可能是作为分布式集群形式存在，那个时候使用Memcache缓存服务器集群还是更好的选择（或者使用其他分布式缓存数据库，比如Redis等NoSQL非关系型数据库）。\n\n（end）\n\n\n\n","source":"_posts/201504/2015-04-20-yac_study_and_vs_memcache_note.md","raw":"---\nlayout : post\ntitle : 无锁共享内存---Yac\ncategory : php\ntags : php\n---\n这几天一直在研究鸟哥[@laruence](http://weibo.com/laruence)的一个产品---**Yac**，它是为PHP实现的一个基于共享内存、并且无锁的User Data Cache。今天比较了下Memcache和Yac的高并发读写性能测试，发现Yac要比Memcache快很多（这里没有比较Yac和Apc的性能情况, 不过据说Yac要比Apc快很多，Apc比Memcache快一倍，待有时间再进行测试吧, 好吧，承认懒了 ^_^)。\n\n<!--more-->\n\n\n首先说下，Yac是无锁的、共享内存的Cache，因此可以减少CPU的消耗，这个本人确实有体会，而Memcache压力测试时CPU直接飙升到 ~100%，汗。\n\n另外，Yac的安装是很方便的，而且在windows下支持是灰常好滴，想学习的同学可以参考鸟哥[@laruence](http://weibo.com/laruence)的博客：\n\n[http://www.laruence.com/2013/03/18/2846.html](http://www.laruence.com/2013/03/18/2846.html)\n\ngithub 地址：[https://github.com/laruence/yac](https://github.com/laruence/yac)\n\n下面简单介绍下安装：\n\n\twgethttps://pecl.php.net/get/yac-0.9.2.tgz\n\ttar -zxvf yac-0.9.2.tgz\n\tcd yac-0.9.2\n\tphpize\n\t./config --prefix=/usr/local/yac --with-php-config=/usr/local/php/bin/php-config\n\tsudo make && make install\n\n接下来配置php.ini文件：\n\n\tvim /etc/php.ini\n\t//添加一下内容\n\textension=php-yac.so\n\t[yac]\n\tyac.enable = 1\t\t\t\t\t//是否开启yac，1表示开启， 0表示关闭\n\tyac.keys_memory_size = 4M\t\t//4M可以得到32768个key， 32M可以得到262144个key\n\tyac.values_memory_size = 64M\t//申请的最大value内存\n\tyac.compress_threshold = -1\t\t//是否压缩数据\n\tyac.enable_cli = 0\t\t\t\t//关闭在cli下使用yac\n\n最后重启Web Server服务器即可， windows下面安装yac扩展网上教程一大推，自己去搜索吧，这里不再赘余。。。\n\n###Yac的应用场景\n\n1.\t让PHP进程之间共享一些简单的数据\n2.\t高效地缓存一些页面结果\n\n###Yac的限制\n\n1.\t 缓存的键长度不能超过48字节，太长的话可以md5结果后再使用\n2.\tValue的最大长度不能超过64M，压缩后的长度不能超过1M\n3.\t当内存不够的时候, Yac会有比较明显的踢出率 (所以如果要使用Yac, 那么尽量多给点内存...)\n\n\n###Yac vs Memcache\n\n下面对Yac和Memcache进行性能比较：\n\nyac测试代码：\n\n\t//test-yac.php\n\t<?php\n\t\t$yac = new Yac();\n\t\tfor($i = 1; $i <= 100; $i++){\n    \t\t$key = 'key_' . $i;\n    \t\t$value = mt_rand(0, 10000);\n    \t\tif( ! $yac->set($key, $value))\n        \t\tvar_dump(\"Yac set error: $key --> $value\");\n\t\t}\n\n\t\tfor($i = 1; $i <= 100; $i++){\n    \t\t$key = 'key_' . $i;\n    \t\t$value = $yac->get($key);\n    \t\tif($value === false){\n        \t\tvar_dump(\"Yac get error: $key not found\");\n    \t\t}\n\t\t}\n\t?>\n\nmemcache测试代码：\n\n\t//test-mem.php\n\t<?php\n\t\t$mem = new Memcache();\n\t\t$mem->connect('localhost', 11211) or die('memcache connected error...');\n\n\t\tfor($i = 1; $i <= 100; $i++){\n    \t\t$key = 'key_' . $i;\n    \t\t$value = mt_rand(0, 10000);\n    \t\tif( ! $mem->set($key, $value))\n        \t\tvar_dump(\"Memcache set error: $key --> $value\");\n\t\t}\n\n\t\tfor($i = 1; $i <= 100; $i++){\n   \t\t\t$key = 'key_' . $i;\n    \t\t$value = $mem->get($key);\n    \t\tif($value === false){\n        \t\tvar_dump(\"Memcache get error: $key not found\");\n    \t\t}\n\t\t}\n\t?>\n然后对test-yac.php和test-mem.php文件分别进行ab压力测试：\n\n\tab -n 10000 -c 100 http://localhost/demo/test-yac.php\n\n![pic](../../images/201504/2015-04-20_194920.jpg)\n\n\tab -n 10000 -c 100 http://localhost/demo/test-mem.php\n\n![pic](../../images/201504/2015-04-20_195130.jpg)\n\n从上面的图中，相信大家可以看出结论了，Yac要比Memcache快很多，而且出错率很低，所以说Yac还是很不错的。\n\n---\n\n###小结\n\nYac固然很高效，但还是要注意一些方面，由于Yac是作为PHP的扩展形式存在的，所以Yac只能在单机的多个进程之间共享缓存的，这一点一定要注意。而在真实的生产环境下，由于服务器有很多，并且有可能是作为分布式集群形式存在，那个时候使用Memcache缓存服务器集群还是更好的选择（或者使用其他分布式缓存数据库，比如Redis等NoSQL非关系型数据库）。\n\n（end）\n\n\n\n","slug":"201504-2015-04-20-yac-study-and-vs-memcache-note","published":1,"date":"2018-04-12T15:20:38.836Z","updated":"2018-04-12T15:20:38.836Z","comments":1,"photos":[],"link":"","_id":"cjfwomb790072ass6bb6fz85q","content":"<p>这几天一直在研究鸟哥<a href=\"http://weibo.com/laruence\" target=\"_blank\" rel=\"noopener\">@laruence</a>的一个产品—<strong>Yac</strong>，它是为PHP实现的一个基于共享内存、并且无锁的User Data Cache。今天比较了下Memcache和Yac的高并发读写性能测试，发现Yac要比Memcache快很多（这里没有比较Yac和Apc的性能情况, 不过据说Yac要比Apc快很多，Apc比Memcache快一倍，待有时间再进行测试吧, 好吧，承认懒了 ^_^)。</p>\n<a id=\"more\"></a>\n<p>首先说下，Yac是无锁的、共享内存的Cache，因此可以减少CPU的消耗，这个本人确实有体会，而Memcache压力测试时CPU直接飙升到 ~100%，汗。</p>\n<p>另外，Yac的安装是很方便的，而且在windows下支持是灰常好滴，想学习的同学可以参考鸟哥<a href=\"http://weibo.com/laruence\" target=\"_blank\" rel=\"noopener\">@laruence</a>的博客：</p>\n<p><a href=\"http://www.laruence.com/2013/03/18/2846.html\" target=\"_blank\" rel=\"noopener\">http://www.laruence.com/2013/03/18/2846.html</a></p>\n<p>github 地址：<a href=\"https://github.com/laruence/yac\" target=\"_blank\" rel=\"noopener\">https://github.com/laruence/yac</a></p>\n<p>下面简单介绍下安装：</p>\n<pre><code>wgethttps://pecl.php.net/get/yac-0.9.2.tgz\ntar -zxvf yac-0.9.2.tgz\ncd yac-0.9.2\nphpize\n./config --prefix=/usr/local/yac --with-php-config=/usr/local/php/bin/php-config\nsudo make &amp;&amp; make install\n</code></pre><p>接下来配置php.ini文件：</p>\n<pre><code>vim /etc/php.ini\n//添加一下内容\nextension=php-yac.so\n[yac]\nyac.enable = 1                    //是否开启yac，1表示开启， 0表示关闭\nyac.keys_memory_size = 4M        //4M可以得到32768个key， 32M可以得到262144个key\nyac.values_memory_size = 64M    //申请的最大value内存\nyac.compress_threshold = -1        //是否压缩数据\nyac.enable_cli = 0                //关闭在cli下使用yac\n</code></pre><p>最后重启Web Server服务器即可， windows下面安装yac扩展网上教程一大推，自己去搜索吧，这里不再赘余。。。</p>\n<p>###Yac的应用场景</p>\n<ol>\n<li>让PHP进程之间共享一些简单的数据</li>\n<li>高效地缓存一些页面结果</li>\n</ol>\n<p>###Yac的限制</p>\n<ol>\n<li>缓存的键长度不能超过48字节，太长的话可以md5结果后再使用</li>\n<li>Value的最大长度不能超过64M，压缩后的长度不能超过1M</li>\n<li>当内存不够的时候, Yac会有比较明显的踢出率 (所以如果要使用Yac, 那么尽量多给点内存…)</li>\n</ol>\n<p>###Yac vs Memcache</p>\n<p>下面对Yac和Memcache进行性能比较：</p>\n<p>yac测试代码：</p>\n<pre><code>//test-yac.php\n&lt;?php\n    $yac = new Yac();\n    for($i = 1; $i &lt;= 100; $i++){\n        $key = &apos;key_&apos; . $i;\n        $value = mt_rand(0, 10000);\n        if( ! $yac-&gt;set($key, $value))\n            var_dump(&quot;Yac set error: $key --&gt; $value&quot;);\n    }\n\n    for($i = 1; $i &lt;= 100; $i++){\n        $key = &apos;key_&apos; . $i;\n        $value = $yac-&gt;get($key);\n        if($value === false){\n            var_dump(&quot;Yac get error: $key not found&quot;);\n        }\n    }\n?&gt;\n</code></pre><p>memcache测试代码：</p>\n<pre><code>//test-mem.php\n&lt;?php\n    $mem = new Memcache();\n    $mem-&gt;connect(&apos;localhost&apos;, 11211) or die(&apos;memcache connected error...&apos;);\n\n    for($i = 1; $i &lt;= 100; $i++){\n        $key = &apos;key_&apos; . $i;\n        $value = mt_rand(0, 10000);\n        if( ! $mem-&gt;set($key, $value))\n            var_dump(&quot;Memcache set error: $key --&gt; $value&quot;);\n    }\n\n    for($i = 1; $i &lt;= 100; $i++){\n           $key = &apos;key_&apos; . $i;\n        $value = $mem-&gt;get($key);\n        if($value === false){\n            var_dump(&quot;Memcache get error: $key not found&quot;);\n        }\n    }\n?&gt;\n</code></pre><p>然后对test-yac.php和test-mem.php文件分别进行ab压力测试：</p>\n<pre><code>ab -n 10000 -c 100 http://localhost/demo/test-yac.php\n</code></pre><p><img src=\"../../images/201504/2015-04-20_194920.jpg\" alt=\"pic\"></p>\n<pre><code>ab -n 10000 -c 100 http://localhost/demo/test-mem.php\n</code></pre><p><img src=\"../../images/201504/2015-04-20_195130.jpg\" alt=\"pic\"></p>\n<p>从上面的图中，相信大家可以看出结论了，Yac要比Memcache快很多，而且出错率很低，所以说Yac还是很不错的。</p>\n<hr>\n<p>###小结</p>\n<p>Yac固然很高效，但还是要注意一些方面，由于Yac是作为PHP的扩展形式存在的，所以Yac只能在单机的多个进程之间共享缓存的，这一点一定要注意。而在真实的生产环境下，由于服务器有很多，并且有可能是作为分布式集群形式存在，那个时候使用Memcache缓存服务器集群还是更好的选择（或者使用其他分布式缓存数据库，比如Redis等NoSQL非关系型数据库）。</p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>这几天一直在研究鸟哥<a href=\"http://weibo.com/laruence\" target=\"_blank\" rel=\"noopener\">@laruence</a>的一个产品—<strong>Yac</strong>，它是为PHP实现的一个基于共享内存、并且无锁的User Data Cache。今天比较了下Memcache和Yac的高并发读写性能测试，发现Yac要比Memcache快很多（这里没有比较Yac和Apc的性能情况, 不过据说Yac要比Apc快很多，Apc比Memcache快一倍，待有时间再进行测试吧, 好吧，承认懒了 ^_^)。</p>","more":"<p>首先说下，Yac是无锁的、共享内存的Cache，因此可以减少CPU的消耗，这个本人确实有体会，而Memcache压力测试时CPU直接飙升到 ~100%，汗。</p>\n<p>另外，Yac的安装是很方便的，而且在windows下支持是灰常好滴，想学习的同学可以参考鸟哥<a href=\"http://weibo.com/laruence\" target=\"_blank\" rel=\"noopener\">@laruence</a>的博客：</p>\n<p><a href=\"http://www.laruence.com/2013/03/18/2846.html\" target=\"_blank\" rel=\"noopener\">http://www.laruence.com/2013/03/18/2846.html</a></p>\n<p>github 地址：<a href=\"https://github.com/laruence/yac\" target=\"_blank\" rel=\"noopener\">https://github.com/laruence/yac</a></p>\n<p>下面简单介绍下安装：</p>\n<pre><code>wgethttps://pecl.php.net/get/yac-0.9.2.tgz\ntar -zxvf yac-0.9.2.tgz\ncd yac-0.9.2\nphpize\n./config --prefix=/usr/local/yac --with-php-config=/usr/local/php/bin/php-config\nsudo make &amp;&amp; make install\n</code></pre><p>接下来配置php.ini文件：</p>\n<pre><code>vim /etc/php.ini\n//添加一下内容\nextension=php-yac.so\n[yac]\nyac.enable = 1                    //是否开启yac，1表示开启， 0表示关闭\nyac.keys_memory_size = 4M        //4M可以得到32768个key， 32M可以得到262144个key\nyac.values_memory_size = 64M    //申请的最大value内存\nyac.compress_threshold = -1        //是否压缩数据\nyac.enable_cli = 0                //关闭在cli下使用yac\n</code></pre><p>最后重启Web Server服务器即可， windows下面安装yac扩展网上教程一大推，自己去搜索吧，这里不再赘余。。。</p>\n<p>###Yac的应用场景</p>\n<ol>\n<li>让PHP进程之间共享一些简单的数据</li>\n<li>高效地缓存一些页面结果</li>\n</ol>\n<p>###Yac的限制</p>\n<ol>\n<li>缓存的键长度不能超过48字节，太长的话可以md5结果后再使用</li>\n<li>Value的最大长度不能超过64M，压缩后的长度不能超过1M</li>\n<li>当内存不够的时候, Yac会有比较明显的踢出率 (所以如果要使用Yac, 那么尽量多给点内存…)</li>\n</ol>\n<p>###Yac vs Memcache</p>\n<p>下面对Yac和Memcache进行性能比较：</p>\n<p>yac测试代码：</p>\n<pre><code>//test-yac.php\n&lt;?php\n    $yac = new Yac();\n    for($i = 1; $i &lt;= 100; $i++){\n        $key = &apos;key_&apos; . $i;\n        $value = mt_rand(0, 10000);\n        if( ! $yac-&gt;set($key, $value))\n            var_dump(&quot;Yac set error: $key --&gt; $value&quot;);\n    }\n\n    for($i = 1; $i &lt;= 100; $i++){\n        $key = &apos;key_&apos; . $i;\n        $value = $yac-&gt;get($key);\n        if($value === false){\n            var_dump(&quot;Yac get error: $key not found&quot;);\n        }\n    }\n?&gt;\n</code></pre><p>memcache测试代码：</p>\n<pre><code>//test-mem.php\n&lt;?php\n    $mem = new Memcache();\n    $mem-&gt;connect(&apos;localhost&apos;, 11211) or die(&apos;memcache connected error...&apos;);\n\n    for($i = 1; $i &lt;= 100; $i++){\n        $key = &apos;key_&apos; . $i;\n        $value = mt_rand(0, 10000);\n        if( ! $mem-&gt;set($key, $value))\n            var_dump(&quot;Memcache set error: $key --&gt; $value&quot;);\n    }\n\n    for($i = 1; $i &lt;= 100; $i++){\n           $key = &apos;key_&apos; . $i;\n        $value = $mem-&gt;get($key);\n        if($value === false){\n            var_dump(&quot;Memcache get error: $key not found&quot;);\n        }\n    }\n?&gt;\n</code></pre><p>然后对test-yac.php和test-mem.php文件分别进行ab压力测试：</p>\n<pre><code>ab -n 10000 -c 100 http://localhost/demo/test-yac.php\n</code></pre><p><img src=\"../../images/201504/2015-04-20_194920.jpg\" alt=\"pic\"></p>\n<pre><code>ab -n 10000 -c 100 http://localhost/demo/test-mem.php\n</code></pre><p><img src=\"../../images/201504/2015-04-20_195130.jpg\" alt=\"pic\"></p>\n<p>从上面的图中，相信大家可以看出结论了，Yac要比Memcache快很多，而且出错率很低，所以说Yac还是很不错的。</p>\n<hr>\n<p>###小结</p>\n<p>Yac固然很高效，但还是要注意一些方面，由于Yac是作为PHP的扩展形式存在的，所以Yac只能在单机的多个进程之间共享缓存的，这一点一定要注意。而在真实的生产环境下，由于服务器有很多，并且有可能是作为分布式集群形式存在，那个时候使用Memcache缓存服务器集群还是更好的选择（或者使用其他分布式缓存数据库，比如Redis等NoSQL非关系型数据库）。</p>\n<p>（end）</p>"},{"layout":"post","title":"PHP性能优化工具–-XHProf安装与使用","_content":"XHProf是Facebook开源出来的一个PHP性能测试工具，他是一个轻量级的分析工具，跟xdebug差不多，但比 xdebug 分析的信息更加详细， 包括函数的调用次数，花费的时间（自身花费时间和包含内部函数花费的时间），所占内存/CPU，所占内存的峰值及所占百分比等，而xdebug对性能影响较大，即便是开启了`profiler_enable_trigger`参数，cpu也会立马飙到峰值。\n\n<!--more-->\n\n关于如何下载、编译、安装、配置、使用、测试等的使用方法，这里贴出几篇比较好的博客供自己日后查看和备用，希望也可以方便到你们 :)\n\n[http://www.chenglin.name/php/optimization/439.html](http://www.chenglin.name/php/optimization/439.html)\n\n[http://www.cnblogs.com/bluefrog/archive/2012/03/01/2374922.html](http://www.cnblogs.com/bluefrog/archive/2012/03/01/2374922.html)\n\n[http://www.cnblogs.com/casatwy/archive/2013/01/17/2865241.html](http://www.cnblogs.com/casatwy/archive/2013/01/17/2865241.html)\n\n[http://www.onexin.net/php-practical-performance-analysis-tools-xhprof-facebook/](http://www.onexin.net/php-practical-performance-analysis-tools-xhprof-facebook/)\n\n(end)\n\n","source":"_posts/201504/2015-04-18-xhprof_php_analyse_tool.md","raw":"---\nlayout : post\ntitle : PHP性能优化工具–-XHProf安装与使用\ncategory : php\ntags : php\n---\nXHProf是Facebook开源出来的一个PHP性能测试工具，他是一个轻量级的分析工具，跟xdebug差不多，但比 xdebug 分析的信息更加详细， 包括函数的调用次数，花费的时间（自身花费时间和包含内部函数花费的时间），所占内存/CPU，所占内存的峰值及所占百分比等，而xdebug对性能影响较大，即便是开启了`profiler_enable_trigger`参数，cpu也会立马飙到峰值。\n\n<!--more-->\n\n关于如何下载、编译、安装、配置、使用、测试等的使用方法，这里贴出几篇比较好的博客供自己日后查看和备用，希望也可以方便到你们 :)\n\n[http://www.chenglin.name/php/optimization/439.html](http://www.chenglin.name/php/optimization/439.html)\n\n[http://www.cnblogs.com/bluefrog/archive/2012/03/01/2374922.html](http://www.cnblogs.com/bluefrog/archive/2012/03/01/2374922.html)\n\n[http://www.cnblogs.com/casatwy/archive/2013/01/17/2865241.html](http://www.cnblogs.com/casatwy/archive/2013/01/17/2865241.html)\n\n[http://www.onexin.net/php-practical-performance-analysis-tools-xhprof-facebook/](http://www.onexin.net/php-practical-performance-analysis-tools-xhprof-facebook/)\n\n(end)\n\n","slug":"201504-2015-04-18-xhprof-php-analyse-tool","published":1,"date":"2018-04-12T15:20:38.835Z","updated":"2018-04-12T15:20:38.836Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7b0075ass6kp2kyaxf","content":"<p>XHProf是Facebook开源出来的一个PHP性能测试工具，他是一个轻量级的分析工具，跟xdebug差不多，但比 xdebug 分析的信息更加详细， 包括函数的调用次数，花费的时间（自身花费时间和包含内部函数花费的时间），所占内存/CPU，所占内存的峰值及所占百分比等，而xdebug对性能影响较大，即便是开启了<code>profiler_enable_trigger</code>参数，cpu也会立马飙到峰值。</p>\n<a id=\"more\"></a>\n<p>关于如何下载、编译、安装、配置、使用、测试等的使用方法，这里贴出几篇比较好的博客供自己日后查看和备用，希望也可以方便到你们 :)</p>\n<p><a href=\"http://www.chenglin.name/php/optimization/439.html\" target=\"_blank\" rel=\"noopener\">http://www.chenglin.name/php/optimization/439.html</a></p>\n<p><a href=\"http://www.cnblogs.com/bluefrog/archive/2012/03/01/2374922.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/bluefrog/archive/2012/03/01/2374922.html</a></p>\n<p><a href=\"http://www.cnblogs.com/casatwy/archive/2013/01/17/2865241.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/casatwy/archive/2013/01/17/2865241.html</a></p>\n<p><a href=\"http://www.onexin.net/php-practical-performance-analysis-tools-xhprof-facebook/\" target=\"_blank\" rel=\"noopener\">http://www.onexin.net/php-practical-performance-analysis-tools-xhprof-facebook/</a></p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>XHProf是Facebook开源出来的一个PHP性能测试工具，他是一个轻量级的分析工具，跟xdebug差不多，但比 xdebug 分析的信息更加详细， 包括函数的调用次数，花费的时间（自身花费时间和包含内部函数花费的时间），所占内存/CPU，所占内存的峰值及所占百分比等，而xdebug对性能影响较大，即便是开启了<code>profiler_enable_trigger</code>参数，cpu也会立马飙到峰值。</p>","more":"<p>关于如何下载、编译、安装、配置、使用、测试等的使用方法，这里贴出几篇比较好的博客供自己日后查看和备用，希望也可以方便到你们 :)</p>\n<p><a href=\"http://www.chenglin.name/php/optimization/439.html\" target=\"_blank\" rel=\"noopener\">http://www.chenglin.name/php/optimization/439.html</a></p>\n<p><a href=\"http://www.cnblogs.com/bluefrog/archive/2012/03/01/2374922.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/bluefrog/archive/2012/03/01/2374922.html</a></p>\n<p><a href=\"http://www.cnblogs.com/casatwy/archive/2013/01/17/2865241.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/casatwy/archive/2013/01/17/2865241.html</a></p>\n<p><a href=\"http://www.onexin.net/php-practical-performance-analysis-tools-xhprof-facebook/\" target=\"_blank\" rel=\"noopener\">http://www.onexin.net/php-practical-performance-analysis-tools-xhprof-facebook/</a></p>\n<p>(end)</p>"},{"layout":"post","title":"禁用COOKIE后如何访问SESSION问题","_content":"最近看到一个有关在PHP中使用COOKIE会话管理的面试题，不单单是因为这道题很有意思，还有就是自己以前确实没有想到过这个方面（_知识欠缺_:P），所以这里做个记录总结下，该题大概是这样描述的:\n\t\n\t如何不使用cookie向客户端发送一个cookie?\n\n刚看到这道题时确实懵了，愣是没看懂，后面在网上搜索了下，猜测出题人的意图估计是想解决这样的一个场景：\n\n\t当客户端端禁用COOKIE时，如何在本地保存COOKIE以及在发送HTTP请求时带上COOKIE信息。\n\n<!--more-->\n\n这样看来，好像有点眉目了，下面结合SESSION和COOKIE详细解释下如何解决这个问题。\n\n我们知道，当在服务器端启用session时候，数据默认是以文件的形式保存服务器上的，其中session\\_name(默认是PHPSESSID)和session\\_id是保存在COOKIE中的，并发送到Client端。\n此时，用户访问其他页面发送HTTP请求时候依然将cookie中保存的session\\_name和session\\_id带回服务器端，而服务器这时候同样启用了session，就会将session_id对应的文件中保存的数据反序列化并保存到`$_SESSION`数组中。整个流程大概是这样子的。\n\n有一天，客户端无意将COOKIE禁用了，这时候再去服务器端访问上面流程的程序会出现这样的情况。服务器同样会保存session数据到文件中（默认），但是设置的cookie头信息却无法在客户端保存，后面再去访问其他页面时候客户端也就没有带上cookie中的数据去发送请求，然后服务器也就无法获取cookie信息，造成的后果就是上次创建的session文件成为了垃圾数据，而每次请求都要重新创建session文件，然后一直循环~~ 无法跟踪用户登录状态，造成不好的用户体验。\n\n那么，该如何解决这个问题呢？\n\n其实在PHP官方手册中有提到过这个问题，只怪自己没有自己研究手册。我们只需要在`php.ini`中配置`session.use_trans_sid=1`或者在编译PHP时打开`–enable-trans-sid`选项。这样，每当客户端禁用了COOKIE，在访问其他页面时会在URL上自动加上`SESSIONID=这里是session_id的字符串`传递到服务器端，而服务器端会自动解析URL中传递过来的SESSIONID信息，从而把该用户信息读取到`$_SESSION`数组中使用，一切看起来都是这么的正常，但是这其中有很多细节如果不注意的话还是会掉坑里的。\n\n首先，要注意的是`php.ini`中两个选项默认是这样的设置：\n\n\tsession.use_cookies=1\t（开启使用cookie保存session会话信息）\n\tsession.use_only_cookies=1 (注意：只使用cookie 来保存session信息)\n\n所以。如果想要在浏览器开启cookie时候使用cookie保存会话信息，当浏览器禁用cookie时候使用url传递会话信息的话，就应该如下设置才会达到你想要的效果:\n\n\t在php.ini文件中修改\n\tsession.use_trans_sid=1  //启用url传递会话信息\n\tsession.use_only_cookies=0  //关闭只是用cookie保存会话信息\n\tsession.use_cookies=1   //默认使用cookie保存会话信息\n\n或者在php程序中设置:\n\n\tini_set('session.use_trans_sid', 1);\n\tint_set('session.use_only_cookies', 0);\n\tini_set('session.use_cookies', 1);\n\n如果不管浏览器是否开启cookie，都使用url的方式传递会话信息，可以进行如下设置（这个例子主要想说明一下设置`session.use_only_cookies`和`session.use_cookies`的区别）\n\n\t在php.ini文件中\n\tsession.use_trans_sid=1\n\tsession.use_only_cookies=0\n\tsession.use_cookies=0\n\n或者在php程序中设置：\n\n\tini_set('session.use_trans_sid', 1);\n\tini_set('session.use_only_cookies', 0);\n\tini_set('session.use_cookies', 0);\n\n\n当然，除了上述方法方便解决该问题，还有如下解决方案可以参考：\n\n>1. 手动URL传值\n>\n>2. 通过隐藏表单传递\n>\n>3. 在数据库中保存session_id, 然后手动调用\n\n\n###在使用`session.use_trans_sid`时，php官方给出了安全风险警告，我们需要注意：\n\n**_Note: 基于 URL 的会话管理比基于 cookie 的会话管理有更多安全风险。例如用户有可能通过 email 将一个包含有效的会话 ID 的 URL 发给他的朋友，或者用户总是有可能在收藏夹中存有一个包含会话 ID 的 URL 来以同样的会话 ID 去访问站点。_**\n\n\n（end）\n\n \n\n","source":"_posts/201506/2015-06-04-how_to_use_session_without_cookie.md","raw":"---\nlayout : post\ntitle : 禁用COOKIE后如何访问SESSION问题\ncategory : php\ntags : php\n---\n最近看到一个有关在PHP中使用COOKIE会话管理的面试题，不单单是因为这道题很有意思，还有就是自己以前确实没有想到过这个方面（_知识欠缺_:P），所以这里做个记录总结下，该题大概是这样描述的:\n\t\n\t如何不使用cookie向客户端发送一个cookie?\n\n刚看到这道题时确实懵了，愣是没看懂，后面在网上搜索了下，猜测出题人的意图估计是想解决这样的一个场景：\n\n\t当客户端端禁用COOKIE时，如何在本地保存COOKIE以及在发送HTTP请求时带上COOKIE信息。\n\n<!--more-->\n\n这样看来，好像有点眉目了，下面结合SESSION和COOKIE详细解释下如何解决这个问题。\n\n我们知道，当在服务器端启用session时候，数据默认是以文件的形式保存服务器上的，其中session\\_name(默认是PHPSESSID)和session\\_id是保存在COOKIE中的，并发送到Client端。\n此时，用户访问其他页面发送HTTP请求时候依然将cookie中保存的session\\_name和session\\_id带回服务器端，而服务器这时候同样启用了session，就会将session_id对应的文件中保存的数据反序列化并保存到`$_SESSION`数组中。整个流程大概是这样子的。\n\n有一天，客户端无意将COOKIE禁用了，这时候再去服务器端访问上面流程的程序会出现这样的情况。服务器同样会保存session数据到文件中（默认），但是设置的cookie头信息却无法在客户端保存，后面再去访问其他页面时候客户端也就没有带上cookie中的数据去发送请求，然后服务器也就无法获取cookie信息，造成的后果就是上次创建的session文件成为了垃圾数据，而每次请求都要重新创建session文件，然后一直循环~~ 无法跟踪用户登录状态，造成不好的用户体验。\n\n那么，该如何解决这个问题呢？\n\n其实在PHP官方手册中有提到过这个问题，只怪自己没有自己研究手册。我们只需要在`php.ini`中配置`session.use_trans_sid=1`或者在编译PHP时打开`–enable-trans-sid`选项。这样，每当客户端禁用了COOKIE，在访问其他页面时会在URL上自动加上`SESSIONID=这里是session_id的字符串`传递到服务器端，而服务器端会自动解析URL中传递过来的SESSIONID信息，从而把该用户信息读取到`$_SESSION`数组中使用，一切看起来都是这么的正常，但是这其中有很多细节如果不注意的话还是会掉坑里的。\n\n首先，要注意的是`php.ini`中两个选项默认是这样的设置：\n\n\tsession.use_cookies=1\t（开启使用cookie保存session会话信息）\n\tsession.use_only_cookies=1 (注意：只使用cookie 来保存session信息)\n\n所以。如果想要在浏览器开启cookie时候使用cookie保存会话信息，当浏览器禁用cookie时候使用url传递会话信息的话，就应该如下设置才会达到你想要的效果:\n\n\t在php.ini文件中修改\n\tsession.use_trans_sid=1  //启用url传递会话信息\n\tsession.use_only_cookies=0  //关闭只是用cookie保存会话信息\n\tsession.use_cookies=1   //默认使用cookie保存会话信息\n\n或者在php程序中设置:\n\n\tini_set('session.use_trans_sid', 1);\n\tint_set('session.use_only_cookies', 0);\n\tini_set('session.use_cookies', 1);\n\n如果不管浏览器是否开启cookie，都使用url的方式传递会话信息，可以进行如下设置（这个例子主要想说明一下设置`session.use_only_cookies`和`session.use_cookies`的区别）\n\n\t在php.ini文件中\n\tsession.use_trans_sid=1\n\tsession.use_only_cookies=0\n\tsession.use_cookies=0\n\n或者在php程序中设置：\n\n\tini_set('session.use_trans_sid', 1);\n\tini_set('session.use_only_cookies', 0);\n\tini_set('session.use_cookies', 0);\n\n\n当然，除了上述方法方便解决该问题，还有如下解决方案可以参考：\n\n>1. 手动URL传值\n>\n>2. 通过隐藏表单传递\n>\n>3. 在数据库中保存session_id, 然后手动调用\n\n\n###在使用`session.use_trans_sid`时，php官方给出了安全风险警告，我们需要注意：\n\n**_Note: 基于 URL 的会话管理比基于 cookie 的会话管理有更多安全风险。例如用户有可能通过 email 将一个包含有效的会话 ID 的 URL 发给他的朋友，或者用户总是有可能在收藏夹中存有一个包含会话 ID 的 URL 来以同样的会话 ID 去访问站点。_**\n\n\n（end）\n\n \n\n","slug":"201506-2015-06-04-how-to-use-session-without-cookie","published":1,"date":"2018-04-12T15:20:38.837Z","updated":"2018-04-12T15:20:38.837Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7c0079ass6rq5ltu36","content":"<p>最近看到一个有关在PHP中使用COOKIE会话管理的面试题，不单单是因为这道题很有意思，还有就是自己以前确实没有想到过这个方面（<em>知识欠缺</em>:P），所以这里做个记录总结下，该题大概是这样描述的:</p>\n<pre><code>如何不使用cookie向客户端发送一个cookie?\n</code></pre><p>刚看到这道题时确实懵了，愣是没看懂，后面在网上搜索了下，猜测出题人的意图估计是想解决这样的一个场景：</p>\n<pre><code>当客户端端禁用COOKIE时，如何在本地保存COOKIE以及在发送HTTP请求时带上COOKIE信息。\n</code></pre><a id=\"more\"></a>\n<p>这样看来，好像有点眉目了，下面结合SESSION和COOKIE详细解释下如何解决这个问题。</p>\n<p>我们知道，当在服务器端启用session时候，数据默认是以文件的形式保存服务器上的，其中session_name(默认是PHPSESSID)和session_id是保存在COOKIE中的，并发送到Client端。<br>此时，用户访问其他页面发送HTTP请求时候依然将cookie中保存的session_name和session_id带回服务器端，而服务器这时候同样启用了session，就会将session_id对应的文件中保存的数据反序列化并保存到<code>$_SESSION</code>数组中。整个流程大概是这样子的。</p>\n<p>有一天，客户端无意将COOKIE禁用了，这时候再去服务器端访问上面流程的程序会出现这样的情况。服务器同样会保存session数据到文件中（默认），但是设置的cookie头信息却无法在客户端保存，后面再去访问其他页面时候客户端也就没有带上cookie中的数据去发送请求，然后服务器也就无法获取cookie信息，造成的后果就是上次创建的session文件成为了垃圾数据，而每次请求都要重新创建session文件，然后一直循环~~ 无法跟踪用户登录状态，造成不好的用户体验。</p>\n<p>那么，该如何解决这个问题呢？</p>\n<p>其实在PHP官方手册中有提到过这个问题，只怪自己没有自己研究手册。我们只需要在<code>php.ini</code>中配置<code>session.use_trans_sid=1</code>或者在编译PHP时打开<code>–enable-trans-sid</code>选项。这样，每当客户端禁用了COOKIE，在访问其他页面时会在URL上自动加上<code>SESSIONID=这里是session_id的字符串</code>传递到服务器端，而服务器端会自动解析URL中传递过来的SESSIONID信息，从而把该用户信息读取到<code>$_SESSION</code>数组中使用，一切看起来都是这么的正常，但是这其中有很多细节如果不注意的话还是会掉坑里的。</p>\n<p>首先，要注意的是<code>php.ini</code>中两个选项默认是这样的设置：</p>\n<pre><code>session.use_cookies=1    （开启使用cookie保存session会话信息）\nsession.use_only_cookies=1 (注意：只使用cookie 来保存session信息)\n</code></pre><p>所以。如果想要在浏览器开启cookie时候使用cookie保存会话信息，当浏览器禁用cookie时候使用url传递会话信息的话，就应该如下设置才会达到你想要的效果:</p>\n<pre><code>在php.ini文件中修改\nsession.use_trans_sid=1  //启用url传递会话信息\nsession.use_only_cookies=0  //关闭只是用cookie保存会话信息\nsession.use_cookies=1   //默认使用cookie保存会话信息\n</code></pre><p>或者在php程序中设置:</p>\n<pre><code>ini_set(&apos;session.use_trans_sid&apos;, 1);\nint_set(&apos;session.use_only_cookies&apos;, 0);\nini_set(&apos;session.use_cookies&apos;, 1);\n</code></pre><p>如果不管浏览器是否开启cookie，都使用url的方式传递会话信息，可以进行如下设置（这个例子主要想说明一下设置<code>session.use_only_cookies</code>和<code>session.use_cookies</code>的区别）</p>\n<pre><code>在php.ini文件中\nsession.use_trans_sid=1\nsession.use_only_cookies=0\nsession.use_cookies=0\n</code></pre><p>或者在php程序中设置：</p>\n<pre><code>ini_set(&apos;session.use_trans_sid&apos;, 1);\nini_set(&apos;session.use_only_cookies&apos;, 0);\nini_set(&apos;session.use_cookies&apos;, 0);\n</code></pre><p>当然，除了上述方法方便解决该问题，还有如下解决方案可以参考：</p>\n<blockquote>\n<ol>\n<li><p>手动URL传值</p>\n</li>\n<li><p>通过隐藏表单传递</p>\n</li>\n<li><p>在数据库中保存session_id, 然后手动调用</p>\n</li>\n</ol>\n</blockquote>\n<p>###在使用<code>session.use_trans_sid</code>时，php官方给出了安全风险警告，我们需要注意：</p>\n<p><strong><em>Note: 基于 URL 的会话管理比基于 cookie 的会话管理有更多安全风险。例如用户有可能通过 email 将一个包含有效的会话 ID 的 URL 发给他的朋友，或者用户总是有可能在收藏夹中存有一个包含会话 ID 的 URL 来以同样的会话 ID 去访问站点。</em></strong></p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>最近看到一个有关在PHP中使用COOKIE会话管理的面试题，不单单是因为这道题很有意思，还有就是自己以前确实没有想到过这个方面（<em>知识欠缺</em>:P），所以这里做个记录总结下，该题大概是这样描述的:</p>\n<pre><code>如何不使用cookie向客户端发送一个cookie?\n</code></pre><p>刚看到这道题时确实懵了，愣是没看懂，后面在网上搜索了下，猜测出题人的意图估计是想解决这样的一个场景：</p>\n<pre><code>当客户端端禁用COOKIE时，如何在本地保存COOKIE以及在发送HTTP请求时带上COOKIE信息。\n</code></pre>","more":"<p>这样看来，好像有点眉目了，下面结合SESSION和COOKIE详细解释下如何解决这个问题。</p>\n<p>我们知道，当在服务器端启用session时候，数据默认是以文件的形式保存服务器上的，其中session_name(默认是PHPSESSID)和session_id是保存在COOKIE中的，并发送到Client端。<br>此时，用户访问其他页面发送HTTP请求时候依然将cookie中保存的session_name和session_id带回服务器端，而服务器这时候同样启用了session，就会将session_id对应的文件中保存的数据反序列化并保存到<code>$_SESSION</code>数组中。整个流程大概是这样子的。</p>\n<p>有一天，客户端无意将COOKIE禁用了，这时候再去服务器端访问上面流程的程序会出现这样的情况。服务器同样会保存session数据到文件中（默认），但是设置的cookie头信息却无法在客户端保存，后面再去访问其他页面时候客户端也就没有带上cookie中的数据去发送请求，然后服务器也就无法获取cookie信息，造成的后果就是上次创建的session文件成为了垃圾数据，而每次请求都要重新创建session文件，然后一直循环~~ 无法跟踪用户登录状态，造成不好的用户体验。</p>\n<p>那么，该如何解决这个问题呢？</p>\n<p>其实在PHP官方手册中有提到过这个问题，只怪自己没有自己研究手册。我们只需要在<code>php.ini</code>中配置<code>session.use_trans_sid=1</code>或者在编译PHP时打开<code>–enable-trans-sid</code>选项。这样，每当客户端禁用了COOKIE，在访问其他页面时会在URL上自动加上<code>SESSIONID=这里是session_id的字符串</code>传递到服务器端，而服务器端会自动解析URL中传递过来的SESSIONID信息，从而把该用户信息读取到<code>$_SESSION</code>数组中使用，一切看起来都是这么的正常，但是这其中有很多细节如果不注意的话还是会掉坑里的。</p>\n<p>首先，要注意的是<code>php.ini</code>中两个选项默认是这样的设置：</p>\n<pre><code>session.use_cookies=1    （开启使用cookie保存session会话信息）\nsession.use_only_cookies=1 (注意：只使用cookie 来保存session信息)\n</code></pre><p>所以。如果想要在浏览器开启cookie时候使用cookie保存会话信息，当浏览器禁用cookie时候使用url传递会话信息的话，就应该如下设置才会达到你想要的效果:</p>\n<pre><code>在php.ini文件中修改\nsession.use_trans_sid=1  //启用url传递会话信息\nsession.use_only_cookies=0  //关闭只是用cookie保存会话信息\nsession.use_cookies=1   //默认使用cookie保存会话信息\n</code></pre><p>或者在php程序中设置:</p>\n<pre><code>ini_set(&apos;session.use_trans_sid&apos;, 1);\nint_set(&apos;session.use_only_cookies&apos;, 0);\nini_set(&apos;session.use_cookies&apos;, 1);\n</code></pre><p>如果不管浏览器是否开启cookie，都使用url的方式传递会话信息，可以进行如下设置（这个例子主要想说明一下设置<code>session.use_only_cookies</code>和<code>session.use_cookies</code>的区别）</p>\n<pre><code>在php.ini文件中\nsession.use_trans_sid=1\nsession.use_only_cookies=0\nsession.use_cookies=0\n</code></pre><p>或者在php程序中设置：</p>\n<pre><code>ini_set(&apos;session.use_trans_sid&apos;, 1);\nini_set(&apos;session.use_only_cookies&apos;, 0);\nini_set(&apos;session.use_cookies&apos;, 0);\n</code></pre><p>当然，除了上述方法方便解决该问题，还有如下解决方案可以参考：</p>\n<blockquote>\n<ol>\n<li><p>手动URL传值</p>\n</li>\n<li><p>通过隐藏表单传递</p>\n</li>\n<li><p>在数据库中保存session_id, 然后手动调用</p>\n</li>\n</ol>\n</blockquote>\n<p>###在使用<code>session.use_trans_sid</code>时，php官方给出了安全风险警告，我们需要注意：</p>\n<p><strong><em>Note: 基于 URL 的会话管理比基于 cookie 的会话管理有更多安全风险。例如用户有可能通过 email 将一个包含有效的会话 ID 的 URL 发给他的朋友，或者用户总是有可能在收藏夹中存有一个包含会话 ID 的 URL 来以同样的会话 ID 去访问站点。</em></strong></p>\n<p>（end）</p>"},{"layout":"post","title":"关于在PDO中使用bindParam绑定参数的陷阱","_content":"今天，在看鸟哥[@laruence](http://weibo.com/laruence)的个人博客时看到了有关在PHP中使用PDO的bindParam绑定方法结合循环语句来使用时会产生一个`BUG`或者小陷阱，这里做个笔记备忘 :)\n\n来自PHP官方的BUG报告在这里：[#63281](https://bugs.php.net/bug.php?id=63281)\n\n<!--more-->\n\n究其原因, 也就是bindParam、bindColum和bindValue的不同之处, bindColum和bindParam要求第二个参数是一个**引用变量(reference)**，这才是关键点。\n\n具体介绍可以戳这里：[Laruence：PDOStatement::bindParam 的一个陷阱](http://www.laruence.com/2012/10/16/2831.html)\n\n","source":"_posts/201505/2015-05-13-pdo_bindParam_bug_note.md","raw":"---\nlayout : post\ntitle : 关于在PDO中使用bindParam绑定参数的陷阱\ncategory : php\ntags : php\n---\n今天，在看鸟哥[@laruence](http://weibo.com/laruence)的个人博客时看到了有关在PHP中使用PDO的bindParam绑定方法结合循环语句来使用时会产生一个`BUG`或者小陷阱，这里做个笔记备忘 :)\n\n来自PHP官方的BUG报告在这里：[#63281](https://bugs.php.net/bug.php?id=63281)\n\n<!--more-->\n\n究其原因, 也就是bindParam、bindColum和bindValue的不同之处, bindColum和bindParam要求第二个参数是一个**引用变量(reference)**，这才是关键点。\n\n具体介绍可以戳这里：[Laruence：PDOStatement::bindParam 的一个陷阱](http://www.laruence.com/2012/10/16/2831.html)\n\n","slug":"201505-2015-05-13-pdo-bindParam-bug-note","published":1,"date":"2018-04-12T15:20:38.836Z","updated":"2018-04-12T15:20:38.836Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7d007bass63gcx9fb0","content":"<p>今天，在看鸟哥<a href=\"http://weibo.com/laruence\" target=\"_blank\" rel=\"noopener\">@laruence</a>的个人博客时看到了有关在PHP中使用PDO的bindParam绑定方法结合循环语句来使用时会产生一个<code>BUG</code>或者小陷阱，这里做个笔记备忘 :)</p>\n<p>来自PHP官方的BUG报告在这里：<a href=\"https://bugs.php.net/bug.php?id=63281\" target=\"_blank\" rel=\"noopener\">#63281</a></p>\n<a id=\"more\"></a>\n<p>究其原因, 也就是bindParam、bindColum和bindValue的不同之处, bindColum和bindParam要求第二个参数是一个<strong>引用变量(reference)</strong>，这才是关键点。</p>\n<p>具体介绍可以戳这里：<a href=\"http://www.laruence.com/2012/10/16/2831.html\" target=\"_blank\" rel=\"noopener\">Laruence：PDOStatement::bindParam 的一个陷阱</a></p>\n","site":{"data":{}},"excerpt":"<p>今天，在看鸟哥<a href=\"http://weibo.com/laruence\" target=\"_blank\" rel=\"noopener\">@laruence</a>的个人博客时看到了有关在PHP中使用PDO的bindParam绑定方法结合循环语句来使用时会产生一个<code>BUG</code>或者小陷阱，这里做个笔记备忘 :)</p>\n<p>来自PHP官方的BUG报告在这里：<a href=\"https://bugs.php.net/bug.php?id=63281\" target=\"_blank\" rel=\"noopener\">#63281</a></p>","more":"<p>究其原因, 也就是bindParam、bindColum和bindValue的不同之处, bindColum和bindParam要求第二个参数是一个<strong>引用变量(reference)</strong>，这才是关键点。</p>\n<p>具体介绍可以戳这里：<a href=\"http://www.laruence.com/2012/10/16/2831.html\" target=\"_blank\" rel=\"noopener\">Laruence：PDOStatement::bindParam 的一个陷阱</a></p>"},{"layout":"post","title":"MySQL中使用binary查询字符串","_content":"今天，在做老师布置的实验作业时候遇到一个关于MySQL字符串比较问题。场景是这样的，就是需要在数据库中查询记录而进行字符串比较时，需要对字符串进行大小写区分比较，这样在默认情况下进行操作可能不会达到你想要的效果。比如下面实例：\n\n\tSELECT *　FROM user where username='maratrix';\n\tSELECT * FROM user where username='MARATRIX';\n\n经测试，发现上面两条SQL语句的执行结果是一样的，这个结果并不是我们想要的，怎么解决？\n\n<!--more-->\n\n###问题探究\n\n在我看来，做技术有一点要清楚的是：**_解决问题一定要抓住问题的本源，从而游刃有余_**。下面，我们看看这个小问题是咋回事的呢？\n\n通过看MySQL手册可以知道，默认情况下，对MySQL数据库中的字段进行查询或者排序都是不区分大小写的。\n\n但是在有些应用中，需要进行区分大小写的操作，咋办？ \n\n**答：使用BINARY操作符**。\n\n> BINARY操作符将后面的字符串抛给一个二进制字符串。这是一种简单的方式来促使逐字节而不是逐字符的进行列比较。这使得比较区分大小写，即使该列不被定义为 BINARY或 BLOB。\n\n>BINARY影响整个比较；它可以在任何操作数前被给定，而产生相同的结果。\n\n###解决方法\n\n1、第一种是在创建表结构时候使用binary属性来定义字段：\n\n\tcreate table if not exists user(\n\t\tid int unsigned primary key auto_increment,\n\t\tname varchar(32) binary,\n\t)engine=myisam;\n\n或者在表结构创建好后使用alter来添加字段binary属性\n\n\talter table user modify name varchar(32) binary ;\n\n\n2、第二种方法是在sql语句中使用bianry来进行区分大小写操作：\n\n\n\tSELECT * FROM user where name=binary 'maratrix';\n\t或者\n\tSELECT * FROM user where binary name='maratrix';\n\n进过测试发现，使用`SELECT * FROM user where name=binary 'maratrix';`效率更高点，原因是将binary放在字符串前会使用索引（假设该字段存在索引），而将binary放在字段前面将不会使用索引，即使索引存在也不会使用。\n\n###注意\n\n\n在一些语境中，假如你将一个编入索引的列派给BINARY, MySQL 将不能有效使用这个索引。 ","source":"_posts/201506/2015-06-07-mysql_str_binary.md","raw":"---\nlayout : post\ntitle : MySQL中使用binary查询字符串\ncategory : mysql\ntags : mysql\n---\n今天，在做老师布置的实验作业时候遇到一个关于MySQL字符串比较问题。场景是这样的，就是需要在数据库中查询记录而进行字符串比较时，需要对字符串进行大小写区分比较，这样在默认情况下进行操作可能不会达到你想要的效果。比如下面实例：\n\n\tSELECT *　FROM user where username='maratrix';\n\tSELECT * FROM user where username='MARATRIX';\n\n经测试，发现上面两条SQL语句的执行结果是一样的，这个结果并不是我们想要的，怎么解决？\n\n<!--more-->\n\n###问题探究\n\n在我看来，做技术有一点要清楚的是：**_解决问题一定要抓住问题的本源，从而游刃有余_**。下面，我们看看这个小问题是咋回事的呢？\n\n通过看MySQL手册可以知道，默认情况下，对MySQL数据库中的字段进行查询或者排序都是不区分大小写的。\n\n但是在有些应用中，需要进行区分大小写的操作，咋办？ \n\n**答：使用BINARY操作符**。\n\n> BINARY操作符将后面的字符串抛给一个二进制字符串。这是一种简单的方式来促使逐字节而不是逐字符的进行列比较。这使得比较区分大小写，即使该列不被定义为 BINARY或 BLOB。\n\n>BINARY影响整个比较；它可以在任何操作数前被给定，而产生相同的结果。\n\n###解决方法\n\n1、第一种是在创建表结构时候使用binary属性来定义字段：\n\n\tcreate table if not exists user(\n\t\tid int unsigned primary key auto_increment,\n\t\tname varchar(32) binary,\n\t)engine=myisam;\n\n或者在表结构创建好后使用alter来添加字段binary属性\n\n\talter table user modify name varchar(32) binary ;\n\n\n2、第二种方法是在sql语句中使用bianry来进行区分大小写操作：\n\n\n\tSELECT * FROM user where name=binary 'maratrix';\n\t或者\n\tSELECT * FROM user where binary name='maratrix';\n\n进过测试发现，使用`SELECT * FROM user where name=binary 'maratrix';`效率更高点，原因是将binary放在字符串前会使用索引（假设该字段存在索引），而将binary放在字段前面将不会使用索引，即使索引存在也不会使用。\n\n###注意\n\n\n在一些语境中，假如你将一个编入索引的列派给BINARY, MySQL 将不能有效使用这个索引。 ","slug":"201506-2015-06-07-mysql-str-binary","published":1,"date":"2018-04-12T15:20:38.837Z","updated":"2018-04-12T15:20:38.837Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7f007eass6dsmy8k85","content":"<p>今天，在做老师布置的实验作业时候遇到一个关于MySQL字符串比较问题。场景是这样的，就是需要在数据库中查询记录而进行字符串比较时，需要对字符串进行大小写区分比较，这样在默认情况下进行操作可能不会达到你想要的效果。比如下面实例：</p>\n<pre><code>SELECT *　FROM user where username=&apos;maratrix&apos;;\nSELECT * FROM user where username=&apos;MARATRIX&apos;;\n</code></pre><p>经测试，发现上面两条SQL语句的执行结果是一样的，这个结果并不是我们想要的，怎么解决？</p>\n<a id=\"more\"></a>\n<p>###问题探究</p>\n<p>在我看来，做技术有一点要清楚的是：<strong><em>解决问题一定要抓住问题的本源，从而游刃有余</em></strong>。下面，我们看看这个小问题是咋回事的呢？</p>\n<p>通过看MySQL手册可以知道，默认情况下，对MySQL数据库中的字段进行查询或者排序都是不区分大小写的。</p>\n<p>但是在有些应用中，需要进行区分大小写的操作，咋办？ </p>\n<p><strong>答：使用BINARY操作符</strong>。</p>\n<blockquote>\n<p>BINARY操作符将后面的字符串抛给一个二进制字符串。这是一种简单的方式来促使逐字节而不是逐字符的进行列比较。这使得比较区分大小写，即使该列不被定义为 BINARY或 BLOB。</p>\n</blockquote>\n<blockquote>\n<p>BINARY影响整个比较；它可以在任何操作数前被给定，而产生相同的结果。</p>\n</blockquote>\n<p>###解决方法</p>\n<p>1、第一种是在创建表结构时候使用binary属性来定义字段：</p>\n<pre><code>create table if not exists user(\n    id int unsigned primary key auto_increment,\n    name varchar(32) binary,\n)engine=myisam;\n</code></pre><p>或者在表结构创建好后使用alter来添加字段binary属性</p>\n<pre><code>alter table user modify name varchar(32) binary ;\n</code></pre><p>2、第二种方法是在sql语句中使用bianry来进行区分大小写操作：</p>\n<pre><code>SELECT * FROM user where name=binary &apos;maratrix&apos;;\n或者\nSELECT * FROM user where binary name=&apos;maratrix&apos;;\n</code></pre><p>进过测试发现，使用<code>SELECT * FROM user where name=binary &#39;maratrix&#39;;</code>效率更高点，原因是将binary放在字符串前会使用索引（假设该字段存在索引），而将binary放在字段前面将不会使用索引，即使索引存在也不会使用。</p>\n<p>###注意</p>\n<p>在一些语境中，假如你将一个编入索引的列派给BINARY, MySQL 将不能有效使用这个索引。 </p>\n","site":{"data":{}},"excerpt":"<p>今天，在做老师布置的实验作业时候遇到一个关于MySQL字符串比较问题。场景是这样的，就是需要在数据库中查询记录而进行字符串比较时，需要对字符串进行大小写区分比较，这样在默认情况下进行操作可能不会达到你想要的效果。比如下面实例：</p>\n<pre><code>SELECT *　FROM user where username=&apos;maratrix&apos;;\nSELECT * FROM user where username=&apos;MARATRIX&apos;;\n</code></pre><p>经测试，发现上面两条SQL语句的执行结果是一样的，这个结果并不是我们想要的，怎么解决？</p>","more":"<p>###问题探究</p>\n<p>在我看来，做技术有一点要清楚的是：<strong><em>解决问题一定要抓住问题的本源，从而游刃有余</em></strong>。下面，我们看看这个小问题是咋回事的呢？</p>\n<p>通过看MySQL手册可以知道，默认情况下，对MySQL数据库中的字段进行查询或者排序都是不区分大小写的。</p>\n<p>但是在有些应用中，需要进行区分大小写的操作，咋办？ </p>\n<p><strong>答：使用BINARY操作符</strong>。</p>\n<blockquote>\n<p>BINARY操作符将后面的字符串抛给一个二进制字符串。这是一种简单的方式来促使逐字节而不是逐字符的进行列比较。这使得比较区分大小写，即使该列不被定义为 BINARY或 BLOB。</p>\n</blockquote>\n<blockquote>\n<p>BINARY影响整个比较；它可以在任何操作数前被给定，而产生相同的结果。</p>\n</blockquote>\n<p>###解决方法</p>\n<p>1、第一种是在创建表结构时候使用binary属性来定义字段：</p>\n<pre><code>create table if not exists user(\n    id int unsigned primary key auto_increment,\n    name varchar(32) binary,\n)engine=myisam;\n</code></pre><p>或者在表结构创建好后使用alter来添加字段binary属性</p>\n<pre><code>alter table user modify name varchar(32) binary ;\n</code></pre><p>2、第二种方法是在sql语句中使用bianry来进行区分大小写操作：</p>\n<pre><code>SELECT * FROM user where name=binary &apos;maratrix&apos;;\n或者\nSELECT * FROM user where binary name=&apos;maratrix&apos;;\n</code></pre><p>进过测试发现，使用<code>SELECT * FROM user where name=binary &#39;maratrix&#39;;</code>效率更高点，原因是将binary放在字符串前会使用索引（假设该字段存在索引），而将binary放在字段前面将不会使用索引，即使索引存在也不会使用。</p>\n<p>###注意</p>\n<p>在一些语境中，假如你将一个编入索引的列派给BINARY, MySQL 将不能有效使用这个索引。 </p>"},{"layout":"post","title":"一道面试题引发的一点点思考","_content":"到了大三下学期，身边的小伙伴都不约而同地开始找实习了，其中面试当然是不可缺少的重头戏啦。\n最近在面百度的时候，面试官的一道关于随机数的题很有意思，不算难，但却在那么一瞬间触动了我，所以打算抽点时间把它记录下来。（关于它怎么触动我了，最后我会有说明 :P）\n\n<!--more-->\n\n###面试题的描述\n\n大意是这样的：\n\n> 写一个方法，把给定数组内的元素打乱返回，尽量高效实现。\n\n首先，我想到的就是PHP自带的一个`shuffle`函数，就是专门干这个事儿的，随机打乱数组，而且是引用传值的。\n\n当我说出可以使用shuffle函数时，面试官打断了我，说不能使用PHP自带的函数，让自己尝试着实现这个功能。当时很郁闷，明明有高度优化好的方法摆在那却不让用，唉...\n\n然后，就发动脑袋想吧，想到既然在数组中不管是取值、打印还是赋值都是拿数组的下标操作的，所以我可以往数组下标这方面想，假如我可以打乱下标那不就解决了打乱数组了吗，于是就有了下面比较笨的代码，现在再回头看当时头脑发晕的解决方案，真是无语：\n\n\t<?php\n\t$arrData = array('aaa', 'bbb', 'ccc', 'ddd', 'eee');\n\t$keys = array_keys($arrData);\n\tshuffle($keys);\n\t$kLen = count($keys);\n\t$arrRes = array();\n\tforeach($keys as $v){\n\t    array_push($arrRes, $arrData[$v]);\n\t}\n\tvar_dump($arrRes);\n\n尽管功能是实现了，但是其中还是使用了`shuffle`方法，这显然是不合格的。那种紧张情况下，我能想到的就这个思路了，汗~~\n\n最后，没辙了，我就大胆问了下面试官能不能给一些提示，那个面试官真的很nice，然后就给出了提示：\n\n> 说我往数组下标方面思考是正确的，既然要求要高效就意味着在同一个数组中完成操作，可以尝试着使用交换来完成。\n\n对于一道面试题来说，面试官能提示这么多就已经很好了，然后我就顺着这个思路想下去，如果每次随机获取一个下标，然后把该下标对应的value与数组最后一个value交换，最后数组长度减一，接着重复执行上述步骤就可以了。\n\n下面还是用图来说明下吧，毕竟一图胜千言嘛~~\n\n假设随机拿到该数组的一个key为1，然后让key为1的元素与最后一个元素（key为4）交换\n\n![pic](../../images/201506/2015-06-12_223756.jpg)\n\n第一次交换后，数组长度减一，然后只需要对（数组长度-1）的元素执行相同操作即可。代码如下：\n\n\t<?php\n\t$arrData = array('aaa', 'bbb', 'ccc', 'ddd', 'eee');\n\t$arrLen = count($arrData)-1;\n\twhile($arrLen >= 0){\n    \t$k = mt_rand(0, $arrLen);\n    \t$tmp = $arrData[$arrLen];\n    \t$arrData[$arrLen] = $arrData[$k];\n    \t$arrData[$k] = $tmp;\n    \t$arrLen--;\n\t}\n\tvar_dump($arrData);\n\n这样很好地就解决了这个问题。\n\n###总结\n\n其实写这篇博客的目的并不是要记录这道面试题多么多么难，细想想的话怎么都不算难，对吧？其实，写这篇博客的原由是这样的，当我们在面试的时候，不可能都一帆风顺的，多少都会遇到几个棘手的面试题，你想想面试官的心态，肯定要考倒你的啊，当我们没有思路的时候，不要立刻就说不会或者其他放弃作答的话（想想这给面试官传递的信息对自己有多不利！），可以尝试着向面试官要一些解答提示，一般面试官都很好的，都会给出一些思路，然后你就顺着这个思路想下去，最后也许就柳暗花明了，又能给面试官很好的印象，何乐而不为呢？面试官往往并不是一定要得到正确答案，他们真正在乎的也许是你的思考方式。就像我，刚开始可能也没什么很好的解决办法，但是顺着他的思路一步步就那么把正确方法给做出来了。所以，下次再遇到难题，不妨向面试官要一些提示，记住啊~~\n\nps：呼应开头，触动我的理由想必大家都已清楚了吧。\n\n（end）","source":"_posts/201506/2015-06-12-shuffle_array_note.md","raw":"---\nlayout : post\ntitle : 一道面试题引发的一点点思考\ncategory : 面试\ntags : 面试\n---\n到了大三下学期，身边的小伙伴都不约而同地开始找实习了，其中面试当然是不可缺少的重头戏啦。\n最近在面百度的时候，面试官的一道关于随机数的题很有意思，不算难，但却在那么一瞬间触动了我，所以打算抽点时间把它记录下来。（关于它怎么触动我了，最后我会有说明 :P）\n\n<!--more-->\n\n###面试题的描述\n\n大意是这样的：\n\n> 写一个方法，把给定数组内的元素打乱返回，尽量高效实现。\n\n首先，我想到的就是PHP自带的一个`shuffle`函数，就是专门干这个事儿的，随机打乱数组，而且是引用传值的。\n\n当我说出可以使用shuffle函数时，面试官打断了我，说不能使用PHP自带的函数，让自己尝试着实现这个功能。当时很郁闷，明明有高度优化好的方法摆在那却不让用，唉...\n\n然后，就发动脑袋想吧，想到既然在数组中不管是取值、打印还是赋值都是拿数组的下标操作的，所以我可以往数组下标这方面想，假如我可以打乱下标那不就解决了打乱数组了吗，于是就有了下面比较笨的代码，现在再回头看当时头脑发晕的解决方案，真是无语：\n\n\t<?php\n\t$arrData = array('aaa', 'bbb', 'ccc', 'ddd', 'eee');\n\t$keys = array_keys($arrData);\n\tshuffle($keys);\n\t$kLen = count($keys);\n\t$arrRes = array();\n\tforeach($keys as $v){\n\t    array_push($arrRes, $arrData[$v]);\n\t}\n\tvar_dump($arrRes);\n\n尽管功能是实现了，但是其中还是使用了`shuffle`方法，这显然是不合格的。那种紧张情况下，我能想到的就这个思路了，汗~~\n\n最后，没辙了，我就大胆问了下面试官能不能给一些提示，那个面试官真的很nice，然后就给出了提示：\n\n> 说我往数组下标方面思考是正确的，既然要求要高效就意味着在同一个数组中完成操作，可以尝试着使用交换来完成。\n\n对于一道面试题来说，面试官能提示这么多就已经很好了，然后我就顺着这个思路想下去，如果每次随机获取一个下标，然后把该下标对应的value与数组最后一个value交换，最后数组长度减一，接着重复执行上述步骤就可以了。\n\n下面还是用图来说明下吧，毕竟一图胜千言嘛~~\n\n假设随机拿到该数组的一个key为1，然后让key为1的元素与最后一个元素（key为4）交换\n\n![pic](../../images/201506/2015-06-12_223756.jpg)\n\n第一次交换后，数组长度减一，然后只需要对（数组长度-1）的元素执行相同操作即可。代码如下：\n\n\t<?php\n\t$arrData = array('aaa', 'bbb', 'ccc', 'ddd', 'eee');\n\t$arrLen = count($arrData)-1;\n\twhile($arrLen >= 0){\n    \t$k = mt_rand(0, $arrLen);\n    \t$tmp = $arrData[$arrLen];\n    \t$arrData[$arrLen] = $arrData[$k];\n    \t$arrData[$k] = $tmp;\n    \t$arrLen--;\n\t}\n\tvar_dump($arrData);\n\n这样很好地就解决了这个问题。\n\n###总结\n\n其实写这篇博客的目的并不是要记录这道面试题多么多么难，细想想的话怎么都不算难，对吧？其实，写这篇博客的原由是这样的，当我们在面试的时候，不可能都一帆风顺的，多少都会遇到几个棘手的面试题，你想想面试官的心态，肯定要考倒你的啊，当我们没有思路的时候，不要立刻就说不会或者其他放弃作答的话（想想这给面试官传递的信息对自己有多不利！），可以尝试着向面试官要一些解答提示，一般面试官都很好的，都会给出一些思路，然后你就顺着这个思路想下去，最后也许就柳暗花明了，又能给面试官很好的印象，何乐而不为呢？面试官往往并不是一定要得到正确答案，他们真正在乎的也许是你的思考方式。就像我，刚开始可能也没什么很好的解决办法，但是顺着他的思路一步步就那么把正确方法给做出来了。所以，下次再遇到难题，不妨向面试官要一些提示，记住啊~~\n\nps：呼应开头，触动我的理由想必大家都已清楚了吧。\n\n（end）","slug":"201506-2015-06-12-shuffle-array-note","published":1,"date":"2018-04-12T15:20:38.837Z","updated":"2018-04-12T15:20:38.837Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7g007iass6sbx6nc9d","content":"<p>到了大三下学期，身边的小伙伴都不约而同地开始找实习了，其中面试当然是不可缺少的重头戏啦。<br>最近在面百度的时候，面试官的一道关于随机数的题很有意思，不算难，但却在那么一瞬间触动了我，所以打算抽点时间把它记录下来。（关于它怎么触动我了，最后我会有说明 :P）</p>\n<a id=\"more\"></a>\n<p>###面试题的描述</p>\n<p>大意是这样的：</p>\n<blockquote>\n<p>写一个方法，把给定数组内的元素打乱返回，尽量高效实现。</p>\n</blockquote>\n<p>首先，我想到的就是PHP自带的一个<code>shuffle</code>函数，就是专门干这个事儿的，随机打乱数组，而且是引用传值的。</p>\n<p>当我说出可以使用shuffle函数时，面试官打断了我，说不能使用PHP自带的函数，让自己尝试着实现这个功能。当时很郁闷，明明有高度优化好的方法摆在那却不让用，唉…</p>\n<p>然后，就发动脑袋想吧，想到既然在数组中不管是取值、打印还是赋值都是拿数组的下标操作的，所以我可以往数组下标这方面想，假如我可以打乱下标那不就解决了打乱数组了吗，于是就有了下面比较笨的代码，现在再回头看当时头脑发晕的解决方案，真是无语：</p>\n<pre><code>&lt;?php\n$arrData = array(&apos;aaa&apos;, &apos;bbb&apos;, &apos;ccc&apos;, &apos;ddd&apos;, &apos;eee&apos;);\n$keys = array_keys($arrData);\nshuffle($keys);\n$kLen = count($keys);\n$arrRes = array();\nforeach($keys as $v){\n    array_push($arrRes, $arrData[$v]);\n}\nvar_dump($arrRes);\n</code></pre><p>尽管功能是实现了，但是其中还是使用了<code>shuffle</code>方法，这显然是不合格的。那种紧张情况下，我能想到的就这个思路了，汗~~</p>\n<p>最后，没辙了，我就大胆问了下面试官能不能给一些提示，那个面试官真的很nice，然后就给出了提示：</p>\n<blockquote>\n<p>说我往数组下标方面思考是正确的，既然要求要高效就意味着在同一个数组中完成操作，可以尝试着使用交换来完成。</p>\n</blockquote>\n<p>对于一道面试题来说，面试官能提示这么多就已经很好了，然后我就顺着这个思路想下去，如果每次随机获取一个下标，然后把该下标对应的value与数组最后一个value交换，最后数组长度减一，接着重复执行上述步骤就可以了。</p>\n<p>下面还是用图来说明下吧，毕竟一图胜千言嘛~~</p>\n<p>假设随机拿到该数组的一个key为1，然后让key为1的元素与最后一个元素（key为4）交换</p>\n<p><img src=\"../../images/201506/2015-06-12_223756.jpg\" alt=\"pic\"></p>\n<p>第一次交换后，数组长度减一，然后只需要对（数组长度-1）的元素执行相同操作即可。代码如下：</p>\n<pre><code>&lt;?php\n$arrData = array(&apos;aaa&apos;, &apos;bbb&apos;, &apos;ccc&apos;, &apos;ddd&apos;, &apos;eee&apos;);\n$arrLen = count($arrData)-1;\nwhile($arrLen &gt;= 0){\n    $k = mt_rand(0, $arrLen);\n    $tmp = $arrData[$arrLen];\n    $arrData[$arrLen] = $arrData[$k];\n    $arrData[$k] = $tmp;\n    $arrLen--;\n}\nvar_dump($arrData);\n</code></pre><p>这样很好地就解决了这个问题。</p>\n<p>###总结</p>\n<p>其实写这篇博客的目的并不是要记录这道面试题多么多么难，细想想的话怎么都不算难，对吧？其实，写这篇博客的原由是这样的，当我们在面试的时候，不可能都一帆风顺的，多少都会遇到几个棘手的面试题，你想想面试官的心态，肯定要考倒你的啊，当我们没有思路的时候，不要立刻就说不会或者其他放弃作答的话（想想这给面试官传递的信息对自己有多不利！），可以尝试着向面试官要一些解答提示，一般面试官都很好的，都会给出一些思路，然后你就顺着这个思路想下去，最后也许就柳暗花明了，又能给面试官很好的印象，何乐而不为呢？面试官往往并不是一定要得到正确答案，他们真正在乎的也许是你的思考方式。就像我，刚开始可能也没什么很好的解决办法，但是顺着他的思路一步步就那么把正确方法给做出来了。所以，下次再遇到难题，不妨向面试官要一些提示，记住啊~~</p>\n<p>ps：呼应开头，触动我的理由想必大家都已清楚了吧。</p>\n<p>（end）</p>\n","site":{"data":{}},"excerpt":"<p>到了大三下学期，身边的小伙伴都不约而同地开始找实习了，其中面试当然是不可缺少的重头戏啦。<br>最近在面百度的时候，面试官的一道关于随机数的题很有意思，不算难，但却在那么一瞬间触动了我，所以打算抽点时间把它记录下来。（关于它怎么触动我了，最后我会有说明 :P）</p>","more":"<p>###面试题的描述</p>\n<p>大意是这样的：</p>\n<blockquote>\n<p>写一个方法，把给定数组内的元素打乱返回，尽量高效实现。</p>\n</blockquote>\n<p>首先，我想到的就是PHP自带的一个<code>shuffle</code>函数，就是专门干这个事儿的，随机打乱数组，而且是引用传值的。</p>\n<p>当我说出可以使用shuffle函数时，面试官打断了我，说不能使用PHP自带的函数，让自己尝试着实现这个功能。当时很郁闷，明明有高度优化好的方法摆在那却不让用，唉…</p>\n<p>然后，就发动脑袋想吧，想到既然在数组中不管是取值、打印还是赋值都是拿数组的下标操作的，所以我可以往数组下标这方面想，假如我可以打乱下标那不就解决了打乱数组了吗，于是就有了下面比较笨的代码，现在再回头看当时头脑发晕的解决方案，真是无语：</p>\n<pre><code>&lt;?php\n$arrData = array(&apos;aaa&apos;, &apos;bbb&apos;, &apos;ccc&apos;, &apos;ddd&apos;, &apos;eee&apos;);\n$keys = array_keys($arrData);\nshuffle($keys);\n$kLen = count($keys);\n$arrRes = array();\nforeach($keys as $v){\n    array_push($arrRes, $arrData[$v]);\n}\nvar_dump($arrRes);\n</code></pre><p>尽管功能是实现了，但是其中还是使用了<code>shuffle</code>方法，这显然是不合格的。那种紧张情况下，我能想到的就这个思路了，汗~~</p>\n<p>最后，没辙了，我就大胆问了下面试官能不能给一些提示，那个面试官真的很nice，然后就给出了提示：</p>\n<blockquote>\n<p>说我往数组下标方面思考是正确的，既然要求要高效就意味着在同一个数组中完成操作，可以尝试着使用交换来完成。</p>\n</blockquote>\n<p>对于一道面试题来说，面试官能提示这么多就已经很好了，然后我就顺着这个思路想下去，如果每次随机获取一个下标，然后把该下标对应的value与数组最后一个value交换，最后数组长度减一，接着重复执行上述步骤就可以了。</p>\n<p>下面还是用图来说明下吧，毕竟一图胜千言嘛~~</p>\n<p>假设随机拿到该数组的一个key为1，然后让key为1的元素与最后一个元素（key为4）交换</p>\n<p><img src=\"../../images/201506/2015-06-12_223756.jpg\" alt=\"pic\"></p>\n<p>第一次交换后，数组长度减一，然后只需要对（数组长度-1）的元素执行相同操作即可。代码如下：</p>\n<pre><code>&lt;?php\n$arrData = array(&apos;aaa&apos;, &apos;bbb&apos;, &apos;ccc&apos;, &apos;ddd&apos;, &apos;eee&apos;);\n$arrLen = count($arrData)-1;\nwhile($arrLen &gt;= 0){\n    $k = mt_rand(0, $arrLen);\n    $tmp = $arrData[$arrLen];\n    $arrData[$arrLen] = $arrData[$k];\n    $arrData[$k] = $tmp;\n    $arrLen--;\n}\nvar_dump($arrData);\n</code></pre><p>这样很好地就解决了这个问题。</p>\n<p>###总结</p>\n<p>其实写这篇博客的目的并不是要记录这道面试题多么多么难，细想想的话怎么都不算难，对吧？其实，写这篇博客的原由是这样的，当我们在面试的时候，不可能都一帆风顺的，多少都会遇到几个棘手的面试题，你想想面试官的心态，肯定要考倒你的啊，当我们没有思路的时候，不要立刻就说不会或者其他放弃作答的话（想想这给面试官传递的信息对自己有多不利！），可以尝试着向面试官要一些解答提示，一般面试官都很好的，都会给出一些思路，然后你就顺着这个思路想下去，最后也许就柳暗花明了，又能给面试官很好的印象，何乐而不为呢？面试官往往并不是一定要得到正确答案，他们真正在乎的也许是你的思考方式。就像我，刚开始可能也没什么很好的解决办法，但是顺着他的思路一步步就那么把正确方法给做出来了。所以，下次再遇到难题，不妨向面试官要一些提示，记住啊~~</p>\n<p>ps：呼应开头，触动我的理由想必大家都已清楚了吧。</p>\n<p>（end）</p>"},{"layout":"post","title":"如何在MySQL中高效的存储ip地址","_content":"在多数场景下，我们一般在MySQL中存储ip地址时都使用`varchar(15)`或者`char(15)`类型，是吧？\n虽说功能是实现了，但是这样构建数据表就能最大限度的优化数据库性能吗？答案是否定的，尽管在存储ip上折腾下不会马上提升系统的性能，但是整个系统架构谁又敢说不是各个地方一点点的优化性能给提升起来了呢？所以说巧存ip也是不可忽略的。\n\n<!--more-->\n\n###如何高效存储ip\n\n答案是使用int(10)类型。\n\n在MySQL中没有专门提供存储ip地址的类型，那我们最容易想到的就是使用`varchar(15)`和`char(15)`了，但这样却不怎么高效，为什么呢？因为使用字符串存储的话首先就会占用至少15个字节，然而使用空间也比较大，假设使用int类型的话只会占用4个字节，占用空间少，检索起来也比字符串速度快很多。\n\n那么，问题来了，我们如何把ip和整型很好地结合起来进行转化呢？幸好mysql已经帮我们实现了这一功能，的确是这样的。mysql中内置了`inet_aton()`和`inet_ntoa()`函数可以让ip地址和整形之间很好的转化。\n\n下面看看mysql手册里的解释吧。\n\n**inet_aton()**\n> INET_ATON(expr)\n\n>Given the dotted-quad representation of an IPv4 network address as a\nstring, returns an integer that represents the numeric value of the\naddress in network byte order (big endian). INET_ATON() returns NULL if\nit does not understand its argument.\n\n**inet_ntoa()**\n\n> INET_NTOA(expr)\n\n>Given a numeric IPv4 network address in network byte order, returns the\ndotted-quad string representation of the address as a nonbinary string\nin the connection character set. INET_NTOA() returns NULL if it does\nnot understand its argument.\n\n还是看下实际的例子比较直观：\n\n\t> select inet_aton('192.168.1.100');\n\t\n![pic](../../images/201506/2015-06-20_004736.jpg)\n\n当输入错误的ip地址时会返回NULL:\n\n\t> select inet_aton('a.b.c');\n\n![pic](../../images/201506/2015-06-20_005013.jpg)\n\n当从整型转为ip时就可以使用`inet_ntoa()`函数：\n\n\t> select inet_ntoa(3232235876);\n\n![pic](../../images/201506/2015-06-20_005338.jpg)\n\n当ip不存在时，可以使用0来代替：\n\n\t> select inet_ntoa(0);\n\n![pic](../../images/201506/2015-06-20_005428.jpg)\n\n所以IP的表字段可以设置为INT(10)就好，如果IP获取不到可以直接存0代表获取不到IP的意思.\n\n\n好了，这也不是什么很高深的东西，单纯做个笔记而已。\n\n(end)","source":"_posts/201506/2015-06-20-mysql_save_ip.md","raw":"---\nlayout : post\ntitle : 如何在MySQL中高效的存储ip地址\ncategory : mysql\ntags : mysql\n---\n在多数场景下，我们一般在MySQL中存储ip地址时都使用`varchar(15)`或者`char(15)`类型，是吧？\n虽说功能是实现了，但是这样构建数据表就能最大限度的优化数据库性能吗？答案是否定的，尽管在存储ip上折腾下不会马上提升系统的性能，但是整个系统架构谁又敢说不是各个地方一点点的优化性能给提升起来了呢？所以说巧存ip也是不可忽略的。\n\n<!--more-->\n\n###如何高效存储ip\n\n答案是使用int(10)类型。\n\n在MySQL中没有专门提供存储ip地址的类型，那我们最容易想到的就是使用`varchar(15)`和`char(15)`了，但这样却不怎么高效，为什么呢？因为使用字符串存储的话首先就会占用至少15个字节，然而使用空间也比较大，假设使用int类型的话只会占用4个字节，占用空间少，检索起来也比字符串速度快很多。\n\n那么，问题来了，我们如何把ip和整型很好地结合起来进行转化呢？幸好mysql已经帮我们实现了这一功能，的确是这样的。mysql中内置了`inet_aton()`和`inet_ntoa()`函数可以让ip地址和整形之间很好的转化。\n\n下面看看mysql手册里的解释吧。\n\n**inet_aton()**\n> INET_ATON(expr)\n\n>Given the dotted-quad representation of an IPv4 network address as a\nstring, returns an integer that represents the numeric value of the\naddress in network byte order (big endian). INET_ATON() returns NULL if\nit does not understand its argument.\n\n**inet_ntoa()**\n\n> INET_NTOA(expr)\n\n>Given a numeric IPv4 network address in network byte order, returns the\ndotted-quad string representation of the address as a nonbinary string\nin the connection character set. INET_NTOA() returns NULL if it does\nnot understand its argument.\n\n还是看下实际的例子比较直观：\n\n\t> select inet_aton('192.168.1.100');\n\t\n![pic](../../images/201506/2015-06-20_004736.jpg)\n\n当输入错误的ip地址时会返回NULL:\n\n\t> select inet_aton('a.b.c');\n\n![pic](../../images/201506/2015-06-20_005013.jpg)\n\n当从整型转为ip时就可以使用`inet_ntoa()`函数：\n\n\t> select inet_ntoa(3232235876);\n\n![pic](../../images/201506/2015-06-20_005338.jpg)\n\n当ip不存在时，可以使用0来代替：\n\n\t> select inet_ntoa(0);\n\n![pic](../../images/201506/2015-06-20_005428.jpg)\n\n所以IP的表字段可以设置为INT(10)就好，如果IP获取不到可以直接存0代表获取不到IP的意思.\n\n\n好了，这也不是什么很高深的东西，单纯做个笔记而已。\n\n(end)","slug":"201506-2015-06-20-mysql-save-ip","published":1,"date":"2018-04-12T15:20:38.838Z","updated":"2018-04-12T15:20:38.838Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7i007lass6kv7mebyl","content":"<p>在多数场景下，我们一般在MySQL中存储ip地址时都使用<code>varchar(15)</code>或者<code>char(15)</code>类型，是吧？<br>虽说功能是实现了，但是这样构建数据表就能最大限度的优化数据库性能吗？答案是否定的，尽管在存储ip上折腾下不会马上提升系统的性能，但是整个系统架构谁又敢说不是各个地方一点点的优化性能给提升起来了呢？所以说巧存ip也是不可忽略的。</p>\n<a id=\"more\"></a>\n<p>###如何高效存储ip</p>\n<p>答案是使用int(10)类型。</p>\n<p>在MySQL中没有专门提供存储ip地址的类型，那我们最容易想到的就是使用<code>varchar(15)</code>和<code>char(15)</code>了，但这样却不怎么高效，为什么呢？因为使用字符串存储的话首先就会占用至少15个字节，然而使用空间也比较大，假设使用int类型的话只会占用4个字节，占用空间少，检索起来也比字符串速度快很多。</p>\n<p>那么，问题来了，我们如何把ip和整型很好地结合起来进行转化呢？幸好mysql已经帮我们实现了这一功能，的确是这样的。mysql中内置了<code>inet_aton()</code>和<code>inet_ntoa()</code>函数可以让ip地址和整形之间很好的转化。</p>\n<p>下面看看mysql手册里的解释吧。</p>\n<p><strong>inet_aton()</strong></p>\n<blockquote>\n<p>INET_ATON(expr)</p>\n</blockquote>\n<blockquote>\n<p>Given the dotted-quad representation of an IPv4 network address as a<br>string, returns an integer that represents the numeric value of the<br>address in network byte order (big endian). INET_ATON() returns NULL if<br>it does not understand its argument.</p>\n</blockquote>\n<p><strong>inet_ntoa()</strong></p>\n<blockquote>\n<p>INET_NTOA(expr)</p>\n</blockquote>\n<blockquote>\n<p>Given a numeric IPv4 network address in network byte order, returns the<br>dotted-quad string representation of the address as a nonbinary string<br>in the connection character set. INET_NTOA() returns NULL if it does<br>not understand its argument.</p>\n</blockquote>\n<p>还是看下实际的例子比较直观：</p>\n<pre><code>&gt; select inet_aton(&apos;192.168.1.100&apos;);\n</code></pre><p><img src=\"../../images/201506/2015-06-20_004736.jpg\" alt=\"pic\"></p>\n<p>当输入错误的ip地址时会返回NULL:</p>\n<pre><code>&gt; select inet_aton(&apos;a.b.c&apos;);\n</code></pre><p><img src=\"../../images/201506/2015-06-20_005013.jpg\" alt=\"pic\"></p>\n<p>当从整型转为ip时就可以使用<code>inet_ntoa()</code>函数：</p>\n<pre><code>&gt; select inet_ntoa(3232235876);\n</code></pre><p><img src=\"../../images/201506/2015-06-20_005338.jpg\" alt=\"pic\"></p>\n<p>当ip不存在时，可以使用0来代替：</p>\n<pre><code>&gt; select inet_ntoa(0);\n</code></pre><p><img src=\"../../images/201506/2015-06-20_005428.jpg\" alt=\"pic\"></p>\n<p>所以IP的表字段可以设置为INT(10)就好，如果IP获取不到可以直接存0代表获取不到IP的意思.</p>\n<p>好了，这也不是什么很高深的东西，单纯做个笔记而已。</p>\n<p>(end)</p>\n","site":{"data":{}},"excerpt":"<p>在多数场景下，我们一般在MySQL中存储ip地址时都使用<code>varchar(15)</code>或者<code>char(15)</code>类型，是吧？<br>虽说功能是实现了，但是这样构建数据表就能最大限度的优化数据库性能吗？答案是否定的，尽管在存储ip上折腾下不会马上提升系统的性能，但是整个系统架构谁又敢说不是各个地方一点点的优化性能给提升起来了呢？所以说巧存ip也是不可忽略的。</p>","more":"<p>###如何高效存储ip</p>\n<p>答案是使用int(10)类型。</p>\n<p>在MySQL中没有专门提供存储ip地址的类型，那我们最容易想到的就是使用<code>varchar(15)</code>和<code>char(15)</code>了，但这样却不怎么高效，为什么呢？因为使用字符串存储的话首先就会占用至少15个字节，然而使用空间也比较大，假设使用int类型的话只会占用4个字节，占用空间少，检索起来也比字符串速度快很多。</p>\n<p>那么，问题来了，我们如何把ip和整型很好地结合起来进行转化呢？幸好mysql已经帮我们实现了这一功能，的确是这样的。mysql中内置了<code>inet_aton()</code>和<code>inet_ntoa()</code>函数可以让ip地址和整形之间很好的转化。</p>\n<p>下面看看mysql手册里的解释吧。</p>\n<p><strong>inet_aton()</strong></p>\n<blockquote>\n<p>INET_ATON(expr)</p>\n</blockquote>\n<blockquote>\n<p>Given the dotted-quad representation of an IPv4 network address as a<br>string, returns an integer that represents the numeric value of the<br>address in network byte order (big endian). INET_ATON() returns NULL if<br>it does not understand its argument.</p>\n</blockquote>\n<p><strong>inet_ntoa()</strong></p>\n<blockquote>\n<p>INET_NTOA(expr)</p>\n</blockquote>\n<blockquote>\n<p>Given a numeric IPv4 network address in network byte order, returns the<br>dotted-quad string representation of the address as a nonbinary string<br>in the connection character set. INET_NTOA() returns NULL if it does<br>not understand its argument.</p>\n</blockquote>\n<p>还是看下实际的例子比较直观：</p>\n<pre><code>&gt; select inet_aton(&apos;192.168.1.100&apos;);\n</code></pre><p><img src=\"../../images/201506/2015-06-20_004736.jpg\" alt=\"pic\"></p>\n<p>当输入错误的ip地址时会返回NULL:</p>\n<pre><code>&gt; select inet_aton(&apos;a.b.c&apos;);\n</code></pre><p><img src=\"../../images/201506/2015-06-20_005013.jpg\" alt=\"pic\"></p>\n<p>当从整型转为ip时就可以使用<code>inet_ntoa()</code>函数：</p>\n<pre><code>&gt; select inet_ntoa(3232235876);\n</code></pre><p><img src=\"../../images/201506/2015-06-20_005338.jpg\" alt=\"pic\"></p>\n<p>当ip不存在时，可以使用0来代替：</p>\n<pre><code>&gt; select inet_ntoa(0);\n</code></pre><p><img src=\"../../images/201506/2015-06-20_005428.jpg\" alt=\"pic\"></p>\n<p>所以IP的表字段可以设置为INT(10)就好，如果IP获取不到可以直接存0代表获取不到IP的意思.</p>\n<p>好了，这也不是什么很高深的东西，单纯做个笔记而已。</p>\n<p>(end)</p>"},{"layout":"post","title":"PHP如何正常转换中文json格式字符串","_content":"如何对json格式的字符串进行转换，在php手册中提供了两个函数：\n\n> json_encode : 对变量进行 JSON 编码\n\n> json_decode : 对 JSON 格式的字符串进行编码\n\n<!--more-->\n\n下面看个实例：\n\n\t$arr = ['a', 'b', 'c'];\n\techo json_encode($arr);\n\n输出为：\n\n>[\"a\",\"b\",\"c\"]\n\n但是，当我们在数组中放入中文的时候，就会出现问题：\n\n\t$arr = [\n    \t'世界',\n    \t'你好',\n\t];\n\techo json_encode($arr);\n\n输出的结果为：\n\n>[\"\\u4e16\\u754c\",\"\\u4f60\\u597d\"]\n\n这个结果显然不是我们想要的，但是为什么出现这个呢？\n因为当我们的值中包含中文时，php对他进行json编码时底层会对中文进行unicode编码，导致结果不可读.\n\n_**那该怎么解决呢？**_\n\n###方法一\n可以利用 urlencode 和 urldecode 方法绕过这个转码为 unicode 的过程，先将中文字段进行urlencode，然后json_encode，最后再用urldecode处理结果，便可以正常显示中文。具体代码如下：\n\n\t$arr = [\n    \t'世界',\n    \t'你好',\n\t];\n\techo urldecode(json_encode(array_map('urlencode', $arr)));\n\n输出结果为：\n\n>[\"世界\",\"你好\"]\n\n###方法二\n自PHP5.4版本，官方就已经给Json新增了一个选项: `JSON_UNESCAPED_UNICODE`。加上这个选项后，就不会自动把中文编码了。具体代码如下：\n\n\t$arr = [\n    \t'世界',\n    \t'你好',\n\t];\n\techo json_encode($arr, JSON_UNESCAPED_UNICODE);\n\n输出为：\n\t\n>[\"世界\",\"你好\"]\n\n看吧，这才是我们想要的结果 :)\n\n###**注意**\n需要我们注意的是，由于 `json_encode` 和 `json_decode`只支持`utf-8`编码的字符，`gbk`的字符想要用json函数的话就得转换一下喽。\n\n[end]","source":"_posts/201507/2015-07-09-php_use_json_note.md","raw":"---\nlayout : post\ntitle : PHP如何正常转换中文json格式字符串\ncategory : php\ntags : php\n---\n如何对json格式的字符串进行转换，在php手册中提供了两个函数：\n\n> json_encode : 对变量进行 JSON 编码\n\n> json_decode : 对 JSON 格式的字符串进行编码\n\n<!--more-->\n\n下面看个实例：\n\n\t$arr = ['a', 'b', 'c'];\n\techo json_encode($arr);\n\n输出为：\n\n>[\"a\",\"b\",\"c\"]\n\n但是，当我们在数组中放入中文的时候，就会出现问题：\n\n\t$arr = [\n    \t'世界',\n    \t'你好',\n\t];\n\techo json_encode($arr);\n\n输出的结果为：\n\n>[\"\\u4e16\\u754c\",\"\\u4f60\\u597d\"]\n\n这个结果显然不是我们想要的，但是为什么出现这个呢？\n因为当我们的值中包含中文时，php对他进行json编码时底层会对中文进行unicode编码，导致结果不可读.\n\n_**那该怎么解决呢？**_\n\n###方法一\n可以利用 urlencode 和 urldecode 方法绕过这个转码为 unicode 的过程，先将中文字段进行urlencode，然后json_encode，最后再用urldecode处理结果，便可以正常显示中文。具体代码如下：\n\n\t$arr = [\n    \t'世界',\n    \t'你好',\n\t];\n\techo urldecode(json_encode(array_map('urlencode', $arr)));\n\n输出结果为：\n\n>[\"世界\",\"你好\"]\n\n###方法二\n自PHP5.4版本，官方就已经给Json新增了一个选项: `JSON_UNESCAPED_UNICODE`。加上这个选项后，就不会自动把中文编码了。具体代码如下：\n\n\t$arr = [\n    \t'世界',\n    \t'你好',\n\t];\n\techo json_encode($arr, JSON_UNESCAPED_UNICODE);\n\n输出为：\n\t\n>[\"世界\",\"你好\"]\n\n看吧，这才是我们想要的结果 :)\n\n###**注意**\n需要我们注意的是，由于 `json_encode` 和 `json_decode`只支持`utf-8`编码的字符，`gbk`的字符想要用json函数的话就得转换一下喽。\n\n[end]","slug":"201507-2015-07-09-php-use-json-note","published":1,"date":"2018-04-12T15:20:38.838Z","updated":"2018-04-12T15:20:38.838Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7j007oass6f06l39r6","content":"<p>如何对json格式的字符串进行转换，在php手册中提供了两个函数：</p>\n<blockquote>\n<p>json_encode : 对变量进行 JSON 编码</p>\n</blockquote>\n<blockquote>\n<p>json_decode : 对 JSON 格式的字符串进行编码</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>下面看个实例：</p>\n<pre><code>$arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\necho json_encode($arr);\n</code></pre><p>输出为：</p>\n<blockquote>\n<p>[“a”,”b”,”c”]</p>\n</blockquote>\n<p>但是，当我们在数组中放入中文的时候，就会出现问题：</p>\n<pre><code>$arr = [\n    &apos;世界&apos;,\n    &apos;你好&apos;,\n];\necho json_encode($arr);\n</code></pre><p>输出的结果为：</p>\n<blockquote>\n<p>[“\\u4e16\\u754c”,”\\u4f60\\u597d”]</p>\n</blockquote>\n<p>这个结果显然不是我们想要的，但是为什么出现这个呢？<br>因为当我们的值中包含中文时，php对他进行json编码时底层会对中文进行unicode编码，导致结果不可读.</p>\n<p><em><strong>那该怎么解决呢？</strong></em></p>\n<p>###方法一<br>可以利用 urlencode 和 urldecode 方法绕过这个转码为 unicode 的过程，先将中文字段进行urlencode，然后json_encode，最后再用urldecode处理结果，便可以正常显示中文。具体代码如下：</p>\n<pre><code>$arr = [\n    &apos;世界&apos;,\n    &apos;你好&apos;,\n];\necho urldecode(json_encode(array_map(&apos;urlencode&apos;, $arr)));\n</code></pre><p>输出结果为：</p>\n<blockquote>\n<p>[“世界”,”你好”]</p>\n</blockquote>\n<p>###方法二<br>自PHP5.4版本，官方就已经给Json新增了一个选项: <code>JSON_UNESCAPED_UNICODE</code>。加上这个选项后，就不会自动把中文编码了。具体代码如下：</p>\n<pre><code>$arr = [\n    &apos;世界&apos;,\n    &apos;你好&apos;,\n];\necho json_encode($arr, JSON_UNESCAPED_UNICODE);\n</code></pre><p>输出为：</p>\n<blockquote>\n<p>[“世界”,”你好”]</p>\n</blockquote>\n<p>看吧，这才是我们想要的结果 :)</p>\n<p>###<strong>注意</strong><br>需要我们注意的是，由于 <code>json_encode</code> 和 <code>json_decode</code>只支持<code>utf-8</code>编码的字符，<code>gbk</code>的字符想要用json函数的话就得转换一下喽。</p>\n<p>[end]</p>\n","site":{"data":{}},"excerpt":"<p>如何对json格式的字符串进行转换，在php手册中提供了两个函数：</p>\n<blockquote>\n<p>json_encode : 对变量进行 JSON 编码</p>\n</blockquote>\n<blockquote>\n<p>json_decode : 对 JSON 格式的字符串进行编码</p>\n</blockquote>","more":"<p>下面看个实例：</p>\n<pre><code>$arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\necho json_encode($arr);\n</code></pre><p>输出为：</p>\n<blockquote>\n<p>[“a”,”b”,”c”]</p>\n</blockquote>\n<p>但是，当我们在数组中放入中文的时候，就会出现问题：</p>\n<pre><code>$arr = [\n    &apos;世界&apos;,\n    &apos;你好&apos;,\n];\necho json_encode($arr);\n</code></pre><p>输出的结果为：</p>\n<blockquote>\n<p>[“\\u4e16\\u754c”,”\\u4f60\\u597d”]</p>\n</blockquote>\n<p>这个结果显然不是我们想要的，但是为什么出现这个呢？<br>因为当我们的值中包含中文时，php对他进行json编码时底层会对中文进行unicode编码，导致结果不可读.</p>\n<p><em><strong>那该怎么解决呢？</strong></em></p>\n<p>###方法一<br>可以利用 urlencode 和 urldecode 方法绕过这个转码为 unicode 的过程，先将中文字段进行urlencode，然后json_encode，最后再用urldecode处理结果，便可以正常显示中文。具体代码如下：</p>\n<pre><code>$arr = [\n    &apos;世界&apos;,\n    &apos;你好&apos;,\n];\necho urldecode(json_encode(array_map(&apos;urlencode&apos;, $arr)));\n</code></pre><p>输出结果为：</p>\n<blockquote>\n<p>[“世界”,”你好”]</p>\n</blockquote>\n<p>###方法二<br>自PHP5.4版本，官方就已经给Json新增了一个选项: <code>JSON_UNESCAPED_UNICODE</code>。加上这个选项后，就不会自动把中文编码了。具体代码如下：</p>\n<pre><code>$arr = [\n    &apos;世界&apos;,\n    &apos;你好&apos;,\n];\necho json_encode($arr, JSON_UNESCAPED_UNICODE);\n</code></pre><p>输出为：</p>\n<blockquote>\n<p>[“世界”,”你好”]</p>\n</blockquote>\n<p>看吧，这才是我们想要的结果 :)</p>\n<p>###<strong>注意</strong><br>需要我们注意的是，由于 <code>json_encode</code> 和 <code>json_decode</code>只支持<code>utf-8</code>编码的字符，<code>gbk</code>的字符想要用json函数的话就得转换一下喽。</p>\n<p>[end]</p>"},{"layout":"post","title":"MyINAM与Innodb的区别","_content":"InnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，这两个表类型各有优劣，视具体应用而定。基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能\n\n以下是一些细节和具体实现的差别：\n<!--more-->\n\n◆1.InnoDB不支持FULLTEXT类型的索引。\n\n◆2.InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含 where条件时，两种表的操作是一样的。\n\n◆3.对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。\n\n◆4.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。\n\n◆5.LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用。\n\n两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁.而MyISAM不支持.所以MyISAM往往就容易被人认为只适合在小项目中使用。\n\n　　我作为使用MySQL的用户角度出发，Innodb和MyISAM都是比较喜欢的，但是从我目前运维的数据库平台要达到需求：99.9%的稳定性，方便的扩展性和高可用性来说的话，MyISAM绝对是我的首选。\n\n　　原因如下：\n\n　　1、首先我目前平台上承载的大部分项目是读多写少的项目，而MyISAM的读性能是比Innodb强不少的。\n\n　　2、MyISAM的索引和数据是分开的，并且索引是有压缩的，内存使用率就对应提高了不少。能加载更多索引，而Innodb是索引和数据是紧密捆绑的，没有使用压缩从而会造成Innodb比MyISAM体积庞大不小。\n\n　　3、从平台角度来说，经常隔1，2个月就会发生应用开发人员不小心update一个表where写的范围不对，导致这个表没法正常用了，这个时候MyISAM的优越性就体现出来了，随便从当天拷贝的压缩包取出对应表的文件，随便放到一个数据库目录下，然后dump成sql再导回到主库，并把对应的binlog补上。如果是Innodb，恐怕不可能有这么快速度，别和我说让Innodb定期用导出xxx.sql机制备份，因为我平台上最小的一个数据库实例的数据量基本都是几十G大小。\n\n　　4、从我接触的应用逻辑来说，select count(*) 和order by 是最频繁的，大概能占了整个sql总语句的60%以上的操作，而这种操作Innodb其实也是会锁表的，很多人以为Innodb是行级锁，那个只是where对它主键是有效，非主键的都会锁全表的。\n\n　　5、还有就是经常有很多应用部门需要我给他们定期某些表的数据，MyISAM的话很方便，只要发给他们对应那表的frm.MYD,MYI的文件，让他们自己在对应版本的数据库启动就行，而Innodb就需要导出xxx.sql了，因为光给别人文件，受字典数据文件的影响，对方是无法使用的。\n\n　　6、如果和MyISAM比insert写操作的话，Innodb还达不到MyISAM的写性能，如果是针对基于索引的update操作，虽然MyISAM可能会逊色Innodb,但是那么高并发的写，从库能否追的上也是一个问题，还不如通过多实例分库分表架构来解决。\n\n　　7、如果是用MyISAM的话，merge引擎可以大大加快应用部门的开发速度，他们只要对这个merge表做一些select count(*)操作，非常适合大项目总量约几亿的rows某一类型(如日志，调查统计)的业务表。\n\n　　当然Innodb也不是绝对不用，用事务的项目如模拟炒股项目，我就是用Innodb的，活跃用户20多万时候，也是很轻松应付了，因此我个人也是很喜欢Innodb的，只是如果从数据库平台应用出发，我还是会首选MyISAM。\n\n　　另外，可能有人会说你MyISAM无法抗太多写操作，但是我可以通过架构来弥补，说个我现有用的数据库平台容量：主从数据总量在几百T以上，每天十多亿 pv的动态页面，还有几个大项目是通过数据接口方式调用未算进pv总数，(其中包括一个大项目因为初期memcached没部署,导致单台数据库每天处理 9千万的查询)。而我的整体数据库服务器平均负载都在0.5-1左右。\n　　[end]","source":"_posts/201509/2015-09-23-difference_of_MyISAM_and_Innodb.md","raw":"---\nlayout : post\ntitle : MyINAM与Innodb的区别\ncategory : mysql\ntags : mysql\n---\nInnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，这两个表类型各有优劣，视具体应用而定。基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能\n\n以下是一些细节和具体实现的差别：\n<!--more-->\n\n◆1.InnoDB不支持FULLTEXT类型的索引。\n\n◆2.InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含 where条件时，两种表的操作是一样的。\n\n◆3.对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。\n\n◆4.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。\n\n◆5.LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用。\n\n两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁.而MyISAM不支持.所以MyISAM往往就容易被人认为只适合在小项目中使用。\n\n　　我作为使用MySQL的用户角度出发，Innodb和MyISAM都是比较喜欢的，但是从我目前运维的数据库平台要达到需求：99.9%的稳定性，方便的扩展性和高可用性来说的话，MyISAM绝对是我的首选。\n\n　　原因如下：\n\n　　1、首先我目前平台上承载的大部分项目是读多写少的项目，而MyISAM的读性能是比Innodb强不少的。\n\n　　2、MyISAM的索引和数据是分开的，并且索引是有压缩的，内存使用率就对应提高了不少。能加载更多索引，而Innodb是索引和数据是紧密捆绑的，没有使用压缩从而会造成Innodb比MyISAM体积庞大不小。\n\n　　3、从平台角度来说，经常隔1，2个月就会发生应用开发人员不小心update一个表where写的范围不对，导致这个表没法正常用了，这个时候MyISAM的优越性就体现出来了，随便从当天拷贝的压缩包取出对应表的文件，随便放到一个数据库目录下，然后dump成sql再导回到主库，并把对应的binlog补上。如果是Innodb，恐怕不可能有这么快速度，别和我说让Innodb定期用导出xxx.sql机制备份，因为我平台上最小的一个数据库实例的数据量基本都是几十G大小。\n\n　　4、从我接触的应用逻辑来说，select count(*) 和order by 是最频繁的，大概能占了整个sql总语句的60%以上的操作，而这种操作Innodb其实也是会锁表的，很多人以为Innodb是行级锁，那个只是where对它主键是有效，非主键的都会锁全表的。\n\n　　5、还有就是经常有很多应用部门需要我给他们定期某些表的数据，MyISAM的话很方便，只要发给他们对应那表的frm.MYD,MYI的文件，让他们自己在对应版本的数据库启动就行，而Innodb就需要导出xxx.sql了，因为光给别人文件，受字典数据文件的影响，对方是无法使用的。\n\n　　6、如果和MyISAM比insert写操作的话，Innodb还达不到MyISAM的写性能，如果是针对基于索引的update操作，虽然MyISAM可能会逊色Innodb,但是那么高并发的写，从库能否追的上也是一个问题，还不如通过多实例分库分表架构来解决。\n\n　　7、如果是用MyISAM的话，merge引擎可以大大加快应用部门的开发速度，他们只要对这个merge表做一些select count(*)操作，非常适合大项目总量约几亿的rows某一类型(如日志，调查统计)的业务表。\n\n　　当然Innodb也不是绝对不用，用事务的项目如模拟炒股项目，我就是用Innodb的，活跃用户20多万时候，也是很轻松应付了，因此我个人也是很喜欢Innodb的，只是如果从数据库平台应用出发，我还是会首选MyISAM。\n\n　　另外，可能有人会说你MyISAM无法抗太多写操作，但是我可以通过架构来弥补，说个我现有用的数据库平台容量：主从数据总量在几百T以上，每天十多亿 pv的动态页面，还有几个大项目是通过数据接口方式调用未算进pv总数，(其中包括一个大项目因为初期memcached没部署,导致单台数据库每天处理 9千万的查询)。而我的整体数据库服务器平均负载都在0.5-1左右。\n　　[end]","slug":"201509-2015-09-23-difference-of-MyISAM-and-Innodb","published":1,"date":"2018-04-12T15:20:38.838Z","updated":"2018-04-12T15:20:38.838Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7k007sass69lzob9a9","content":"<p>InnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，这两个表类型各有优劣，视具体应用而定。基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能</p>\n<p>以下是一些细节和具体实现的差别：<br><a id=\"more\"></a></p>\n<p>◆1.InnoDB不支持FULLTEXT类型的索引。</p>\n<p>◆2.InnoDB 中不保存表的具体行数，也就是说，执行select count(<em>) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(</em>)语句包含 where条件时，两种表的操作是一样的。</p>\n<p>◆3.对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。</p>\n<p>◆4.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。</p>\n<p>◆5.LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用。</p>\n<p>两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁.而MyISAM不支持.所以MyISAM往往就容易被人认为只适合在小项目中使用。</p>\n<p>　　我作为使用MySQL的用户角度出发，Innodb和MyISAM都是比较喜欢的，但是从我目前运维的数据库平台要达到需求：99.9%的稳定性，方便的扩展性和高可用性来说的话，MyISAM绝对是我的首选。</p>\n<p>　　原因如下：</p>\n<p>　　1、首先我目前平台上承载的大部分项目是读多写少的项目，而MyISAM的读性能是比Innodb强不少的。</p>\n<p>　　2、MyISAM的索引和数据是分开的，并且索引是有压缩的，内存使用率就对应提高了不少。能加载更多索引，而Innodb是索引和数据是紧密捆绑的，没有使用压缩从而会造成Innodb比MyISAM体积庞大不小。</p>\n<p>　　3、从平台角度来说，经常隔1，2个月就会发生应用开发人员不小心update一个表where写的范围不对，导致这个表没法正常用了，这个时候MyISAM的优越性就体现出来了，随便从当天拷贝的压缩包取出对应表的文件，随便放到一个数据库目录下，然后dump成sql再导回到主库，并把对应的binlog补上。如果是Innodb，恐怕不可能有这么快速度，别和我说让Innodb定期用导出xxx.sql机制备份，因为我平台上最小的一个数据库实例的数据量基本都是几十G大小。</p>\n<p>　　4、从我接触的应用逻辑来说，select count(*) 和order by 是最频繁的，大概能占了整个sql总语句的60%以上的操作，而这种操作Innodb其实也是会锁表的，很多人以为Innodb是行级锁，那个只是where对它主键是有效，非主键的都会锁全表的。</p>\n<p>　　5、还有就是经常有很多应用部门需要我给他们定期某些表的数据，MyISAM的话很方便，只要发给他们对应那表的frm.MYD,MYI的文件，让他们自己在对应版本的数据库启动就行，而Innodb就需要导出xxx.sql了，因为光给别人文件，受字典数据文件的影响，对方是无法使用的。</p>\n<p>　　6、如果和MyISAM比insert写操作的话，Innodb还达不到MyISAM的写性能，如果是针对基于索引的update操作，虽然MyISAM可能会逊色Innodb,但是那么高并发的写，从库能否追的上也是一个问题，还不如通过多实例分库分表架构来解决。</p>\n<p>　　7、如果是用MyISAM的话，merge引擎可以大大加快应用部门的开发速度，他们只要对这个merge表做一些select count(*)操作，非常适合大项目总量约几亿的rows某一类型(如日志，调查统计)的业务表。</p>\n<p>　　当然Innodb也不是绝对不用，用事务的项目如模拟炒股项目，我就是用Innodb的，活跃用户20多万时候，也是很轻松应付了，因此我个人也是很喜欢Innodb的，只是如果从数据库平台应用出发，我还是会首选MyISAM。</p>\n<p>　　另外，可能有人会说你MyISAM无法抗太多写操作，但是我可以通过架构来弥补，说个我现有用的数据库平台容量：主从数据总量在几百T以上，每天十多亿 pv的动态页面，还有几个大项目是通过数据接口方式调用未算进pv总数，(其中包括一个大项目因为初期memcached没部署,导致单台数据库每天处理 9千万的查询)。而我的整体数据库服务器平均负载都在0.5-1左右。<br>　　[end]</p>\n","site":{"data":{}},"excerpt":"<p>InnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，这两个表类型各有优劣，视具体应用而定。基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能</p>\n<p>以下是一些细节和具体实现的差别：<br>","more":"</p>\n<p>◆1.InnoDB不支持FULLTEXT类型的索引。</p>\n<p>◆2.InnoDB 中不保存表的具体行数，也就是说，执行select count(<em>) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(</em>)语句包含 where条件时，两种表的操作是一样的。</p>\n<p>◆3.对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。</p>\n<p>◆4.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。</p>\n<p>◆5.LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用。</p>\n<p>两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁.而MyISAM不支持.所以MyISAM往往就容易被人认为只适合在小项目中使用。</p>\n<p>　　我作为使用MySQL的用户角度出发，Innodb和MyISAM都是比较喜欢的，但是从我目前运维的数据库平台要达到需求：99.9%的稳定性，方便的扩展性和高可用性来说的话，MyISAM绝对是我的首选。</p>\n<p>　　原因如下：</p>\n<p>　　1、首先我目前平台上承载的大部分项目是读多写少的项目，而MyISAM的读性能是比Innodb强不少的。</p>\n<p>　　2、MyISAM的索引和数据是分开的，并且索引是有压缩的，内存使用率就对应提高了不少。能加载更多索引，而Innodb是索引和数据是紧密捆绑的，没有使用压缩从而会造成Innodb比MyISAM体积庞大不小。</p>\n<p>　　3、从平台角度来说，经常隔1，2个月就会发生应用开发人员不小心update一个表where写的范围不对，导致这个表没法正常用了，这个时候MyISAM的优越性就体现出来了，随便从当天拷贝的压缩包取出对应表的文件，随便放到一个数据库目录下，然后dump成sql再导回到主库，并把对应的binlog补上。如果是Innodb，恐怕不可能有这么快速度，别和我说让Innodb定期用导出xxx.sql机制备份，因为我平台上最小的一个数据库实例的数据量基本都是几十G大小。</p>\n<p>　　4、从我接触的应用逻辑来说，select count(*) 和order by 是最频繁的，大概能占了整个sql总语句的60%以上的操作，而这种操作Innodb其实也是会锁表的，很多人以为Innodb是行级锁，那个只是where对它主键是有效，非主键的都会锁全表的。</p>\n<p>　　5、还有就是经常有很多应用部门需要我给他们定期某些表的数据，MyISAM的话很方便，只要发给他们对应那表的frm.MYD,MYI的文件，让他们自己在对应版本的数据库启动就行，而Innodb就需要导出xxx.sql了，因为光给别人文件，受字典数据文件的影响，对方是无法使用的。</p>\n<p>　　6、如果和MyISAM比insert写操作的话，Innodb还达不到MyISAM的写性能，如果是针对基于索引的update操作，虽然MyISAM可能会逊色Innodb,但是那么高并发的写，从库能否追的上也是一个问题，还不如通过多实例分库分表架构来解决。</p>\n<p>　　7、如果是用MyISAM的话，merge引擎可以大大加快应用部门的开发速度，他们只要对这个merge表做一些select count(*)操作，非常适合大项目总量约几亿的rows某一类型(如日志，调查统计)的业务表。</p>\n<p>　　当然Innodb也不是绝对不用，用事务的项目如模拟炒股项目，我就是用Innodb的，活跃用户20多万时候，也是很轻松应付了，因此我个人也是很喜欢Innodb的，只是如果从数据库平台应用出发，我还是会首选MyISAM。</p>\n<p>　　另外，可能有人会说你MyISAM无法抗太多写操作，但是我可以通过架构来弥补，说个我现有用的数据库平台容量：主从数据总量在几百T以上，每天十多亿 pv的动态页面，还有几个大项目是通过数据接口方式调用未算进pv总数，(其中包括一个大项目因为初期memcached没部署,导致单台数据库每天处理 9千万的查询)。而我的整体数据库服务器平均负载都在0.5-1左右。<br>　　[end]</p>"},{"layout":"post","title":"你好2017","_content":"\n> 现在是17年 好久没有更新博客了 想起来从15年暑假来北京实习到现在已经1年多了 经历了很多 慢慢也成长了 一直有很多话想说 真要写的时候有发现无从写起\n","source":"_posts/201701/2017-01-01-你好2017.md","raw":"---\nlayout : post\ntitle : 你好2017\ncategory : 随笔\ntags : [Essay]\n---\n\n> 现在是17年 好久没有更新博客了 想起来从15年暑假来北京实习到现在已经1年多了 经历了很多 慢慢也成长了 一直有很多话想说 真要写的时候有发现无从写起\n","slug":"201701-2017-01-01-你好2017","published":1,"date":"2018-04-12T15:20:38.839Z","updated":"2018-04-12T15:20:38.839Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7m007vass6s9cg1nzn","content":"<blockquote>\n<p>现在是17年 好久没有更新博客了 想起来从15年暑假来北京实习到现在已经1年多了 经历了很多 慢慢也成长了 一直有很多话想说 真要写的时候有发现无从写起</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>现在是17年 好久没有更新博客了 想起来从15年暑假来北京实习到现在已经1年多了 经历了很多 慢慢也成长了 一直有很多话想说 真要写的时候有发现无从写起</p>\n</blockquote>\n"},{"layout":"post","title":"Vue目录结构","_content":"\n## vuex目录结构\n\n> |--modules <br />\n  |-----saerch.js <br />\n  |-----searchGrouop.js <br />\n  |--actions.js <br />\n  |--getters.js <br />\n  |--middlewares.js <br />\n  |--mutation-types.js <br />\n  |--store.js <br />\n\n  <!--more-->\n\n### 各文件使用说明\n\n#### modules\n\nmodule 也就是vuex概念里的store,这里模块拆分了,存放我们实际项目中要使用的vuex模块,一般可以针对组件级别定义.\n例如这里我们定义了search.js和searchGroup.js 然而module最后会在store.js中统一使用\n\n\n\n#### actions\n\n这里定义我们vue组件要操作的动作事件, 比如请求一个异步操作,获取其他组件的状态等\n\n#### getter\n\ngetters 定义公用的getters处理 ,例如正常组件里想computed一个状态但在vuex里面不知道怎么处理，就可以在这里处理\n\n#### middlewares\n\nmiddlewares中间件处理的东西，这里主要开发时候在控制台查看一些处理日志，vuex本身自带,其他没有研究过\n\n#### mutation-types\n\n定义mutation里用到的方法常量值，统一处理在这里，一般都是业务字符串常量\n\n#### store\n\nstore.js核心文件，这里就是vuex基本的写法了，先引用vue和vuex 然后user(Vuex),把定义好的modules,middlewares引入进来然后返回一个Vuex.stor\n","source":"_posts/201702/2017-02-06-vuex.md","raw":"---\nlayout : post\ntitle : Vue目录结构\ncategory : Vue\ntags : Vue\n---\n\n## vuex目录结构\n\n> |--modules <br />\n  |-----saerch.js <br />\n  |-----searchGrouop.js <br />\n  |--actions.js <br />\n  |--getters.js <br />\n  |--middlewares.js <br />\n  |--mutation-types.js <br />\n  |--store.js <br />\n\n  <!--more-->\n\n### 各文件使用说明\n\n#### modules\n\nmodule 也就是vuex概念里的store,这里模块拆分了,存放我们实际项目中要使用的vuex模块,一般可以针对组件级别定义.\n例如这里我们定义了search.js和searchGroup.js 然而module最后会在store.js中统一使用\n\n\n\n#### actions\n\n这里定义我们vue组件要操作的动作事件, 比如请求一个异步操作,获取其他组件的状态等\n\n#### getter\n\ngetters 定义公用的getters处理 ,例如正常组件里想computed一个状态但在vuex里面不知道怎么处理，就可以在这里处理\n\n#### middlewares\n\nmiddlewares中间件处理的东西，这里主要开发时候在控制台查看一些处理日志，vuex本身自带,其他没有研究过\n\n#### mutation-types\n\n定义mutation里用到的方法常量值，统一处理在这里，一般都是业务字符串常量\n\n#### store\n\nstore.js核心文件，这里就是vuex基本的写法了，先引用vue和vuex 然后user(Vuex),把定义好的modules,middlewares引入进来然后返回一个Vuex.stor\n","slug":"201702-2017-02-06-vuex","published":1,"date":"2018-04-12T15:20:38.839Z","updated":"2018-04-12T15:20:38.839Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7n007zass6h15xtbiy","content":"<h2 id=\"vuex目录结构\"><a href=\"#vuex目录结构\" class=\"headerlink\" title=\"vuex目录结构\"></a>vuex目录结构</h2><blockquote>\n<p>|–modules <br><br>  |—–saerch.js <br><br>  |—–searchGrouop.js <br><br>  |–actions.js <br><br>  |–getters.js <br><br>  |–middlewares.js <br><br>  |–mutation-types.js <br><br>  |–store.js <br></p>\n</blockquote>\n  <a id=\"more\"></a>\n<h3 id=\"各文件使用说明\"><a href=\"#各文件使用说明\" class=\"headerlink\" title=\"各文件使用说明\"></a>各文件使用说明</h3><h4 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h4><p>module 也就是vuex概念里的store,这里模块拆分了,存放我们实际项目中要使用的vuex模块,一般可以针对组件级别定义.<br>例如这里我们定义了search.js和searchGroup.js 然而module最后会在store.js中统一使用</p>\n<h4 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h4><p>这里定义我们vue组件要操作的动作事件, 比如请求一个异步操作,获取其他组件的状态等</p>\n<h4 id=\"getter\"><a href=\"#getter\" class=\"headerlink\" title=\"getter\"></a>getter</h4><p>getters 定义公用的getters处理 ,例如正常组件里想computed一个状态但在vuex里面不知道怎么处理，就可以在这里处理</p>\n<h4 id=\"middlewares\"><a href=\"#middlewares\" class=\"headerlink\" title=\"middlewares\"></a>middlewares</h4><p>middlewares中间件处理的东西，这里主要开发时候在控制台查看一些处理日志，vuex本身自带,其他没有研究过</p>\n<h4 id=\"mutation-types\"><a href=\"#mutation-types\" class=\"headerlink\" title=\"mutation-types\"></a>mutation-types</h4><p>定义mutation里用到的方法常量值，统一处理在这里，一般都是业务字符串常量</p>\n<h4 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h4><p>store.js核心文件，这里就是vuex基本的写法了，先引用vue和vuex 然后user(Vuex),把定义好的modules,middlewares引入进来然后返回一个Vuex.stor</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"vuex目录结构\"><a href=\"#vuex目录结构\" class=\"headerlink\" title=\"vuex目录结构\"></a>vuex目录结构</h2><blockquote>\n<p>|–modules <br><br>  |—–saerch.js <br><br>  |—–searchGrouop.js <br><br>  |–actions.js <br><br>  |–getters.js <br><br>  |–middlewares.js <br><br>  |–mutation-types.js <br><br>  |–store.js <br></p>\n</blockquote>","more":"<h3 id=\"各文件使用说明\"><a href=\"#各文件使用说明\" class=\"headerlink\" title=\"各文件使用说明\"></a>各文件使用说明</h3><h4 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h4><p>module 也就是vuex概念里的store,这里模块拆分了,存放我们实际项目中要使用的vuex模块,一般可以针对组件级别定义.<br>例如这里我们定义了search.js和searchGroup.js 然而module最后会在store.js中统一使用</p>\n<h4 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h4><p>这里定义我们vue组件要操作的动作事件, 比如请求一个异步操作,获取其他组件的状态等</p>\n<h4 id=\"getter\"><a href=\"#getter\" class=\"headerlink\" title=\"getter\"></a>getter</h4><p>getters 定义公用的getters处理 ,例如正常组件里想computed一个状态但在vuex里面不知道怎么处理，就可以在这里处理</p>\n<h4 id=\"middlewares\"><a href=\"#middlewares\" class=\"headerlink\" title=\"middlewares\"></a>middlewares</h4><p>middlewares中间件处理的东西，这里主要开发时候在控制台查看一些处理日志，vuex本身自带,其他没有研究过</p>\n<h4 id=\"mutation-types\"><a href=\"#mutation-types\" class=\"headerlink\" title=\"mutation-types\"></a>mutation-types</h4><p>定义mutation里用到的方法常量值，统一处理在这里，一般都是业务字符串常量</p>\n<h4 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h4><p>store.js核心文件，这里就是vuex基本的写法了，先引用vue和vuex 然后user(Vuex),把定义好的modules,middlewares引入进来然后返回一个Vuex.stor</p>"},{"layout":"post","title":"Redis锁的正确姿势","_content":"\nredis是php的好朋友，在php写业务过程中，有时候会使用到锁的概念，同时只能有一个人可以操作某个行为。这个时候我们就要用到锁。锁的方式有好几种，php不能在内存中用锁，不能使用zookeeper加锁，使用数据库做锁又消耗比较大，这个时候我们一般会选用redis做锁机制。\n\n<!--more-->\n\n> setnx\n\n锁在redis中最简单的数据结构就是string。最早的时候，上锁的操作一般使用setnx，这个命令是当:lock不存在的时候set一个val，或许你还会记得使用expire来增加锁的过期，解锁操作就是使用del命令，伪代码如下：\n\n```php\nif (Redis::setnx(\"my:lock\", 1)) {\n    Redis::expire(\"my:lock\", 10);\n    // ... do something\n\n    Redis::del(\"my:lock\")\n}\n```\n\n这里其实是有问题的，问题就在于setnx和expire中间如果遇到crash等行为，可能这个lock就不会被释放了。于是进一步的优化方案可能是在lock中存储timestamp。判断timestamp的长短。\n\n> set\n\n现在官方建议直接使用set来实现锁。我们可以使用set命令来替代setnx，就是下面这个样子\n\n```php\nif (Redis::set(\"my:lock\", 1, \"nx\", \"ex\", 10)) {\n    ... do something\n\n    Redis::del(\"my:lock\")\n}\n```\n\n上面的代码把my:lock设置为1，当且仅当这个lock不存在的时候，设置完成之后设置过期时间为10。\n\n获取锁的机制是对了，但是删除锁的机制直接使用del是不对的。因为有可能导致误删别人的锁的情况。\n\n比如，这个锁我上了10s，但是我处理的时间比10s更长，到了10s，这个锁自动过期了，被别人取走了，并且对它重新上锁了。那么这个时候，我再调用Redis::del就是删除别人建立的锁了。\n\n官方对解锁的命令也有建议，建议使用lua脚本，先进行get，再进行del\n\n程序变成：\n\n```php\n$token = rand(1, 100000);\n\nfunction lock() {\n    return Redis::set(\"my:lock\", $token, \"nx\", \"ex\", 10);\n}\n\nfunction unlock() {\n    $script = `\nif redis.call(\"get\",KEYS[1]) == ARGV[1]\nthen\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend    \n    `\n    return Redis::eval($script, \"my:lock\", $token)\n}\n\nif (lock()) {\n    // do something\n\n    unlock();\n}\n```\n\n这里的token是一个随机数，当lock的时候，往redis的my:lock中存的是这个token，unlock的时候，先get一下lock中的token，如果和我要删除的token是一致的，说明这个锁是之前我set的，否则的话，说明这个锁已经过期，是别人set的，我就不应该对它进行任何操作。\n\n所以：不要再使用setnx，直接使用set进行锁实现。\n","source":"_posts/201704/2017-04-05-redis锁的正确姿势.md","raw":"---\nlayout : post\ntitle : Redis锁的正确姿势\ncategory : PHP\ntags : PHP Redis\n---\n\nredis是php的好朋友，在php写业务过程中，有时候会使用到锁的概念，同时只能有一个人可以操作某个行为。这个时候我们就要用到锁。锁的方式有好几种，php不能在内存中用锁，不能使用zookeeper加锁，使用数据库做锁又消耗比较大，这个时候我们一般会选用redis做锁机制。\n\n<!--more-->\n\n> setnx\n\n锁在redis中最简单的数据结构就是string。最早的时候，上锁的操作一般使用setnx，这个命令是当:lock不存在的时候set一个val，或许你还会记得使用expire来增加锁的过期，解锁操作就是使用del命令，伪代码如下：\n\n```php\nif (Redis::setnx(\"my:lock\", 1)) {\n    Redis::expire(\"my:lock\", 10);\n    // ... do something\n\n    Redis::del(\"my:lock\")\n}\n```\n\n这里其实是有问题的，问题就在于setnx和expire中间如果遇到crash等行为，可能这个lock就不会被释放了。于是进一步的优化方案可能是在lock中存储timestamp。判断timestamp的长短。\n\n> set\n\n现在官方建议直接使用set来实现锁。我们可以使用set命令来替代setnx，就是下面这个样子\n\n```php\nif (Redis::set(\"my:lock\", 1, \"nx\", \"ex\", 10)) {\n    ... do something\n\n    Redis::del(\"my:lock\")\n}\n```\n\n上面的代码把my:lock设置为1，当且仅当这个lock不存在的时候，设置完成之后设置过期时间为10。\n\n获取锁的机制是对了，但是删除锁的机制直接使用del是不对的。因为有可能导致误删别人的锁的情况。\n\n比如，这个锁我上了10s，但是我处理的时间比10s更长，到了10s，这个锁自动过期了，被别人取走了，并且对它重新上锁了。那么这个时候，我再调用Redis::del就是删除别人建立的锁了。\n\n官方对解锁的命令也有建议，建议使用lua脚本，先进行get，再进行del\n\n程序变成：\n\n```php\n$token = rand(1, 100000);\n\nfunction lock() {\n    return Redis::set(\"my:lock\", $token, \"nx\", \"ex\", 10);\n}\n\nfunction unlock() {\n    $script = `\nif redis.call(\"get\",KEYS[1]) == ARGV[1]\nthen\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend    \n    `\n    return Redis::eval($script, \"my:lock\", $token)\n}\n\nif (lock()) {\n    // do something\n\n    unlock();\n}\n```\n\n这里的token是一个随机数，当lock的时候，往redis的my:lock中存的是这个token，unlock的时候，先get一下lock中的token，如果和我要删除的token是一致的，说明这个锁是之前我set的，否则的话，说明这个锁已经过期，是别人set的，我就不应该对它进行任何操作。\n\n所以：不要再使用setnx，直接使用set进行锁实现。\n","slug":"201704-2017-04-05-redis锁的正确姿势","published":1,"date":"2018-04-12T15:20:38.840Z","updated":"2018-04-12T15:20:38.840Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7o0083ass6x9i57dhi","content":"<p>redis是php的好朋友，在php写业务过程中，有时候会使用到锁的概念，同时只能有一个人可以操作某个行为。这个时候我们就要用到锁。锁的方式有好几种，php不能在内存中用锁，不能使用zookeeper加锁，使用数据库做锁又消耗比较大，这个时候我们一般会选用redis做锁机制。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>setnx</p>\n</blockquote>\n<p>锁在redis中最简单的数据结构就是string。最早的时候，上锁的操作一般使用setnx，这个命令是当:lock不存在的时候set一个val，或许你还会记得使用expire来增加锁的过期，解锁操作就是使用del命令，伪代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Redis::setnx(<span class=\"string\">\"my:lock\"</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">    Redis::expire(<span class=\"string\">\"my:lock\"</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ... do something</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Redis::del(<span class=\"string\">\"my:lock\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里其实是有问题的，问题就在于setnx和expire中间如果遇到crash等行为，可能这个lock就不会被释放了。于是进一步的优化方案可能是在lock中存储timestamp。判断timestamp的长短。</p>\n<blockquote>\n<p>set</p>\n</blockquote>\n<p>现在官方建议直接使用set来实现锁。我们可以使用set命令来替代setnx，就是下面这个样子</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Redis::set(<span class=\"string\">\"my:lock\"</span>, <span class=\"number\">1</span>, <span class=\"string\">\"nx\"</span>, <span class=\"string\">\"ex\"</span>, <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">    ... <span class=\"keyword\">do</span> something</span><br><span class=\"line\"></span><br><span class=\"line\">    Redis::del(<span class=\"string\">\"my:lock\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码把my:lock设置为1，当且仅当这个lock不存在的时候，设置完成之后设置过期时间为10。</p>\n<p>获取锁的机制是对了，但是删除锁的机制直接使用del是不对的。因为有可能导致误删别人的锁的情况。</p>\n<p>比如，这个锁我上了10s，但是我处理的时间比10s更长，到了10s，这个锁自动过期了，被别人取走了，并且对它重新上锁了。那么这个时候，我再调用Redis::del就是删除别人建立的锁了。</p>\n<p>官方对解锁的命令也有建议，建议使用lua脚本，先进行get，再进行del</p>\n<p>程序变成：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$token = rand(<span class=\"number\">1</span>, <span class=\"number\">100000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Redis::set(<span class=\"string\">\"my:lock\"</span>, $token, <span class=\"string\">\"nx\"</span>, <span class=\"string\">\"ex\"</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    $script = `</span><br><span class=\"line\"><span class=\"keyword\">if</span> redis.call(<span class=\"string\">\"get\"</span>,KEYS[<span class=\"number\">1</span>]) == ARGV[<span class=\"number\">1</span>]</span><br><span class=\"line\">then</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redis.call(<span class=\"string\">\"del\"</span>,KEYS[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">end    </span><br><span class=\"line\">    `</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Redis::eval($script, <span class=\"string\">\"my:lock\"</span>, $token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (lock()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\"></span><br><span class=\"line\">    unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的token是一个随机数，当lock的时候，往redis的my:lock中存的是这个token，unlock的时候，先get一下lock中的token，如果和我要删除的token是一致的，说明这个锁是之前我set的，否则的话，说明这个锁已经过期，是别人set的，我就不应该对它进行任何操作。</p>\n<p>所以：不要再使用setnx，直接使用set进行锁实现。</p>\n","site":{"data":{}},"excerpt":"<p>redis是php的好朋友，在php写业务过程中，有时候会使用到锁的概念，同时只能有一个人可以操作某个行为。这个时候我们就要用到锁。锁的方式有好几种，php不能在内存中用锁，不能使用zookeeper加锁，使用数据库做锁又消耗比较大，这个时候我们一般会选用redis做锁机制。</p>","more":"<blockquote>\n<p>setnx</p>\n</blockquote>\n<p>锁在redis中最简单的数据结构就是string。最早的时候，上锁的操作一般使用setnx，这个命令是当:lock不存在的时候set一个val，或许你还会记得使用expire来增加锁的过期，解锁操作就是使用del命令，伪代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Redis::setnx(<span class=\"string\">\"my:lock\"</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">    Redis::expire(<span class=\"string\">\"my:lock\"</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ... do something</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Redis::del(<span class=\"string\">\"my:lock\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里其实是有问题的，问题就在于setnx和expire中间如果遇到crash等行为，可能这个lock就不会被释放了。于是进一步的优化方案可能是在lock中存储timestamp。判断timestamp的长短。</p>\n<blockquote>\n<p>set</p>\n</blockquote>\n<p>现在官方建议直接使用set来实现锁。我们可以使用set命令来替代setnx，就是下面这个样子</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Redis::set(<span class=\"string\">\"my:lock\"</span>, <span class=\"number\">1</span>, <span class=\"string\">\"nx\"</span>, <span class=\"string\">\"ex\"</span>, <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">    ... <span class=\"keyword\">do</span> something</span><br><span class=\"line\"></span><br><span class=\"line\">    Redis::del(<span class=\"string\">\"my:lock\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码把my:lock设置为1，当且仅当这个lock不存在的时候，设置完成之后设置过期时间为10。</p>\n<p>获取锁的机制是对了，但是删除锁的机制直接使用del是不对的。因为有可能导致误删别人的锁的情况。</p>\n<p>比如，这个锁我上了10s，但是我处理的时间比10s更长，到了10s，这个锁自动过期了，被别人取走了，并且对它重新上锁了。那么这个时候，我再调用Redis::del就是删除别人建立的锁了。</p>\n<p>官方对解锁的命令也有建议，建议使用lua脚本，先进行get，再进行del</p>\n<p>程序变成：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$token = rand(<span class=\"number\">1</span>, <span class=\"number\">100000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Redis::set(<span class=\"string\">\"my:lock\"</span>, $token, <span class=\"string\">\"nx\"</span>, <span class=\"string\">\"ex\"</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    $script = `</span><br><span class=\"line\"><span class=\"keyword\">if</span> redis.call(<span class=\"string\">\"get\"</span>,KEYS[<span class=\"number\">1</span>]) == ARGV[<span class=\"number\">1</span>]</span><br><span class=\"line\">then</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redis.call(<span class=\"string\">\"del\"</span>,KEYS[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">end    </span><br><span class=\"line\">    `</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Redis::eval($script, <span class=\"string\">\"my:lock\"</span>, $token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (lock()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\"></span><br><span class=\"line\">    unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的token是一个随机数，当lock的时候，往redis的my:lock中存的是这个token，unlock的时候，先get一下lock中的token，如果和我要删除的token是一致的，说明这个锁是之前我set的，否则的话，说明这个锁已经过期，是别人set的，我就不应该对它进行任何操作。</p>\n<p>所以：不要再使用setnx，直接使用set进行锁实现。</p>"},{"layout":"post","title":"php处理web的请求流程","_content":"\nPHP作为世界上最好的编程语音，被广泛的运用到Web开发中。因为其语法和C类似，有着非常平缓的学习曲线，越来越多的人使用PHP进行Web产品的快速开发。PHP世界里也涌现了很多开发框架，比如Laravel、ThinkPHP等，但不论何总框架，他们在处理Web请求时的模式都是一样的，本文首先阐述PHP开发Web应用的基本架构，然后分别分析Laravel和ThinkPHP在处理Web请求时的处理流程。\n\n<!--more-->\n\n### PHP开发Web应用的基本架构\n***\n\nPHP开发Web应用时所以的请求需要指向具体的入口文件。WebServer是一个内容分发者，他接受用户的请求后，如果是请求的是css、js等静态文件，WebServer会找到这个文件，然后发送给浏览器；如果请求的是/index.php，根据配置文件，WebServer知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。\n![enter image description here](https://segmentfault.com/img/bVLftp?w=455&h=233)\n\n\n\nWebServer会依据CGI协议，将请求的Url、数据、Http Header等信息发送给PHP解析器，接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。整个处理过程如上图所示。\n\n### FastCGI\n***\n\n这里的PHP解析器就是实现了CGI协议的程序，每次请求到来时他会解析php.ini文件，初始化执行环境，这就导致PHP解析器性能低下，于是就出现了CGI的改良升级版FastCGI。FastCGI是一种语言无关的协议，用来沟通程序(如PHP, Python, Java)和Web服务器(Apache2, Nginx), 理论上任何语言编写的程序都可以通过FastCGI来提供Web服务。它的特点是会在动态分配处理进程给请求，以达到提高效率的目的，大多数FastCGI实现都会维护一个进程池。FastCGI会先启一个master进程，解析配置文件，初始化执行环境，然后再启动多个worker进程。当请求过来时，master进程会这个请求传递给一个worker进程，然后立即接受下一个请求。而且当worker进程不够用时，master可以根据配置预先启动几个worker进程等待；当然空闲worker进程太多时，也会自动关闭，这样就提高了性能，节约了系统资源。整个过程FastCGI扮演着对CGI进程进行管理的角色。\n\n### PHP-FPM\n***\n\nPHP-FPM是一个专门针对PHP实现了FastCGI协议的程序，它实际上就是一个PHP FastCGI进程管理器，负责管理一个进程池，调用PHP解析器来处理来自Web服务器的请求。PHP-FPM能够对php.ini文件的修改进行平滑过度。\n\n新建一个helloworld.php文件，写入下列代码\n\n```php\n<?php\n   echo \"helloworld,\";    \n   echo \"this is my first php script.\";\n   echo phpinfo();\n?>\n```\n配置好WebServer和PHP-FPM等php运行环境后，在浏览器中访问该文件就可以直接得到输出。\n\n### 基于PHP的Web框架\n***\n\n#### PHP Web框架是\n> 基于某模式将PHP开发常用功能封装实现使开发者快速开发的工具\n\n#### 它主要的任务包括：\n\n- 代码重用：定义包、类、函数的放置和加载规则，建议直接整合Composer及其AutoLoad特性。\n- 请求的分发管理：这个就是路由，Rest风的框架喜欢Rewrite，简单的一点的框架主要通过参数来定位模块和方法所在。\n- 配置文件管理：加载和动态加载配置数据\n- 错误和异常管理：异常捕捉、错误日志记录以及错误码规范。\n- Layout和模板引擎：如何规划页面布局、widget如何重用、ajax页面如何结合、过期- session如何重定向；数据和模板怎么渲染成HTML，是否压缩和设置过期头。\n- 数据库：如何融入控制器；支持什么样的driver；考虑主从分离的扩展性；以及是否使用ORM\n\n> #### ThinkPHP3.2框架处理流程分析\n\nTP的设计逻辑就是简单粗暴，面对问题解决问题，所以他的处理流程是基于面向过程的思想，而没有采用面向对象的依赖注入、控制反转等思路。他的自动加载、错误处理通过php原生函数的回调来实现。TP处理每次请求要经过四个步骤如下图所示：\n![enter image description here](https://segmentfault.com/img/bVLfvf?w=189&h=441)\n\n\n#### 调用应用路口index.php\n\nindex.php是TP的入口文件，所有的请求都由该文件接管，它的工作也很简单主要是引入ThinkPHP入口文件\n\n```php\n<?php\n\n\n// 应用入口文件\n\n\n\n\n\n// 检测PHP环境\n\n\nif(version_compare(PHP_VERSION,'5.3.0','<'))  die('require\n PHP > 5.3.0 !');\n\n\n\n\n\n// 开启调试模式 建议开发阶段开启 部署阶段注释或者设为false\n\n\ndefine('APP_DEBUG',False);\n\n\n\n\n\n// 定义应用目录\n\n\ndefine('APP_PATH','./Application/');\n\n\n\n\n\n// 引入ThinkPHP入口文件\n\n\nrequire\n'./ThinkPHP/ThinkPHP.php';\n```\n\n#### 载入框架入口文件ThinkPHP.php\n\n在ThinkPHP.php中主要记录初始运行时间和内存开销，然后完成系统常量判断及定义，最后载入框架引导类（Think\\Think）并执行Think::start方法进行应用初始化。\n\n#### 应用初始化Think\\Think:start()\n应用初始化首先设置错误处理机制和自动加载机制\n\n```php\nstatic public function start() {\n      // 注册AUTOLOAD方法\n      spl_autoload_register('Think\\Think::autoload');      \n      // 设定错误和异常处理\n      register_shutdown_function('Think\\Think::fatalError');\n      set_error_handler('Think\\Think::appError');\n      set_exception_handler('Think\\Think::appException');\n```\n然后加载相关配置文件和运行模式定义文件，最后调用Think\\App类的run方法启动应用\n\n#### 运行应用App::run()\n\n此后TP进入请求处理管道，TP为管道中定义了14个事件，每个事件都可以绑定回调函数，请求到达管道后依次触发这些事件，事件触发后就会调用绑定到事件的回调函数，整个管道的生命周期由app_init开始，由app_end结束。具体实现上，TP将这些事件命名为标签（位），也可以称之为钩子，将回调函数命名为行为，当应用程序运行到标签的时候，就会被拦截下来，统一执行相关的行为。\n\n> ### Laravel框架处理流程分析\n\n#### 统一入口\nLaravel框架使用了统一入口，入口文件：/public/index.php\n\n```php\n<?php\n//自动加载文件设置\nrequire __DIR__.'/../bootstrap/autoload.php';\n\n//初始化服务容器（可以查看一下关于‘服务容器’的相关文档）\n$app = require_once __DIR__.'/../bootstrap/app.php';\n\n//通过服务容器生成一个kernel类的实例（Illuminate\\Contracts\\Http\\Kernel实际上只是一个接口，真正生成的实例是App\\Http\\Kernel类，至于怎么把接口和类关联起来，请查看Contracts相关文档）\n$kernel = $app->make('Illuminate\\Contracts\\Http\\Kernel');\n\n//运行Kernel类的handle方法，主要动作是运行middleware和启动URL相关的Contrller\n$response = $kernel->handle(\n    $request = Illuminate\\Http\\Request::capture()\n);\n\n//控制器返回结果之后的操作，暂时还没看，以后补上\n$response->send();\n\n$kernel->terminate($request, $response);\n```\n#### 自动加载文件\n\nlaravel的自动加载，其实也就是Composer的自动加载\nComposer根据声明的依赖关系，从相关库的源下载代码文件，并根据依赖关系在 Composer 目录下生成供类自动加载的 PHP 脚本，使用的时候，项目开始处引入 “/vendor/autoload.php” 文件，就可以直接实例化这些第三方类库中的类了。\n\n#### 服务容器——Laravel真正的核心\n\n服务容器，也叫IoC容器，其实包含了依赖注入(DI)和控制反转(IoC)两部分，是Laravel的真正核心。其他的各种功能模块比如 Route（路由）、Eloquent ORM（数据库 ORM 组件）、Request and Response（请求和响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被使用，其实都是 Laravel 的服务容器负责的。\n\n#### 启动Kernel代码\nKernel实例调用handle方法，意味着Laravel的核心和公用代码已经准备完毕，此项目正式开始运行\n\n代码清单/app/Http/Kernel.php\n\n```php\n<?php\nnamespace\nApp\\Http;\n\n\nuse\nIlluminate\\Foundation\\Http\\Kernel\nas\nHttpKernel;\n\n\nclass\nKernel\nextends\nHttpKernel\n{\n\n\n    //这是在调用路由之前需要启动的中间件,一般都是核心文件，不要修改\n\n\n    protected\n$middleware\n=\n[\n\n\n        'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode',\n\n\n        'Illuminate\\Cookie\\Middleware\\EncryptCookies',\n\n\n        'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse',\n\n\n        'Illuminate\\Session\\Middleware\\StartSession',\n\n\n        'Illuminate\\View\\Middleware\\ShareErrorsFromSession',\n\n\n        'App\\Http\\Middleware\\VerifyCsrfToken',\n\n\n    ];\n\n\n    //这是我们在router.php文件里面或者Controller文件里面，可以使用的Middleware元素，可以自定义加入很多\n\n\n    protected\n$routeMiddleware\n=\n[\n\n\n        'auth'\n=>\n'App\\Http\\Middleware\\Authenticate',\n\n\n        'auth.basic'\n=>\n'Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth',\n\n\n        'guest'\n=>\n'App\\Http\\Middleware\\RedirectIfAuthenticated',\n\n\n        'test'\n=>\n'App\\Http\\Middleware\\testMiddleWare',\n\n\n    ];\n\n\n}\n\n```\n\n可以看到，其实这个文件里面没有handle方法，只有一些属性定义，所以真正的handle方法，实在父类里面实现的\n\n代码清单…/Illuminate/Foundation/Http/Kernel.php\n\n\n```\n//这个很重要，是项目的一些启动引导项，Kernel的重要步骤中，首先就是启动这些文件的bootstrap方法\nprotected $bootstrappers = [\n        //检测环境变量文件是否正常\n        'Illuminate\\Foundation\\Bootstrap\\DetectEnvironment',\n        //取得配置文件，即把/config/下的所有配置文件读取到容器（app()->make('config')可以查看所有配置信息）\n        'Illuminate\\Foundation\\Bootstrap\\LoadConfiguration',\n        //绑定一个名字为log的实例到容器，怎么访问？？（app()->make('log')）\n        'Illuminate\\Foundation\\Bootstrap\\ConfigureLogging',\n        //设置异常抓取信息，这个还没仔细看，但大概就是这个意思\n        'Illuminate\\Foundation\\Bootstrap\\HandleExceptions',\n        //把/config/app.php里面的aliases项利用PHP库函数class_alias创建别名，从此，我们可以使用App::make('app')方式取得实例\n        'Illuminate\\Foundation\\Bootstrap\\RegisterFacades',\n        //把/config/app.php里面的providers项,注册到容器\n        'Illuminate\\Foundation\\Bootstrap\\RegisterProviders',\n        //运行容器中注册的所有的ServiceProvider中得boot方法\n        'Illuminate\\Foundation\\Bootstrap\\BootProviders',\n    ];\n\n  //真正的handle方法\n  public function handle($request)\n    {\n        try\n        {\n            //主要是这行，调度了需要运行的方法\n            return $this->sendRequestThroughRouter($request);\n        }\n        catch (Exception $e)\n        {\n            $this->reportException($e);\n            return $this->renderException($request, $e);\n        }\n    }\n\n    protected function sendRequestThroughRouter($request)\n    {\n        $this->app->instance('request', $request);\n        Facade::clearResolvedInstance('request');\n        //运行上述$bootstrappers里面包含的文件的bootstrap方法，运行的作用，上面已经注释\n        $this->bootstrap();\n        //这是在对URL进行调度之前，也就是运行Route之前，进行的一些准备工作\n        return (new Pipeline($this->app))    \n                    ->send($request)        \n                    //需要运行$this->middleware里包含的中间件\n                    ->through($this->middleware)\n                    //运行完上述中间件之后，调度dispatchToRouter方法，进行Route的操作\n                    ->then($this->dispatchToRouter());\n    }\n\n    //前奏执行完毕之后，进行Route操作\n    protected function dispatchToRouter()\n    {\n        return function($request)\n        {\n            $this->app->instance('request', $request);\n            //跳转到Router类的dispatch方法\n            return $this->router->dispatch($request);\n        };\n    }\n```\n下面就需要根据URL和/app/Http/routes.php文件，进行Route操作\n\n文件清单…/Illuminate/Routing/Router.php\n\n```\npublic\nfunction\ndispatch(Request\n$request)\n\n\n{\n\n\n$this->currentRequest\n=\n$request;\n\n\n//在4.2版本里面，Route有一个筛选属性；5.0之后的版本，被Middleware代替\n\n\n$response\n=\n$this->callFilter('before',\n$request);\n\n\nif\n(is_null($response))\n\n\n{    \n\n\n//继续调度\n\n\n$response\n=\n$this->dispatchToRoute($request);\n\n\n}\n\n\n$response\n=\n$this->prepareResponse($request,\n$response);\n\n\n//在4.2版本里面，Route有一个筛选属性；5.0之后的版本，被Middleware代替\n\n\n$this->callFilter('after',\n$request,\n$response);\n\n\nreturn\n$response;\n\n\n}\n\n\n\n\n\npublic\nfunction\ndispatchToRoute(Request\n$request)\n\n\n{\n\n\n$route\n=\n$this->findRoute($request);\n\n\n$request->setRouteResolver(function()\nuse\n($route)\n\n\n{\n\n\nreturn\n$route;\n\n\n});\n\n\n$this->events->fire('router.matched',\n[$route,\n$request]);\n\n\n$response\n=\n$this->callRouteBefore($route,\n$request);\n\n\nif\n(is_null($response))\n\n\n{\n\n\n//\n 只看这一行，还是调度文件\n\n\n$response\n=\n$this->runRouteWithinStack(\n\n\n$route,\n$request\n\n\n);\n\n\n}\n\n\n$response\n=\n$this->prepareResponse($request,\n$response);\n\n\n$this->callRouteAfter($route,\n$request,\n$response);\n\n\nreturn\n$response;\n\n\n}\n\n\n\n\n\nprotected\nfunction\nrunRouteWithinStack(Route\n$route,\nRequest\n$request)\n\n\n{\n\n\n//\n 取得routes.php里面的Middleware节点\n\n\n$middleware\n=\n$this->gatherRouteMiddlewares($route);\n\n\n//这个有点眼熟\n\n\nreturn\n(new\nPipeline($this->container))\n\n\n->send($request)\n\n\n//执行上述的中间件\n\n\n->through($middleware)\n\n\n->then(function($request)\nuse\n($route)\n\n\n{    \n\n\n//到Controller类了\n\n\nreturn\n$this->prepareResponse(\n\n\n$request,\n\n\n//run控制器\n\n\n$route->run($request)\n\n\n);\n\n\n});\n\n\n}\n\n\n\n\n\npublic\nfunction\nrun(Request\n$request)\n\n\n{\n\n\n$this->container\n=\n$this->container\n?:\nnew\nContainer;\n\n\ntry\n\n\n{\n\n\nif\n(\n!\nis_string($this->action['uses']))\n\n\nreturn\n$this->runCallable($request);\n\n\nif\n($this->customDispatcherIsBound())\n\n\n//实际上是运行了这行\n\n\nreturn\n$this->runWithCustomDispatcher($request);\n\n\n\n\n\n//其实我是直接想运行这行\n\n\nreturn\n$this->runController($request);\n\n\n}\n\n\ncatch\n(HttpResponseException\n$e)\n\n\n{\n\n\nreturn\n$e->getResponse();\n\n\n}\n\n\n}\n\n\n\n\n\n//继续调度，最终调度到.../Illuminate/Routing/ControllerDispatcher.php文件的dispatch方法\n\n\nprotected\nfunction\nrunWithCustomDispatcher(Request\n$request)\n\n\n{\n\n\nlist($class,\n$method)\n=\nexplode('@',\n$this->action['uses']);\n\n\n\n\n\n$dispatcher\n=\n$this->container->make('illuminate.route.dispatcher');\n\n\nreturn\n$dispatcher->dispatch($this,\n$request,\n$class,\n$method);\n}\n```\n文件清单…/Illuminate/Routing/ControllerDispatcher.php\n\n```\npublic\nfunction\ndispatch(Route\n$route,\nRequest\n$request,\n$controller,\n$method)\n\n\n    {\n\n\n        $instance\n=\n$this->makeController($controller);\n\n\n        $this->assignAfter($instance,\n$route,\n$request,\n$method);\n\n\n        $response\n=\n$this->before($instance,\n$route,\n$request,\n$method);\n\n\n        if\n(is_null($response))\n\n\n        {\n\n\n            //还要调度\n\n\n            $response\n=\n$this->callWithinStack(\n\n\n                $instance,\n$route,\n$request,\n$method\n\n\n            );\n\n\n        }\n\n\n        return\n$response;\n\n\n    }\n\n\n\n\n\n    protected\nfunction\ncallWithinStack($instance,\n$route,\n$request,\n$method)\n\n\n    {\n\n\n        //又是Middleware......有没有忘记，官方文档里面Middleware可以加在控制器的构造函数中！！没错，这个Middleware就是在控制器里面申明的\n\n\n        $middleware\n=\n$this->getMiddleware($instance,\n$method);\n\n\n        //又是这个，眼熟吧\n\n\n        return\n(new\nPipeline($this->container))\n\n\n                    ->send($request)\n\n\n                    //再次运行Middleware\n\n\n                    ->through($middleware)\n\n\n                    ->then(function($request)\nuse\n($instance,\n$route,\n$method)\n\n\n                    {    \n\n\n                        运行控制器，返回结果\n\n\n                        return\n$this->call($instance,\n$route,\n$method);\n\n\n                    });\n\n\n    }\n```\n终于到达控制器\n\n\n\n\n> 转自：http://www.eurekao.com/PHP-processing-web-request-analysis/\n","source":"_posts/201703/2017-03-12-php-web请求流程.md","raw":"---\nlayout : post\ntitle : php处理web的请求流程\ncategory : PHP\ntags : PHP\n---\n\nPHP作为世界上最好的编程语音，被广泛的运用到Web开发中。因为其语法和C类似，有着非常平缓的学习曲线，越来越多的人使用PHP进行Web产品的快速开发。PHP世界里也涌现了很多开发框架，比如Laravel、ThinkPHP等，但不论何总框架，他们在处理Web请求时的模式都是一样的，本文首先阐述PHP开发Web应用的基本架构，然后分别分析Laravel和ThinkPHP在处理Web请求时的处理流程。\n\n<!--more-->\n\n### PHP开发Web应用的基本架构\n***\n\nPHP开发Web应用时所以的请求需要指向具体的入口文件。WebServer是一个内容分发者，他接受用户的请求后，如果是请求的是css、js等静态文件，WebServer会找到这个文件，然后发送给浏览器；如果请求的是/index.php，根据配置文件，WebServer知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。\n![enter image description here](https://segmentfault.com/img/bVLftp?w=455&h=233)\n\n\n\nWebServer会依据CGI协议，将请求的Url、数据、Http Header等信息发送给PHP解析器，接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。整个处理过程如上图所示。\n\n### FastCGI\n***\n\n这里的PHP解析器就是实现了CGI协议的程序，每次请求到来时他会解析php.ini文件，初始化执行环境，这就导致PHP解析器性能低下，于是就出现了CGI的改良升级版FastCGI。FastCGI是一种语言无关的协议，用来沟通程序(如PHP, Python, Java)和Web服务器(Apache2, Nginx), 理论上任何语言编写的程序都可以通过FastCGI来提供Web服务。它的特点是会在动态分配处理进程给请求，以达到提高效率的目的，大多数FastCGI实现都会维护一个进程池。FastCGI会先启一个master进程，解析配置文件，初始化执行环境，然后再启动多个worker进程。当请求过来时，master进程会这个请求传递给一个worker进程，然后立即接受下一个请求。而且当worker进程不够用时，master可以根据配置预先启动几个worker进程等待；当然空闲worker进程太多时，也会自动关闭，这样就提高了性能，节约了系统资源。整个过程FastCGI扮演着对CGI进程进行管理的角色。\n\n### PHP-FPM\n***\n\nPHP-FPM是一个专门针对PHP实现了FastCGI协议的程序，它实际上就是一个PHP FastCGI进程管理器，负责管理一个进程池，调用PHP解析器来处理来自Web服务器的请求。PHP-FPM能够对php.ini文件的修改进行平滑过度。\n\n新建一个helloworld.php文件，写入下列代码\n\n```php\n<?php\n   echo \"helloworld,\";    \n   echo \"this is my first php script.\";\n   echo phpinfo();\n?>\n```\n配置好WebServer和PHP-FPM等php运行环境后，在浏览器中访问该文件就可以直接得到输出。\n\n### 基于PHP的Web框架\n***\n\n#### PHP Web框架是\n> 基于某模式将PHP开发常用功能封装实现使开发者快速开发的工具\n\n#### 它主要的任务包括：\n\n- 代码重用：定义包、类、函数的放置和加载规则，建议直接整合Composer及其AutoLoad特性。\n- 请求的分发管理：这个就是路由，Rest风的框架喜欢Rewrite，简单的一点的框架主要通过参数来定位模块和方法所在。\n- 配置文件管理：加载和动态加载配置数据\n- 错误和异常管理：异常捕捉、错误日志记录以及错误码规范。\n- Layout和模板引擎：如何规划页面布局、widget如何重用、ajax页面如何结合、过期- session如何重定向；数据和模板怎么渲染成HTML，是否压缩和设置过期头。\n- 数据库：如何融入控制器；支持什么样的driver；考虑主从分离的扩展性；以及是否使用ORM\n\n> #### ThinkPHP3.2框架处理流程分析\n\nTP的设计逻辑就是简单粗暴，面对问题解决问题，所以他的处理流程是基于面向过程的思想，而没有采用面向对象的依赖注入、控制反转等思路。他的自动加载、错误处理通过php原生函数的回调来实现。TP处理每次请求要经过四个步骤如下图所示：\n![enter image description here](https://segmentfault.com/img/bVLfvf?w=189&h=441)\n\n\n#### 调用应用路口index.php\n\nindex.php是TP的入口文件，所有的请求都由该文件接管，它的工作也很简单主要是引入ThinkPHP入口文件\n\n```php\n<?php\n\n\n// 应用入口文件\n\n\n\n\n\n// 检测PHP环境\n\n\nif(version_compare(PHP_VERSION,'5.3.0','<'))  die('require\n PHP > 5.3.0 !');\n\n\n\n\n\n// 开启调试模式 建议开发阶段开启 部署阶段注释或者设为false\n\n\ndefine('APP_DEBUG',False);\n\n\n\n\n\n// 定义应用目录\n\n\ndefine('APP_PATH','./Application/');\n\n\n\n\n\n// 引入ThinkPHP入口文件\n\n\nrequire\n'./ThinkPHP/ThinkPHP.php';\n```\n\n#### 载入框架入口文件ThinkPHP.php\n\n在ThinkPHP.php中主要记录初始运行时间和内存开销，然后完成系统常量判断及定义，最后载入框架引导类（Think\\Think）并执行Think::start方法进行应用初始化。\n\n#### 应用初始化Think\\Think:start()\n应用初始化首先设置错误处理机制和自动加载机制\n\n```php\nstatic public function start() {\n      // 注册AUTOLOAD方法\n      spl_autoload_register('Think\\Think::autoload');      \n      // 设定错误和异常处理\n      register_shutdown_function('Think\\Think::fatalError');\n      set_error_handler('Think\\Think::appError');\n      set_exception_handler('Think\\Think::appException');\n```\n然后加载相关配置文件和运行模式定义文件，最后调用Think\\App类的run方法启动应用\n\n#### 运行应用App::run()\n\n此后TP进入请求处理管道，TP为管道中定义了14个事件，每个事件都可以绑定回调函数，请求到达管道后依次触发这些事件，事件触发后就会调用绑定到事件的回调函数，整个管道的生命周期由app_init开始，由app_end结束。具体实现上，TP将这些事件命名为标签（位），也可以称之为钩子，将回调函数命名为行为，当应用程序运行到标签的时候，就会被拦截下来，统一执行相关的行为。\n\n> ### Laravel框架处理流程分析\n\n#### 统一入口\nLaravel框架使用了统一入口，入口文件：/public/index.php\n\n```php\n<?php\n//自动加载文件设置\nrequire __DIR__.'/../bootstrap/autoload.php';\n\n//初始化服务容器（可以查看一下关于‘服务容器’的相关文档）\n$app = require_once __DIR__.'/../bootstrap/app.php';\n\n//通过服务容器生成一个kernel类的实例（Illuminate\\Contracts\\Http\\Kernel实际上只是一个接口，真正生成的实例是App\\Http\\Kernel类，至于怎么把接口和类关联起来，请查看Contracts相关文档）\n$kernel = $app->make('Illuminate\\Contracts\\Http\\Kernel');\n\n//运行Kernel类的handle方法，主要动作是运行middleware和启动URL相关的Contrller\n$response = $kernel->handle(\n    $request = Illuminate\\Http\\Request::capture()\n);\n\n//控制器返回结果之后的操作，暂时还没看，以后补上\n$response->send();\n\n$kernel->terminate($request, $response);\n```\n#### 自动加载文件\n\nlaravel的自动加载，其实也就是Composer的自动加载\nComposer根据声明的依赖关系，从相关库的源下载代码文件，并根据依赖关系在 Composer 目录下生成供类自动加载的 PHP 脚本，使用的时候，项目开始处引入 “/vendor/autoload.php” 文件，就可以直接实例化这些第三方类库中的类了。\n\n#### 服务容器——Laravel真正的核心\n\n服务容器，也叫IoC容器，其实包含了依赖注入(DI)和控制反转(IoC)两部分，是Laravel的真正核心。其他的各种功能模块比如 Route（路由）、Eloquent ORM（数据库 ORM 组件）、Request and Response（请求和响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被使用，其实都是 Laravel 的服务容器负责的。\n\n#### 启动Kernel代码\nKernel实例调用handle方法，意味着Laravel的核心和公用代码已经准备完毕，此项目正式开始运行\n\n代码清单/app/Http/Kernel.php\n\n```php\n<?php\nnamespace\nApp\\Http;\n\n\nuse\nIlluminate\\Foundation\\Http\\Kernel\nas\nHttpKernel;\n\n\nclass\nKernel\nextends\nHttpKernel\n{\n\n\n    //这是在调用路由之前需要启动的中间件,一般都是核心文件，不要修改\n\n\n    protected\n$middleware\n=\n[\n\n\n        'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode',\n\n\n        'Illuminate\\Cookie\\Middleware\\EncryptCookies',\n\n\n        'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse',\n\n\n        'Illuminate\\Session\\Middleware\\StartSession',\n\n\n        'Illuminate\\View\\Middleware\\ShareErrorsFromSession',\n\n\n        'App\\Http\\Middleware\\VerifyCsrfToken',\n\n\n    ];\n\n\n    //这是我们在router.php文件里面或者Controller文件里面，可以使用的Middleware元素，可以自定义加入很多\n\n\n    protected\n$routeMiddleware\n=\n[\n\n\n        'auth'\n=>\n'App\\Http\\Middleware\\Authenticate',\n\n\n        'auth.basic'\n=>\n'Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth',\n\n\n        'guest'\n=>\n'App\\Http\\Middleware\\RedirectIfAuthenticated',\n\n\n        'test'\n=>\n'App\\Http\\Middleware\\testMiddleWare',\n\n\n    ];\n\n\n}\n\n```\n\n可以看到，其实这个文件里面没有handle方法，只有一些属性定义，所以真正的handle方法，实在父类里面实现的\n\n代码清单…/Illuminate/Foundation/Http/Kernel.php\n\n\n```\n//这个很重要，是项目的一些启动引导项，Kernel的重要步骤中，首先就是启动这些文件的bootstrap方法\nprotected $bootstrappers = [\n        //检测环境变量文件是否正常\n        'Illuminate\\Foundation\\Bootstrap\\DetectEnvironment',\n        //取得配置文件，即把/config/下的所有配置文件读取到容器（app()->make('config')可以查看所有配置信息）\n        'Illuminate\\Foundation\\Bootstrap\\LoadConfiguration',\n        //绑定一个名字为log的实例到容器，怎么访问？？（app()->make('log')）\n        'Illuminate\\Foundation\\Bootstrap\\ConfigureLogging',\n        //设置异常抓取信息，这个还没仔细看，但大概就是这个意思\n        'Illuminate\\Foundation\\Bootstrap\\HandleExceptions',\n        //把/config/app.php里面的aliases项利用PHP库函数class_alias创建别名，从此，我们可以使用App::make('app')方式取得实例\n        'Illuminate\\Foundation\\Bootstrap\\RegisterFacades',\n        //把/config/app.php里面的providers项,注册到容器\n        'Illuminate\\Foundation\\Bootstrap\\RegisterProviders',\n        //运行容器中注册的所有的ServiceProvider中得boot方法\n        'Illuminate\\Foundation\\Bootstrap\\BootProviders',\n    ];\n\n  //真正的handle方法\n  public function handle($request)\n    {\n        try\n        {\n            //主要是这行，调度了需要运行的方法\n            return $this->sendRequestThroughRouter($request);\n        }\n        catch (Exception $e)\n        {\n            $this->reportException($e);\n            return $this->renderException($request, $e);\n        }\n    }\n\n    protected function sendRequestThroughRouter($request)\n    {\n        $this->app->instance('request', $request);\n        Facade::clearResolvedInstance('request');\n        //运行上述$bootstrappers里面包含的文件的bootstrap方法，运行的作用，上面已经注释\n        $this->bootstrap();\n        //这是在对URL进行调度之前，也就是运行Route之前，进行的一些准备工作\n        return (new Pipeline($this->app))    \n                    ->send($request)        \n                    //需要运行$this->middleware里包含的中间件\n                    ->through($this->middleware)\n                    //运行完上述中间件之后，调度dispatchToRouter方法，进行Route的操作\n                    ->then($this->dispatchToRouter());\n    }\n\n    //前奏执行完毕之后，进行Route操作\n    protected function dispatchToRouter()\n    {\n        return function($request)\n        {\n            $this->app->instance('request', $request);\n            //跳转到Router类的dispatch方法\n            return $this->router->dispatch($request);\n        };\n    }\n```\n下面就需要根据URL和/app/Http/routes.php文件，进行Route操作\n\n文件清单…/Illuminate/Routing/Router.php\n\n```\npublic\nfunction\ndispatch(Request\n$request)\n\n\n{\n\n\n$this->currentRequest\n=\n$request;\n\n\n//在4.2版本里面，Route有一个筛选属性；5.0之后的版本，被Middleware代替\n\n\n$response\n=\n$this->callFilter('before',\n$request);\n\n\nif\n(is_null($response))\n\n\n{    \n\n\n//继续调度\n\n\n$response\n=\n$this->dispatchToRoute($request);\n\n\n}\n\n\n$response\n=\n$this->prepareResponse($request,\n$response);\n\n\n//在4.2版本里面，Route有一个筛选属性；5.0之后的版本，被Middleware代替\n\n\n$this->callFilter('after',\n$request,\n$response);\n\n\nreturn\n$response;\n\n\n}\n\n\n\n\n\npublic\nfunction\ndispatchToRoute(Request\n$request)\n\n\n{\n\n\n$route\n=\n$this->findRoute($request);\n\n\n$request->setRouteResolver(function()\nuse\n($route)\n\n\n{\n\n\nreturn\n$route;\n\n\n});\n\n\n$this->events->fire('router.matched',\n[$route,\n$request]);\n\n\n$response\n=\n$this->callRouteBefore($route,\n$request);\n\n\nif\n(is_null($response))\n\n\n{\n\n\n//\n 只看这一行，还是调度文件\n\n\n$response\n=\n$this->runRouteWithinStack(\n\n\n$route,\n$request\n\n\n);\n\n\n}\n\n\n$response\n=\n$this->prepareResponse($request,\n$response);\n\n\n$this->callRouteAfter($route,\n$request,\n$response);\n\n\nreturn\n$response;\n\n\n}\n\n\n\n\n\nprotected\nfunction\nrunRouteWithinStack(Route\n$route,\nRequest\n$request)\n\n\n{\n\n\n//\n 取得routes.php里面的Middleware节点\n\n\n$middleware\n=\n$this->gatherRouteMiddlewares($route);\n\n\n//这个有点眼熟\n\n\nreturn\n(new\nPipeline($this->container))\n\n\n->send($request)\n\n\n//执行上述的中间件\n\n\n->through($middleware)\n\n\n->then(function($request)\nuse\n($route)\n\n\n{    \n\n\n//到Controller类了\n\n\nreturn\n$this->prepareResponse(\n\n\n$request,\n\n\n//run控制器\n\n\n$route->run($request)\n\n\n);\n\n\n});\n\n\n}\n\n\n\n\n\npublic\nfunction\nrun(Request\n$request)\n\n\n{\n\n\n$this->container\n=\n$this->container\n?:\nnew\nContainer;\n\n\ntry\n\n\n{\n\n\nif\n(\n!\nis_string($this->action['uses']))\n\n\nreturn\n$this->runCallable($request);\n\n\nif\n($this->customDispatcherIsBound())\n\n\n//实际上是运行了这行\n\n\nreturn\n$this->runWithCustomDispatcher($request);\n\n\n\n\n\n//其实我是直接想运行这行\n\n\nreturn\n$this->runController($request);\n\n\n}\n\n\ncatch\n(HttpResponseException\n$e)\n\n\n{\n\n\nreturn\n$e->getResponse();\n\n\n}\n\n\n}\n\n\n\n\n\n//继续调度，最终调度到.../Illuminate/Routing/ControllerDispatcher.php文件的dispatch方法\n\n\nprotected\nfunction\nrunWithCustomDispatcher(Request\n$request)\n\n\n{\n\n\nlist($class,\n$method)\n=\nexplode('@',\n$this->action['uses']);\n\n\n\n\n\n$dispatcher\n=\n$this->container->make('illuminate.route.dispatcher');\n\n\nreturn\n$dispatcher->dispatch($this,\n$request,\n$class,\n$method);\n}\n```\n文件清单…/Illuminate/Routing/ControllerDispatcher.php\n\n```\npublic\nfunction\ndispatch(Route\n$route,\nRequest\n$request,\n$controller,\n$method)\n\n\n    {\n\n\n        $instance\n=\n$this->makeController($controller);\n\n\n        $this->assignAfter($instance,\n$route,\n$request,\n$method);\n\n\n        $response\n=\n$this->before($instance,\n$route,\n$request,\n$method);\n\n\n        if\n(is_null($response))\n\n\n        {\n\n\n            //还要调度\n\n\n            $response\n=\n$this->callWithinStack(\n\n\n                $instance,\n$route,\n$request,\n$method\n\n\n            );\n\n\n        }\n\n\n        return\n$response;\n\n\n    }\n\n\n\n\n\n    protected\nfunction\ncallWithinStack($instance,\n$route,\n$request,\n$method)\n\n\n    {\n\n\n        //又是Middleware......有没有忘记，官方文档里面Middleware可以加在控制器的构造函数中！！没错，这个Middleware就是在控制器里面申明的\n\n\n        $middleware\n=\n$this->getMiddleware($instance,\n$method);\n\n\n        //又是这个，眼熟吧\n\n\n        return\n(new\nPipeline($this->container))\n\n\n                    ->send($request)\n\n\n                    //再次运行Middleware\n\n\n                    ->through($middleware)\n\n\n                    ->then(function($request)\nuse\n($instance,\n$route,\n$method)\n\n\n                    {    \n\n\n                        运行控制器，返回结果\n\n\n                        return\n$this->call($instance,\n$route,\n$method);\n\n\n                    });\n\n\n    }\n```\n终于到达控制器\n\n\n\n\n> 转自：http://www.eurekao.com/PHP-processing-web-request-analysis/\n","slug":"201703-2017-03-12-php-web请求流程","published":1,"date":"2018-04-12T15:20:38.839Z","updated":"2018-04-12T15:20:38.840Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7q0087ass6mlx0gv9t","content":"<p>PHP作为世界上最好的编程语音，被广泛的运用到Web开发中。因为其语法和C类似，有着非常平缓的学习曲线，越来越多的人使用PHP进行Web产品的快速开发。PHP世界里也涌现了很多开发框架，比如Laravel、ThinkPHP等，但不论何总框架，他们在处理Web请求时的模式都是一样的，本文首先阐述PHP开发Web应用的基本架构，然后分别分析Laravel和ThinkPHP在处理Web请求时的处理流程。</p>\n<a id=\"more\"></a>\n<h3 id=\"PHP开发Web应用的基本架构\"><a href=\"#PHP开发Web应用的基本架构\" class=\"headerlink\" title=\"PHP开发Web应用的基本架构\"></a>PHP开发Web应用的基本架构</h3><hr>\n<p>PHP开发Web应用时所以的请求需要指向具体的入口文件。WebServer是一个内容分发者，他接受用户的请求后，如果是请求的是css、js等静态文件，WebServer会找到这个文件，然后发送给浏览器；如果请求的是/index.php，根据配置文件，WebServer知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。<br><img src=\"https://segmentfault.com/img/bVLftp?w=455&amp;h=233\" alt=\"enter image description here\"></p>\n<p>WebServer会依据CGI协议，将请求的Url、数据、Http Header等信息发送给PHP解析器，接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。整个处理过程如上图所示。</p>\n<h3 id=\"FastCGI\"><a href=\"#FastCGI\" class=\"headerlink\" title=\"FastCGI\"></a>FastCGI</h3><hr>\n<p>这里的PHP解析器就是实现了CGI协议的程序，每次请求到来时他会解析php.ini文件，初始化执行环境，这就导致PHP解析器性能低下，于是就出现了CGI的改良升级版FastCGI。FastCGI是一种语言无关的协议，用来沟通程序(如PHP, Python, Java)和Web服务器(Apache2, Nginx), 理论上任何语言编写的程序都可以通过FastCGI来提供Web服务。它的特点是会在动态分配处理进程给请求，以达到提高效率的目的，大多数FastCGI实现都会维护一个进程池。FastCGI会先启一个master进程，解析配置文件，初始化执行环境，然后再启动多个worker进程。当请求过来时，master进程会这个请求传递给一个worker进程，然后立即接受下一个请求。而且当worker进程不够用时，master可以根据配置预先启动几个worker进程等待；当然空闲worker进程太多时，也会自动关闭，这样就提高了性能，节约了系统资源。整个过程FastCGI扮演着对CGI进程进行管理的角色。</p>\n<h3 id=\"PHP-FPM\"><a href=\"#PHP-FPM\" class=\"headerlink\" title=\"PHP-FPM\"></a>PHP-FPM</h3><hr>\n<p>PHP-FPM是一个专门针对PHP实现了FastCGI协议的程序，它实际上就是一个PHP FastCGI进程管理器，负责管理一个进程池，调用PHP解析器来处理来自Web服务器的请求。PHP-FPM能够对php.ini文件的修改进行平滑过度。</p>\n<p>新建一个helloworld.php文件，写入下列代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">   <span class=\"keyword\">echo</span> <span class=\"string\">\"helloworld,\"</span>;    </span><br><span class=\"line\">   <span class=\"keyword\">echo</span> <span class=\"string\">\"this is my first php script.\"</span>;</span><br><span class=\"line\">   <span class=\"keyword\">echo</span> phpinfo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置好WebServer和PHP-FPM等php运行环境后，在浏览器中访问该文件就可以直接得到输出。</p>\n<h3 id=\"基于PHP的Web框架\"><a href=\"#基于PHP的Web框架\" class=\"headerlink\" title=\"基于PHP的Web框架\"></a>基于PHP的Web框架</h3><hr>\n<h4 id=\"PHP-Web框架是\"><a href=\"#PHP-Web框架是\" class=\"headerlink\" title=\"PHP Web框架是\"></a>PHP Web框架是</h4><blockquote>\n<p>基于某模式将PHP开发常用功能封装实现使开发者快速开发的工具</p>\n</blockquote>\n<h4 id=\"它主要的任务包括：\"><a href=\"#它主要的任务包括：\" class=\"headerlink\" title=\"它主要的任务包括：\"></a>它主要的任务包括：</h4><ul>\n<li>代码重用：定义包、类、函数的放置和加载规则，建议直接整合Composer及其AutoLoad特性。</li>\n<li>请求的分发管理：这个就是路由，Rest风的框架喜欢Rewrite，简单的一点的框架主要通过参数来定位模块和方法所在。</li>\n<li>配置文件管理：加载和动态加载配置数据</li>\n<li>错误和异常管理：异常捕捉、错误日志记录以及错误码规范。</li>\n<li>Layout和模板引擎：如何规划页面布局、widget如何重用、ajax页面如何结合、过期- session如何重定向；数据和模板怎么渲染成HTML，是否压缩和设置过期头。</li>\n<li>数据库：如何融入控制器；支持什么样的driver；考虑主从分离的扩展性；以及是否使用ORM</li>\n</ul>\n<blockquote>\n<h4 id=\"ThinkPHP3-2框架处理流程分析\"><a href=\"#ThinkPHP3-2框架处理流程分析\" class=\"headerlink\" title=\"ThinkPHP3.2框架处理流程分析\"></a>ThinkPHP3.2框架处理流程分析</h4></blockquote>\n<p>TP的设计逻辑就是简单粗暴，面对问题解决问题，所以他的处理流程是基于面向过程的思想，而没有采用面向对象的依赖注入、控制反转等思路。他的自动加载、错误处理通过php原生函数的回调来实现。TP处理每次请求要经过四个步骤如下图所示：<br><img src=\"https://segmentfault.com/img/bVLfvf?w=189&amp;h=441\" alt=\"enter image description here\"></p>\n<h4 id=\"调用应用路口index-php\"><a href=\"#调用应用路口index-php\" class=\"headerlink\" title=\"调用应用路口index.php\"></a>调用应用路口index.php</h4><p>index.php是TP的入口文件，所有的请求都由该文件接管，它的工作也很简单主要是引入ThinkPHP入口文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 应用入口文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测PHP环境</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(version_compare(PHP_VERSION,<span class=\"string\">'5.3.0'</span>,<span class=\"string\">'&lt;'</span>))  <span class=\"keyword\">die</span>(<span class=\"string\">'require</span></span><br><span class=\"line\"><span class=\"string\"> PHP &gt; 5.3.0 !'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启调试模式 建议开发阶段开启 部署阶段注释或者设为false</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"string\">'APP_DEBUG'</span>,<span class=\"keyword\">False</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义应用目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"string\">'APP_PATH'</span>,<span class=\"string\">'./Application/'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入ThinkPHP入口文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span></span><br><span class=\"line\"><span class=\"string\">'./ThinkPHP/ThinkPHP.php'</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"载入框架入口文件ThinkPHP-php\"><a href=\"#载入框架入口文件ThinkPHP-php\" class=\"headerlink\" title=\"载入框架入口文件ThinkPHP.php\"></a>载入框架入口文件ThinkPHP.php</h4><p>在ThinkPHP.php中主要记录初始运行时间和内存开销，然后完成系统常量判断及定义，最后载入框架引导类（Think\\Think）并执行Think::start方法进行应用初始化。</p>\n<h4 id=\"应用初始化Think-Think-start\"><a href=\"#应用初始化Think-Think-start\" class=\"headerlink\" title=\"应用初始化Think\\Think:start()\"></a>应用初始化Think\\Think:start()</h4><p>应用初始化首先设置错误处理机制和自动加载机制</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注册AUTOLOAD方法</span></span><br><span class=\"line\">      spl_autoload_register(<span class=\"string\">'Think\\Think::autoload'</span>);      </span><br><span class=\"line\">      <span class=\"comment\">// 设定错误和异常处理</span></span><br><span class=\"line\">      register_shutdown_function(<span class=\"string\">'Think\\Think::fatalError'</span>);</span><br><span class=\"line\">      set_error_handler(<span class=\"string\">'Think\\Think::appError'</span>);</span><br><span class=\"line\">      set_exception_handler(<span class=\"string\">'Think\\Think::appException'</span>);</span><br></pre></td></tr></table></figure>\n<p>然后加载相关配置文件和运行模式定义文件，最后调用Think\\App类的run方法启动应用</p>\n<h4 id=\"运行应用App-run\"><a href=\"#运行应用App-run\" class=\"headerlink\" title=\"运行应用App::run()\"></a>运行应用App::run()</h4><p>此后TP进入请求处理管道，TP为管道中定义了14个事件，每个事件都可以绑定回调函数，请求到达管道后依次触发这些事件，事件触发后就会调用绑定到事件的回调函数，整个管道的生命周期由app_init开始，由app_end结束。具体实现上，TP将这些事件命名为标签（位），也可以称之为钩子，将回调函数命名为行为，当应用程序运行到标签的时候，就会被拦截下来，统一执行相关的行为。</p>\n<blockquote>\n<h3 id=\"Laravel框架处理流程分析\"><a href=\"#Laravel框架处理流程分析\" class=\"headerlink\" title=\"Laravel框架处理流程分析\"></a>Laravel框架处理流程分析</h3></blockquote>\n<h4 id=\"统一入口\"><a href=\"#统一入口\" class=\"headerlink\" title=\"统一入口\"></a>统一入口</h4><p>Laravel框架使用了统一入口，入口文件：/public/index.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//自动加载文件设置</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">'/../bootstrap/autoload.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化服务容器（可以查看一下关于‘服务容器’的相关文档）</span></span><br><span class=\"line\">$app = <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">'/../bootstrap/app.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过服务容器生成一个kernel类的实例（Illuminate\\Contracts\\Http\\Kernel实际上只是一个接口，真正生成的实例是App\\Http\\Kernel类，至于怎么把接口和类关联起来，请查看Contracts相关文档）</span></span><br><span class=\"line\">$kernel = $app-&gt;make(<span class=\"string\">'Illuminate\\Contracts\\Http\\Kernel'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行Kernel类的handle方法，主要动作是运行middleware和启动URL相关的Contrller</span></span><br><span class=\"line\">$response = $kernel-&gt;handle(</span><br><span class=\"line\">    $request = Illuminate\\Http\\Request::capture()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制器返回结果之后的操作，暂时还没看，以后补上</span></span><br><span class=\"line\">$response-&gt;send();</span><br><span class=\"line\"></span><br><span class=\"line\">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure>\n<h4 id=\"自动加载文件\"><a href=\"#自动加载文件\" class=\"headerlink\" title=\"自动加载文件\"></a>自动加载文件</h4><p>laravel的自动加载，其实也就是Composer的自动加载<br>Composer根据声明的依赖关系，从相关库的源下载代码文件，并根据依赖关系在 Composer 目录下生成供类自动加载的 PHP 脚本，使用的时候，项目开始处引入 “/vendor/autoload.php” 文件，就可以直接实例化这些第三方类库中的类了。</p>\n<h4 id=\"服务容器——Laravel真正的核心\"><a href=\"#服务容器——Laravel真正的核心\" class=\"headerlink\" title=\"服务容器——Laravel真正的核心\"></a>服务容器——Laravel真正的核心</h4><p>服务容器，也叫IoC容器，其实包含了依赖注入(DI)和控制反转(IoC)两部分，是Laravel的真正核心。其他的各种功能模块比如 Route（路由）、Eloquent ORM（数据库 ORM 组件）、Request and Response（请求和响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被使用，其实都是 Laravel 的服务容器负责的。</p>\n<h4 id=\"启动Kernel代码\"><a href=\"#启动Kernel代码\" class=\"headerlink\" title=\"启动Kernel代码\"></a>启动Kernel代码</h4><p>Kernel实例调用handle方法，意味着Laravel的核心和公用代码已经准备完毕，此项目正式开始运行</p>\n<p>代码清单/app/Http/Kernel.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span></span><br><span class=\"line\"><span class=\"title\">App</span>\\<span class=\"title\">Http</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span></span><br><span class=\"line\"><span class=\"title\">Illuminate</span>\\<span class=\"title\">Foundation</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Kernel</span></span><br><span class=\"line\"><span class=\"title\">as</span></span><br><span class=\"line\"><span class=\"title\">HttpKernel</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Kernel</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">HttpKernel</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这是在调用路由之前需要启动的中间件,一般都是核心文件，不要修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span></span><br><span class=\"line\">$middleware</span><br><span class=\"line\">=</span><br><span class=\"line\">[</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'Illuminate\\Cookie\\Middleware\\EncryptCookies'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'Illuminate\\Session\\Middleware\\StartSession'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'Illuminate\\View\\Middleware\\ShareErrorsFromSession'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'App\\Http\\Middleware\\VerifyCsrfToken'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这是我们在router.php文件里面或者Controller文件里面，可以使用的Middleware元素，可以自定义加入很多</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span></span><br><span class=\"line\">$routeMiddleware</span><br><span class=\"line\">=</span><br><span class=\"line\">[</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'auth'</span></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"string\">'App\\Http\\Middleware\\Authenticate'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'auth.basic'</span></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"string\">'Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'guest'</span></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"string\">'App\\Http\\Middleware\\RedirectIfAuthenticated'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'test'</span></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"string\">'App\\Http\\Middleware\\testMiddleWare'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，其实这个文件里面没有handle方法，只有一些属性定义，所以真正的handle方法，实在父类里面实现的</p>\n<p>代码清单…/Illuminate/Foundation/Http/Kernel.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这个很重要，是项目的一些启动引导项，Kernel的重要步骤中，首先就是启动这些文件的bootstrap方法</span><br><span class=\"line\">protected $bootstrappers = [</span><br><span class=\"line\">        //检测环境变量文件是否正常</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\DetectEnvironment&apos;,</span><br><span class=\"line\">        //取得配置文件，即把/config/下的所有配置文件读取到容器（app()-&gt;make(&apos;config&apos;)可以查看所有配置信息）</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\LoadConfiguration&apos;,</span><br><span class=\"line\">        //绑定一个名字为log的实例到容器，怎么访问？？（app()-&gt;make(&apos;log&apos;)）</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\ConfigureLogging&apos;,</span><br><span class=\"line\">        //设置异常抓取信息，这个还没仔细看，但大概就是这个意思</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\HandleExceptions&apos;,</span><br><span class=\"line\">        //把/config/app.php里面的aliases项利用PHP库函数class_alias创建别名，从此，我们可以使用App::make(&apos;app&apos;)方式取得实例</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\RegisterFacades&apos;,</span><br><span class=\"line\">        //把/config/app.php里面的providers项,注册到容器</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\RegisterProviders&apos;,</span><br><span class=\"line\">        //运行容器中注册的所有的ServiceProvider中得boot方法</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\BootProviders&apos;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">  //真正的handle方法</span><br><span class=\"line\">  public function handle($request)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        try</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //主要是这行，调度了需要运行的方法</span><br><span class=\"line\">            return $this-&gt;sendRequestThroughRouter($request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception $e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            $this-&gt;reportException($e);</span><br><span class=\"line\">            return $this-&gt;renderException($request, $e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected function sendRequestThroughRouter($request)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;app-&gt;instance(&apos;request&apos;, $request);</span><br><span class=\"line\">        Facade::clearResolvedInstance(&apos;request&apos;);</span><br><span class=\"line\">        //运行上述$bootstrappers里面包含的文件的bootstrap方法，运行的作用，上面已经注释</span><br><span class=\"line\">        $this-&gt;bootstrap();</span><br><span class=\"line\">        //这是在对URL进行调度之前，也就是运行Route之前，进行的一些准备工作</span><br><span class=\"line\">        return (new Pipeline($this-&gt;app))    </span><br><span class=\"line\">                    -&gt;send($request)        </span><br><span class=\"line\">                    //需要运行$this-&gt;middleware里包含的中间件</span><br><span class=\"line\">                    -&gt;through($this-&gt;middleware)</span><br><span class=\"line\">                    //运行完上述中间件之后，调度dispatchToRouter方法，进行Route的操作</span><br><span class=\"line\">                    -&gt;then($this-&gt;dispatchToRouter());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //前奏执行完毕之后，进行Route操作</span><br><span class=\"line\">    protected function dispatchToRouter()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return function($request)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            $this-&gt;app-&gt;instance(&apos;request&apos;, $request);</span><br><span class=\"line\">            //跳转到Router类的dispatch方法</span><br><span class=\"line\">            return $this-&gt;router-&gt;dispatch($request);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>下面就需要根据URL和/app/Http/routes.php文件，进行Route操作</p>\n<p>文件清单…/Illuminate/Routing/Router.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public</span><br><span class=\"line\">function</span><br><span class=\"line\">dispatch(Request</span><br><span class=\"line\">$request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$this-&gt;currentRequest</span><br><span class=\"line\">=</span><br><span class=\"line\">$request;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//在4.2版本里面，Route有一个筛选属性；5.0之后的版本，被Middleware代替</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;callFilter(&apos;before&apos;,</span><br><span class=\"line\">$request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if</span><br><span class=\"line\">(is_null($response))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//继续调度</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;dispatchToRoute($request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;prepareResponse($request,</span><br><span class=\"line\">$response);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//在4.2版本里面，Route有一个筛选属性；5.0之后的版本，被Middleware代替</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$this-&gt;callFilter(&apos;after&apos;,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$response);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$response;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public</span><br><span class=\"line\">function</span><br><span class=\"line\">dispatchToRoute(Request</span><br><span class=\"line\">$request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$route</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;findRoute($request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$request-&gt;setRouteResolver(function()</span><br><span class=\"line\">use</span><br><span class=\"line\">($route)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$route;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$this-&gt;events-&gt;fire(&apos;router.matched&apos;,</span><br><span class=\"line\">[$route,</span><br><span class=\"line\">$request]);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;callRouteBefore($route,</span><br><span class=\"line\">$request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if</span><br><span class=\"line\">(is_null($response))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//</span><br><span class=\"line\"> 只看这一行，还是调度文件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;runRouteWithinStack(</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$route,</span><br><span class=\"line\">$request</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;prepareResponse($request,</span><br><span class=\"line\">$response);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$this-&gt;callRouteAfter($route,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$response);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$response;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">protected</span><br><span class=\"line\">function</span><br><span class=\"line\">runRouteWithinStack(Route</span><br><span class=\"line\">$route,</span><br><span class=\"line\">Request</span><br><span class=\"line\">$request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//</span><br><span class=\"line\"> 取得routes.php里面的Middleware节点</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$middleware</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;gatherRouteMiddlewares($route);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//这个有点眼熟</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">(new</span><br><span class=\"line\">Pipeline($this-&gt;container))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-&gt;send($request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//执行上述的中间件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-&gt;through($middleware)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-&gt;then(function($request)</span><br><span class=\"line\">use</span><br><span class=\"line\">($route)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//到Controller类了</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$this-&gt;prepareResponse(</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$request,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//run控制器</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$route-&gt;run($request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public</span><br><span class=\"line\">function</span><br><span class=\"line\">run(Request</span><br><span class=\"line\">$request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$this-&gt;container</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;container</span><br><span class=\"line\">?:</span><br><span class=\"line\">new</span><br><span class=\"line\">Container;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">try</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if</span><br><span class=\"line\">(</span><br><span class=\"line\">!</span><br><span class=\"line\">is_string($this-&gt;action[&apos;uses&apos;]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$this-&gt;runCallable($request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if</span><br><span class=\"line\">($this-&gt;customDispatcherIsBound())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//实际上是运行了这行</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$this-&gt;runWithCustomDispatcher($request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//其实我是直接想运行这行</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$this-&gt;runController($request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">catch</span><br><span class=\"line\">(HttpResponseException</span><br><span class=\"line\">$e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$e-&gt;getResponse();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//继续调度，最终调度到.../Illuminate/Routing/ControllerDispatcher.php文件的dispatch方法</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">protected</span><br><span class=\"line\">function</span><br><span class=\"line\">runWithCustomDispatcher(Request</span><br><span class=\"line\">$request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">list($class,</span><br><span class=\"line\">$method)</span><br><span class=\"line\">=</span><br><span class=\"line\">explode(&apos;@&apos;,</span><br><span class=\"line\">$this-&gt;action[&apos;uses&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;container-&gt;make(&apos;illuminate.route.dispatcher&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$dispatcher-&gt;dispatch($this,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$class,</span><br><span class=\"line\">$method);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文件清单…/Illuminate/Routing/ControllerDispatcher.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public</span><br><span class=\"line\">function</span><br><span class=\"line\">dispatch(Route</span><br><span class=\"line\">$route,</span><br><span class=\"line\">Request</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$controller,</span><br><span class=\"line\">$method)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        $instance</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;makeController($controller);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        $this-&gt;assignAfter($instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$method);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        $response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;before($instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$method);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        if</span><br><span class=\"line\">(is_null($response))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            //还要调度</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            $response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;callWithinStack(</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                $instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$method</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return</span><br><span class=\"line\">$response;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    protected</span><br><span class=\"line\">function</span><br><span class=\"line\">callWithinStack($instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$method)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //又是Middleware......有没有忘记，官方文档里面Middleware可以加在控制器的构造函数中！！没错，这个Middleware就是在控制器里面申明的</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        $middleware</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;getMiddleware($instance,</span><br><span class=\"line\">$method);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //又是这个，眼熟吧</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return</span><br><span class=\"line\">(new</span><br><span class=\"line\">Pipeline($this-&gt;container))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    -&gt;send($request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    //再次运行Middleware</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    -&gt;through($middleware)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    -&gt;then(function($request)</span><br><span class=\"line\">use</span><br><span class=\"line\">($instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$method)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#123;    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                        运行控制器，返回结果</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                        return</span><br><span class=\"line\">$this-&gt;call($instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$method);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>终于到达控制器</p>\n<blockquote>\n<p>转自：<a href=\"http://www.eurekao.com/PHP-processing-web-request-analysis/\" target=\"_blank\" rel=\"noopener\">http://www.eurekao.com/PHP-processing-web-request-analysis/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>PHP作为世界上最好的编程语音，被广泛的运用到Web开发中。因为其语法和C类似，有着非常平缓的学习曲线，越来越多的人使用PHP进行Web产品的快速开发。PHP世界里也涌现了很多开发框架，比如Laravel、ThinkPHP等，但不论何总框架，他们在处理Web请求时的模式都是一样的，本文首先阐述PHP开发Web应用的基本架构，然后分别分析Laravel和ThinkPHP在处理Web请求时的处理流程。</p>","more":"<h3 id=\"PHP开发Web应用的基本架构\"><a href=\"#PHP开发Web应用的基本架构\" class=\"headerlink\" title=\"PHP开发Web应用的基本架构\"></a>PHP开发Web应用的基本架构</h3><hr>\n<p>PHP开发Web应用时所以的请求需要指向具体的入口文件。WebServer是一个内容分发者，他接受用户的请求后，如果是请求的是css、js等静态文件，WebServer会找到这个文件，然后发送给浏览器；如果请求的是/index.php，根据配置文件，WebServer知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。<br><img src=\"https://segmentfault.com/img/bVLftp?w=455&amp;h=233\" alt=\"enter image description here\"></p>\n<p>WebServer会依据CGI协议，将请求的Url、数据、Http Header等信息发送给PHP解析器，接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。整个处理过程如上图所示。</p>\n<h3 id=\"FastCGI\"><a href=\"#FastCGI\" class=\"headerlink\" title=\"FastCGI\"></a>FastCGI</h3><hr>\n<p>这里的PHP解析器就是实现了CGI协议的程序，每次请求到来时他会解析php.ini文件，初始化执行环境，这就导致PHP解析器性能低下，于是就出现了CGI的改良升级版FastCGI。FastCGI是一种语言无关的协议，用来沟通程序(如PHP, Python, Java)和Web服务器(Apache2, Nginx), 理论上任何语言编写的程序都可以通过FastCGI来提供Web服务。它的特点是会在动态分配处理进程给请求，以达到提高效率的目的，大多数FastCGI实现都会维护一个进程池。FastCGI会先启一个master进程，解析配置文件，初始化执行环境，然后再启动多个worker进程。当请求过来时，master进程会这个请求传递给一个worker进程，然后立即接受下一个请求。而且当worker进程不够用时，master可以根据配置预先启动几个worker进程等待；当然空闲worker进程太多时，也会自动关闭，这样就提高了性能，节约了系统资源。整个过程FastCGI扮演着对CGI进程进行管理的角色。</p>\n<h3 id=\"PHP-FPM\"><a href=\"#PHP-FPM\" class=\"headerlink\" title=\"PHP-FPM\"></a>PHP-FPM</h3><hr>\n<p>PHP-FPM是一个专门针对PHP实现了FastCGI协议的程序，它实际上就是一个PHP FastCGI进程管理器，负责管理一个进程池，调用PHP解析器来处理来自Web服务器的请求。PHP-FPM能够对php.ini文件的修改进行平滑过度。</p>\n<p>新建一个helloworld.php文件，写入下列代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">   <span class=\"keyword\">echo</span> <span class=\"string\">\"helloworld,\"</span>;    </span><br><span class=\"line\">   <span class=\"keyword\">echo</span> <span class=\"string\">\"this is my first php script.\"</span>;</span><br><span class=\"line\">   <span class=\"keyword\">echo</span> phpinfo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置好WebServer和PHP-FPM等php运行环境后，在浏览器中访问该文件就可以直接得到输出。</p>\n<h3 id=\"基于PHP的Web框架\"><a href=\"#基于PHP的Web框架\" class=\"headerlink\" title=\"基于PHP的Web框架\"></a>基于PHP的Web框架</h3><hr>\n<h4 id=\"PHP-Web框架是\"><a href=\"#PHP-Web框架是\" class=\"headerlink\" title=\"PHP Web框架是\"></a>PHP Web框架是</h4><blockquote>\n<p>基于某模式将PHP开发常用功能封装实现使开发者快速开发的工具</p>\n</blockquote>\n<h4 id=\"它主要的任务包括：\"><a href=\"#它主要的任务包括：\" class=\"headerlink\" title=\"它主要的任务包括：\"></a>它主要的任务包括：</h4><ul>\n<li>代码重用：定义包、类、函数的放置和加载规则，建议直接整合Composer及其AutoLoad特性。</li>\n<li>请求的分发管理：这个就是路由，Rest风的框架喜欢Rewrite，简单的一点的框架主要通过参数来定位模块和方法所在。</li>\n<li>配置文件管理：加载和动态加载配置数据</li>\n<li>错误和异常管理：异常捕捉、错误日志记录以及错误码规范。</li>\n<li>Layout和模板引擎：如何规划页面布局、widget如何重用、ajax页面如何结合、过期- session如何重定向；数据和模板怎么渲染成HTML，是否压缩和设置过期头。</li>\n<li>数据库：如何融入控制器；支持什么样的driver；考虑主从分离的扩展性；以及是否使用ORM</li>\n</ul>\n<blockquote>\n<h4 id=\"ThinkPHP3-2框架处理流程分析\"><a href=\"#ThinkPHP3-2框架处理流程分析\" class=\"headerlink\" title=\"ThinkPHP3.2框架处理流程分析\"></a>ThinkPHP3.2框架处理流程分析</h4></blockquote>\n<p>TP的设计逻辑就是简单粗暴，面对问题解决问题，所以他的处理流程是基于面向过程的思想，而没有采用面向对象的依赖注入、控制反转等思路。他的自动加载、错误处理通过php原生函数的回调来实现。TP处理每次请求要经过四个步骤如下图所示：<br><img src=\"https://segmentfault.com/img/bVLfvf?w=189&amp;h=441\" alt=\"enter image description here\"></p>\n<h4 id=\"调用应用路口index-php\"><a href=\"#调用应用路口index-php\" class=\"headerlink\" title=\"调用应用路口index.php\"></a>调用应用路口index.php</h4><p>index.php是TP的入口文件，所有的请求都由该文件接管，它的工作也很简单主要是引入ThinkPHP入口文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 应用入口文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测PHP环境</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(version_compare(PHP_VERSION,<span class=\"string\">'5.3.0'</span>,<span class=\"string\">'&lt;'</span>))  <span class=\"keyword\">die</span>(<span class=\"string\">'require</span></span><br><span class=\"line\"><span class=\"string\"> PHP &gt; 5.3.0 !'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启调试模式 建议开发阶段开启 部署阶段注释或者设为false</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"string\">'APP_DEBUG'</span>,<span class=\"keyword\">False</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义应用目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"string\">'APP_PATH'</span>,<span class=\"string\">'./Application/'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入ThinkPHP入口文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span></span><br><span class=\"line\"><span class=\"string\">'./ThinkPHP/ThinkPHP.php'</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"载入框架入口文件ThinkPHP-php\"><a href=\"#载入框架入口文件ThinkPHP-php\" class=\"headerlink\" title=\"载入框架入口文件ThinkPHP.php\"></a>载入框架入口文件ThinkPHP.php</h4><p>在ThinkPHP.php中主要记录初始运行时间和内存开销，然后完成系统常量判断及定义，最后载入框架引导类（Think\\Think）并执行Think::start方法进行应用初始化。</p>\n<h4 id=\"应用初始化Think-Think-start\"><a href=\"#应用初始化Think-Think-start\" class=\"headerlink\" title=\"应用初始化Think\\Think:start()\"></a>应用初始化Think\\Think:start()</h4><p>应用初始化首先设置错误处理机制和自动加载机制</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注册AUTOLOAD方法</span></span><br><span class=\"line\">      spl_autoload_register(<span class=\"string\">'Think\\Think::autoload'</span>);      </span><br><span class=\"line\">      <span class=\"comment\">// 设定错误和异常处理</span></span><br><span class=\"line\">      register_shutdown_function(<span class=\"string\">'Think\\Think::fatalError'</span>);</span><br><span class=\"line\">      set_error_handler(<span class=\"string\">'Think\\Think::appError'</span>);</span><br><span class=\"line\">      set_exception_handler(<span class=\"string\">'Think\\Think::appException'</span>);</span><br></pre></td></tr></table></figure>\n<p>然后加载相关配置文件和运行模式定义文件，最后调用Think\\App类的run方法启动应用</p>\n<h4 id=\"运行应用App-run\"><a href=\"#运行应用App-run\" class=\"headerlink\" title=\"运行应用App::run()\"></a>运行应用App::run()</h4><p>此后TP进入请求处理管道，TP为管道中定义了14个事件，每个事件都可以绑定回调函数，请求到达管道后依次触发这些事件，事件触发后就会调用绑定到事件的回调函数，整个管道的生命周期由app_init开始，由app_end结束。具体实现上，TP将这些事件命名为标签（位），也可以称之为钩子，将回调函数命名为行为，当应用程序运行到标签的时候，就会被拦截下来，统一执行相关的行为。</p>\n<blockquote>\n<h3 id=\"Laravel框架处理流程分析\"><a href=\"#Laravel框架处理流程分析\" class=\"headerlink\" title=\"Laravel框架处理流程分析\"></a>Laravel框架处理流程分析</h3></blockquote>\n<h4 id=\"统一入口\"><a href=\"#统一入口\" class=\"headerlink\" title=\"统一入口\"></a>统一入口</h4><p>Laravel框架使用了统一入口，入口文件：/public/index.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//自动加载文件设置</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">'/../bootstrap/autoload.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化服务容器（可以查看一下关于‘服务容器’的相关文档）</span></span><br><span class=\"line\">$app = <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">'/../bootstrap/app.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过服务容器生成一个kernel类的实例（Illuminate\\Contracts\\Http\\Kernel实际上只是一个接口，真正生成的实例是App\\Http\\Kernel类，至于怎么把接口和类关联起来，请查看Contracts相关文档）</span></span><br><span class=\"line\">$kernel = $app-&gt;make(<span class=\"string\">'Illuminate\\Contracts\\Http\\Kernel'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行Kernel类的handle方法，主要动作是运行middleware和启动URL相关的Contrller</span></span><br><span class=\"line\">$response = $kernel-&gt;handle(</span><br><span class=\"line\">    $request = Illuminate\\Http\\Request::capture()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制器返回结果之后的操作，暂时还没看，以后补上</span></span><br><span class=\"line\">$response-&gt;send();</span><br><span class=\"line\"></span><br><span class=\"line\">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure>\n<h4 id=\"自动加载文件\"><a href=\"#自动加载文件\" class=\"headerlink\" title=\"自动加载文件\"></a>自动加载文件</h4><p>laravel的自动加载，其实也就是Composer的自动加载<br>Composer根据声明的依赖关系，从相关库的源下载代码文件，并根据依赖关系在 Composer 目录下生成供类自动加载的 PHP 脚本，使用的时候，项目开始处引入 “/vendor/autoload.php” 文件，就可以直接实例化这些第三方类库中的类了。</p>\n<h4 id=\"服务容器——Laravel真正的核心\"><a href=\"#服务容器——Laravel真正的核心\" class=\"headerlink\" title=\"服务容器——Laravel真正的核心\"></a>服务容器——Laravel真正的核心</h4><p>服务容器，也叫IoC容器，其实包含了依赖注入(DI)和控制反转(IoC)两部分，是Laravel的真正核心。其他的各种功能模块比如 Route（路由）、Eloquent ORM（数据库 ORM 组件）、Request and Response（请求和响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被使用，其实都是 Laravel 的服务容器负责的。</p>\n<h4 id=\"启动Kernel代码\"><a href=\"#启动Kernel代码\" class=\"headerlink\" title=\"启动Kernel代码\"></a>启动Kernel代码</h4><p>Kernel实例调用handle方法，意味着Laravel的核心和公用代码已经准备完毕，此项目正式开始运行</p>\n<p>代码清单/app/Http/Kernel.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span></span><br><span class=\"line\"><span class=\"title\">App</span>\\<span class=\"title\">Http</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span></span><br><span class=\"line\"><span class=\"title\">Illuminate</span>\\<span class=\"title\">Foundation</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Kernel</span></span><br><span class=\"line\"><span class=\"title\">as</span></span><br><span class=\"line\"><span class=\"title\">HttpKernel</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Kernel</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">HttpKernel</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这是在调用路由之前需要启动的中间件,一般都是核心文件，不要修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span></span><br><span class=\"line\">$middleware</span><br><span class=\"line\">=</span><br><span class=\"line\">[</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'Illuminate\\Cookie\\Middleware\\EncryptCookies'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'Illuminate\\Session\\Middleware\\StartSession'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'Illuminate\\View\\Middleware\\ShareErrorsFromSession'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'App\\Http\\Middleware\\VerifyCsrfToken'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这是我们在router.php文件里面或者Controller文件里面，可以使用的Middleware元素，可以自定义加入很多</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span></span><br><span class=\"line\">$routeMiddleware</span><br><span class=\"line\">=</span><br><span class=\"line\">[</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'auth'</span></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"string\">'App\\Http\\Middleware\\Authenticate'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'auth.basic'</span></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"string\">'Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'guest'</span></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"string\">'App\\Http\\Middleware\\RedirectIfAuthenticated'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'test'</span></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"><span class=\"string\">'App\\Http\\Middleware\\testMiddleWare'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，其实这个文件里面没有handle方法，只有一些属性定义，所以真正的handle方法，实在父类里面实现的</p>\n<p>代码清单…/Illuminate/Foundation/Http/Kernel.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这个很重要，是项目的一些启动引导项，Kernel的重要步骤中，首先就是启动这些文件的bootstrap方法</span><br><span class=\"line\">protected $bootstrappers = [</span><br><span class=\"line\">        //检测环境变量文件是否正常</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\DetectEnvironment&apos;,</span><br><span class=\"line\">        //取得配置文件，即把/config/下的所有配置文件读取到容器（app()-&gt;make(&apos;config&apos;)可以查看所有配置信息）</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\LoadConfiguration&apos;,</span><br><span class=\"line\">        //绑定一个名字为log的实例到容器，怎么访问？？（app()-&gt;make(&apos;log&apos;)）</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\ConfigureLogging&apos;,</span><br><span class=\"line\">        //设置异常抓取信息，这个还没仔细看，但大概就是这个意思</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\HandleExceptions&apos;,</span><br><span class=\"line\">        //把/config/app.php里面的aliases项利用PHP库函数class_alias创建别名，从此，我们可以使用App::make(&apos;app&apos;)方式取得实例</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\RegisterFacades&apos;,</span><br><span class=\"line\">        //把/config/app.php里面的providers项,注册到容器</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\RegisterProviders&apos;,</span><br><span class=\"line\">        //运行容器中注册的所有的ServiceProvider中得boot方法</span><br><span class=\"line\">        &apos;Illuminate\\Foundation\\Bootstrap\\BootProviders&apos;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">  //真正的handle方法</span><br><span class=\"line\">  public function handle($request)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        try</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //主要是这行，调度了需要运行的方法</span><br><span class=\"line\">            return $this-&gt;sendRequestThroughRouter($request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception $e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            $this-&gt;reportException($e);</span><br><span class=\"line\">            return $this-&gt;renderException($request, $e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected function sendRequestThroughRouter($request)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;app-&gt;instance(&apos;request&apos;, $request);</span><br><span class=\"line\">        Facade::clearResolvedInstance(&apos;request&apos;);</span><br><span class=\"line\">        //运行上述$bootstrappers里面包含的文件的bootstrap方法，运行的作用，上面已经注释</span><br><span class=\"line\">        $this-&gt;bootstrap();</span><br><span class=\"line\">        //这是在对URL进行调度之前，也就是运行Route之前，进行的一些准备工作</span><br><span class=\"line\">        return (new Pipeline($this-&gt;app))    </span><br><span class=\"line\">                    -&gt;send($request)        </span><br><span class=\"line\">                    //需要运行$this-&gt;middleware里包含的中间件</span><br><span class=\"line\">                    -&gt;through($this-&gt;middleware)</span><br><span class=\"line\">                    //运行完上述中间件之后，调度dispatchToRouter方法，进行Route的操作</span><br><span class=\"line\">                    -&gt;then($this-&gt;dispatchToRouter());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //前奏执行完毕之后，进行Route操作</span><br><span class=\"line\">    protected function dispatchToRouter()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return function($request)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            $this-&gt;app-&gt;instance(&apos;request&apos;, $request);</span><br><span class=\"line\">            //跳转到Router类的dispatch方法</span><br><span class=\"line\">            return $this-&gt;router-&gt;dispatch($request);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>下面就需要根据URL和/app/Http/routes.php文件，进行Route操作</p>\n<p>文件清单…/Illuminate/Routing/Router.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public</span><br><span class=\"line\">function</span><br><span class=\"line\">dispatch(Request</span><br><span class=\"line\">$request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$this-&gt;currentRequest</span><br><span class=\"line\">=</span><br><span class=\"line\">$request;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//在4.2版本里面，Route有一个筛选属性；5.0之后的版本，被Middleware代替</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;callFilter(&apos;before&apos;,</span><br><span class=\"line\">$request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if</span><br><span class=\"line\">(is_null($response))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//继续调度</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;dispatchToRoute($request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;prepareResponse($request,</span><br><span class=\"line\">$response);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//在4.2版本里面，Route有一个筛选属性；5.0之后的版本，被Middleware代替</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$this-&gt;callFilter(&apos;after&apos;,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$response);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$response;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public</span><br><span class=\"line\">function</span><br><span class=\"line\">dispatchToRoute(Request</span><br><span class=\"line\">$request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$route</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;findRoute($request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$request-&gt;setRouteResolver(function()</span><br><span class=\"line\">use</span><br><span class=\"line\">($route)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$route;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$this-&gt;events-&gt;fire(&apos;router.matched&apos;,</span><br><span class=\"line\">[$route,</span><br><span class=\"line\">$request]);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;callRouteBefore($route,</span><br><span class=\"line\">$request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if</span><br><span class=\"line\">(is_null($response))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//</span><br><span class=\"line\"> 只看这一行，还是调度文件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;runRouteWithinStack(</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$route,</span><br><span class=\"line\">$request</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;prepareResponse($request,</span><br><span class=\"line\">$response);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$this-&gt;callRouteAfter($route,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$response);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$response;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">protected</span><br><span class=\"line\">function</span><br><span class=\"line\">runRouteWithinStack(Route</span><br><span class=\"line\">$route,</span><br><span class=\"line\">Request</span><br><span class=\"line\">$request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//</span><br><span class=\"line\"> 取得routes.php里面的Middleware节点</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$middleware</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;gatherRouteMiddlewares($route);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//这个有点眼熟</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">(new</span><br><span class=\"line\">Pipeline($this-&gt;container))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-&gt;send($request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//执行上述的中间件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-&gt;through($middleware)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-&gt;then(function($request)</span><br><span class=\"line\">use</span><br><span class=\"line\">($route)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//到Controller类了</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$this-&gt;prepareResponse(</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$request,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//run控制器</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$route-&gt;run($request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public</span><br><span class=\"line\">function</span><br><span class=\"line\">run(Request</span><br><span class=\"line\">$request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$this-&gt;container</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;container</span><br><span class=\"line\">?:</span><br><span class=\"line\">new</span><br><span class=\"line\">Container;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">try</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if</span><br><span class=\"line\">(</span><br><span class=\"line\">!</span><br><span class=\"line\">is_string($this-&gt;action[&apos;uses&apos;]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$this-&gt;runCallable($request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if</span><br><span class=\"line\">($this-&gt;customDispatcherIsBound())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//实际上是运行了这行</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$this-&gt;runWithCustomDispatcher($request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//其实我是直接想运行这行</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$this-&gt;runController($request);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">catch</span><br><span class=\"line\">(HttpResponseException</span><br><span class=\"line\">$e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$e-&gt;getResponse();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//继续调度，最终调度到.../Illuminate/Routing/ControllerDispatcher.php文件的dispatch方法</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">protected</span><br><span class=\"line\">function</span><br><span class=\"line\">runWithCustomDispatcher(Request</span><br><span class=\"line\">$request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">list($class,</span><br><span class=\"line\">$method)</span><br><span class=\"line\">=</span><br><span class=\"line\">explode(&apos;@&apos;,</span><br><span class=\"line\">$this-&gt;action[&apos;uses&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;container-&gt;make(&apos;illuminate.route.dispatcher&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return</span><br><span class=\"line\">$dispatcher-&gt;dispatch($this,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$class,</span><br><span class=\"line\">$method);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文件清单…/Illuminate/Routing/ControllerDispatcher.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public</span><br><span class=\"line\">function</span><br><span class=\"line\">dispatch(Route</span><br><span class=\"line\">$route,</span><br><span class=\"line\">Request</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$controller,</span><br><span class=\"line\">$method)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        $instance</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;makeController($controller);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        $this-&gt;assignAfter($instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$method);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        $response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;before($instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$method);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        if</span><br><span class=\"line\">(is_null($response))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            //还要调度</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            $response</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;callWithinStack(</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                $instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$method</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return</span><br><span class=\"line\">$response;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    protected</span><br><span class=\"line\">function</span><br><span class=\"line\">callWithinStack($instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$request,</span><br><span class=\"line\">$method)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //又是Middleware......有没有忘记，官方文档里面Middleware可以加在控制器的构造函数中！！没错，这个Middleware就是在控制器里面申明的</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        $middleware</span><br><span class=\"line\">=</span><br><span class=\"line\">$this-&gt;getMiddleware($instance,</span><br><span class=\"line\">$method);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //又是这个，眼熟吧</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return</span><br><span class=\"line\">(new</span><br><span class=\"line\">Pipeline($this-&gt;container))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    -&gt;send($request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    //再次运行Middleware</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    -&gt;through($middleware)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    -&gt;then(function($request)</span><br><span class=\"line\">use</span><br><span class=\"line\">($instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$method)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#123;    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                        运行控制器，返回结果</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                        return</span><br><span class=\"line\">$this-&gt;call($instance,</span><br><span class=\"line\">$route,</span><br><span class=\"line\">$method);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>终于到达控制器</p>\n<blockquote>\n<p>转自：<a href=\"http://www.eurekao.com/PHP-processing-web-request-analysis/\" target=\"_blank\" rel=\"noopener\">http://www.eurekao.com/PHP-processing-web-request-analysis/</a></p>\n</blockquote>"},{"layout":"post","title":"Redis常用数据结构和操作","_content":"\nRedis常用的数据结构有5种 String Hash List Set SortSet\n\n<!--more-->\n\n## String\n\n- Set name fitz 设置name = fitz 存储\n- Get name 获取设置好的name的值\n- Setnx name fitz 设置name键值为fitz 如果存在,则返回0 不存在返回1\n- Mset name fitz age 23 salary 233333 设置多个键值对 一块存错 全成功,全失败\n- Msetnx name fitz age 23 hoby basketball 如果设置多个键值对中有存在返回失败\n- Mget name age salary 获取多个键的值\n- Getset name fitz 获取name的值,并设置新的值为fitz\n- Setrange name 3 fitz 将键name 3字符和面的进行替换 结果为luofitz\n- Getrange name 3 6 获取键name的值 结果为luofitz\n- Append name .com 给键nane追加.com 结果为fitz.com\n- Incr age 设置每个值自增 返回结果为24\n- Incrby age 6 给name加上6 如果是负数则键\n- Decr 与incr相反\n- Decrby 与decrby相反\n- Strlen 返回键对应的值得字符长度\n\n---\n\n## Hash\n\n- Hset user:001 name fitz    设置哈表名字user 表里面的001 的name 设置为 fitz\n- Hsetnx user name maomao    设置哈希表名字中的name 存在,设置不成功\n- Hget user:001 name 获取hash表的user的001的值\n- Hmset user:003 name maomao age 23 批量设置\n- Hmget user:003 name age 批量获取user:003的值\n- Hincrby user:003 age 3     给hash表的age值加上3\n- Hexists user:003 name 判断hash表中式否存在name的键\n- Hlen user:003 返回hash表的所有的字段的数目\n- Hkeys user:003 返回hash表的所有字段\n- Hvals user:003 返回hash表中所有的值\n- Hgetall user:003 返回所有的字段和值\n- Hdel user:003 name 对hash的name的值和键删除\n\n---\n\n## List\n\n`栈:先进后出 队列:先进先出`\n\n- lpush 从头压入\n    - Lpush list1 “world”\n    - lpush list1 ‘hello”\n    - Lrange list1 0 -1 把链表中的数据从0到尾全部取出\n- rpush 从尾部压入\n    - rpush list2 “world”\n    - rpush list2 “luowen”\n    - lrange list2 0 -1\n- linsert 插入出入数据\n    - Linsert list3 before maomao love\n    - Lrange list3 0 -1\n    - Linsert list3 after luowen love\n    - Lrange list3 0 -1\n- lset 给某个元素赋值\n    -  Lset list5 0 “deom”\n- lrem 删除list表中的数据\n    - Lrem list6 1 “luowen”\n- ltrim 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除\n    - `LTRIM KEY_NAME START STOP`\n- lpop 从链表的头部弹出一个元素\n    - `LLEN KEY_NAME`\n- rpop 从链表的尾部弹出一个元素\n    - `LLEN KEY_NAME`\n- rpoplpush 从一个链表弹出,在从头部压入到另一个链表\n    - `RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME`\n- lindex 返回一个list小标的索引值\n- llen 返回这个链表的元素的长度\n\n---\n\n## set\n\n- sadd 向集合中插入一条数据\n- srem 删除集合中的一个元素\n- smembers 查看集合中的元素\n- spop 从集合随机弹出一个元素,返回键值\n- sdiff 两个集合的差集 返回两个集合不一样的,根据第一个集合为标准\n- sdiffstroe 将两个差集存储到另外一个集合        \n- sinter 将两个集合的交集\n- sinterstore 将两个集合的交集存储到另外一个集合中\n- sunion 将两个集合并集\n- sunionstore 将两个集合并集并存储到另外一个集合中\n- smove 将以个集合中的元素移动到另外一个集合中\n- scard 查看集合中元素的个数\n- sismember 判断是否是集合中的元素\n- srandmember myset14 随机取出myset1 中的元素\n\n\n---\n\n## SortSet\n\n- zadd 添加到有序集合中区\n- zrem 删除有序集合中的元素\n- zincrby myzsent luowen1 3将myzsent luown1的序号更改为4 如果没有,就创建他\n- zrank 找到myzsent 对应值得索引\n- zrevrank 反过来去索引\n- zrangebyscore 返回集合中指定的元素\n- zcount 返回指定空间的数量\n- zcard 返回集合中所有元素的个数\n- zremrangbyrank 删除集合中指定区间的元素,并将索引进行排序\n- zremrangbyscore 删除集合中指定元素,按循序进行排序\n- sadd 向集合中插入一条数据\n","source":"_posts/201704/2017-04-10-redis常用数据结构和操作.md","raw":"---\nlayout: post\ntitle: Redis常用数据结构和操作\ncategory: Redis\ntags: Redis\n---\n\nRedis常用的数据结构有5种 String Hash List Set SortSet\n\n<!--more-->\n\n## String\n\n- Set name fitz 设置name = fitz 存储\n- Get name 获取设置好的name的值\n- Setnx name fitz 设置name键值为fitz 如果存在,则返回0 不存在返回1\n- Mset name fitz age 23 salary 233333 设置多个键值对 一块存错 全成功,全失败\n- Msetnx name fitz age 23 hoby basketball 如果设置多个键值对中有存在返回失败\n- Mget name age salary 获取多个键的值\n- Getset name fitz 获取name的值,并设置新的值为fitz\n- Setrange name 3 fitz 将键name 3字符和面的进行替换 结果为luofitz\n- Getrange name 3 6 获取键name的值 结果为luofitz\n- Append name .com 给键nane追加.com 结果为fitz.com\n- Incr age 设置每个值自增 返回结果为24\n- Incrby age 6 给name加上6 如果是负数则键\n- Decr 与incr相反\n- Decrby 与decrby相反\n- Strlen 返回键对应的值得字符长度\n\n---\n\n## Hash\n\n- Hset user:001 name fitz    设置哈表名字user 表里面的001 的name 设置为 fitz\n- Hsetnx user name maomao    设置哈希表名字中的name 存在,设置不成功\n- Hget user:001 name 获取hash表的user的001的值\n- Hmset user:003 name maomao age 23 批量设置\n- Hmget user:003 name age 批量获取user:003的值\n- Hincrby user:003 age 3     给hash表的age值加上3\n- Hexists user:003 name 判断hash表中式否存在name的键\n- Hlen user:003 返回hash表的所有的字段的数目\n- Hkeys user:003 返回hash表的所有字段\n- Hvals user:003 返回hash表中所有的值\n- Hgetall user:003 返回所有的字段和值\n- Hdel user:003 name 对hash的name的值和键删除\n\n---\n\n## List\n\n`栈:先进后出 队列:先进先出`\n\n- lpush 从头压入\n    - Lpush list1 “world”\n    - lpush list1 ‘hello”\n    - Lrange list1 0 -1 把链表中的数据从0到尾全部取出\n- rpush 从尾部压入\n    - rpush list2 “world”\n    - rpush list2 “luowen”\n    - lrange list2 0 -1\n- linsert 插入出入数据\n    - Linsert list3 before maomao love\n    - Lrange list3 0 -1\n    - Linsert list3 after luowen love\n    - Lrange list3 0 -1\n- lset 给某个元素赋值\n    -  Lset list5 0 “deom”\n- lrem 删除list表中的数据\n    - Lrem list6 1 “luowen”\n- ltrim 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除\n    - `LTRIM KEY_NAME START STOP`\n- lpop 从链表的头部弹出一个元素\n    - `LLEN KEY_NAME`\n- rpop 从链表的尾部弹出一个元素\n    - `LLEN KEY_NAME`\n- rpoplpush 从一个链表弹出,在从头部压入到另一个链表\n    - `RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME`\n- lindex 返回一个list小标的索引值\n- llen 返回这个链表的元素的长度\n\n---\n\n## set\n\n- sadd 向集合中插入一条数据\n- srem 删除集合中的一个元素\n- smembers 查看集合中的元素\n- spop 从集合随机弹出一个元素,返回键值\n- sdiff 两个集合的差集 返回两个集合不一样的,根据第一个集合为标准\n- sdiffstroe 将两个差集存储到另外一个集合        \n- sinter 将两个集合的交集\n- sinterstore 将两个集合的交集存储到另外一个集合中\n- sunion 将两个集合并集\n- sunionstore 将两个集合并集并存储到另外一个集合中\n- smove 将以个集合中的元素移动到另外一个集合中\n- scard 查看集合中元素的个数\n- sismember 判断是否是集合中的元素\n- srandmember myset14 随机取出myset1 中的元素\n\n\n---\n\n## SortSet\n\n- zadd 添加到有序集合中区\n- zrem 删除有序集合中的元素\n- zincrby myzsent luowen1 3将myzsent luown1的序号更改为4 如果没有,就创建他\n- zrank 找到myzsent 对应值得索引\n- zrevrank 反过来去索引\n- zrangebyscore 返回集合中指定的元素\n- zcount 返回指定空间的数量\n- zcard 返回集合中所有元素的个数\n- zremrangbyrank 删除集合中指定区间的元素,并将索引进行排序\n- zremrangbyscore 删除集合中指定元素,按循序进行排序\n- sadd 向集合中插入一条数据\n","slug":"201704-2017-04-10-redis常用数据结构和操作","published":1,"date":"2018-04-12T15:20:38.840Z","updated":"2018-04-12T15:20:38.840Z","comments":1,"photos":[],"link":"","_id":"cjfwomb7r0089ass6u9y6e21y","content":"<p>Redis常用的数据结构有5种 String Hash List Set SortSet</p>\n<a id=\"more\"></a>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><ul>\n<li>Set name fitz 设置name = fitz 存储</li>\n<li>Get name 获取设置好的name的值</li>\n<li>Setnx name fitz 设置name键值为fitz 如果存在,则返回0 不存在返回1</li>\n<li>Mset name fitz age 23 salary 233333 设置多个键值对 一块存错 全成功,全失败</li>\n<li>Msetnx name fitz age 23 hoby basketball 如果设置多个键值对中有存在返回失败</li>\n<li>Mget name age salary 获取多个键的值</li>\n<li>Getset name fitz 获取name的值,并设置新的值为fitz</li>\n<li>Setrange name 3 fitz 将键name 3字符和面的进行替换 结果为luofitz</li>\n<li>Getrange name 3 6 获取键name的值 结果为luofitz</li>\n<li>Append name .com 给键nane追加.com 结果为fitz.com</li>\n<li>Incr age 设置每个值自增 返回结果为24</li>\n<li>Incrby age 6 给name加上6 如果是负数则键</li>\n<li>Decr 与incr相反</li>\n<li>Decrby 与decrby相反</li>\n<li>Strlen 返回键对应的值得字符长度</li>\n</ul>\n<hr>\n<h2 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h2><ul>\n<li>Hset user:001 name fitz    设置哈表名字user 表里面的001 的name 设置为 fitz</li>\n<li>Hsetnx user name maomao    设置哈希表名字中的name 存在,设置不成功</li>\n<li>Hget user:001 name 获取hash表的user的001的值</li>\n<li>Hmset user:003 name maomao age 23 批量设置</li>\n<li>Hmget user:003 name age 批量获取user:003的值</li>\n<li>Hincrby user:003 age 3     给hash表的age值加上3</li>\n<li>Hexists user:003 name 判断hash表中式否存在name的键</li>\n<li>Hlen user:003 返回hash表的所有的字段的数目</li>\n<li>Hkeys user:003 返回hash表的所有字段</li>\n<li>Hvals user:003 返回hash表中所有的值</li>\n<li>Hgetall user:003 返回所有的字段和值</li>\n<li>Hdel user:003 name 对hash的name的值和键删除</li>\n</ul>\n<hr>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p><code>栈:先进后出 队列:先进先出</code></p>\n<ul>\n<li>lpush 从头压入<ul>\n<li>Lpush list1 “world”</li>\n<li>lpush list1 ‘hello”</li>\n<li>Lrange list1 0 -1 把链表中的数据从0到尾全部取出</li>\n</ul>\n</li>\n<li>rpush 从尾部压入<ul>\n<li>rpush list2 “world”</li>\n<li>rpush list2 “luowen”</li>\n<li>lrange list2 0 -1</li>\n</ul>\n</li>\n<li>linsert 插入出入数据<ul>\n<li>Linsert list3 before maomao love</li>\n<li>Lrange list3 0 -1</li>\n<li>Linsert list3 after luowen love</li>\n<li>Lrange list3 0 -1</li>\n</ul>\n</li>\n<li>lset 给某个元素赋值<ul>\n<li>Lset list5 0 “deom”</li>\n</ul>\n</li>\n<li>lrem 删除list表中的数据<ul>\n<li>Lrem list6 1 “luowen”</li>\n</ul>\n</li>\n<li>ltrim 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除<ul>\n<li><code>LTRIM KEY_NAME START STOP</code></li>\n</ul>\n</li>\n<li>lpop 从链表的头部弹出一个元素<ul>\n<li><code>LLEN KEY_NAME</code></li>\n</ul>\n</li>\n<li>rpop 从链表的尾部弹出一个元素<ul>\n<li><code>LLEN KEY_NAME</code></li>\n</ul>\n</li>\n<li>rpoplpush 从一个链表弹出,在从头部压入到另一个链表<ul>\n<li><code>RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME</code></li>\n</ul>\n</li>\n<li>lindex 返回一个list小标的索引值</li>\n<li>llen 返回这个链表的元素的长度</li>\n</ul>\n<hr>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><ul>\n<li>sadd 向集合中插入一条数据</li>\n<li>srem 删除集合中的一个元素</li>\n<li>smembers 查看集合中的元素</li>\n<li>spop 从集合随机弹出一个元素,返回键值</li>\n<li>sdiff 两个集合的差集 返回两个集合不一样的,根据第一个集合为标准</li>\n<li>sdiffstroe 将两个差集存储到另外一个集合        </li>\n<li>sinter 将两个集合的交集</li>\n<li>sinterstore 将两个集合的交集存储到另外一个集合中</li>\n<li>sunion 将两个集合并集</li>\n<li>sunionstore 将两个集合并集并存储到另外一个集合中</li>\n<li>smove 将以个集合中的元素移动到另外一个集合中</li>\n<li>scard 查看集合中元素的个数</li>\n<li>sismember 判断是否是集合中的元素</li>\n<li>srandmember myset14 随机取出myset1 中的元素</li>\n</ul>\n<hr>\n<h2 id=\"SortSet\"><a href=\"#SortSet\" class=\"headerlink\" title=\"SortSet\"></a>SortSet</h2><ul>\n<li>zadd 添加到有序集合中区</li>\n<li>zrem 删除有序集合中的元素</li>\n<li>zincrby myzsent luowen1 3将myzsent luown1的序号更改为4 如果没有,就创建他</li>\n<li>zrank 找到myzsent 对应值得索引</li>\n<li>zrevrank 反过来去索引</li>\n<li>zrangebyscore 返回集合中指定的元素</li>\n<li>zcount 返回指定空间的数量</li>\n<li>zcard 返回集合中所有元素的个数</li>\n<li>zremrangbyrank 删除集合中指定区间的元素,并将索引进行排序</li>\n<li>zremrangbyscore 删除集合中指定元素,按循序进行排序</li>\n<li>sadd 向集合中插入一条数据</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Redis常用的数据结构有5种 String Hash List Set SortSet</p>","more":"<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><ul>\n<li>Set name fitz 设置name = fitz 存储</li>\n<li>Get name 获取设置好的name的值</li>\n<li>Setnx name fitz 设置name键值为fitz 如果存在,则返回0 不存在返回1</li>\n<li>Mset name fitz age 23 salary 233333 设置多个键值对 一块存错 全成功,全失败</li>\n<li>Msetnx name fitz age 23 hoby basketball 如果设置多个键值对中有存在返回失败</li>\n<li>Mget name age salary 获取多个键的值</li>\n<li>Getset name fitz 获取name的值,并设置新的值为fitz</li>\n<li>Setrange name 3 fitz 将键name 3字符和面的进行替换 结果为luofitz</li>\n<li>Getrange name 3 6 获取键name的值 结果为luofitz</li>\n<li>Append name .com 给键nane追加.com 结果为fitz.com</li>\n<li>Incr age 设置每个值自增 返回结果为24</li>\n<li>Incrby age 6 给name加上6 如果是负数则键</li>\n<li>Decr 与incr相反</li>\n<li>Decrby 与decrby相反</li>\n<li>Strlen 返回键对应的值得字符长度</li>\n</ul>\n<hr>\n<h2 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h2><ul>\n<li>Hset user:001 name fitz    设置哈表名字user 表里面的001 的name 设置为 fitz</li>\n<li>Hsetnx user name maomao    设置哈希表名字中的name 存在,设置不成功</li>\n<li>Hget user:001 name 获取hash表的user的001的值</li>\n<li>Hmset user:003 name maomao age 23 批量设置</li>\n<li>Hmget user:003 name age 批量获取user:003的值</li>\n<li>Hincrby user:003 age 3     给hash表的age值加上3</li>\n<li>Hexists user:003 name 判断hash表中式否存在name的键</li>\n<li>Hlen user:003 返回hash表的所有的字段的数目</li>\n<li>Hkeys user:003 返回hash表的所有字段</li>\n<li>Hvals user:003 返回hash表中所有的值</li>\n<li>Hgetall user:003 返回所有的字段和值</li>\n<li>Hdel user:003 name 对hash的name的值和键删除</li>\n</ul>\n<hr>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p><code>栈:先进后出 队列:先进先出</code></p>\n<ul>\n<li>lpush 从头压入<ul>\n<li>Lpush list1 “world”</li>\n<li>lpush list1 ‘hello”</li>\n<li>Lrange list1 0 -1 把链表中的数据从0到尾全部取出</li>\n</ul>\n</li>\n<li>rpush 从尾部压入<ul>\n<li>rpush list2 “world”</li>\n<li>rpush list2 “luowen”</li>\n<li>lrange list2 0 -1</li>\n</ul>\n</li>\n<li>linsert 插入出入数据<ul>\n<li>Linsert list3 before maomao love</li>\n<li>Lrange list3 0 -1</li>\n<li>Linsert list3 after luowen love</li>\n<li>Lrange list3 0 -1</li>\n</ul>\n</li>\n<li>lset 给某个元素赋值<ul>\n<li>Lset list5 0 “deom”</li>\n</ul>\n</li>\n<li>lrem 删除list表中的数据<ul>\n<li>Lrem list6 1 “luowen”</li>\n</ul>\n</li>\n<li>ltrim 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除<ul>\n<li><code>LTRIM KEY_NAME START STOP</code></li>\n</ul>\n</li>\n<li>lpop 从链表的头部弹出一个元素<ul>\n<li><code>LLEN KEY_NAME</code></li>\n</ul>\n</li>\n<li>rpop 从链表的尾部弹出一个元素<ul>\n<li><code>LLEN KEY_NAME</code></li>\n</ul>\n</li>\n<li>rpoplpush 从一个链表弹出,在从头部压入到另一个链表<ul>\n<li><code>RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME</code></li>\n</ul>\n</li>\n<li>lindex 返回一个list小标的索引值</li>\n<li>llen 返回这个链表的元素的长度</li>\n</ul>\n<hr>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><ul>\n<li>sadd 向集合中插入一条数据</li>\n<li>srem 删除集合中的一个元素</li>\n<li>smembers 查看集合中的元素</li>\n<li>spop 从集合随机弹出一个元素,返回键值</li>\n<li>sdiff 两个集合的差集 返回两个集合不一样的,根据第一个集合为标准</li>\n<li>sdiffstroe 将两个差集存储到另外一个集合        </li>\n<li>sinter 将两个集合的交集</li>\n<li>sinterstore 将两个集合的交集存储到另外一个集合中</li>\n<li>sunion 将两个集合并集</li>\n<li>sunionstore 将两个集合并集并存储到另外一个集合中</li>\n<li>smove 将以个集合中的元素移动到另外一个集合中</li>\n<li>scard 查看集合中元素的个数</li>\n<li>sismember 判断是否是集合中的元素</li>\n<li>srandmember myset14 随机取出myset1 中的元素</li>\n</ul>\n<hr>\n<h2 id=\"SortSet\"><a href=\"#SortSet\" class=\"headerlink\" title=\"SortSet\"></a>SortSet</h2><ul>\n<li>zadd 添加到有序集合中区</li>\n<li>zrem 删除有序集合中的元素</li>\n<li>zincrby myzsent luowen1 3将myzsent luown1的序号更改为4 如果没有,就创建他</li>\n<li>zrank 找到myzsent 对应值得索引</li>\n<li>zrevrank 反过来去索引</li>\n<li>zrangebyscore 返回集合中指定的元素</li>\n<li>zcount 返回指定空间的数量</li>\n<li>zcard 返回集合中所有元素的个数</li>\n<li>zremrangbyrank 删除集合中指定区间的元素,并将索引进行排序</li>\n<li>zremrangbyscore 删除集合中指定元素,按循序进行排序</li>\n<li>sadd 向集合中插入一条数据</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfwomb3f0000ass61bmotqa2","category_id":"cjfwomb3m0002ass6b7edxb37","_id":"cjfwomb3v000cass6bnldxaiw"},{"post_id":"cjfwomb3k0001ass6bbtomwyg","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb41000jass6plomq7dg"},{"post_id":"cjfwomb3p0004ass6miquv1p2","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb43000oass6hj6bldql"},{"post_id":"cjfwomb3q0005ass6qzl97060","category_id":"cjfwomb40000iass6ot1q26t2","_id":"cjfwomb47000vass6rd5m9jzp"},{"post_id":"cjfwomb3r0006ass6z7fkkjr7","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb4a0010ass6h3y7pd9q"},{"post_id":"cjfwomb3t000aass6tqukl225","category_id":"cjfwomb46000uass6yxzgxx7r","_id":"cjfwomb4d0016ass6zeps7y25"},{"post_id":"cjfwomb48000zass6v6dca0ac","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb4f001aass6jc6qlzct"},{"post_id":"cjfwomb4a0012ass61uewhf4m","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb4h001dass6cqedpry5"},{"post_id":"cjfwomb4b0014ass6l36j27ju","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb4i001gass6mb9exa5r"},{"post_id":"cjfwomb3v000bass6jgu27lz4","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb4k001kass6eksum2ma"},{"post_id":"cjfwomb4d0017ass6q75pyq0v","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb4m001oass67ynp8u5j"},{"post_id":"cjfwomb4f001bass6spfuqlu1","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb4o001sass6t42zuyv4"},{"post_id":"cjfwomb3x000fass6r66lk9li","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb4q001wass6tsuxlunr"},{"post_id":"cjfwomb4h001eass6r1azrau4","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb4s0020ass6dbvwaza6"},{"post_id":"cjfwomb4j001iass6wgny7icz","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb4u0024ass6fdvquyp3"},{"post_id":"cjfwomb3y000hass6y5xkjn97","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb4w0028ass63akuehnu"},{"post_id":"cjfwomb4m001qass60bnujkeh","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb4y002cass63u5qfahe"},{"post_id":"cjfwomb41000lass6bz9oajv4","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb50002gass6vyvhsshk"},{"post_id":"cjfwomb4o001tass6n33jhofk","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb51002kass6fha82m71"},{"post_id":"cjfwomb4r001yass62770zocc","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb53002oass6v66vh2e4"},{"post_id":"cjfwomb42000nass6uj92dkqn","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb55002sass6svo3rm65"},{"post_id":"cjfwomb4s0021ass61ku2o06d","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb57002wass6ifgevp8r"},{"post_id":"cjfwomb4u0026ass607xk55e4","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb590030ass67ifewo1l"},{"post_id":"cjfwomb44000rass6m4805m4o","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb5b0034ass6bqixw0ce"},{"post_id":"cjfwomb4w0029ass6xeb7su9i","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb5d0038ass6lddki700"},{"post_id":"cjfwomb4y002eass66jmzder2","category_id":"cjfwomb3m0002ass6b7edxb37","_id":"cjfwomb5f003cass6yyekt22w"},{"post_id":"cjfwomb45000tass64b3amjov","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb5h003gass61e1cwon5"},{"post_id":"cjfwomb47000wass6onq5bpvf","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb5j003kass6rtbt4xfd"},{"post_id":"cjfwomb54002pass6bz2bkl6t","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb5l003nass6cig16rmy"},{"post_id":"cjfwomb55002uass6x5aesg28","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb5n003rass6pnf1o70g"},{"post_id":"cjfwomb4k001lass65de3nrxh","category_id":"cjfwomb55002qass6df8xll5f","_id":"cjfwomb5p003vass69gkrrgh7"},{"post_id":"cjfwomb57002xass6xecg1yog","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb5q003zass6pldwa4tk"},{"post_id":"cjfwomb590031ass61mnnyrk9","category_id":"cjfwomb4a0011ass6oojkw9cq","_id":"cjfwomb5r0042ass6b4iedebr"},{"post_id":"cjfwomb50002hass6djihsfrt","category_id":"cjfwomb59002yass6d99ejwz9","_id":"cjfwomb5u0046ass6p2lcodel"},{"post_id":"cjfwomb5b0035ass670m3zqs4","category_id":"cjfwomb3m0002ass6b7edxb37","_id":"cjfwomb5w004aass6hnhiwqcm"},{"post_id":"cjfwomb52002mass6kn8orfsm","category_id":"cjfwomb5d0036ass6vekw8du2","_id":"cjfwomb5x004cass6cgjanuyq"},{"post_id":"cjfwomb5f003dass6u6dexs0v","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb61004gass6i71ql6kk"},{"post_id":"cjfwomb5h003hass6pz9xtg1a","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb62004jass6q0d5y8tj"},{"post_id":"cjfwomb5j003lass6ivirp3l5","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb64004oass61dvxugf5"},{"post_id":"cjfwomb5d0039ass6fw4q69tx","category_id":"cjfwomb5h003fass62774ppnj","_id":"cjfwomb66004rass65vfd29nn"},{"post_id":"cjfwomb5n003sass6tadjgved","category_id":"cjfwomb55002qass6df8xll5f","_id":"cjfwomb68004wass6t1e0pk8h"},{"post_id":"cjfwomb5p003wass68cff4y3x","category_id":"cjfwomb55002qass6df8xll5f","_id":"cjfwomb6a004zass6wz9s6hc6"},{"post_id":"cjfwomb5l003oass6bbunbsfk","category_id":"cjfwomb5o003tass6tt1xrxww","_id":"cjfwomb6c0053ass6lzg5vokz"},{"post_id":"cjfwomb5q0040ass6q11ezanf","category_id":"cjfwomb5u0044ass6x6hb5uao","_id":"cjfwomb6f0057ass6z6n5e8rb"},{"post_id":"cjfwomb5s0043ass6ntjysckl","category_id":"cjfwomb60004eass616mx3k82","_id":"cjfwomb6g005aass6u2ixrrpm"},{"post_id":"cjfwomb62004kass6p2pfpwp2","category_id":"cjfwomb3m0002ass6b7edxb37","_id":"cjfwomb6i005dass6y1e8ehj4"},{"post_id":"cjfwomb64004pass6pkburrxe","category_id":"cjfwomb3m0002ass6b7edxb37","_id":"cjfwomb6k005hass67onlw5cl"},{"post_id":"cjfwomb5u0048ass6u1huuss3","category_id":"cjfwomb60004eass616mx3k82","_id":"cjfwomb6l005kass6b27lcaab"},{"post_id":"cjfwomb5w004bass66b844cyv","category_id":"cjfwomb60004eass616mx3k82","_id":"cjfwomb6n005nass6wz3p4nxd"},{"post_id":"cjfwomb5x004dass61jtwq5eq","category_id":"cjfwomb6b0051ass6ywux0p21","_id":"cjfwomb6o005sass6f2dtsz5d"},{"post_id":"cjfwomb6f0058ass6s8xyx8tx","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb6q005vass655mhy5h7"},{"post_id":"cjfwomb61004iass6ba65pryu","category_id":"cjfwomb6g0059ass6xs503dic","_id":"cjfwomb6r005yass6gywtzci0"},{"post_id":"cjfwomb6l005lass6tx7b79mr","category_id":"cjfwomb3m0002ass6b7edxb37","_id":"cjfwomb6t0062ass6exqd04kj"},{"post_id":"cjfwomb66004sass6d2xpqnkn","category_id":"cjfwomb6j005gass6nnxcyiu6","_id":"cjfwomb6v0065ass675bkoeut"},{"post_id":"cjfwomb68004xass6qp2qzaxz","category_id":"cjfwomb6o005pass627loms7f","_id":"cjfwomb6z0069ass6tjt0ktl2"},{"post_id":"cjfwomb6a0050ass6ihz2dlp9","category_id":"cjfwomb6r005xass6va4v1fd9","_id":"cjfwomb70006cass6po787iut"},{"post_id":"cjfwomb6y0067ass66wa28h6k","category_id":"cjfwomb6r005xass6va4v1fd9","_id":"cjfwomb72006hass667s4hon9"},{"post_id":"cjfwomb6c0055ass6n5r50trc","category_id":"cjfwomb6r005xass6va4v1fd9","_id":"cjfwomb73006lass6z3nbzv0s"},{"post_id":"cjfwomb70006dass6xzvyp32h","category_id":"cjfwomb3m0002ass6b7edxb37","_id":"cjfwomb74006pass65nqksu1c"},{"post_id":"cjfwomb6h005bass6omklmnm3","category_id":"cjfwomb70006bass60pcg3vot","_id":"cjfwomb76006sass66lkyetwp"},{"post_id":"cjfwomb71006gass62itnkfao","category_id":"cjfwomb3m0002ass6b7edxb37","_id":"cjfwomb77006wass6zo0h33td"},{"post_id":"cjfwomb72006kass6idzp2a4e","category_id":"cjfwomb6r005xass6va4v1fd9","_id":"cjfwomb79006zass6tva9coqv"},{"post_id":"cjfwomb6i005fass6u3ny88j9","category_id":"cjfwomb72006iass6rffrd6t9","_id":"cjfwomb7a0073ass6rg935old"},{"post_id":"cjfwomb6k005iass6803ch61k","category_id":"cjfwomb6r005xass6va4v1fd9","_id":"cjfwomb7b0076ass68g35xmjs"},{"post_id":"cjfwomb790072ass6bb6fz85q","category_id":"cjfwomb6o005pass627loms7f","_id":"cjfwomb7e007cass6qm3pfwp2"},{"post_id":"cjfwomb6n005oass6cgfe3bjl","category_id":"cjfwomb790070ass6u4hh2kf5","_id":"cjfwomb7g007fass6g0yx9z7u"},{"post_id":"cjfwomb7b0075ass6kp2kyaxf","category_id":"cjfwomb6o005pass627loms7f","_id":"cjfwomb7h007jass6zwold9kz"},{"post_id":"cjfwomb7c0079ass6rq5ltu36","category_id":"cjfwomb6o005pass627loms7f","_id":"cjfwomb7i007mass60kways7z"},{"post_id":"cjfwomb6o005tass62rol0clq","category_id":"cjfwomb790070ass6u4hh2kf5","_id":"cjfwomb7k007pass6wvfhm6n7"},{"post_id":"cjfwomb7d007bass63gcx9fb0","category_id":"cjfwomb6o005pass627loms7f","_id":"cjfwomb7l007tass612z2fkb0"},{"post_id":"cjfwomb6q005wass6i95tw6uy","category_id":"cjfwomb790070ass6u4hh2kf5","_id":"cjfwomb7m007wass6u1zuaab3"},{"post_id":"cjfwomb6r0060ass6p83k7udz","category_id":"cjfwomb790070ass6u4hh2kf5","_id":"cjfwomb7o0080ass6l0ytbrx7"},{"post_id":"cjfwomb7j007oass6f06l39r6","category_id":"cjfwomb6o005pass627loms7f","_id":"cjfwomb7p0084ass6efg4kwtc"},{"post_id":"cjfwomb6t0063ass60i2y2dfz","category_id":"cjfwomb7k007rass64xgwoh43","_id":"cjfwomb7r0088ass61f9w352u"},{"post_id":"cjfwomb7m007vass6s9cg1nzn","category_id":"cjfwomb3m0002ass6b7edxb37","_id":"cjfwomb7s008aass6viuhred5"},{"post_id":"cjfwomb6z006aass6zfp8mb6r","category_id":"cjfwomb7n007yass6xadu0ppx","_id":"cjfwomb7u008dass69nltcv97"},{"post_id":"cjfwomb7o0083ass6x9i57dhi","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb7v008gass6dq6xda3d"},{"post_id":"cjfwomb7q0087ass6mlx0gv9t","category_id":"cjfwomb3s0007ass6qdhrbvsn","_id":"cjfwomb7v008iass6vetuazkg"},{"post_id":"cjfwomb7r0089ass6u9y6e21y","category_id":"cjfwomb70006bass60pcg3vot","_id":"cjfwomb7w008lass6234evi52"},{"post_id":"cjfwomb74006oass6yicxre3f","category_id":"cjfwomb7q0086ass60omcmqa7","_id":"cjfwomb7w008nass6pj43na2z"},{"post_id":"cjfwomb75006rass66ct50eqj","category_id":"cjfwomb7q0086ass60omcmqa7","_id":"cjfwomb7x008qass65thkc5jp"},{"post_id":"cjfwomb77006vass6nnk6lhd9","category_id":"cjfwomb7q0086ass60omcmqa7","_id":"cjfwomb7x008tass6joifwtyx"},{"post_id":"cjfwomb78006yass6y7s9jsnq","category_id":"cjfwomb7q0086ass60omcmqa7","_id":"cjfwomb7y008vass6b1ajnqfp"},{"post_id":"cjfwomb7f007eass6dsmy8k85","category_id":"cjfwomb7x008sass690yguvao","_id":"cjfwomb7y008zass68ti6a9lh"},{"post_id":"cjfwomb7g007iass6sbx6nc9d","category_id":"cjfwomb7y008xass6h6zbg8rr","_id":"cjfwomb7z0094ass6ovhmarn9"},{"post_id":"cjfwomb7i007lass6kv7mebyl","category_id":"cjfwomb7x008sass690yguvao","_id":"cjfwomb800098ass67bfvkzoi"},{"post_id":"cjfwomb7k007sass69lzob9a9","category_id":"cjfwomb7x008sass690yguvao","_id":"cjfwomb81009bass6dajb7idi"},{"post_id":"cjfwomb7n007zass6h15xtbiy","category_id":"cjfwomb800097ass6s4kflk8u","_id":"cjfwomb82009eass6wbwtaczf"}],"PostTag":[{"post_id":"cjfwomb3f0000ass61bmotqa2","tag_id":"cjfwomb3o0003ass6siz52wo5","_id":"cjfwomb3t0009ass6fbzg60oe"},{"post_id":"cjfwomb3k0001ass6bbtomwyg","tag_id":"cjfwomb3s0008ass6oxy6od4p","_id":"cjfwomb3y000gass6nh3t4adz"},{"post_id":"cjfwomb3p0004ass6miquv1p2","tag_id":"cjfwomb3w000eass6omcnvzfi","_id":"cjfwomb42000mass6imeo1jms"},{"post_id":"cjfwomb3q0005ass6qzl97060","tag_id":"cjfwomb41000kass6dt8olq65","_id":"cjfwomb45000sass6osw3ko5n"},{"post_id":"cjfwomb3r0006ass6z7fkkjr7","tag_id":"cjfwomb44000qass6prhobu9z","_id":"cjfwomb48000yass6zz0kk02o"},{"post_id":"cjfwomb3t000aass6tqukl225","tag_id":"cjfwomb48000xass68t7735wc","_id":"cjfwomb4c0015ass6v7at4rpm"},{"post_id":"cjfwomb3v000bass6jgu27lz4","tag_id":"cjfwomb4b0013ass6stu1ydea","_id":"cjfwomb4g001cass6l0gzh3qb"},{"post_id":"cjfwomb3x000fass6r66lk9li","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb4k001jass61l2m86p4"},{"post_id":"cjfwomb4h001eass6r1azrau4","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb4m001nass6aoh3mgl5"},{"post_id":"cjfwomb3y000hass6y5xkjn97","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb4o001rass6ortxgps9"},{"post_id":"cjfwomb4m001qass60bnujkeh","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb4q001vass6zh15lrnv"},{"post_id":"cjfwomb41000lass6bz9oajv4","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb4s001zass6qonikpzi"},{"post_id":"cjfwomb4o001tass6n33jhofk","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb4u0023ass6ao2f7itm"},{"post_id":"cjfwomb4r001yass62770zocc","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb4w0027ass69f1pxcrm"},{"post_id":"cjfwomb42000nass6uj92dkqn","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb4y002bass602dr5eyi"},{"post_id":"cjfwomb4s0021ass61ku2o06d","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb50002fass6ao05apg9"},{"post_id":"cjfwomb4u0026ass607xk55e4","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb51002jass63x6rjn04"},{"post_id":"cjfwomb44000rass6m4805m4o","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb53002nass6nlic3hjg"},{"post_id":"cjfwomb4w0029ass6xeb7su9i","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb55002rass68t7yfiw8"},{"post_id":"cjfwomb4y002eass66jmzder2","tag_id":"cjfwomb3o0003ass6siz52wo5","_id":"cjfwomb57002vass6epawnfji"},{"post_id":"cjfwomb45000tass64b3amjov","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb59002zass6onedtd78"},{"post_id":"cjfwomb47000wass6onq5bpvf","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb5b0033ass6wwtynx6s"},{"post_id":"cjfwomb54002pass6bz2bkl6t","tag_id":"cjfwomb3s0008ass6oxy6od4p","_id":"cjfwomb5d0037ass60uymvan9"},{"post_id":"cjfwomb55002uass6x5aesg28","tag_id":"cjfwomb3s0008ass6oxy6od4p","_id":"cjfwomb5f003bass6c1njutjc"},{"post_id":"cjfwomb57002xass6xecg1yog","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb5h003eass6ke9qscvv"},{"post_id":"cjfwomb48000zass6v6dca0ac","tag_id":"cjfwomb55002tass6g1zcusm1","_id":"cjfwomb5j003jass6df088scn"},{"post_id":"cjfwomb590031ass61mnnyrk9","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb5l003mass6j63hncyl"},{"post_id":"cjfwomb5b0035ass670m3zqs4","tag_id":"cjfwomb3o0003ass6siz52wo5","_id":"cjfwomb5n003qass6i46izvt7"},{"post_id":"cjfwomb4a0012ass61uewhf4m","tag_id":"cjfwomb5b0032ass6wz8im4p0","_id":"cjfwomb5p003uass6vg035z4i"},{"post_id":"cjfwomb4b0014ass6l36j27ju","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb5q003yass6r2c62v5y"},{"post_id":"cjfwomb4d0017ass6q75pyq0v","tag_id":"cjfwomb4f0019ass6or2kptpr","_id":"cjfwomb5r0041ass6la6a0bfj"},{"post_id":"cjfwomb4f001bass6spfuqlu1","tag_id":"cjfwomb5m003pass6eii085v7","_id":"cjfwomb5u0045ass6lwjttng1"},{"post_id":"cjfwomb4j001iass6wgny7icz","tag_id":"cjfwomb5q003xass6e345s8yu","_id":"cjfwomb5w0049ass6xdtknify"},{"post_id":"cjfwomb4k001lass65de3nrxh","tag_id":"cjfwomb5u0047ass66nxvr97b","_id":"cjfwomb61004hass6teks74t6"},{"post_id":"cjfwomb61004iass6ba65pryu","tag_id":"cjfwomb60004fass6omy4zhc7","_id":"cjfwomb64004nass6sozips9u"},{"post_id":"cjfwomb50002hass6djihsfrt","tag_id":"cjfwomb60004fass6omy4zhc7","_id":"cjfwomb65004qass6t0lo0jje"},{"post_id":"cjfwomb62004kass6p2pfpwp2","tag_id":"cjfwomb3o0003ass6siz52wo5","_id":"cjfwomb68004vass6y9xfgsez"},{"post_id":"cjfwomb64004pass6pkburrxe","tag_id":"cjfwomb3o0003ass6siz52wo5","_id":"cjfwomb6a004yass64pmyvdip"},{"post_id":"cjfwomb52002mass6kn8orfsm","tag_id":"cjfwomb64004mass60qr6q1rh","_id":"cjfwomb6c0052ass6xe995h1m"},{"post_id":"cjfwomb5d0039ass6fw4q69tx","tag_id":"cjfwomb67004uass6p5x7bku6","_id":"cjfwomb6f0056ass6t9kbkqw2"},{"post_id":"cjfwomb5f003dass6u6dexs0v","tag_id":"cjfwomb6c0054ass68hvzybdm","_id":"cjfwomb6i005eass67p0j4xtc"},{"post_id":"cjfwomb5h003hass6pz9xtg1a","tag_id":"cjfwomb6i005cass64v0k9k5l","_id":"cjfwomb6m005mass6gp308zq4"},{"post_id":"cjfwomb6l005lass6tx7b79mr","tag_id":"cjfwomb3o0003ass6siz52wo5","_id":"cjfwomb6o005rass6vkq7ftt3"},{"post_id":"cjfwomb5j003lass6ivirp3l5","tag_id":"cjfwomb6l005jass62px0ycyj","_id":"cjfwomb6p005uass6sxfx9zjw"},{"post_id":"cjfwomb5l003oass6bbunbsfk","tag_id":"cjfwomb6o005qass6mdmhipzj","_id":"cjfwomb6t0061ass62y3oqn04"},{"post_id":"cjfwomb5n003sass6tadjgved","tag_id":"cjfwomb5u0047ass66nxvr97b","_id":"cjfwomb6z0068ass6n5lbwgjm"},{"post_id":"cjfwomb5p003wass68cff4y3x","tag_id":"cjfwomb6v0066ass6fqszicic","_id":"cjfwomb71006fass6s9lsferl"},{"post_id":"cjfwomb70006dass6xzvyp32h","tag_id":"cjfwomb3o0003ass6siz52wo5","_id":"cjfwomb72006jass6ykummp54"},{"post_id":"cjfwomb71006gass62itnkfao","tag_id":"cjfwomb3o0003ass6siz52wo5","_id":"cjfwomb74006nass6qkneqber"},{"post_id":"cjfwomb5q0040ass6q11ezanf","tag_id":"cjfwomb71006eass63tapzvhh","_id":"cjfwomb75006qass6aantn8o5"},{"post_id":"cjfwomb5s0043ass6ntjysckl","tag_id":"cjfwomb73006mass6pctyo8g6","_id":"cjfwomb78006xass61sbtishw"},{"post_id":"cjfwomb5u0048ass6u1huuss3","tag_id":"cjfwomb76006uass6hpcfgy5x","_id":"cjfwomb7a0074ass6h5b0vkcv"},{"post_id":"cjfwomb5w004bass66b844cyv","tag_id":"cjfwomb73006mass6pctyo8g6","_id":"cjfwomb7d007aass6wnhswi0m"},{"post_id":"cjfwomb5x004dass61jtwq5eq","tag_id":"cjfwomb7c0078ass6d8w92q2e","_id":"cjfwomb7g007hass6rkffe4ik"},{"post_id":"cjfwomb66004sass6d2xpqnkn","tag_id":"cjfwomb7g007gass6aghkhses","_id":"cjfwomb7k007qass6zv823q62"},{"post_id":"cjfwomb68004xass6qp2qzaxz","tag_id":"cjfwomb7j007nass6r3rh7t79","_id":"cjfwomb7n007xass645qq7i3v"},{"post_id":"cjfwomb7m007vass6s9cg1nzn","tag_id":"cjfwomb3o0003ass6siz52wo5","_id":"cjfwomb7o0081ass613j7dn0x"},{"post_id":"cjfwomb6a0050ass6ihz2dlp9","tag_id":"cjfwomb7l007uass6tdtpuwvw","_id":"cjfwomb7q0085ass6925ijmlm"},{"post_id":"cjfwomb7q0087ass6mlx0gv9t","tag_id":"cjfwomb3s0008ass6oxy6od4p","_id":"cjfwomb7t008cass66pqup5br"},{"post_id":"cjfwomb6c0055ass6n5r50trc","tag_id":"cjfwomb7o0082ass6f9jl88f5","_id":"cjfwomb7u008fass6ndko7d5p"},{"post_id":"cjfwomb6f0058ass6s8xyx8tx","tag_id":"cjfwomb7s008bass6jerlsl5w","_id":"cjfwomb7v008kass65ssq3hux"},{"post_id":"cjfwomb6h005bass6omklmnm3","tag_id":"cjfwomb7v008hass6j3u1xy5z","_id":"cjfwomb7x008pass6nawkrhpm"},{"post_id":"cjfwomb6i005fass6u3ny88j9","tag_id":"cjfwomb7w008mass6jomnz0k4","_id":"cjfwomb7x008uass63c13rvvi"},{"post_id":"cjfwomb6k005iass6803ch61k","tag_id":"cjfwomb7x008rass6nausq6vp","_id":"cjfwomb7y008yass6abo598d2"},{"post_id":"cjfwomb6n005oass6cgfe3bjl","tag_id":"cjfwomb7y008wass6i8v5u8me","_id":"cjfwomb7z0092ass63vw3u47t"},{"post_id":"cjfwomb6o005tass62rol0clq","tag_id":"cjfwomb7y0090ass6h3ru8h2w","_id":"cjfwomb800096ass6u8shgkrd"},{"post_id":"cjfwomb6q005wass6i95tw6uy","tag_id":"cjfwomb7y008wass6i8v5u8me","_id":"cjfwomb81009aass6e60nnp9b"},{"post_id":"cjfwomb6r0060ass6p83k7udz","tag_id":"cjfwomb7y0090ass6h3ru8h2w","_id":"cjfwomb82009dass6eih85sqt"},{"post_id":"cjfwomb6t0063ass60i2y2dfz","tag_id":"cjfwomb81009cass6cfpj52v4","_id":"cjfwomb82009gass64zf5yrip"},{"post_id":"cjfwomb6y0067ass66wa28h6k","tag_id":"cjfwomb7l007uass6tdtpuwvw","_id":"cjfwomb83009iass6diyx3vgx"},{"post_id":"cjfwomb6z006aass6zfp8mb6r","tag_id":"cjfwomb82009hass69iw3meqf","_id":"cjfwomb83009kass6qnq88n89"},{"post_id":"cjfwomb72006kass6idzp2a4e","tag_id":"cjfwomb7l007uass6tdtpuwvw","_id":"cjfwomb84009mass69ey4bknw"},{"post_id":"cjfwomb74006oass6yicxre3f","tag_id":"cjfwomb83009lass6rged115b","_id":"cjfwomb84009oass6wwyzb3nf"},{"post_id":"cjfwomb75006rass66ct50eqj","tag_id":"cjfwomb83009lass6rged115b","_id":"cjfwomb85009qass6lv1r5571"},{"post_id":"cjfwomb77006vass6nnk6lhd9","tag_id":"cjfwomb83009lass6rged115b","_id":"cjfwomb85009sass6y81a61jr"},{"post_id":"cjfwomb78006yass6y7s9jsnq","tag_id":"cjfwomb83009lass6rged115b","_id":"cjfwomb86009uass61bsiuy07"},{"post_id":"cjfwomb790072ass6bb6fz85q","tag_id":"cjfwomb85009tass6nrjmfx11","_id":"cjfwomb86009wass6f1tpa4q9"},{"post_id":"cjfwomb7b0075ass6kp2kyaxf","tag_id":"cjfwomb85009tass6nrjmfx11","_id":"cjfwomb87009yass6asjja1bc"},{"post_id":"cjfwomb7c0079ass6rq5ltu36","tag_id":"cjfwomb85009tass6nrjmfx11","_id":"cjfwomb8800a0ass6thwyjks7"},{"post_id":"cjfwomb7d007bass63gcx9fb0","tag_id":"cjfwomb85009tass6nrjmfx11","_id":"cjfwomb8800a2ass65snug5ns"},{"post_id":"cjfwomb7f007eass6dsmy8k85","tag_id":"cjfwomb8800a1ass6uzpidybw","_id":"cjfwomb8900a4ass62jnxxe6s"},{"post_id":"cjfwomb7g007iass6sbx6nc9d","tag_id":"cjfwomb8800a3ass6lwvvbdns","_id":"cjfwomb8900a6ass6mvn91ejh"},{"post_id":"cjfwomb7i007lass6kv7mebyl","tag_id":"cjfwomb8800a1ass6uzpidybw","_id":"cjfwomb8a00a8ass68ggnfg6r"},{"post_id":"cjfwomb7j007oass6f06l39r6","tag_id":"cjfwomb85009tass6nrjmfx11","_id":"cjfwomb8a00aaass6k3qiz6ce"},{"post_id":"cjfwomb7k007sass69lzob9a9","tag_id":"cjfwomb8800a1ass6uzpidybw","_id":"cjfwomb8b00acass6kxa4xahx"},{"post_id":"cjfwomb7n007zass6h15xtbiy","tag_id":"cjfwomb8a00abass6lbhs0b3m","_id":"cjfwomb8b00aeass6z8x0845l"},{"post_id":"cjfwomb7o0083ass6x9i57dhi","tag_id":"cjfwomb8b00adass6ere684dt","_id":"cjfwomb8c00agass63pf9gunj"},{"post_id":"cjfwomb7r0089ass6u9y6e21y","tag_id":"cjfwomb7v008hass6j3u1xy5z","_id":"cjfwomb8c00ahass699gnkhyf"}],"Tag":[{"name":"Essay","_id":"cjfwomb3o0003ass6siz52wo5"},{"name":"PHP","_id":"cjfwomb3s0008ass6oxy6od4p"},{"name":"PHP traits","_id":"cjfwomb3w000eass6omcnvzfi"},{"name":"Impression","_id":"cjfwomb41000kass6dt8olq65"},{"name":"PHP 递归","_id":"cjfwomb44000qass6prhobu9z"},{"name":"UEditor","_id":"cjfwomb48000xass68t7735wc"},{"name":"分布式版本控制 Git","_id":"cjfwomb4b0013ass6stu1ydea"},{"name":"Git","_id":"cjfwomb4f0019ass6or2kptpr"},{"name":"upload","_id":"cjfwomb55002tass6g1zcusm1"},{"name":"PHP内置方法","_id":"cjfwomb5b0032ass6wz8im4p0"},{"name":"Ubuntu PHP","_id":"cjfwomb5m003pass6eii085v7"},{"name":"PHP PDO","_id":"cjfwomb5q003xass6e345s8yu"},{"name":"Linux","_id":"cjfwomb5u0047ass66nxvr97b"},{"name":"js","_id":"cjfwomb60004fass6omy4zhc7"},{"name":"Memcached","_id":"cjfwomb64004mass60qr6q1rh"},{"name":"telnet memcached","_id":"cjfwomb67004uass6p5x7bku6"},{"name":"在线支付","_id":"cjfwomb6c0054ass68hvzybdm"},{"name":"memcached","_id":"cjfwomb6i005cass64v0k9k5l"},{"name":"SESSION","_id":"cjfwomb6l005jass62px0ycyj"},{"name":"Linux Vim","_id":"cjfwomb6o005qass6mdmhipzj"},{"name":"sed linux","_id":"cjfwomb6v0066ass6fqszicic"},{"name":"Linux Shell","_id":"cjfwomb71006eass63tapzvhh"},{"name":"Ajax","_id":"cjfwomb73006mass6pctyo8g6"},{"name":"Ajax Jsonp","_id":"cjfwomb76006uass6hpcfgy5x"},{"name":"jQuery DOM","_id":"cjfwomb7c0078ass6d8w92q2e"},{"name":"正则表达式","_id":"cjfwomb7g007gass6aghkhses"},{"name":"php 异步","_id":"cjfwomb7j007nass6r3rh7t79"},{"name":"MySQL","_id":"cjfwomb7l007uass6tdtpuwvw"},{"name":"MySQL MyISAM","_id":"cjfwomb7o0082ass6f9jl88f5"},{"name":"php gif","_id":"cjfwomb7s008bass6jerlsl5w"},{"name":"Redis","_id":"cjfwomb7v008hass6j3u1xy5z"},{"name":"SSL HTTPS","_id":"cjfwomb7w008mass6jomnz0k4"},{"name":"MySQL 增量备份","_id":"cjfwomb7x008rass6nausq6vp"},{"name":"tmux","_id":"cjfwomb7y008wass6i8v5u8me"},{"name":"Tmux","_id":"cjfwomb7y0090ass6h3ru8h2w"},{"name":"LNMP","_id":"cjfwomb81009cass6cfpj52v4"},{"name":"Vim","_id":"cjfwomb82009hass69iw3meqf"},{"name":"Memcache","_id":"cjfwomb83009lass6rged115b"},{"name":"php","_id":"cjfwomb85009tass6nrjmfx11"},{"name":"mysql","_id":"cjfwomb8800a1ass6uzpidybw"},{"name":"面试","_id":"cjfwomb8800a3ass6lwvvbdns"},{"name":"Vue","_id":"cjfwomb8a00abass6lbhs0b3m"},{"name":"PHP Redis","_id":"cjfwomb8b00adass6ere684dt"}]}}