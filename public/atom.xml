<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-12T15:20:38.840Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis常用数据结构和操作</title>
    <link href="http://yoursite.com/2018/04/12/201704-2017-04-10-redis%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/04/12/201704-2017-04-10-redis常用数据结构和操作/</id>
    <published>2018-04-12T15:20:38.840Z</published>
    <updated>2018-04-12T15:20:38.840Z</updated>
    
    <content type="html"><![CDATA[<p>Redis常用的数据结构有5种 String Hash List Set SortSet</p><a id="more"></a><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>Set name fitz 设置name = fitz 存储</li><li>Get name 获取设置好的name的值</li><li>Setnx name fitz 设置name键值为fitz 如果存在,则返回0 不存在返回1</li><li>Mset name fitz age 23 salary 233333 设置多个键值对 一块存错 全成功,全失败</li><li>Msetnx name fitz age 23 hoby basketball 如果设置多个键值对中有存在返回失败</li><li>Mget name age salary 获取多个键的值</li><li>Getset name fitz 获取name的值,并设置新的值为fitz</li><li>Setrange name 3 fitz 将键name 3字符和面的进行替换 结果为luofitz</li><li>Getrange name 3 6 获取键name的值 结果为luofitz</li><li>Append name .com 给键nane追加.com 结果为fitz.com</li><li>Incr age 设置每个值自增 返回结果为24</li><li>Incrby age 6 给name加上6 如果是负数则键</li><li>Decr 与incr相反</li><li>Decrby 与decrby相反</li><li>Strlen 返回键对应的值得字符长度</li></ul><hr><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><ul><li>Hset user:001 name fitz    设置哈表名字user 表里面的001 的name 设置为 fitz</li><li>Hsetnx user name maomao    设置哈希表名字中的name 存在,设置不成功</li><li>Hget user:001 name 获取hash表的user的001的值</li><li>Hmset user:003 name maomao age 23 批量设置</li><li>Hmget user:003 name age 批量获取user:003的值</li><li>Hincrby user:003 age 3     给hash表的age值加上3</li><li>Hexists user:003 name 判断hash表中式否存在name的键</li><li>Hlen user:003 返回hash表的所有的字段的数目</li><li>Hkeys user:003 返回hash表的所有字段</li><li>Hvals user:003 返回hash表中所有的值</li><li>Hgetall user:003 返回所有的字段和值</li><li>Hdel user:003 name 对hash的name的值和键删除</li></ul><hr><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p><code>栈:先进后出 队列:先进先出</code></p><ul><li>lpush 从头压入<ul><li>Lpush list1 “world”</li><li>lpush list1 ‘hello”</li><li>Lrange list1 0 -1 把链表中的数据从0到尾全部取出</li></ul></li><li>rpush 从尾部压入<ul><li>rpush list2 “world”</li><li>rpush list2 “luowen”</li><li>lrange list2 0 -1</li></ul></li><li>linsert 插入出入数据<ul><li>Linsert list3 before maomao love</li><li>Lrange list3 0 -1</li><li>Linsert list3 after luowen love</li><li>Lrange list3 0 -1</li></ul></li><li>lset 给某个元素赋值<ul><li>Lset list5 0 “deom”</li></ul></li><li>lrem 删除list表中的数据<ul><li>Lrem list6 1 “luowen”</li></ul></li><li>ltrim 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除<ul><li><code>LTRIM KEY_NAME START STOP</code></li></ul></li><li>lpop 从链表的头部弹出一个元素<ul><li><code>LLEN KEY_NAME</code></li></ul></li><li>rpop 从链表的尾部弹出一个元素<ul><li><code>LLEN KEY_NAME</code></li></ul></li><li>rpoplpush 从一个链表弹出,在从头部压入到另一个链表<ul><li><code>RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME</code></li></ul></li><li>lindex 返回一个list小标的索引值</li><li>llen 返回这个链表的元素的长度</li></ul><hr><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ul><li>sadd 向集合中插入一条数据</li><li>srem 删除集合中的一个元素</li><li>smembers 查看集合中的元素</li><li>spop 从集合随机弹出一个元素,返回键值</li><li>sdiff 两个集合的差集 返回两个集合不一样的,根据第一个集合为标准</li><li>sdiffstroe 将两个差集存储到另外一个集合        </li><li>sinter 将两个集合的交集</li><li>sinterstore 将两个集合的交集存储到另外一个集合中</li><li>sunion 将两个集合并集</li><li>sunionstore 将两个集合并集并存储到另外一个集合中</li><li>smove 将以个集合中的元素移动到另外一个集合中</li><li>scard 查看集合中元素的个数</li><li>sismember 判断是否是集合中的元素</li><li>srandmember myset14 随机取出myset1 中的元素</li></ul><hr><h2 id="SortSet"><a href="#SortSet" class="headerlink" title="SortSet"></a>SortSet</h2><ul><li>zadd 添加到有序集合中区</li><li>zrem 删除有序集合中的元素</li><li>zincrby myzsent luowen1 3将myzsent luown1的序号更改为4 如果没有,就创建他</li><li>zrank 找到myzsent 对应值得索引</li><li>zrevrank 反过来去索引</li><li>zrangebyscore 返回集合中指定的元素</li><li>zcount 返回指定空间的数量</li><li>zcard 返回集合中所有元素的个数</li><li>zremrangbyrank 删除集合中指定区间的元素,并将索引进行排序</li><li>zremrangbyscore 删除集合中指定元素,按循序进行排序</li><li>sadd 向集合中插入一条数据</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis常用的数据结构有5种 String Hash List Set SortSet&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis锁的正确姿势</title>
    <link href="http://yoursite.com/2018/04/12/201704-2017-04-05-redis%E9%94%81%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
    <id>http://yoursite.com/2018/04/12/201704-2017-04-05-redis锁的正确姿势/</id>
    <published>2018-04-12T15:20:38.840Z</published>
    <updated>2018-04-12T15:20:38.840Z</updated>
    
    <content type="html"><![CDATA[<p>redis是php的好朋友，在php写业务过程中，有时候会使用到锁的概念，同时只能有一个人可以操作某个行为。这个时候我们就要用到锁。锁的方式有好几种，php不能在内存中用锁，不能使用zookeeper加锁，使用数据库做锁又消耗比较大，这个时候我们一般会选用redis做锁机制。</p><a id="more"></a><blockquote><p>setnx</p></blockquote><p>锁在redis中最简单的数据结构就是string。最早的时候，上锁的操作一般使用setnx，这个命令是当:lock不存在的时候set一个val，或许你还会记得使用expire来增加锁的过期，解锁操作就是使用del命令，伪代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Redis::setnx(<span class="string">"my:lock"</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">    Redis::expire(<span class="string">"my:lock"</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">// ... do something</span></span><br><span class="line"></span><br><span class="line">    Redis::del(<span class="string">"my:lock"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实是有问题的，问题就在于setnx和expire中间如果遇到crash等行为，可能这个lock就不会被释放了。于是进一步的优化方案可能是在lock中存储timestamp。判断timestamp的长短。</p><blockquote><p>set</p></blockquote><p>现在官方建议直接使用set来实现锁。我们可以使用set命令来替代setnx，就是下面这个样子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Redis::set(<span class="string">"my:lock"</span>, <span class="number">1</span>, <span class="string">"nx"</span>, <span class="string">"ex"</span>, <span class="number">10</span>)) &#123;</span><br><span class="line">    ... <span class="keyword">do</span> something</span><br><span class="line"></span><br><span class="line">    Redis::del(<span class="string">"my:lock"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码把my:lock设置为1，当且仅当这个lock不存在的时候，设置完成之后设置过期时间为10。</p><p>获取锁的机制是对了，但是删除锁的机制直接使用del是不对的。因为有可能导致误删别人的锁的情况。</p><p>比如，这个锁我上了10s，但是我处理的时间比10s更长，到了10s，这个锁自动过期了，被别人取走了，并且对它重新上锁了。那么这个时候，我再调用Redis::del就是删除别人建立的锁了。</p><p>官方对解锁的命令也有建议，建议使用lua脚本，先进行get，再进行del</p><p>程序变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$token = rand(<span class="number">1</span>, <span class="number">100000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Redis::set(<span class="string">"my:lock"</span>, $token, <span class="string">"nx"</span>, <span class="string">"ex"</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $script = `</span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">"get"</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]</span><br><span class="line">then</span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">"del"</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">end    </span><br><span class="line">    `</span><br><span class="line">    <span class="keyword">return</span> Redis::eval($script, <span class="string">"my:lock"</span>, $token)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lock()) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line"></span><br><span class="line">    unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的token是一个随机数，当lock的时候，往redis的my:lock中存的是这个token，unlock的时候，先get一下lock中的token，如果和我要删除的token是一致的，说明这个锁是之前我set的，否则的话，说明这个锁已经过期，是别人set的，我就不应该对它进行任何操作。</p><p>所以：不要再使用setnx，直接使用set进行锁实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis是php的好朋友，在php写业务过程中，有时候会使用到锁的概念，同时只能有一个人可以操作某个行为。这个时候我们就要用到锁。锁的方式有好几种，php不能在内存中用锁，不能使用zookeeper加锁，使用数据库做锁又消耗比较大，这个时候我们一般会选用redis做锁机制。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP Redis" scheme="http://yoursite.com/tags/PHP-Redis/"/>
    
  </entry>
  
  <entry>
    <title>Vue目录结构</title>
    <link href="http://yoursite.com/2018/04/12/201702-2017-02-06-vuex/"/>
    <id>http://yoursite.com/2018/04/12/201702-2017-02-06-vuex/</id>
    <published>2018-04-12T15:20:38.839Z</published>
    <updated>2018-04-12T15:20:38.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vuex目录结构"><a href="#vuex目录结构" class="headerlink" title="vuex目录结构"></a>vuex目录结构</h2><blockquote><p>|–modules <br><br>  |—–saerch.js <br><br>  |—–searchGrouop.js <br><br>  |–actions.js <br><br>  |–getters.js <br><br>  |–middlewares.js <br><br>  |–mutation-types.js <br><br>  |–store.js <br></p></blockquote>  <a id="more"></a><h3 id="各文件使用说明"><a href="#各文件使用说明" class="headerlink" title="各文件使用说明"></a>各文件使用说明</h3><h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h4><p>module 也就是vuex概念里的store,这里模块拆分了,存放我们实际项目中要使用的vuex模块,一般可以针对组件级别定义.<br>例如这里我们定义了search.js和searchGroup.js 然而module最后会在store.js中统一使用</p><h4 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h4><p>这里定义我们vue组件要操作的动作事件, 比如请求一个异步操作,获取其他组件的状态等</p><h4 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h4><p>getters 定义公用的getters处理 ,例如正常组件里想computed一个状态但在vuex里面不知道怎么处理，就可以在这里处理</p><h4 id="middlewares"><a href="#middlewares" class="headerlink" title="middlewares"></a>middlewares</h4><p>middlewares中间件处理的东西，这里主要开发时候在控制台查看一些处理日志，vuex本身自带,其他没有研究过</p><h4 id="mutation-types"><a href="#mutation-types" class="headerlink" title="mutation-types"></a>mutation-types</h4><p>定义mutation里用到的方法常量值，统一处理在这里，一般都是业务字符串常量</p><h4 id="store"><a href="#store" class="headerlink" title="store"></a>store</h4><p>store.js核心文件，这里就是vuex基本的写法了，先引用vue和vuex 然后user(Vuex),把定义好的modules,middlewares引入进来然后返回一个Vuex.stor</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vuex目录结构&quot;&gt;&lt;a href=&quot;#vuex目录结构&quot; class=&quot;headerlink&quot; title=&quot;vuex目录结构&quot;&gt;&lt;/a&gt;vuex目录结构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;|–modules &lt;br&gt;&lt;br&gt;  |—–saerch.js &lt;br&gt;&lt;br&gt;  |—–searchGrouop.js &lt;br&gt;&lt;br&gt;  |–actions.js &lt;br&gt;&lt;br&gt;  |–getters.js &lt;br&gt;&lt;br&gt;  |–middlewares.js &lt;br&gt;&lt;br&gt;  |–mutation-types.js &lt;br&gt;&lt;br&gt;  |–store.js &lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>你好2017</title>
    <link href="http://yoursite.com/2018/04/12/201701-2017-01-01-%E4%BD%A0%E5%A5%BD2017/"/>
    <id>http://yoursite.com/2018/04/12/201701-2017-01-01-你好2017/</id>
    <published>2018-04-12T15:20:38.839Z</published>
    <updated>2018-04-12T15:20:38.839Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>现在是17年 好久没有更新博客了 想起来从15年暑假来北京实习到现在已经1年多了 经历了很多 慢慢也成长了 一直有很多话想说 真要写的时候有发现无从写起</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;现在是17年 好久没有更新博客了 想起来从15年暑假来北京实习到现在已经1年多了 经历了很多 慢慢也成长了 一直有很多话想说 真要写的时候有发现无从写起&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Essay" scheme="http://yoursite.com/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>php处理web的请求流程</title>
    <link href="http://yoursite.com/2018/04/12/201703-2017-03-12-php-web%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/12/201703-2017-03-12-php-web请求流程/</id>
    <published>2018-04-12T15:20:38.839Z</published>
    <updated>2018-04-12T15:20:38.840Z</updated>
    
    <content type="html"><![CDATA[<p>PHP作为世界上最好的编程语音，被广泛的运用到Web开发中。因为其语法和C类似，有着非常平缓的学习曲线，越来越多的人使用PHP进行Web产品的快速开发。PHP世界里也涌现了很多开发框架，比如Laravel、ThinkPHP等，但不论何总框架，他们在处理Web请求时的模式都是一样的，本文首先阐述PHP开发Web应用的基本架构，然后分别分析Laravel和ThinkPHP在处理Web请求时的处理流程。</p><a id="more"></a><h3 id="PHP开发Web应用的基本架构"><a href="#PHP开发Web应用的基本架构" class="headerlink" title="PHP开发Web应用的基本架构"></a>PHP开发Web应用的基本架构</h3><hr><p>PHP开发Web应用时所以的请求需要指向具体的入口文件。WebServer是一个内容分发者，他接受用户的请求后，如果是请求的是css、js等静态文件，WebServer会找到这个文件，然后发送给浏览器；如果请求的是/index.php，根据配置文件，WebServer知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。<br><img src="https://segmentfault.com/img/bVLftp?w=455&amp;h=233" alt="enter image description here"></p><p>WebServer会依据CGI协议，将请求的Url、数据、Http Header等信息发送给PHP解析器，接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。整个处理过程如上图所示。</p><h3 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h3><hr><p>这里的PHP解析器就是实现了CGI协议的程序，每次请求到来时他会解析php.ini文件，初始化执行环境，这就导致PHP解析器性能低下，于是就出现了CGI的改良升级版FastCGI。FastCGI是一种语言无关的协议，用来沟通程序(如PHP, Python, Java)和Web服务器(Apache2, Nginx), 理论上任何语言编写的程序都可以通过FastCGI来提供Web服务。它的特点是会在动态分配处理进程给请求，以达到提高效率的目的，大多数FastCGI实现都会维护一个进程池。FastCGI会先启一个master进程，解析配置文件，初始化执行环境，然后再启动多个worker进程。当请求过来时，master进程会这个请求传递给一个worker进程，然后立即接受下一个请求。而且当worker进程不够用时，master可以根据配置预先启动几个worker进程等待；当然空闲worker进程太多时，也会自动关闭，这样就提高了性能，节约了系统资源。整个过程FastCGI扮演着对CGI进程进行管理的角色。</p><h3 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h3><hr><p>PHP-FPM是一个专门针对PHP实现了FastCGI协议的程序，它实际上就是一个PHP FastCGI进程管理器，负责管理一个进程池，调用PHP解析器来处理来自Web服务器的请求。PHP-FPM能够对php.ini文件的修改进行平滑过度。</p><p>新建一个helloworld.php文件，写入下列代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"helloworld,"</span>;    </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"this is my first php script."</span>;</span><br><span class="line">   <span class="keyword">echo</span> phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>配置好WebServer和PHP-FPM等php运行环境后，在浏览器中访问该文件就可以直接得到输出。</p><h3 id="基于PHP的Web框架"><a href="#基于PHP的Web框架" class="headerlink" title="基于PHP的Web框架"></a>基于PHP的Web框架</h3><hr><h4 id="PHP-Web框架是"><a href="#PHP-Web框架是" class="headerlink" title="PHP Web框架是"></a>PHP Web框架是</h4><blockquote><p>基于某模式将PHP开发常用功能封装实现使开发者快速开发的工具</p></blockquote><h4 id="它主要的任务包括："><a href="#它主要的任务包括：" class="headerlink" title="它主要的任务包括："></a>它主要的任务包括：</h4><ul><li>代码重用：定义包、类、函数的放置和加载规则，建议直接整合Composer及其AutoLoad特性。</li><li>请求的分发管理：这个就是路由，Rest风的框架喜欢Rewrite，简单的一点的框架主要通过参数来定位模块和方法所在。</li><li>配置文件管理：加载和动态加载配置数据</li><li>错误和异常管理：异常捕捉、错误日志记录以及错误码规范。</li><li>Layout和模板引擎：如何规划页面布局、widget如何重用、ajax页面如何结合、过期- session如何重定向；数据和模板怎么渲染成HTML，是否压缩和设置过期头。</li><li>数据库：如何融入控制器；支持什么样的driver；考虑主从分离的扩展性；以及是否使用ORM</li></ul><blockquote><h4 id="ThinkPHP3-2框架处理流程分析"><a href="#ThinkPHP3-2框架处理流程分析" class="headerlink" title="ThinkPHP3.2框架处理流程分析"></a>ThinkPHP3.2框架处理流程分析</h4></blockquote><p>TP的设计逻辑就是简单粗暴，面对问题解决问题，所以他的处理流程是基于面向过程的思想，而没有采用面向对象的依赖注入、控制反转等思路。他的自动加载、错误处理通过php原生函数的回调来实现。TP处理每次请求要经过四个步骤如下图所示：<br><img src="https://segmentfault.com/img/bVLfvf?w=189&amp;h=441" alt="enter image description here"></p><h4 id="调用应用路口index-php"><a href="#调用应用路口index-php" class="headerlink" title="调用应用路口index.php"></a>调用应用路口index.php</h4><p>index.php是TP的入口文件，所有的请求都由该文件接管，它的工作也很简单主要是引入ThinkPHP入口文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用入口文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测PHP环境</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(version_compare(PHP_VERSION,<span class="string">'5.3.0'</span>,<span class="string">'&lt;'</span>))  <span class="keyword">die</span>(<span class="string">'require</span></span><br><span class="line"><span class="string"> PHP &gt; 5.3.0 !'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启调试模式 建议开发阶段开启 部署阶段注释或者设为false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">define(<span class="string">'APP_DEBUG'</span>,<span class="keyword">False</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义应用目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">define(<span class="string">'APP_PATH'</span>,<span class="string">'./Application/'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入ThinkPHP入口文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span></span><br><span class="line"><span class="string">'./ThinkPHP/ThinkPHP.php'</span>;</span><br></pre></td></tr></table></figure><h4 id="载入框架入口文件ThinkPHP-php"><a href="#载入框架入口文件ThinkPHP-php" class="headerlink" title="载入框架入口文件ThinkPHP.php"></a>载入框架入口文件ThinkPHP.php</h4><p>在ThinkPHP.php中主要记录初始运行时间和内存开销，然后完成系统常量判断及定义，最后载入框架引导类（Think\Think）并执行Think::start方法进行应用初始化。</p><h4 id="应用初始化Think-Think-start"><a href="#应用初始化Think-Think-start" class="headerlink" title="应用初始化Think\Think:start()"></a>应用初始化Think\Think:start()</h4><p>应用初始化首先设置错误处理机制和自动加载机制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 注册AUTOLOAD方法</span></span><br><span class="line">      spl_autoload_register(<span class="string">'Think\Think::autoload'</span>);      </span><br><span class="line">      <span class="comment">// 设定错误和异常处理</span></span><br><span class="line">      register_shutdown_function(<span class="string">'Think\Think::fatalError'</span>);</span><br><span class="line">      set_error_handler(<span class="string">'Think\Think::appError'</span>);</span><br><span class="line">      set_exception_handler(<span class="string">'Think\Think::appException'</span>);</span><br></pre></td></tr></table></figure><p>然后加载相关配置文件和运行模式定义文件，最后调用Think\App类的run方法启动应用</p><h4 id="运行应用App-run"><a href="#运行应用App-run" class="headerlink" title="运行应用App::run()"></a>运行应用App::run()</h4><p>此后TP进入请求处理管道，TP为管道中定义了14个事件，每个事件都可以绑定回调函数，请求到达管道后依次触发这些事件，事件触发后就会调用绑定到事件的回调函数，整个管道的生命周期由app_init开始，由app_end结束。具体实现上，TP将这些事件命名为标签（位），也可以称之为钩子，将回调函数命名为行为，当应用程序运行到标签的时候，就会被拦截下来，统一执行相关的行为。</p><blockquote><h3 id="Laravel框架处理流程分析"><a href="#Laravel框架处理流程分析" class="headerlink" title="Laravel框架处理流程分析"></a>Laravel框架处理流程分析</h3></blockquote><h4 id="统一入口"><a href="#统一入口" class="headerlink" title="统一入口"></a>统一入口</h4><p>Laravel框架使用了统一入口，入口文件：/public/index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//自动加载文件设置</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化服务容器（可以查看一下关于‘服务容器’的相关文档）</span></span><br><span class="line">$app = <span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过服务容器生成一个kernel类的实例（Illuminate\Contracts\Http\Kernel实际上只是一个接口，真正生成的实例是App\Http\Kernel类，至于怎么把接口和类关联起来，请查看Contracts相关文档）</span></span><br><span class="line">$kernel = $app-&gt;make(<span class="string">'Illuminate\Contracts\Http\Kernel'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行Kernel类的handle方法，主要动作是运行middleware和启动URL相关的Contrller</span></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器返回结果之后的操作，暂时还没看，以后补上</span></span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure><h4 id="自动加载文件"><a href="#自动加载文件" class="headerlink" title="自动加载文件"></a>自动加载文件</h4><p>laravel的自动加载，其实也就是Composer的自动加载<br>Composer根据声明的依赖关系，从相关库的源下载代码文件，并根据依赖关系在 Composer 目录下生成供类自动加载的 PHP 脚本，使用的时候，项目开始处引入 “/vendor/autoload.php” 文件，就可以直接实例化这些第三方类库中的类了。</p><h4 id="服务容器——Laravel真正的核心"><a href="#服务容器——Laravel真正的核心" class="headerlink" title="服务容器——Laravel真正的核心"></a>服务容器——Laravel真正的核心</h4><p>服务容器，也叫IoC容器，其实包含了依赖注入(DI)和控制反转(IoC)两部分，是Laravel的真正核心。其他的各种功能模块比如 Route（路由）、Eloquent ORM（数据库 ORM 组件）、Request and Response（请求和响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被使用，其实都是 Laravel 的服务容器负责的。</p><h4 id="启动Kernel代码"><a href="#启动Kernel代码" class="headerlink" title="启动Kernel代码"></a>启动Kernel代码</h4><p>Kernel实例调用handle方法，意味着Laravel的核心和公用代码已经准备完毕，此项目正式开始运行</p><p>代码清单/app/Http/Kernel.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span></span><br><span class="line"><span class="title">App</span>\<span class="title">Http</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span></span><br><span class="line"><span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">Kernel</span></span><br><span class="line"><span class="title">as</span></span><br><span class="line"><span class="title">HttpKernel</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">Kernel</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span></span></span><br><span class="line"><span class="class"><span class="title">HttpKernel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是在调用路由之前需要启动的中间件,一般都是核心文件，不要修改</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span></span><br><span class="line">$middleware</span><br><span class="line">=</span><br><span class="line">[</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">'Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">'Illuminate\Cookie\Middleware\EncryptCookies'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">'Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">'Illuminate\Session\Middleware\StartSession'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">'Illuminate\View\Middleware\ShareErrorsFromSession'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">'App\Http\Middleware\VerifyCsrfToken'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是我们在router.php文件里面或者Controller文件里面，可以使用的Middleware元素，可以自定义加入很多</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span></span><br><span class="line">$routeMiddleware</span><br><span class="line">=</span><br><span class="line">[</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">'auth'</span></span><br><span class="line">=&gt;</span><br><span class="line"><span class="string">'App\Http\Middleware\Authenticate'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">'auth.basic'</span></span><br><span class="line">=&gt;</span><br><span class="line"><span class="string">'Illuminate\Auth\Middleware\AuthenticateWithBasicAuth'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">'guest'</span></span><br><span class="line">=&gt;</span><br><span class="line"><span class="string">'App\Http\Middleware\RedirectIfAuthenticated'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">'test'</span></span><br><span class="line">=&gt;</span><br><span class="line"><span class="string">'App\Http\Middleware\testMiddleWare'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，其实这个文件里面没有handle方法，只有一些属性定义，所以真正的handle方法，实在父类里面实现的</p><p>代码清单…/Illuminate/Foundation/Http/Kernel.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">//这个很重要，是项目的一些启动引导项，Kernel的重要步骤中，首先就是启动这些文件的bootstrap方法</span><br><span class="line">protected $bootstrappers = [</span><br><span class="line">        //检测环境变量文件是否正常</span><br><span class="line">        &apos;Illuminate\Foundation\Bootstrap\DetectEnvironment&apos;,</span><br><span class="line">        //取得配置文件，即把/config/下的所有配置文件读取到容器（app()-&gt;make(&apos;config&apos;)可以查看所有配置信息）</span><br><span class="line">        &apos;Illuminate\Foundation\Bootstrap\LoadConfiguration&apos;,</span><br><span class="line">        //绑定一个名字为log的实例到容器，怎么访问？？（app()-&gt;make(&apos;log&apos;)）</span><br><span class="line">        &apos;Illuminate\Foundation\Bootstrap\ConfigureLogging&apos;,</span><br><span class="line">        //设置异常抓取信息，这个还没仔细看，但大概就是这个意思</span><br><span class="line">        &apos;Illuminate\Foundation\Bootstrap\HandleExceptions&apos;,</span><br><span class="line">        //把/config/app.php里面的aliases项利用PHP库函数class_alias创建别名，从此，我们可以使用App::make(&apos;app&apos;)方式取得实例</span><br><span class="line">        &apos;Illuminate\Foundation\Bootstrap\RegisterFacades&apos;,</span><br><span class="line">        //把/config/app.php里面的providers项,注册到容器</span><br><span class="line">        &apos;Illuminate\Foundation\Bootstrap\RegisterProviders&apos;,</span><br><span class="line">        //运行容器中注册的所有的ServiceProvider中得boot方法</span><br><span class="line">        &apos;Illuminate\Foundation\Bootstrap\BootProviders&apos;,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">  //真正的handle方法</span><br><span class="line">  public function handle($request)</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            //主要是这行，调度了需要运行的方法</span><br><span class="line">            return $this-&gt;sendRequestThroughRouter($request);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception $e)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;reportException($e);</span><br><span class="line">            return $this-&gt;renderException($request, $e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function sendRequestThroughRouter($request)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;app-&gt;instance(&apos;request&apos;, $request);</span><br><span class="line">        Facade::clearResolvedInstance(&apos;request&apos;);</span><br><span class="line">        //运行上述$bootstrappers里面包含的文件的bootstrap方法，运行的作用，上面已经注释</span><br><span class="line">        $this-&gt;bootstrap();</span><br><span class="line">        //这是在对URL进行调度之前，也就是运行Route之前，进行的一些准备工作</span><br><span class="line">        return (new Pipeline($this-&gt;app))    </span><br><span class="line">                    -&gt;send($request)        </span><br><span class="line">                    //需要运行$this-&gt;middleware里包含的中间件</span><br><span class="line">                    -&gt;through($this-&gt;middleware)</span><br><span class="line">                    //运行完上述中间件之后，调度dispatchToRouter方法，进行Route的操作</span><br><span class="line">                    -&gt;then($this-&gt;dispatchToRouter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //前奏执行完毕之后，进行Route操作</span><br><span class="line">    protected function dispatchToRouter()</span><br><span class="line">    &#123;</span><br><span class="line">        return function($request)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;app-&gt;instance(&apos;request&apos;, $request);</span><br><span class="line">            //跳转到Router类的dispatch方法</span><br><span class="line">            return $this-&gt;router-&gt;dispatch($request);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面就需要根据URL和/app/Http/routes.php文件，进行Route操作</p><p>文件清单…/Illuminate/Routing/Router.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br></pre></td><td class="code"><pre><span class="line">public</span><br><span class="line">function</span><br><span class="line">dispatch(Request</span><br><span class="line">$request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$this-&gt;currentRequest</span><br><span class="line">=</span><br><span class="line">$request;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//在4.2版本里面，Route有一个筛选属性；5.0之后的版本，被Middleware代替</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$response</span><br><span class="line">=</span><br><span class="line">$this-&gt;callFilter(&apos;before&apos;,</span><br><span class="line">$request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">(is_null($response))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//继续调度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$response</span><br><span class="line">=</span><br><span class="line">$this-&gt;dispatchToRoute($request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$response</span><br><span class="line">=</span><br><span class="line">$this-&gt;prepareResponse($request,</span><br><span class="line">$response);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//在4.2版本里面，Route有一个筛选属性；5.0之后的版本，被Middleware代替</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$this-&gt;callFilter(&apos;after&apos;,</span><br><span class="line">$request,</span><br><span class="line">$response);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">$response;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public</span><br><span class="line">function</span><br><span class="line">dispatchToRoute(Request</span><br><span class="line">$request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$route</span><br><span class="line">=</span><br><span class="line">$this-&gt;findRoute($request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$request-&gt;setRouteResolver(function()</span><br><span class="line">use</span><br><span class="line">($route)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">$route;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$this-&gt;events-&gt;fire(&apos;router.matched&apos;,</span><br><span class="line">[$route,</span><br><span class="line">$request]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$response</span><br><span class="line">=</span><br><span class="line">$this-&gt;callRouteBefore($route,</span><br><span class="line">$request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">(is_null($response))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"> 只看这一行，还是调度文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$response</span><br><span class="line">=</span><br><span class="line">$this-&gt;runRouteWithinStack(</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$route,</span><br><span class="line">$request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$response</span><br><span class="line">=</span><br><span class="line">$this-&gt;prepareResponse($request,</span><br><span class="line">$response);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$this-&gt;callRouteAfter($route,</span><br><span class="line">$request,</span><br><span class="line">$response);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">$response;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protected</span><br><span class="line">function</span><br><span class="line">runRouteWithinStack(Route</span><br><span class="line">$route,</span><br><span class="line">Request</span><br><span class="line">$request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"> 取得routes.php里面的Middleware节点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$middleware</span><br><span class="line">=</span><br><span class="line">$this-&gt;gatherRouteMiddlewares($route);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这个有点眼熟</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">(new</span><br><span class="line">Pipeline($this-&gt;container))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-&gt;send($request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//执行上述的中间件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-&gt;through($middleware)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-&gt;then(function($request)</span><br><span class="line">use</span><br><span class="line">($route)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//到Controller类了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">$this-&gt;prepareResponse(</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$request,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//run控制器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$route-&gt;run($request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public</span><br><span class="line">function</span><br><span class="line">run(Request</span><br><span class="line">$request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$this-&gt;container</span><br><span class="line">=</span><br><span class="line">$this-&gt;container</span><br><span class="line">?:</span><br><span class="line">new</span><br><span class="line">Container;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">(</span><br><span class="line">!</span><br><span class="line">is_string($this-&gt;action[&apos;uses&apos;]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">$this-&gt;runCallable($request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">($this-&gt;customDispatcherIsBound())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//实际上是运行了这行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">$this-&gt;runWithCustomDispatcher($request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//其实我是直接想运行这行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">$this-&gt;runController($request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">catch</span><br><span class="line">(HttpResponseException</span><br><span class="line">$e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">$e-&gt;getResponse();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//继续调度，最终调度到.../Illuminate/Routing/ControllerDispatcher.php文件的dispatch方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protected</span><br><span class="line">function</span><br><span class="line">runWithCustomDispatcher(Request</span><br><span class="line">$request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list($class,</span><br><span class="line">$method)</span><br><span class="line">=</span><br><span class="line">explode(&apos;@&apos;,</span><br><span class="line">$this-&gt;action[&apos;uses&apos;]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$dispatcher</span><br><span class="line">=</span><br><span class="line">$this-&gt;container-&gt;make(&apos;illuminate.route.dispatcher&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">$dispatcher-&gt;dispatch($this,</span><br><span class="line">$request,</span><br><span class="line">$class,</span><br><span class="line">$method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件清单…/Illuminate/Routing/ControllerDispatcher.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">public</span><br><span class="line">function</span><br><span class="line">dispatch(Route</span><br><span class="line">$route,</span><br><span class="line">Request</span><br><span class="line">$request,</span><br><span class="line">$controller,</span><br><span class="line">$method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $instance</span><br><span class="line">=</span><br><span class="line">$this-&gt;makeController($controller);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $this-&gt;assignAfter($instance,</span><br><span class="line">$route,</span><br><span class="line">$request,</span><br><span class="line">$method);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $response</span><br><span class="line">=</span><br><span class="line">$this-&gt;before($instance,</span><br><span class="line">$route,</span><br><span class="line">$request,</span><br><span class="line">$method);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if</span><br><span class="line">(is_null($response))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            //还要调度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            $response</span><br><span class="line">=</span><br><span class="line">$this-&gt;callWithinStack(</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                $instance,</span><br><span class="line">$route,</span><br><span class="line">$request,</span><br><span class="line">$method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return</span><br><span class="line">$response;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    protected</span><br><span class="line">function</span><br><span class="line">callWithinStack($instance,</span><br><span class="line">$route,</span><br><span class="line">$request,</span><br><span class="line">$method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //又是Middleware......有没有忘记，官方文档里面Middleware可以加在控制器的构造函数中！！没错，这个Middleware就是在控制器里面申明的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $middleware</span><br><span class="line">=</span><br><span class="line">$this-&gt;getMiddleware($instance,</span><br><span class="line">$method);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //又是这个，眼熟吧</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return</span><br><span class="line">(new</span><br><span class="line">Pipeline($this-&gt;container))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    -&gt;send($request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    //再次运行Middleware</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    -&gt;through($middleware)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    -&gt;then(function($request)</span><br><span class="line">use</span><br><span class="line">($instance,</span><br><span class="line">$route,</span><br><span class="line">$method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#123;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        运行控制器，返回结果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        return</span><br><span class="line">$this-&gt;call($instance,</span><br><span class="line">$route,</span><br><span class="line">$method);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>终于到达控制器</p><blockquote><p>转自：<a href="http://www.eurekao.com/PHP-processing-web-request-analysis/" target="_blank" rel="noopener">http://www.eurekao.com/PHP-processing-web-request-analysis/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP作为世界上最好的编程语音，被广泛的运用到Web开发中。因为其语法和C类似，有着非常平缓的学习曲线，越来越多的人使用PHP进行Web产品的快速开发。PHP世界里也涌现了很多开发框架，比如Laravel、ThinkPHP等，但不论何总框架，他们在处理Web请求时的模式都是一样的，本文首先阐述PHP开发Web应用的基本架构，然后分别分析Laravel和ThinkPHP在处理Web请求时的处理流程。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP如何正常转换中文json格式字符串</title>
    <link href="http://yoursite.com/2018/04/12/201507-2015-07-09-php-use-json-note/"/>
    <id>http://yoursite.com/2018/04/12/201507-2015-07-09-php-use-json-note/</id>
    <published>2018-04-12T15:20:38.838Z</published>
    <updated>2018-04-12T15:20:38.838Z</updated>
    
    <content type="html"><![CDATA[<p>如何对json格式的字符串进行转换，在php手册中提供了两个函数：</p><blockquote><p>json_encode : 对变量进行 JSON 编码</p></blockquote><blockquote><p>json_decode : 对 JSON 格式的字符串进行编码</p></blockquote><a id="more"></a><p>下面看个实例：</p><pre><code>$arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];echo json_encode($arr);</code></pre><p>输出为：</p><blockquote><p>[“a”,”b”,”c”]</p></blockquote><p>但是，当我们在数组中放入中文的时候，就会出现问题：</p><pre><code>$arr = [    &apos;世界&apos;,    &apos;你好&apos;,];echo json_encode($arr);</code></pre><p>输出的结果为：</p><blockquote><p>[“\u4e16\u754c”,”\u4f60\u597d”]</p></blockquote><p>这个结果显然不是我们想要的，但是为什么出现这个呢？<br>因为当我们的值中包含中文时，php对他进行json编码时底层会对中文进行unicode编码，导致结果不可读.</p><p><em><strong>那该怎么解决呢？</strong></em></p><p>###方法一<br>可以利用 urlencode 和 urldecode 方法绕过这个转码为 unicode 的过程，先将中文字段进行urlencode，然后json_encode，最后再用urldecode处理结果，便可以正常显示中文。具体代码如下：</p><pre><code>$arr = [    &apos;世界&apos;,    &apos;你好&apos;,];echo urldecode(json_encode(array_map(&apos;urlencode&apos;, $arr)));</code></pre><p>输出结果为：</p><blockquote><p>[“世界”,”你好”]</p></blockquote><p>###方法二<br>自PHP5.4版本，官方就已经给Json新增了一个选项: <code>JSON_UNESCAPED_UNICODE</code>。加上这个选项后，就不会自动把中文编码了。具体代码如下：</p><pre><code>$arr = [    &apos;世界&apos;,    &apos;你好&apos;,];echo json_encode($arr, JSON_UNESCAPED_UNICODE);</code></pre><p>输出为：</p><blockquote><p>[“世界”,”你好”]</p></blockquote><p>看吧，这才是我们想要的结果 :)</p><p>###<strong>注意</strong><br>需要我们注意的是，由于 <code>json_encode</code> 和 <code>json_decode</code>只支持<code>utf-8</code>编码的字符，<code>gbk</code>的字符想要用json函数的话就得转换一下喽。</p><p>[end]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何对json格式的字符串进行转换，在php手册中提供了两个函数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;json_encode : 对变量进行 JSON 编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;json_decode : 对 JSON 格式的字符串进行编码&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>MyINAM与Innodb的区别</title>
    <link href="http://yoursite.com/2018/04/12/201509-2015-09-23-difference-of-MyISAM-and-Innodb/"/>
    <id>http://yoursite.com/2018/04/12/201509-2015-09-23-difference-of-MyISAM-and-Innodb/</id>
    <published>2018-04-12T15:20:38.838Z</published>
    <updated>2018-04-12T15:20:38.838Z</updated>
    
    <content type="html"><![CDATA[<p>InnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，这两个表类型各有优劣，视具体应用而定。基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能</p><p>以下是一些细节和具体实现的差别：<br><a id="more"></a></p><p>◆1.InnoDB不支持FULLTEXT类型的索引。</p><p>◆2.InnoDB 中不保存表的具体行数，也就是说，执行select count(<em>) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(</em>)语句包含 where条件时，两种表的操作是一样的。</p><p>◆3.对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。</p><p>◆4.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。</p><p>◆5.LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用。</p><p>两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁.而MyISAM不支持.所以MyISAM往往就容易被人认为只适合在小项目中使用。</p><p>　　我作为使用MySQL的用户角度出发，Innodb和MyISAM都是比较喜欢的，但是从我目前运维的数据库平台要达到需求：99.9%的稳定性，方便的扩展性和高可用性来说的话，MyISAM绝对是我的首选。</p><p>　　原因如下：</p><p>　　1、首先我目前平台上承载的大部分项目是读多写少的项目，而MyISAM的读性能是比Innodb强不少的。</p><p>　　2、MyISAM的索引和数据是分开的，并且索引是有压缩的，内存使用率就对应提高了不少。能加载更多索引，而Innodb是索引和数据是紧密捆绑的，没有使用压缩从而会造成Innodb比MyISAM体积庞大不小。</p><p>　　3、从平台角度来说，经常隔1，2个月就会发生应用开发人员不小心update一个表where写的范围不对，导致这个表没法正常用了，这个时候MyISAM的优越性就体现出来了，随便从当天拷贝的压缩包取出对应表的文件，随便放到一个数据库目录下，然后dump成sql再导回到主库，并把对应的binlog补上。如果是Innodb，恐怕不可能有这么快速度，别和我说让Innodb定期用导出xxx.sql机制备份，因为我平台上最小的一个数据库实例的数据量基本都是几十G大小。</p><p>　　4、从我接触的应用逻辑来说，select count(*) 和order by 是最频繁的，大概能占了整个sql总语句的60%以上的操作，而这种操作Innodb其实也是会锁表的，很多人以为Innodb是行级锁，那个只是where对它主键是有效，非主键的都会锁全表的。</p><p>　　5、还有就是经常有很多应用部门需要我给他们定期某些表的数据，MyISAM的话很方便，只要发给他们对应那表的frm.MYD,MYI的文件，让他们自己在对应版本的数据库启动就行，而Innodb就需要导出xxx.sql了，因为光给别人文件，受字典数据文件的影响，对方是无法使用的。</p><p>　　6、如果和MyISAM比insert写操作的话，Innodb还达不到MyISAM的写性能，如果是针对基于索引的update操作，虽然MyISAM可能会逊色Innodb,但是那么高并发的写，从库能否追的上也是一个问题，还不如通过多实例分库分表架构来解决。</p><p>　　7、如果是用MyISAM的话，merge引擎可以大大加快应用部门的开发速度，他们只要对这个merge表做一些select count(*)操作，非常适合大项目总量约几亿的rows某一类型(如日志，调查统计)的业务表。</p><p>　　当然Innodb也不是绝对不用，用事务的项目如模拟炒股项目，我就是用Innodb的，活跃用户20多万时候，也是很轻松应付了，因此我个人也是很喜欢Innodb的，只是如果从数据库平台应用出发，我还是会首选MyISAM。</p><p>　　另外，可能有人会说你MyISAM无法抗太多写操作，但是我可以通过架构来弥补，说个我现有用的数据库平台容量：主从数据总量在几百T以上，每天十多亿 pv的动态页面，还有几个大项目是通过数据接口方式调用未算进pv总数，(其中包括一个大项目因为初期memcached没部署,导致单台数据库每天处理 9千万的查询)。而我的整体数据库服务器平均负载都在0.5-1左右。<br>　　[end]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;InnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，这两个表类型各有优劣，视具体应用而定。基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能&lt;/p&gt;
&lt;p&gt;以下是一些细节和具体实现的差别：&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何在MySQL中高效的存储ip地址</title>
    <link href="http://yoursite.com/2018/04/12/201506-2015-06-20-mysql-save-ip/"/>
    <id>http://yoursite.com/2018/04/12/201506-2015-06-20-mysql-save-ip/</id>
    <published>2018-04-12T15:20:38.838Z</published>
    <updated>2018-04-12T15:20:38.838Z</updated>
    
    <content type="html"><![CDATA[<p>在多数场景下，我们一般在MySQL中存储ip地址时都使用<code>varchar(15)</code>或者<code>char(15)</code>类型，是吧？<br>虽说功能是实现了，但是这样构建数据表就能最大限度的优化数据库性能吗？答案是否定的，尽管在存储ip上折腾下不会马上提升系统的性能，但是整个系统架构谁又敢说不是各个地方一点点的优化性能给提升起来了呢？所以说巧存ip也是不可忽略的。</p><a id="more"></a><p>###如何高效存储ip</p><p>答案是使用int(10)类型。</p><p>在MySQL中没有专门提供存储ip地址的类型，那我们最容易想到的就是使用<code>varchar(15)</code>和<code>char(15)</code>了，但这样却不怎么高效，为什么呢？因为使用字符串存储的话首先就会占用至少15个字节，然而使用空间也比较大，假设使用int类型的话只会占用4个字节，占用空间少，检索起来也比字符串速度快很多。</p><p>那么，问题来了，我们如何把ip和整型很好地结合起来进行转化呢？幸好mysql已经帮我们实现了这一功能，的确是这样的。mysql中内置了<code>inet_aton()</code>和<code>inet_ntoa()</code>函数可以让ip地址和整形之间很好的转化。</p><p>下面看看mysql手册里的解释吧。</p><p><strong>inet_aton()</strong></p><blockquote><p>INET_ATON(expr)</p></blockquote><blockquote><p>Given the dotted-quad representation of an IPv4 network address as a<br>string, returns an integer that represents the numeric value of the<br>address in network byte order (big endian). INET_ATON() returns NULL if<br>it does not understand its argument.</p></blockquote><p><strong>inet_ntoa()</strong></p><blockquote><p>INET_NTOA(expr)</p></blockquote><blockquote><p>Given a numeric IPv4 network address in network byte order, returns the<br>dotted-quad string representation of the address as a nonbinary string<br>in the connection character set. INET_NTOA() returns NULL if it does<br>not understand its argument.</p></blockquote><p>还是看下实际的例子比较直观：</p><pre><code>&gt; select inet_aton(&apos;192.168.1.100&apos;);</code></pre><p><img src="../../images/201506/2015-06-20_004736.jpg" alt="pic"></p><p>当输入错误的ip地址时会返回NULL:</p><pre><code>&gt; select inet_aton(&apos;a.b.c&apos;);</code></pre><p><img src="../../images/201506/2015-06-20_005013.jpg" alt="pic"></p><p>当从整型转为ip时就可以使用<code>inet_ntoa()</code>函数：</p><pre><code>&gt; select inet_ntoa(3232235876);</code></pre><p><img src="../../images/201506/2015-06-20_005338.jpg" alt="pic"></p><p>当ip不存在时，可以使用0来代替：</p><pre><code>&gt; select inet_ntoa(0);</code></pre><p><img src="../../images/201506/2015-06-20_005428.jpg" alt="pic"></p><p>所以IP的表字段可以设置为INT(10)就好，如果IP获取不到可以直接存0代表获取不到IP的意思.</p><p>好了，这也不是什么很高深的东西，单纯做个笔记而已。</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在多数场景下，我们一般在MySQL中存储ip地址时都使用&lt;code&gt;varchar(15)&lt;/code&gt;或者&lt;code&gt;char(15)&lt;/code&gt;类型，是吧？&lt;br&gt;虽说功能是实现了，但是这样构建数据表就能最大限度的优化数据库性能吗？答案是否定的，尽管在存储ip上折腾下不会马上提升系统的性能，但是整个系统架构谁又敢说不是各个地方一点点的优化性能给提升起来了呢？所以说巧存ip也是不可忽略的。&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>一道面试题引发的一点点思考</title>
    <link href="http://yoursite.com/2018/04/12/201506-2015-06-12-shuffle-array-note/"/>
    <id>http://yoursite.com/2018/04/12/201506-2015-06-12-shuffle-array-note/</id>
    <published>2018-04-12T15:20:38.837Z</published>
    <updated>2018-04-12T15:20:38.837Z</updated>
    
    <content type="html"><![CDATA[<p>到了大三下学期，身边的小伙伴都不约而同地开始找实习了，其中面试当然是不可缺少的重头戏啦。<br>最近在面百度的时候，面试官的一道关于随机数的题很有意思，不算难，但却在那么一瞬间触动了我，所以打算抽点时间把它记录下来。（关于它怎么触动我了，最后我会有说明 :P）</p><a id="more"></a><p>###面试题的描述</p><p>大意是这样的：</p><blockquote><p>写一个方法，把给定数组内的元素打乱返回，尽量高效实现。</p></blockquote><p>首先，我想到的就是PHP自带的一个<code>shuffle</code>函数，就是专门干这个事儿的，随机打乱数组，而且是引用传值的。</p><p>当我说出可以使用shuffle函数时，面试官打断了我，说不能使用PHP自带的函数，让自己尝试着实现这个功能。当时很郁闷，明明有高度优化好的方法摆在那却不让用，唉…</p><p>然后，就发动脑袋想吧，想到既然在数组中不管是取值、打印还是赋值都是拿数组的下标操作的，所以我可以往数组下标这方面想，假如我可以打乱下标那不就解决了打乱数组了吗，于是就有了下面比较笨的代码，现在再回头看当时头脑发晕的解决方案，真是无语：</p><pre><code>&lt;?php$arrData = array(&apos;aaa&apos;, &apos;bbb&apos;, &apos;ccc&apos;, &apos;ddd&apos;, &apos;eee&apos;);$keys = array_keys($arrData);shuffle($keys);$kLen = count($keys);$arrRes = array();foreach($keys as $v){    array_push($arrRes, $arrData[$v]);}var_dump($arrRes);</code></pre><p>尽管功能是实现了，但是其中还是使用了<code>shuffle</code>方法，这显然是不合格的。那种紧张情况下，我能想到的就这个思路了，汗~~</p><p>最后，没辙了，我就大胆问了下面试官能不能给一些提示，那个面试官真的很nice，然后就给出了提示：</p><blockquote><p>说我往数组下标方面思考是正确的，既然要求要高效就意味着在同一个数组中完成操作，可以尝试着使用交换来完成。</p></blockquote><p>对于一道面试题来说，面试官能提示这么多就已经很好了，然后我就顺着这个思路想下去，如果每次随机获取一个下标，然后把该下标对应的value与数组最后一个value交换，最后数组长度减一，接着重复执行上述步骤就可以了。</p><p>下面还是用图来说明下吧，毕竟一图胜千言嘛~~</p><p>假设随机拿到该数组的一个key为1，然后让key为1的元素与最后一个元素（key为4）交换</p><p><img src="../../images/201506/2015-06-12_223756.jpg" alt="pic"></p><p>第一次交换后，数组长度减一，然后只需要对（数组长度-1）的元素执行相同操作即可。代码如下：</p><pre><code>&lt;?php$arrData = array(&apos;aaa&apos;, &apos;bbb&apos;, &apos;ccc&apos;, &apos;ddd&apos;, &apos;eee&apos;);$arrLen = count($arrData)-1;while($arrLen &gt;= 0){    $k = mt_rand(0, $arrLen);    $tmp = $arrData[$arrLen];    $arrData[$arrLen] = $arrData[$k];    $arrData[$k] = $tmp;    $arrLen--;}var_dump($arrData);</code></pre><p>这样很好地就解决了这个问题。</p><p>###总结</p><p>其实写这篇博客的目的并不是要记录这道面试题多么多么难，细想想的话怎么都不算难，对吧？其实，写这篇博客的原由是这样的，当我们在面试的时候，不可能都一帆风顺的，多少都会遇到几个棘手的面试题，你想想面试官的心态，肯定要考倒你的啊，当我们没有思路的时候，不要立刻就说不会或者其他放弃作答的话（想想这给面试官传递的信息对自己有多不利！），可以尝试着向面试官要一些解答提示，一般面试官都很好的，都会给出一些思路，然后你就顺着这个思路想下去，最后也许就柳暗花明了，又能给面试官很好的印象，何乐而不为呢？面试官往往并不是一定要得到正确答案，他们真正在乎的也许是你的思考方式。就像我，刚开始可能也没什么很好的解决办法，但是顺着他的思路一步步就那么把正确方法给做出来了。所以，下次再遇到难题，不妨向面试官要一些提示，记住啊~~</p><p>ps：呼应开头，触动我的理由想必大家都已清楚了吧。</p><p>（end）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;到了大三下学期，身边的小伙伴都不约而同地开始找实习了，其中面试当然是不可缺少的重头戏啦。&lt;br&gt;最近在面百度的时候，面试官的一道关于随机数的题很有意思，不算难，但却在那么一瞬间触动了我，所以打算抽点时间把它记录下来。（关于它怎么触动我了，最后我会有说明 :P）&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中使用binary查询字符串</title>
    <link href="http://yoursite.com/2018/04/12/201506-2015-06-07-mysql-str-binary/"/>
    <id>http://yoursite.com/2018/04/12/201506-2015-06-07-mysql-str-binary/</id>
    <published>2018-04-12T15:20:38.837Z</published>
    <updated>2018-04-12T15:20:38.837Z</updated>
    
    <content type="html"><![CDATA[<p>今天，在做老师布置的实验作业时候遇到一个关于MySQL字符串比较问题。场景是这样的，就是需要在数据库中查询记录而进行字符串比较时，需要对字符串进行大小写区分比较，这样在默认情况下进行操作可能不会达到你想要的效果。比如下面实例：</p><pre><code>SELECT *　FROM user where username=&apos;maratrix&apos;;SELECT * FROM user where username=&apos;MARATRIX&apos;;</code></pre><p>经测试，发现上面两条SQL语句的执行结果是一样的，这个结果并不是我们想要的，怎么解决？</p><a id="more"></a><p>###问题探究</p><p>在我看来，做技术有一点要清楚的是：<strong><em>解决问题一定要抓住问题的本源，从而游刃有余</em></strong>。下面，我们看看这个小问题是咋回事的呢？</p><p>通过看MySQL手册可以知道，默认情况下，对MySQL数据库中的字段进行查询或者排序都是不区分大小写的。</p><p>但是在有些应用中，需要进行区分大小写的操作，咋办？ </p><p><strong>答：使用BINARY操作符</strong>。</p><blockquote><p>BINARY操作符将后面的字符串抛给一个二进制字符串。这是一种简单的方式来促使逐字节而不是逐字符的进行列比较。这使得比较区分大小写，即使该列不被定义为 BINARY或 BLOB。</p></blockquote><blockquote><p>BINARY影响整个比较；它可以在任何操作数前被给定，而产生相同的结果。</p></blockquote><p>###解决方法</p><p>1、第一种是在创建表结构时候使用binary属性来定义字段：</p><pre><code>create table if not exists user(    id int unsigned primary key auto_increment,    name varchar(32) binary,)engine=myisam;</code></pre><p>或者在表结构创建好后使用alter来添加字段binary属性</p><pre><code>alter table user modify name varchar(32) binary ;</code></pre><p>2、第二种方法是在sql语句中使用bianry来进行区分大小写操作：</p><pre><code>SELECT * FROM user where name=binary &apos;maratrix&apos;;或者SELECT * FROM user where binary name=&apos;maratrix&apos;;</code></pre><p>进过测试发现，使用<code>SELECT * FROM user where name=binary &#39;maratrix&#39;;</code>效率更高点，原因是将binary放在字符串前会使用索引（假设该字段存在索引），而将binary放在字段前面将不会使用索引，即使索引存在也不会使用。</p><p>###注意</p><p>在一些语境中，假如你将一个编入索引的列派给BINARY, MySQL 将不能有效使用这个索引。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，在做老师布置的实验作业时候遇到一个关于MySQL字符串比较问题。场景是这样的，就是需要在数据库中查询记录而进行字符串比较时，需要对字符串进行大小写区分比较，这样在默认情况下进行操作可能不会达到你想要的效果。比如下面实例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT *　FROM user where username=&amp;apos;maratrix&amp;apos;;
SELECT * FROM user where username=&amp;apos;MARATRIX&amp;apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经测试，发现上面两条SQL语句的执行结果是一样的，这个结果并不是我们想要的，怎么解决？&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>禁用COOKIE后如何访问SESSION问题</title>
    <link href="http://yoursite.com/2018/04/12/201506-2015-06-04-how-to-use-session-without-cookie/"/>
    <id>http://yoursite.com/2018/04/12/201506-2015-06-04-how-to-use-session-without-cookie/</id>
    <published>2018-04-12T15:20:38.837Z</published>
    <updated>2018-04-12T15:20:38.837Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到一个有关在PHP中使用COOKIE会话管理的面试题，不单单是因为这道题很有意思，还有就是自己以前确实没有想到过这个方面（<em>知识欠缺</em>:P），所以这里做个记录总结下，该题大概是这样描述的:</p><pre><code>如何不使用cookie向客户端发送一个cookie?</code></pre><p>刚看到这道题时确实懵了，愣是没看懂，后面在网上搜索了下，猜测出题人的意图估计是想解决这样的一个场景：</p><pre><code>当客户端端禁用COOKIE时，如何在本地保存COOKIE以及在发送HTTP请求时带上COOKIE信息。</code></pre><a id="more"></a><p>这样看来，好像有点眉目了，下面结合SESSION和COOKIE详细解释下如何解决这个问题。</p><p>我们知道，当在服务器端启用session时候，数据默认是以文件的形式保存服务器上的，其中session_name(默认是PHPSESSID)和session_id是保存在COOKIE中的，并发送到Client端。<br>此时，用户访问其他页面发送HTTP请求时候依然将cookie中保存的session_name和session_id带回服务器端，而服务器这时候同样启用了session，就会将session_id对应的文件中保存的数据反序列化并保存到<code>$_SESSION</code>数组中。整个流程大概是这样子的。</p><p>有一天，客户端无意将COOKIE禁用了，这时候再去服务器端访问上面流程的程序会出现这样的情况。服务器同样会保存session数据到文件中（默认），但是设置的cookie头信息却无法在客户端保存，后面再去访问其他页面时候客户端也就没有带上cookie中的数据去发送请求，然后服务器也就无法获取cookie信息，造成的后果就是上次创建的session文件成为了垃圾数据，而每次请求都要重新创建session文件，然后一直循环~~ 无法跟踪用户登录状态，造成不好的用户体验。</p><p>那么，该如何解决这个问题呢？</p><p>其实在PHP官方手册中有提到过这个问题，只怪自己没有自己研究手册。我们只需要在<code>php.ini</code>中配置<code>session.use_trans_sid=1</code>或者在编译PHP时打开<code>–enable-trans-sid</code>选项。这样，每当客户端禁用了COOKIE，在访问其他页面时会在URL上自动加上<code>SESSIONID=这里是session_id的字符串</code>传递到服务器端，而服务器端会自动解析URL中传递过来的SESSIONID信息，从而把该用户信息读取到<code>$_SESSION</code>数组中使用，一切看起来都是这么的正常，但是这其中有很多细节如果不注意的话还是会掉坑里的。</p><p>首先，要注意的是<code>php.ini</code>中两个选项默认是这样的设置：</p><pre><code>session.use_cookies=1    （开启使用cookie保存session会话信息）session.use_only_cookies=1 (注意：只使用cookie 来保存session信息)</code></pre><p>所以。如果想要在浏览器开启cookie时候使用cookie保存会话信息，当浏览器禁用cookie时候使用url传递会话信息的话，就应该如下设置才会达到你想要的效果:</p><pre><code>在php.ini文件中修改session.use_trans_sid=1  //启用url传递会话信息session.use_only_cookies=0  //关闭只是用cookie保存会话信息session.use_cookies=1   //默认使用cookie保存会话信息</code></pre><p>或者在php程序中设置:</p><pre><code>ini_set(&apos;session.use_trans_sid&apos;, 1);int_set(&apos;session.use_only_cookies&apos;, 0);ini_set(&apos;session.use_cookies&apos;, 1);</code></pre><p>如果不管浏览器是否开启cookie，都使用url的方式传递会话信息，可以进行如下设置（这个例子主要想说明一下设置<code>session.use_only_cookies</code>和<code>session.use_cookies</code>的区别）</p><pre><code>在php.ini文件中session.use_trans_sid=1session.use_only_cookies=0session.use_cookies=0</code></pre><p>或者在php程序中设置：</p><pre><code>ini_set(&apos;session.use_trans_sid&apos;, 1);ini_set(&apos;session.use_only_cookies&apos;, 0);ini_set(&apos;session.use_cookies&apos;, 0);</code></pre><p>当然，除了上述方法方便解决该问题，还有如下解决方案可以参考：</p><blockquote><ol><li><p>手动URL传值</p></li><li><p>通过隐藏表单传递</p></li><li><p>在数据库中保存session_id, 然后手动调用</p></li></ol></blockquote><p>###在使用<code>session.use_trans_sid</code>时，php官方给出了安全风险警告，我们需要注意：</p><p><strong><em>Note: 基于 URL 的会话管理比基于 cookie 的会话管理有更多安全风险。例如用户有可能通过 email 将一个包含有效的会话 ID 的 URL 发给他的朋友，或者用户总是有可能在收藏夹中存有一个包含会话 ID 的 URL 来以同样的会话 ID 去访问站点。</em></strong></p><p>（end）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到一个有关在PHP中使用COOKIE会话管理的面试题，不单单是因为这道题很有意思，还有就是自己以前确实没有想到过这个方面（&lt;em&gt;知识欠缺&lt;/em&gt;:P），所以这里做个记录总结下，该题大概是这样描述的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如何不使用cookie向客户端发送一个cookie?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;刚看到这道题时确实懵了，愣是没看懂，后面在网上搜索了下，猜测出题人的意图估计是想解决这样的一个场景：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;当客户端端禁用COOKIE时，如何在本地保存COOKIE以及在发送HTTP请求时带上COOKIE信息。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>关于在PDO中使用bindParam绑定参数的陷阱</title>
    <link href="http://yoursite.com/2018/04/12/201505-2015-05-13-pdo-bindParam-bug-note/"/>
    <id>http://yoursite.com/2018/04/12/201505-2015-05-13-pdo-bindParam-bug-note/</id>
    <published>2018-04-12T15:20:38.836Z</published>
    <updated>2018-04-12T15:20:38.836Z</updated>
    
    <content type="html"><![CDATA[<p>今天，在看鸟哥<a href="http://weibo.com/laruence" target="_blank" rel="noopener">@laruence</a>的个人博客时看到了有关在PHP中使用PDO的bindParam绑定方法结合循环语句来使用时会产生一个<code>BUG</code>或者小陷阱，这里做个笔记备忘 :)</p><p>来自PHP官方的BUG报告在这里：<a href="https://bugs.php.net/bug.php?id=63281" target="_blank" rel="noopener">#63281</a></p><a id="more"></a><p>究其原因, 也就是bindParam、bindColum和bindValue的不同之处, bindColum和bindParam要求第二个参数是一个<strong>引用变量(reference)</strong>，这才是关键点。</p><p>具体介绍可以戳这里：<a href="http://www.laruence.com/2012/10/16/2831.html" target="_blank" rel="noopener">Laruence：PDOStatement::bindParam 的一个陷阱</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，在看鸟哥&lt;a href=&quot;http://weibo.com/laruence&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@laruence&lt;/a&gt;的个人博客时看到了有关在PHP中使用PDO的bindParam绑定方法结合循环语句来使用时会产生一个&lt;code&gt;BUG&lt;/code&gt;或者小陷阱，这里做个笔记备忘 :)&lt;/p&gt;
&lt;p&gt;来自PHP官方的BUG报告在这里：&lt;a href=&quot;https://bugs.php.net/bug.php?id=63281&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#63281&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>无锁共享内存---Yac</title>
    <link href="http://yoursite.com/2018/04/12/201504-2015-04-20-yac-study-and-vs-memcache-note/"/>
    <id>http://yoursite.com/2018/04/12/201504-2015-04-20-yac-study-and-vs-memcache-note/</id>
    <published>2018-04-12T15:20:38.836Z</published>
    <updated>2018-04-12T15:20:38.836Z</updated>
    
    <content type="html"><![CDATA[<p>这几天一直在研究鸟哥<a href="http://weibo.com/laruence" target="_blank" rel="noopener">@laruence</a>的一个产品—<strong>Yac</strong>，它是为PHP实现的一个基于共享内存、并且无锁的User Data Cache。今天比较了下Memcache和Yac的高并发读写性能测试，发现Yac要比Memcache快很多（这里没有比较Yac和Apc的性能情况, 不过据说Yac要比Apc快很多，Apc比Memcache快一倍，待有时间再进行测试吧, 好吧，承认懒了 ^_^)。</p><a id="more"></a><p>首先说下，Yac是无锁的、共享内存的Cache，因此可以减少CPU的消耗，这个本人确实有体会，而Memcache压力测试时CPU直接飙升到 ~100%，汗。</p><p>另外，Yac的安装是很方便的，而且在windows下支持是灰常好滴，想学习的同学可以参考鸟哥<a href="http://weibo.com/laruence" target="_blank" rel="noopener">@laruence</a>的博客：</p><p><a href="http://www.laruence.com/2013/03/18/2846.html" target="_blank" rel="noopener">http://www.laruence.com/2013/03/18/2846.html</a></p><p>github 地址：<a href="https://github.com/laruence/yac" target="_blank" rel="noopener">https://github.com/laruence/yac</a></p><p>下面简单介绍下安装：</p><pre><code>wgethttps://pecl.php.net/get/yac-0.9.2.tgztar -zxvf yac-0.9.2.tgzcd yac-0.9.2phpize./config --prefix=/usr/local/yac --with-php-config=/usr/local/php/bin/php-configsudo make &amp;&amp; make install</code></pre><p>接下来配置php.ini文件：</p><pre><code>vim /etc/php.ini//添加一下内容extension=php-yac.so[yac]yac.enable = 1                    //是否开启yac，1表示开启， 0表示关闭yac.keys_memory_size = 4M        //4M可以得到32768个key， 32M可以得到262144个keyyac.values_memory_size = 64M    //申请的最大value内存yac.compress_threshold = -1        //是否压缩数据yac.enable_cli = 0                //关闭在cli下使用yac</code></pre><p>最后重启Web Server服务器即可， windows下面安装yac扩展网上教程一大推，自己去搜索吧，这里不再赘余。。。</p><p>###Yac的应用场景</p><ol><li>让PHP进程之间共享一些简单的数据</li><li>高效地缓存一些页面结果</li></ol><p>###Yac的限制</p><ol><li>缓存的键长度不能超过48字节，太长的话可以md5结果后再使用</li><li>Value的最大长度不能超过64M，压缩后的长度不能超过1M</li><li>当内存不够的时候, Yac会有比较明显的踢出率 (所以如果要使用Yac, 那么尽量多给点内存…)</li></ol><p>###Yac vs Memcache</p><p>下面对Yac和Memcache进行性能比较：</p><p>yac测试代码：</p><pre><code>//test-yac.php&lt;?php    $yac = new Yac();    for($i = 1; $i &lt;= 100; $i++){        $key = &apos;key_&apos; . $i;        $value = mt_rand(0, 10000);        if( ! $yac-&gt;set($key, $value))            var_dump(&quot;Yac set error: $key --&gt; $value&quot;);    }    for($i = 1; $i &lt;= 100; $i++){        $key = &apos;key_&apos; . $i;        $value = $yac-&gt;get($key);        if($value === false){            var_dump(&quot;Yac get error: $key not found&quot;);        }    }?&gt;</code></pre><p>memcache测试代码：</p><pre><code>//test-mem.php&lt;?php    $mem = new Memcache();    $mem-&gt;connect(&apos;localhost&apos;, 11211) or die(&apos;memcache connected error...&apos;);    for($i = 1; $i &lt;= 100; $i++){        $key = &apos;key_&apos; . $i;        $value = mt_rand(0, 10000);        if( ! $mem-&gt;set($key, $value))            var_dump(&quot;Memcache set error: $key --&gt; $value&quot;);    }    for($i = 1; $i &lt;= 100; $i++){           $key = &apos;key_&apos; . $i;        $value = $mem-&gt;get($key);        if($value === false){            var_dump(&quot;Memcache get error: $key not found&quot;);        }    }?&gt;</code></pre><p>然后对test-yac.php和test-mem.php文件分别进行ab压力测试：</p><pre><code>ab -n 10000 -c 100 http://localhost/demo/test-yac.php</code></pre><p><img src="../../images/201504/2015-04-20_194920.jpg" alt="pic"></p><pre><code>ab -n 10000 -c 100 http://localhost/demo/test-mem.php</code></pre><p><img src="../../images/201504/2015-04-20_195130.jpg" alt="pic"></p><p>从上面的图中，相信大家可以看出结论了，Yac要比Memcache快很多，而且出错率很低，所以说Yac还是很不错的。</p><hr><p>###小结</p><p>Yac固然很高效，但还是要注意一些方面，由于Yac是作为PHP的扩展形式存在的，所以Yac只能在单机的多个进程之间共享缓存的，这一点一定要注意。而在真实的生产环境下，由于服务器有很多，并且有可能是作为分布式集群形式存在，那个时候使用Memcache缓存服务器集群还是更好的选择（或者使用其他分布式缓存数据库，比如Redis等NoSQL非关系型数据库）。</p><p>（end）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天一直在研究鸟哥&lt;a href=&quot;http://weibo.com/laruence&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@laruence&lt;/a&gt;的一个产品—&lt;strong&gt;Yac&lt;/strong&gt;，它是为PHP实现的一个基于共享内存、并且无锁的User Data Cache。今天比较了下Memcache和Yac的高并发读写性能测试，发现Yac要比Memcache快很多（这里没有比较Yac和Apc的性能情况, 不过据说Yac要比Apc快很多，Apc比Memcache快一倍，待有时间再进行测试吧, 好吧，承认懒了 ^_^)。&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP性能优化工具–-XHProf安装与使用</title>
    <link href="http://yoursite.com/2018/04/12/201504-2015-04-18-xhprof-php-analyse-tool/"/>
    <id>http://yoursite.com/2018/04/12/201504-2015-04-18-xhprof-php-analyse-tool/</id>
    <published>2018-04-12T15:20:38.835Z</published>
    <updated>2018-04-12T15:20:38.836Z</updated>
    
    <content type="html"><![CDATA[<p>XHProf是Facebook开源出来的一个PHP性能测试工具，他是一个轻量级的分析工具，跟xdebug差不多，但比 xdebug 分析的信息更加详细， 包括函数的调用次数，花费的时间（自身花费时间和包含内部函数花费的时间），所占内存/CPU，所占内存的峰值及所占百分比等，而xdebug对性能影响较大，即便是开启了<code>profiler_enable_trigger</code>参数，cpu也会立马飙到峰值。</p><a id="more"></a><p>关于如何下载、编译、安装、配置、使用、测试等的使用方法，这里贴出几篇比较好的博客供自己日后查看和备用，希望也可以方便到你们 :)</p><p><a href="http://www.chenglin.name/php/optimization/439.html" target="_blank" rel="noopener">http://www.chenglin.name/php/optimization/439.html</a></p><p><a href="http://www.cnblogs.com/bluefrog/archive/2012/03/01/2374922.html" target="_blank" rel="noopener">http://www.cnblogs.com/bluefrog/archive/2012/03/01/2374922.html</a></p><p><a href="http://www.cnblogs.com/casatwy/archive/2013/01/17/2865241.html" target="_blank" rel="noopener">http://www.cnblogs.com/casatwy/archive/2013/01/17/2865241.html</a></p><p><a href="http://www.onexin.net/php-practical-performance-analysis-tools-xhprof-facebook/" target="_blank" rel="noopener">http://www.onexin.net/php-practical-performance-analysis-tools-xhprof-facebook/</a></p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XHProf是Facebook开源出来的一个PHP性能测试工具，他是一个轻量级的分析工具，跟xdebug差不多，但比 xdebug 分析的信息更加详细， 包括函数的调用次数，花费的时间（自身花费时间和包含内部函数花费的时间），所占内存/CPU，所占内存的峰值及所占百分比等，而xdebug对性能影响较大，即便是开启了&lt;code&gt;profiler_enable_trigger&lt;/code&gt;参数，cpu也会立马飙到峰值。&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>永久数据丢失现象</title>
    <link href="http://yoursite.com/2018/04/12/201503-2015-03-29-memcache-perpetual-data-lose/"/>
    <id>http://yoursite.com/2018/04/12/201503-2015-03-29-memcache-perpetual-data-lose/</id>
    <published>2018-04-12T15:20:38.835Z</published>
    <updated>2018-04-12T15:20:38.835Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，在我们使用memcache过程中会出现”数据丢失”的现象， 也就是说明明数据被设为永久有效，却莫名其妙的丢失了，这是怎么回事呢？</p><p>在上一篇博客<a href="http://liyafeng.cn/memcache_item_delete_note/" target="_blank" rel="noopener">Memcache过期数据惰性和LRU删除机制</a>中已经总结了memcache过期数据是如何被删除的以及根据LRU（最近最少使用机制）来从最近未被使用的记录中搜索，并将其空间分配给新的记录。</p><a id="more"></a><p>所以，遇到这种情况我们只需要从以上两方面来分析，即可得到以下结论：</p><p>1、如果Slab中的很多chunk尚未过期， 且非永久数据比较活跃，此时新增item，则永久数据被踢；</p><p>2、如果Slab中的很多chunk已经过期， 且过期前比较活跃以及过期后未被get过，系统不知道他们已经过期，此时新增item， 则永久数据被踢；</p><p>3、如果Slab中的很多chunk已经过期，且被get过，被标记为expire(过期)，此时新增item，则永久数据不会被踢；</p><p>用图表示如下：</p><p><img src="../../images/201503/2015-03-30_155818.jpg" alt=""></p><p>避免永久数据被踢现象的解决方案：</p><blockquote><p>永久数据和非永久数据分开放，具体如何设计，看具体环境。</p></blockquote><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候，在我们使用memcache过程中会出现”数据丢失”的现象， 也就是说明明数据被设为永久有效，却莫名其妙的丢失了，这是怎么回事呢？&lt;/p&gt;
&lt;p&gt;在上一篇博客&lt;a href=&quot;http://liyafeng.cn/memcache_item_delete_note/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Memcache过期数据惰性和LRU删除机制&lt;/a&gt;中已经总结了memcache过期数据是如何被删除的以及根据LRU（最近最少使用机制）来从最近未被使用的记录中搜索，并将其空间分配给新的记录。&lt;/p&gt;
    
    </summary>
    
      <category term="Memcache" scheme="http://yoursite.com/categories/Memcache/"/>
    
    
      <category term="Memcache" scheme="http://yoursite.com/tags/Memcache/"/>
    
  </entry>
  
  <entry>
    <title>缓存无底洞现象</title>
    <link href="http://yoursite.com/2018/04/12/201503-2015-03-30-memcache-multiget-hole-note/"/>
    <id>http://yoursite.com/2018/04/12/201503-2015-03-30-memcache-multiget-hole-note/</id>
    <published>2018-04-12T15:20:38.835Z</published>
    <updated>2018-04-12T15:20:38.835Z</updated>
    
    <content type="html"><![CDATA[<p>该问题由facebook 的工作人员提出的, facebook 在2010 年左右,memcached 节点就已经达<br>3000 个,缓存数千G 内容.</p><p>他们发现了一个问题，即由于memcache连接频繁，导致效率下降了。于是他们开始添加memcache节点，添加新节点后，发现因为连接频繁导致的问题,仍然存在,并没有好转,称之为”<strong>无底洞现象</strong>”. 具体原文在这:<a href="http://highscalability.com/blog/2009/10/26/facebooks-memcached-multiget-hole-more-machinesmore-capacit.html" target="_blank" rel="noopener">Facebook Multiget Hole</a></p><a id="more"></a><p>##Multiget Hole问题分析</p><p>以用户为例: user-133-age, user-133-name,user-133-height …..N 个key,<br>当服务器增多时,133号用户的信息也被散落在更多的节点。所以,同样是访问个人主页,得到相同的个人信息, 节点越多,需要连接的节点也越多.对于memcached 的连接数,并没有随着节点的增多,而降低. 于是无底洞问题出现.</p><p>##Multiget Hole现象解决方案</p><blockquote><p>把某一组key,按其共同前缀,来分布在同一个节点上。</p></blockquote><p>比如user-133-age, user-133-name,user-133-height 这3 个key（当然也可能有更多的key，这里只是举例说明）,在用分布式算法求其节点时,应该以<strong>共同前缀</strong>‘user-133’来计算,而不是以user-133-age、user-133-name、user-133-height来计算.</p><p>于是，三个关于个人信息的key都落在同一个节点上面，当访问个人主页时候，只需要连接一个节点即可，问题解决。</p><p>这里是官方的回应：<a href="http://dormando.livejournal.com/521163.html" title="http://dormando.livejournal.com/521163.html" target="_blank" rel="noopener">http://dormando.livejournal.com/521163.html</a></p><hr><p>###小结</p><p>事实上，非关系型数据库和传统的关系型数据库,并不是水火不容,两者在某些设计上,是可以相互参考的.<br>对于memcached, redis 这种kv 存储, key 的设计,可以参考MySQL 中表/列的设计.<br>比如在关系型数据库中: user 表下,有age 列,name 列,height列。对应在NoSQL中的key,可以用user:133:age = 23, user:133:name = ‘lisi’, user:133:height = 168来表示。</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该问题由facebook 的工作人员提出的, facebook 在2010 年左右,memcached 节点就已经达&lt;br&gt;3000 个,缓存数千G 内容.&lt;/p&gt;
&lt;p&gt;他们发现了一个问题，即由于memcache连接频繁，导致效率下降了。于是他们开始添加memcache节点，添加新节点后，发现因为连接频繁导致的问题,仍然存在,并没有好转,称之为”&lt;strong&gt;无底洞现象&lt;/strong&gt;”. 具体原文在这:&lt;a href=&quot;http://highscalability.com/blog/2009/10/26/facebooks-memcached-multiget-hole-more-machinesmore-capacit.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Facebook Multiget Hole&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Memcache" scheme="http://yoursite.com/categories/Memcache/"/>
    
    
      <category term="Memcache" scheme="http://yoursite.com/tags/Memcache/"/>
    
  </entry>
  
  <entry>
    <title>Memcache过期数据惰性和LRU删除机制</title>
    <link href="http://yoursite.com/2018/04/12/201503-2015-03-29-memcache-item-delete-note/"/>
    <id>http://yoursite.com/2018/04/12/201503-2015-03-29-memcache-item-delete-note/</id>
    <published>2018-04-12T15:20:38.834Z</published>
    <updated>2018-04-12T15:20:38.835Z</updated>
    
    <content type="html"><![CDATA[<p>Memcache是缓存，所以数据不会永久保存在服务器上，这也是在服务器上引进Memcache的前提。当我们在memcache中存放数据时会设置超时时间（不设置，默认为永久有效，但不排除会被新数据剔除的可能性），那么当到达超时时间时memcache是如何做到删除数据的呢？这里需要引入<strong>Lazy Expiration</strong>即惰性失效的概念。  </p><a id="more"></a><p>##过期数据的惰性删除</p><p>首先，我们在memcache中存入测试数据：</p><pre><code>telnet 127.0.0.1 11211 //使用telnet做连接测试&gt;add aa 0 10 &gt;test</code></pre><p>此时，我们存入了一个key为aa的测试数据，并且设置超时时间是10s。</p><p>等待10s……滴答滴答……</p><p>这时候，我们使用<code>stats</code>命令在telnet下查看运行状态：</p><p><img src="../../images/201503/2015-03-29_163610.jpg" alt=""></p><p>我们发现，当某个值过期后,并没有从内存删除, 因此,stats 统计时, curr_item仍有其信息。此时，我们使用命令<code>get</code>后，再次stats查看信息，发现内存中已经没有该信息了，也就是说被删掉了。如下图：</p><p><img src="../../images/201503/2015-03-29_163855.jpg" alt=""></p><p>因此，我们可以总结如下：</p><p>1、 当某个值过期后,并没有从内存删除, 因此,stats 统计时, curr_item 有其信息.</p><p>2、 当某个新值去占用他的位置时,当成空chunk 来占用.</p><p>3、 当get 值时,判断是否过期,如果过期,返回空,并且清空, curr_item 就减少了.</p><p>所以，这个时期，memcached内部不会监视记录是否过期，memcache只是让用户看不到数据而已，并没有在过期的瞬间立即从内存删掉数据，而是在get时查看记录的时间戳，检查记录是否过期,这种技术被称为<strong>Lazy Expiration</strong>， 也就是惰性失效。</p><p>那么，有什么好处呢？</p><p>好处就是节省了CPU的时间和检测成本。</p><p>##LRU删除机制</p><p>如果以122byte 大小的chunk举例, 122 的chunk 都满了, 又有新的值(例如长度为120)要加入, 要<br>挤掉谁?</p><p>memcache会优先使用已超时的记录的空间，即便如此，也会出现追加新纪录时空间不足的情况，那该怎么办呢？此时，memcache就要使用名为”LRU”(Least Recently Used, 最近最少使用)机制来分配空间。因此，当memcached的内存空间不足时（无法从slab class 获取到新的空间时），就从最近未被使用的记录中搜索，并将其空间分配给新的记录。</p><p><strong>原理:</strong> </p><blockquote><p>当某个单元被请求时,维护一个计数器,通过计数器来判断最近谁最少被使用.就把谁剔除。</p></blockquote><p>需要<strong>注意</strong>的是: 即使某个key 是设置的永久有效期,也一样会有被踢出来的可能!即<strong>永久数据被踢现象</strong>。这个会在后面总结。</p><p>不过，有些情况下LRU机制反倒会造成麻烦。memcached启动时通过<code>-M</code>参数可以禁止LRU，如下所示：</p><pre><code>$ memcached -M -m 1024</code></pre><p>启动时必须注意的是，小写的“-m”选项是用来指定最大内存大小的。不指定具体数值则使用默认值64MB。</p><p>指定<code>-M</code>参数启动后，内存用尽时memcached会返回错误。话说回来，memcached毕竟不是存储器，而是缓存，所以推荐使用LRU。</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Memcache是缓存，所以数据不会永久保存在服务器上，这也是在服务器上引进Memcache的前提。当我们在memcache中存放数据时会设置超时时间（不设置，默认为永久有效，但不排除会被新数据剔除的可能性），那么当到达超时时间时memcache是如何做到删除数据的呢？这里需要引入&lt;strong&gt;Lazy Expiration&lt;/strong&gt;即惰性失效的概念。  &lt;/p&gt;
    
    </summary>
    
      <category term="Memcache" scheme="http://yoursite.com/categories/Memcache/"/>
    
    
      <category term="Memcache" scheme="http://yoursite.com/tags/Memcache/"/>
    
  </entry>
  
  <entry>
    <title>Memcache的内存分配管理</title>
    <link href="http://yoursite.com/2018/04/12/201503-2015-03-28-memcache-memory-manage-note/"/>
    <id>http://yoursite.com/2018/04/12/201503-2015-03-28-memcache-memory-manage-note/</id>
    <published>2018-04-12T15:20:38.834Z</published>
    <updated>2018-04-12T15:20:38.834Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我们要明白什么是<strong>内存的碎片化</strong>，要解释这个也不困难。大概可以这样描述，如果用c 语言直接<code>malloc</code>,<code>free</code> 来向操作系统申请和释放内存时,在不断的申请和释放过程中,形成了一些很小的内存片断,无法再利用.这种空闲,但无法利用内存的现象,即被称为<strong>内存的碎片化</strong>.</p><a id="more"></a><p>##Page为内存分配的最小单位</p><p>Memcached的内存分配以page为单位，默认情况下一个page是1M，可以通过-I(大写字母i)参数在启动时指定。如果需要申请内存 时，memcached会划分出一个新的page并分配给需要的slab区域。需要注意的是，<strong>page一旦被分配在重启前不会被回收或者重新分配</strong>。</p><p><img src="../../images/201503/1866742045547134261.jpg" alt=""></p><p>##slab allocator缓解内存碎片化</p><p>Memcached并不是将所有大小的数据都放在一起的，而是预先将数据空间划分为一系列slabs，每个slab只负责一定范围内的数据存储。如 下图，每个slab只存储大于其上一个slab的chunk并小于或者等于自己最大chunk的数据。例如：slab 3只存储大小介于137 到 224 bytes的数据。如果一个数据大小为230byte将被分配到slab 4中。从下图可以看出，每个slab负责的空间其实是不等的，memcached默认情况下下一个slab的chunk最大值为前一个的1.25倍，这个可以通过修改<code>-f</code>参数来修改增长比例。 </p><p><img src="../../images/201503/1866742045547134262.jpg" alt=""></p><p>##Chunk才是存放缓存数据的单位</p><p>memcache把申请到的每个slab仓库按照需要切分成不同的小块（chunk）来存储数据。Chunk是一系列固定的内存空间，这个大小就是管理它的slab的最大存放大小。例如：slab 1的每个chunk都是104byte，而slab 4的每个chunk都是280byte。chunk是memcached实际存放缓存数据的地方，因为chunk的大小固定为slab能够存放的最大值， 所以所有分配给当前slab的数据都可以被chunk存下。如果时间的数据大小小于chunk的大小，空余的空间将会被闲置，这个是为了防止内存碎片而设 计的。例如下图，chunk size是224byte，而存储的数据只有200byte，剩下的24byte将被闲置。</p><p><img src="../../images/201503/1866742045547134263.jpg" alt=""></p><p>###注意：</p><p>如果有100byte 的内容要存,但122 大小的仓库中的chunk 满了，并不会寻找更大的,如144 的仓库来存储,而是把122 仓库的旧数据踢掉! 这个会在后面的memcache过期与删除机制那部分介绍。</p><p>##grow factor调优</p><p>由于slab allocator 机制中, 分配的chunk 的大小是”固定”的, 因此,对于特定的item，可能造成内存空间的浪费.比如, 将100 字节的数据缓存到122 字节的chunk 中, 剩余的22 字节就浪费了，是吧。那怎么办？</p><p>对于chunk 空间的浪费问题,无法彻底解决,只能缓解该问题.开发者可以对网站中缓存中的item 的长度进行统计,并制定合理的slab class 中的chunk 的大小.</p><p>可惜的是,我们目前还不能自定义chunk 的大小,但可以通过参数来调整各slab class 中chunk<br>大小的增长速度. 即增长因子, grow factor!</p><p>memcached 在启动时可以通过<code>f</code>选项指定Growth Factor增长因子, 并在某种程度上控制slab 之<br>间的差异. 默认值为1.25. 但是,在该选项出现之前,这个因子曾经固定为2,称为”powers of 2”<br>策略。<br>我们分别用grow factor 为2 和1.25 来看一看效果:</p><pre><code>&gt; memcache -m 64 -p 11211 -f 2 -vvv</code></pre><p><img src="../../images/201503/2015-03-28_203830.jpg" alt=""></p><p>可以看到，从96 字节的chunk组开始，chunk组的大小依次增大为原来的2 倍.</p><p>下面看看<code>f = 1.25</code>时的输出</p><pre><code>&gt; memcache -m 64 -p 11211 -f 1.25 -vvv</code></pre><p><img src="../../images/201503/2015-03-28_204133.jpg" alt=""></p><p>对比可知, 当f=2 时, 各slab 中的chunk size 增长很快,有些情况下就相当浪费内存.<br>因此,我们应细心统计缓存的大小,制定合理的增长因子.</p><p>###注意：</p><p>当f=1.25 时,从输出结果来看,某些相邻的slab class 的大小比值并非为1.25,可能会觉得有些<br>计算误差，这些误差是为了保持字节数的对齐而故意设置的.</p><hr><p>##小结:</p><p>综合上面的介绍，memcached的内存分配策略就是：</p><p>1、按slab需求分配page</p><p>2、各slab按需使用chunk存储</p><p>这里有几个特点要注意：</p><p><strong>Memcached分配出去的page不会被回收或者重新分配，Memcached申请的内存不会被释放，slab空闲的chunk不会借给任何其他slab使用</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，我们要明白什么是&lt;strong&gt;内存的碎片化&lt;/strong&gt;，要解释这个也不困难。大概可以这样描述，如果用c 语言直接&lt;code&gt;malloc&lt;/code&gt;,&lt;code&gt;free&lt;/code&gt; 来向操作系统申请和释放内存时,在不断的申请和释放过程中,形成了一些很小的内存片断,无法再利用.这种空闲,但无法利用内存的现象,即被称为&lt;strong&gt;内存的碎片化&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Memcache" scheme="http://yoursite.com/categories/Memcache/"/>
    
    
      <category term="Memcache" scheme="http://yoursite.com/tags/Memcache/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库主从复制</title>
    <link href="http://yoursite.com/2018/04/12/201503-2015-03-20-mysql-and-slave-test/"/>
    <id>http://yoursite.com/2018/04/12/201503-2015-03-20-mysql-and-slave-test/</id>
    <published>2018-04-12T15:20:38.834Z</published>
    <updated>2018-04-12T15:20:38.834Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL数据库主从复制的工作方式很简单，一台主机作为主服务器，一台或者多台主机作为从服务器。主服务器会把数据库的变化记录到日志，一旦这些变化被记录到日志，就会马上或者以固定的时间间隔被发送从服务器，使得主从服务器得到同步。</p><p>下面，总结下主从服务器配置原理，作为笔记，首先说明下测试环境（局域网内）：</p><pre><code>Centos 6.5 主 192.168.1.103 (VMware测试)Centos 6.5 从 192.168.1.104 (VMware测试)MySQL 5.4</code></pre><a id="more"></a><p>###MySQL主从复制优点</p><blockquote><ul><li>如果主服务器出现问题，可以快速切换到从服务器提供的服务</li><li>可以在从服务器上执行查询操作，降低主服务器的访问压力</li><li>可以在从服务器上执行备份，以避免备份期间影响主服务器的服务</li></ul></blockquote><p><strong>注意</strong></p><p>一般只有更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，对于实时性要求高的数据仍然要从主服务器上获得。</p><p>在正式开始配置前，先看下摘自网上的一个简单完整的 Mysql 主从复制，读写分离的示意图。</p><p><img src="../../images/201412/bc837715-8d0e-36b4-b659-4389e01f76d0.png" alt=""></p><p>###主服务器配置</p><p>1、登录数据库</p><pre><code>mysql -u root -p *** test</code></pre><p>2、给从服务器设置授权用户</p><pre><code>mysql&gt;grant all slave on *.* to slave@192.168.1.104 identified by &apos;123456&apos;;mysql&gt;flush privileges</code></pre><p>3、修改主服务器配置文件<code>my.cnf</code>:</p><pre><code>vim /etc/my.cnfserver-id  = 1            #主机标示，整数log_bin    = mysql-bin   #开启bin-logservice mysqld restart   #注意：更改mysql配置文件后一定要重新启动mysqld服务</code></pre><p>4、在主服务器上设置读锁定有效，确保没有数据库操作，以便获得一个一致性的快照。</p><pre><code>mysql&gt;flush tables with read lock;</code></pre><p>5、目前主服务器已经停止了更新操作，生成主数据库的备份方式有两种：</p><blockquote><ul><li>cp全部的数据文件到从服务器</li><li>mysqldump备份数据方式</li></ul></blockquote><p><em>如果数据库的服务可以停止的话，那么直接使用cp复制数据文件应该是最快的生成快照的方法了。</em></p><p>这里使用mysqldump备份数据文件：</p><pre><code>mysqldump -uroot -p*** test &gt; /tmp/test.sql</code></pre><p>6、主数据库备份完毕后，主数据库要进行解锁操作：</p><pre><code>mysql&gt;unlock tables;</code></pre><p>7、把数据库备份的一致性文件复制到从服务器,并在从数据库导入数据：</p><pre><code>scp /tmp/test.sql 192.168.1.104:/tmp/        //复制到从服务器    mysqldump -uroot -p*** test &lt; /tmp/test.sql</code></pre><p>###从服务器配置</p><p>1、修改从服务器数据库的server-id,注意从数据库的server-id的值必须是唯一的，不能和主数据酷的配置相同，如果有多个从服务器，则每个服务器必须有自己唯一的server-id值。</p><pre><code>vim /etc/my.cnf//下面是从数据库的配置server-id = 2master-host     = 192.168.1.103        //注意：这里是主服务器ipmaster-user     = slave                //从数据库用户master-password = 123456master-port     = 3306master-connect-retry=60              //如果从服务器发现主服务器断掉，重新连接的时间差(秒)replicate-do-db =test                //只复制某个库replicate-ignore-db=mysql            //不复制某个库service mysqld restart                 //重新启动mysqld服务</code></pre><p>2、在从数据库内开启slave进程：</p><pre><code>mysql&gt;start slave;</code></pre><p>3、在从数据库进行<code>show slave status\G</code>进行查看从服务器是否配置成功：</p><p><img src="../../images/201412/2014-12-18_143809.png" alt=""></p><p>4、从数据库常用命令：</p><pre><code>start slave            //启动复制线程stop  slave         //停止复制线程show  slave  status //查看从数据库状态show master logs    //查看主数据酷bin-log日志change master to    //动态改变主服务器配置show processlist    //查看数据库运行进程</code></pre><p>5、现在可以在主数据库进行一些insert、update和delete操作，看看从数据库是不是已经同步完成，答案是肯定的啦。 :)</p><p>（end）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL数据库主从复制的工作方式很简单，一台主机作为主服务器，一台或者多台主机作为从服务器。主服务器会把数据库的变化记录到日志，一旦这些变化被记录到日志，就会马上或者以固定的时间间隔被发送从服务器，使得主从服务器得到同步。&lt;/p&gt;
&lt;p&gt;下面，总结下主从服务器配置原理，作为笔记，首先说明下测试环境（局域网内）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Centos 6.5 主 192.168.1.103 (VMware测试)
Centos 6.5 从 192.168.1.104 (VMware测试)
MySQL 5.4
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>大学最后一个寒假</title>
    <link href="http://yoursite.com/2018/04/12/201503-2015-03-07-winter-holiday-conclusion/"/>
    <id>http://yoursite.com/2018/04/12/201503-2015-03-07-winter-holiday-conclusion/</id>
    <published>2018-04-12T15:20:38.833Z</published>
    <updated>2018-04-12T15:20:38.834Z</updated>
    
    <content type="html"><![CDATA[<p>猛地意识到今天就已经是3月7日了，而我买的是明天的火车票，对于我来说意味着毫无防备并且来不及拾掇就要滚回学校了。呜呼，时间过的真TM快，将近俩月的大学最后一个大长假就这么一睁眼一闭眼就嗝屁（方言）了,虽然到家没过一半时间就已经呆够了想回去，但此时此刻即将出发却也难免有恋家情节……</p><p>明天就要出发了，晚上简单收拾了下行李后就被母亲大人催促着早点睡觉，而对于一个习惯了熬夜的夜猫子来说很早睡觉真的不习惯，相信你懂得。于是打开笔记本，想看点东西却也没有了心思，干脆写点有感而发的东西也不错哦，算是这个寒假小结吧，说干就干，于是就有了下文 :)</p><a id="more"></a><p>先说点高兴的事儿吧，就是年前把驾驶证考下来了，拖拖拉拉了将近两年，终于给搞定了，心里甚是高兴。记得寒假我是1月19号到的家，然后我爹就告诉我23号就要考科目三，听到我瞬间就石化了，心想时间赶得这么紧啊都来不及缓几天，然后就连续几天都在练车，由于时间短又仓促，考试当天都心虚，还好最终在极度紧张中顺利考过了科目三。后来又等了将近半个月把科目四拿下了，考完科目四下午就直接拿到驾驶证了，了却了心中一桩心事，哈哈。</p><p>再说点不高兴的事儿吧，想想就虐心，如果你看到这了，应该可以想到是什么了。当然就是英语六级啊，挂掉了，呜呜~~~，可恶的不是挂掉而是就差那么一点点分。所以下学期的目标计划之一就是拿下英语六级，嗯，就这样！</p><p>按说，刚开始我应该先说的是学习方面、学了哪些技术、完成了多少计划等等一些东西，后来想想，还是觉得没必要，就像韩寒说的：“我们可以不上学，但是不可以不学习”,似乎没什么关系啊，哈哈。我现在倒觉得学习是留给自己的，没必要炫耀给别人，更不想被别人说成是呆子，所以学习方面（略），只是完成计划的50%而已……</p><p>因为，寒假回来前刚入手了kindle，整个寒假都在体验，个人觉得很赞，这里不再赘余kindle方面。我想说的是在寒假期间，我差不多每天抽出一个小时左右来阅读（睡觉前一小时），虽不至于每晚都能够坚持，但也差不多了，所以整个寒假算下来差不多读了有四本书，而且每本读完后都觉得很赞。下面说下感受吧：</p><p>1、<strong><a href="http://book.douban.com/subject/6397275/" target="_blank" rel="noopener">此生未完成</a></strong>（于娟）</p><p>本书记录的是32岁的复旦女博士于娟当时作为母亲、女儿和妻子在被诊断为乳腺癌后的一年半岁月里的生命日记，在日记中反思生活细节，并发出“买车买房买不来健康”的感叹，引起网友关注和众多媒体热议。对其中一句”我们要用多大的代价，才能认清活着的意义”很是难忘,推荐大家有时间的话去看看，不是很厚的一本书，看完估计对生命会有不一样的看法和概念。看完后，认识到癌症是多么的可怕，我们都应该关注健康，不要等到身体出现问题了才去关注，要活在当下。</p><p>2、<strong><a href="http://book.douban.com/subject/20427187/" target="_blank" rel="noopener">看见</a></strong>（柴静）</p><p>《看见》是知名记者和主持人柴静讲述央视十年历程的自传性作品，既是柴静个人的成长告白书，某种程度上亦可视作中国社会十年变迁的备忘录。柴静的《看见》中大量的新闻报道给人看见未曾看见的现实，文字朴实但厚重，却也少不了很多的经典语录，的确是本好书。</p><p>很喜欢的一句语录：</p><blockquote><p>不要因为走得太远，忘了我们为什么出发。如果哀痛中，我们不再出发，那你的离去还有什么意义？<br>—《看见》</p></blockquote><p>3、<strong><a href="http://book.douban.com/subject/3267945/" target="_blank" rel="noopener">疯狂的程序员</a></strong>（绝影）</p><p>这本书是从朋友那里所知道的，而且豆瓣评分很高，于是就看了，感觉不错，如果你是搞挨踢的，相信你会看到自己的影子，真的。</p><p>书中描写了绝影等程序员的成长之路，分为大学、工作、创业三部分。作者笔下以绝影、BOSS liu、Bug Yang等为代表的程序员是大多程序员成长的真实写照，很多网友看过小说之后都说“这些事好像就是我身上发生的事情，但是我写不出来，绝影写出来了”，个人感觉的确是这样的，你可以看一看。</p><p>个人很喜欢的一句语录：</p><blockquote><p>要么做第一个，要么做最好的一个。   </p></blockquote><p>4、<strong><a href="http://book.douban.com/subject/4242172/" target="_blank" rel="noopener">天才在左 疯子在右</a></strong>（高铭 ）<em>完成50%</em></p><p>从第一个访谈开始，用了两天的时间发疯版的读完，怎么说呢？意犹未尽。面对这些所谓的精神病患者，他们的思维逻辑严密到一环扣一环，从哲学到宗教、从传统物理学到量子力学，他们的关注与思辨令捧着书的正常人汗颜。我不停的在问自己，究竟是他们有病还只是因为我们想得太少、太过肤浅？究竟什么才算是正常人？就是群体的认可？那究竟什么才算是精神病患者？只是被多数人定义了的一小部分？（来自一个网友的评论）</p><p>记一段，在我看来印象最深刻或者说最恐惧的一部分：</p><blockquote><p>那天晚上我失眠了，各种各样乱七八糟的思绪混在一起，理不清头绪。我懂了他说的，但是我不知道怎么做。第二天我很想再次跟他聊聊，突然间我觉得这很可怕。因为我昨儿晚上睡觉前一直在设计把DV固定在衣服的什么位置上。</p><p>我想起N个精神病医师告诉我的：千万千万千万被太在意精神病人说的话，别深想他们告诉你的世界观，否侧你迟早会疯的。</p></blockquote><hr><p>###小结</p><p>寒假匆匆而来，却又急忙而去，留下多少，只有心知道。而我也愿意翻山越岭看风景。</p><p>（end）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;猛地意识到今天就已经是3月7日了，而我买的是明天的火车票，对于我来说意味着毫无防备并且来不及拾掇就要滚回学校了。呜呼，时间过的真TM快，将近俩月的大学最后一个大长假就这么一睁眼一闭眼就嗝屁（方言）了,虽然到家没过一半时间就已经呆够了想回去，但此时此刻即将出发却也难免有恋家情节……&lt;/p&gt;
&lt;p&gt;明天就要出发了，晚上简单收拾了下行李后就被母亲大人催促着早点睡觉，而对于一个习惯了熬夜的夜猫子来说很早睡觉真的不习惯，相信你懂得。于是打开笔记本，想看点东西却也没有了心思，干脆写点有感而发的东西也不错哦，算是这个寒假小结吧，说干就干，于是就有了下文 :)&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Essay" scheme="http://yoursite.com/tags/Essay/"/>
    
  </entry>
  
</feed>
